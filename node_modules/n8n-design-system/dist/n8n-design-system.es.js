import Vue, { defineComponent, reactive, useSlots, ref, computed, onMounted, watch as watch$1 } from "vue";
var defaultLang = {
  "nds.auth.roles.owner": "Owner",
  "nds.userInfo.you": "(you)",
  "nds.userSelect.selectUser": "Select User",
  "nds.userSelect.noMatchingUsers": "No matching users",
  "nds.usersList.deleteUser": "Delete User",
  "nds.usersList.reinviteUser": "Resend invite",
  "notice.showMore": "Show more",
  "notice.showLess": "Show less",
  "formInput.validator.fieldRequired": "This field is required",
  "formInput.validator.minCharactersRequired": "Must be at least {minimum} characters",
  "formInput.validator.maxCharactersRequired": "Must be at most {maximum} characters",
  "formInput.validator.oneNumbersRequired": (config2) => {
    return `Must have at least ${config2.minimum} number${config2.minimum > 1 ? "s" : ""}`;
  },
  "formInput.validator.validEmailRequired": "Must be a valid email",
  "formInput.validator.uppercaseCharsRequired": (config2) => `Must have at least ${config2.minimum} uppercase character${config2.minimum > 1 ? "s" : ""}`,
  "formInput.validator.defaultPasswordRequirements": "8+ characters, at least 1 number and 1 capital letter",
  "sticky.markdownHint": `You can style with <a href="https://docs.n8n.io/workflows/sticky-notes/" target="_blank">Markdown</a>`,
  "tags.showMore": (count) => `+${count} more`
};
const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
function hasOwn$1(obj, key2) {
  return hasOwnProperty$1.call(obj, key2);
}
const RE_NARGS$1 = /(%|)\{([0-9a-zA-Z_]+)\}/g;
function Format(Vue2) {
  function template(value, ...args) {
    if (typeof value === "function") {
      return value(args);
    }
    const string = value;
    if (args.length === 1 && typeof args[0] === "object") {
      args = args[0];
    }
    if (!args || !args.hasOwnProperty) {
      args = {};
    }
    return string.replace(RE_NARGS$1, (match2, prefix, i, index2) => {
      let result2;
      if (string[index2 - 1] === "{" && string[index2 + match2.length] === "}") {
        return i;
      } else {
        result2 = hasOwn$1(args, i) ? args[i] : null;
        if (result2 === null || result2 === void 0) {
          return "";
        }
        return result2;
      }
    });
  }
  return template;
}
var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var a2 = Object.defineProperty({}, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a2, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a2;
}
var locale$1 = {};
var zhCN = {};
zhCN.__esModule = true;
zhCN.default = {
  el: {
    colorpicker: {
      confirm: "\u786E\u5B9A",
      clear: "\u6E05\u7A7A"
    },
    datepicker: {
      now: "\u6B64\u523B",
      today: "\u4ECA\u5929",
      cancel: "\u53D6\u6D88",
      clear: "\u6E05\u7A7A",
      confirm: "\u786E\u5B9A",
      selectDate: "\u9009\u62E9\u65E5\u671F",
      selectTime: "\u9009\u62E9\u65F6\u95F4",
      startDate: "\u5F00\u59CB\u65E5\u671F",
      startTime: "\u5F00\u59CB\u65F6\u95F4",
      endDate: "\u7ED3\u675F\u65E5\u671F",
      endTime: "\u7ED3\u675F\u65F6\u95F4",
      prevYear: "\u524D\u4E00\u5E74",
      nextYear: "\u540E\u4E00\u5E74",
      prevMonth: "\u4E0A\u4E2A\u6708",
      nextMonth: "\u4E0B\u4E2A\u6708",
      year: "\u5E74",
      month1: "1 \u6708",
      month2: "2 \u6708",
      month3: "3 \u6708",
      month4: "4 \u6708",
      month5: "5 \u6708",
      month6: "6 \u6708",
      month7: "7 \u6708",
      month8: "8 \u6708",
      month9: "9 \u6708",
      month10: "10 \u6708",
      month11: "11 \u6708",
      month12: "12 \u6708",
      weeks: {
        sun: "\u65E5",
        mon: "\u4E00",
        tue: "\u4E8C",
        wed: "\u4E09",
        thu: "\u56DB",
        fri: "\u4E94",
        sat: "\u516D"
      },
      months: {
        jan: "\u4E00\u6708",
        feb: "\u4E8C\u6708",
        mar: "\u4E09\u6708",
        apr: "\u56DB\u6708",
        may: "\u4E94\u6708",
        jun: "\u516D\u6708",
        jul: "\u4E03\u6708",
        aug: "\u516B\u6708",
        sep: "\u4E5D\u6708",
        oct: "\u5341\u6708",
        nov: "\u5341\u4E00\u6708",
        dec: "\u5341\u4E8C\u6708"
      }
    },
    select: {
      loading: "\u52A0\u8F7D\u4E2D",
      noMatch: "\u65E0\u5339\u914D\u6570\u636E",
      noData: "\u65E0\u6570\u636E",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    cascader: {
      noMatch: "\u65E0\u5339\u914D\u6570\u636E",
      loading: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9",
      noData: "\u6682\u65E0\u6570\u636E"
    },
    pagination: {
      goto: "\u524D\u5F80",
      pagesize: "\u6761/\u9875",
      total: "\u5171 {total} \u6761",
      pageClassifier: "\u9875"
    },
    messagebox: {
      title: "\u63D0\u793A",
      confirm: "\u786E\u5B9A",
      cancel: "\u53D6\u6D88",
      error: "\u8F93\u5165\u7684\u6570\u636E\u4E0D\u5408\u6CD5!"
    },
    upload: {
      deleteTip: "\u6309 delete \u952E\u53EF\u5220\u9664",
      delete: "\u5220\u9664",
      preview: "\u67E5\u770B\u56FE\u7247",
      continue: "\u7EE7\u7EED\u4E0A\u4F20"
    },
    table: {
      emptyText: "\u6682\u65E0\u6570\u636E",
      confirmFilter: "\u7B5B\u9009",
      resetFilter: "\u91CD\u7F6E",
      clearFilter: "\u5168\u90E8",
      sumText: "\u5408\u8BA1"
    },
    tree: {
      emptyText: "\u6682\u65E0\u6570\u636E"
    },
    transfer: {
      noMatch: "\u65E0\u5339\u914D\u6570\u636E",
      noData: "\u65E0\u6570\u636E",
      titles: ["\u5217\u8868 1", "\u5217\u8868 2"],
      filterPlaceholder: "\u8BF7\u8F93\u5165\u641C\u7D22\u5185\u5BB9",
      noCheckedFormat: "\u5171 {total} \u9879",
      hasCheckedFormat: "\u5DF2\u9009 {checked}/{total} \u9879"
    },
    image: {
      error: "\u52A0\u8F7D\u5931\u8D25"
    },
    pageHeader: {
      title: "\u8FD4\u56DE"
    },
    popconfirm: {
      confirmButtonText: "\u786E\u5B9A",
      cancelButtonText: "\u53D6\u6D88"
    },
    empty: {
      description: "\u6682\u65E0\u6570\u636E"
    }
  }
};
var isMergeableObject$1 = function isMergeableObject(value) {
  return isNonNullObject$1(value) && !isSpecial$1(value);
};
function isNonNullObject$1(value) {
  return !!value && typeof value === "object";
}
function isSpecial$1(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement$1(value);
}
var canUseSymbol$1 = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE$1 = canUseSymbol$1 ? Symbol.for("react.element") : 60103;
function isReactElement$1(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE$1;
}
function emptyTarget$1(val) {
  return Array.isArray(val) ? [] : {};
}
function cloneIfNecessary(value, optionsArgument) {
  var clone = optionsArgument && optionsArgument.clone === true;
  return clone && isMergeableObject$1(value) ? deepmerge$2(emptyTarget$1(value), value, optionsArgument) : value;
}
function defaultArrayMerge$1(target2, source, optionsArgument) {
  var destination = target2.slice();
  source.forEach(function(e, i) {
    if (typeof destination[i] === "undefined") {
      destination[i] = cloneIfNecessary(e, optionsArgument);
    } else if (isMergeableObject$1(e)) {
      destination[i] = deepmerge$2(target2[i], e, optionsArgument);
    } else if (target2.indexOf(e) === -1) {
      destination.push(cloneIfNecessary(e, optionsArgument));
    }
  });
  return destination;
}
function mergeObject$1(target2, source, optionsArgument) {
  var destination = {};
  if (isMergeableObject$1(target2)) {
    Object.keys(target2).forEach(function(key2) {
      destination[key2] = cloneIfNecessary(target2[key2], optionsArgument);
    });
  }
  Object.keys(source).forEach(function(key2) {
    if (!isMergeableObject$1(source[key2]) || !target2[key2]) {
      destination[key2] = cloneIfNecessary(source[key2], optionsArgument);
    } else {
      destination[key2] = deepmerge$2(target2[key2], source[key2], optionsArgument);
    }
  });
  return destination;
}
function deepmerge$2(target2, source, optionsArgument) {
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target2);
  var options2 = optionsArgument || { arrayMerge: defaultArrayMerge$1 };
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneIfNecessary(source, optionsArgument);
  } else if (sourceIsArray) {
    var arrayMerge = options2.arrayMerge || defaultArrayMerge$1;
    return arrayMerge(target2, source, optionsArgument);
  } else {
    return mergeObject$1(target2, source, optionsArgument);
  }
}
deepmerge$2.all = function deepmergeAll(array, optionsArgument) {
  if (!Array.isArray(array) || array.length < 2) {
    throw new Error("first argument should be an array with at least two elements");
  }
  return array.reduce(function(prev, next2) {
    return deepmerge$2(prev, next2, optionsArgument);
  });
};
var deepmerge_1$1 = deepmerge$2;
var cjs$1 = deepmerge_1$1;
var format$3 = {};
var util$2 = {};
var types = {};
types.__esModule = true;
types.isDefined = types.isUndefined = types.isFunction = void 0;
var _typeof$7 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
types.isString = isString$1;
types.isObject = isObject$2;
types.isHtmlElement = isHtmlElement;
var _vue$9 = Vue;
var _vue2$9 = _interopRequireDefault$c(_vue$9);
function _interopRequireDefault$c(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function isString$1(obj) {
  return Object.prototype.toString.call(obj) === "[object String]";
}
function isObject$2(obj) {
  return Object.prototype.toString.call(obj) === "[object Object]";
}
function isHtmlElement(node2) {
  return node2 && node2.nodeType === Node.ELEMENT_NODE;
}
var isFunction$1 = function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === "[object Function]";
};
if (typeof /./ !== "function" && (typeof Int8Array === "undefined" ? "undefined" : _typeof$7(Int8Array)) !== "object" && (_vue2$9.default.prototype.$isServer || typeof document.childNodes !== "function")) {
  types.isFunction = isFunction$1 = function isFunction3(obj) {
    return typeof obj === "function" || false;
  };
}
types.isFunction = isFunction$1;
types.isUndefined = function isUndefined(val) {
  return val === void 0;
};
types.isDefined = function isDefined(val) {
  return val !== void 0 && val !== null;
};
util$2.__esModule = true;
util$2.isEmpty = util$2.isEqual = util$2.arrayEquals = util$2.looseEqual = util$2.capitalize = util$2.kebabCase = util$2.autoprefixer = util$2.isFirefox = util$2.isEdge = util$2.isIE = util$2.coerceTruthyValueToArray = util$2.arrayFind = util$2.arrayFindIndex = util$2.escapeRegexpString = util$2.valueEquals = util$2.generateId = util$2.getValueByPath = void 0;
var _typeof$6 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
util$2.noop = noop$2;
util$2.hasOwn = hasOwn;
util$2.toObject = toObject;
util$2.getPropByPath = getPropByPath;
util$2.rafThrottle = rafThrottle;
util$2.objToArray = objToArray;
var _vue$8 = Vue;
var _vue2$8 = _interopRequireDefault$b(_vue$8);
var _types = types;
function _interopRequireDefault$b(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var hasOwnProperty = Object.prototype.hasOwnProperty;
function noop$2() {
}
function hasOwn(obj, key2) {
  return hasOwnProperty.call(obj, key2);
}
function extend(to, _from) {
  for (var key2 in _from) {
    to[key2] = _from[key2];
  }
  return to;
}
function toObject(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}
util$2.getValueByPath = function getValueByPath(object, prop2) {
  prop2 = prop2 || "";
  var paths = prop2.split(".");
  var current = object;
  var result2 = null;
  for (var i = 0, j = paths.length; i < j; i++) {
    var path = paths[i];
    if (!current)
      break;
    if (i === j - 1) {
      result2 = current[path];
      break;
    }
    current = current[path];
  }
  return result2;
};
function getPropByPath(obj, path, strict) {
  var tempObj = obj;
  path = path.replace(/\[(\w+)\]/g, ".$1");
  path = path.replace(/^\./, "");
  var keyArr = path.split(".");
  var i = 0;
  for (var len = keyArr.length; i < len - 1; ++i) {
    if (!tempObj && !strict)
      break;
    var key2 = keyArr[i];
    if (key2 in tempObj) {
      tempObj = tempObj[key2];
    } else {
      if (strict) {
        throw new Error("please transfer a valid prop path to form item!");
      }
      break;
    }
  }
  return {
    o: tempObj,
    k: keyArr[i],
    v: tempObj ? tempObj[keyArr[i]] : null
  };
}
util$2.generateId = function generateId() {
  return Math.floor(Math.random() * 1e4);
};
util$2.valueEquals = function valueEquals(a2, b2) {
  if (a2 === b2)
    return true;
  if (!(a2 instanceof Array))
    return false;
  if (!(b2 instanceof Array))
    return false;
  if (a2.length !== b2.length)
    return false;
  for (var i = 0; i !== a2.length; ++i) {
    if (a2[i] !== b2[i])
      return false;
  }
  return true;
};
util$2.escapeRegexpString = function escapeRegexpString() {
  var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  return String(value).replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
};
var arrayFindIndex = util$2.arrayFindIndex = function arrayFindIndex2(arr, pred) {
  for (var i = 0; i !== arr.length; ++i) {
    if (pred(arr[i])) {
      return i;
    }
  }
  return -1;
};
util$2.arrayFind = function arrayFind(arr, pred) {
  var idx = arrayFindIndex(arr, pred);
  return idx !== -1 ? arr[idx] : void 0;
};
util$2.coerceTruthyValueToArray = function coerceTruthyValueToArray(val) {
  if (Array.isArray(val)) {
    return val;
  } else if (val) {
    return [val];
  } else {
    return [];
  }
};
util$2.isIE = function isIE() {
  return !_vue2$8.default.prototype.$isServer && !isNaN(Number(document.documentMode));
};
util$2.isEdge = function isEdge() {
  return !_vue2$8.default.prototype.$isServer && navigator.userAgent.indexOf("Edge") > -1;
};
util$2.isFirefox = function isFirefox() {
  return !_vue2$8.default.prototype.$isServer && !!window.navigator.userAgent.match(/firefox/i);
};
util$2.autoprefixer = function autoprefixer(style) {
  if ((typeof style === "undefined" ? "undefined" : _typeof$6(style)) !== "object")
    return style;
  var rules = ["transform", "transition", "animation"];
  var prefixes = ["ms-", "webkit-"];
  rules.forEach(function(rule2) {
    var value = style[rule2];
    if (rule2 && value) {
      prefixes.forEach(function(prefix) {
        style[prefix + rule2] = value;
      });
    }
  });
  return style;
};
util$2.kebabCase = function kebabCase(str) {
  var hyphenateRE = /([^-])([A-Z])/g;
  return str.replace(hyphenateRE, "$1-$2").replace(hyphenateRE, "$1-$2").toLowerCase();
};
util$2.capitalize = function capitalize(str) {
  if (!(0, _types.isString)(str))
    return str;
  return str.charAt(0).toUpperCase() + str.slice(1);
};
var looseEqual = util$2.looseEqual = function looseEqual2(a2, b2) {
  var isObjectA = (0, _types.isObject)(a2);
  var isObjectB = (0, _types.isObject)(b2);
  if (isObjectA && isObjectB) {
    return JSON.stringify(a2) === JSON.stringify(b2);
  } else if (!isObjectA && !isObjectB) {
    return String(a2) === String(b2);
  } else {
    return false;
  }
};
var arrayEquals = util$2.arrayEquals = function arrayEquals2(arrayA, arrayB) {
  arrayA = arrayA || [];
  arrayB = arrayB || [];
  if (arrayA.length !== arrayB.length) {
    return false;
  }
  for (var i = 0; i < arrayA.length; i++) {
    if (!looseEqual(arrayA[i], arrayB[i])) {
      return false;
    }
  }
  return true;
};
util$2.isEqual = function isEqual(value1, value2) {
  if (Array.isArray(value1) && Array.isArray(value2)) {
    return arrayEquals(value1, value2);
  }
  return looseEqual(value1, value2);
};
var isEmpty = util$2.isEmpty = function isEmpty2(val) {
  if (val == null)
    return true;
  if (typeof val === "boolean")
    return false;
  if (typeof val === "number")
    return !val;
  if (val instanceof Error)
    return val.message === "";
  switch (Object.prototype.toString.call(val)) {
    case "[object String]":
    case "[object Array]":
      return !val.length;
    case "[object File]":
    case "[object Map]":
    case "[object Set]": {
      return !val.size;
    }
    case "[object Object]": {
      return !Object.keys(val).length;
    }
  }
  return false;
};
function rafThrottle(fn) {
  var locked = false;
  return function() {
    var _this = this;
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (locked)
      return;
    locked = true;
    window.requestAnimationFrame(function(_2) {
      fn.apply(_this, args);
      locked = false;
    });
  };
}
function objToArray(obj) {
  if (Array.isArray(obj)) {
    return obj;
  }
  return isEmpty(obj) ? [] : [obj];
}
format$3.__esModule = true;
var _typeof$5 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
format$3.default = function(Vue2) {
  function template(string) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (args.length === 1 && _typeof$5(args[0]) === "object") {
      args = args[0];
    }
    if (!args || !args.hasOwnProperty) {
      args = {};
    }
    return string.replace(RE_NARGS, function(match2, prefix, i, index2) {
      var result2 = void 0;
      if (string[index2 - 1] === "{" && string[index2 + match2.length] === "}") {
        return i;
      } else {
        result2 = (0, _util$1.hasOwn)(args, i) ? args[i] : null;
        if (result2 === null || result2 === void 0) {
          return "";
        }
        return result2;
      }
    });
  }
  return template;
};
var _util$1 = util$2;
var RE_NARGS = /(%|)\{([0-9a-zA-Z_]+)\}/g;
locale$1.__esModule = true;
locale$1.i18n = locale$1.use = locale$1.t = void 0;
var _zhCN = zhCN;
var _zhCN2 = _interopRequireDefault$a(_zhCN);
var _vue$7 = Vue;
var _vue2$7 = _interopRequireDefault$a(_vue$7);
var _deepmerge = cjs$1;
var _deepmerge2 = _interopRequireDefault$a(_deepmerge);
var _format = format$3;
var _format2 = _interopRequireDefault$a(_format);
function _interopRequireDefault$a(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var format$2 = (0, _format2.default)(_vue2$7.default);
var lang$3 = _zhCN2.default;
var merged = false;
var i18nHandler$1 = function i18nHandler() {
  var vuei18n = Object.getPrototypeOf(this || _vue2$7.default).$t;
  if (typeof vuei18n === "function" && !!_vue2$7.default.locale) {
    if (!merged) {
      merged = true;
      _vue2$7.default.locale(_vue2$7.default.config.lang, (0, _deepmerge2.default)(lang$3, _vue2$7.default.locale(_vue2$7.default.config.lang) || {}, { clone: true }));
    }
    return vuei18n.apply(this, arguments);
  }
};
var t$1 = locale$1.t = function t(path, options2) {
  var value = i18nHandler$1.apply(this, arguments);
  if (value !== null && value !== void 0)
    return value;
  var array = path.split(".");
  var current = lang$3;
  for (var i = 0, j = array.length; i < j; i++) {
    var property = array[i];
    value = current[property];
    if (i === j - 1)
      return format$2(value, options2);
    if (!value)
      return "";
    current = value;
  }
  return "";
};
var use$1 = locale$1.use = function use(l) {
  lang$3 = l || lang$3;
};
var i18n$1 = locale$1.i18n = function i18n(fn) {
  i18nHandler$1 = fn || i18nHandler$1;
};
var _default$6 = locale$1.default = { use: use$1, t: t$1, i18n: i18n$1 };
var _default$5 = {
  el: {
    colorpicker: {
      confirm: "OK",
      clear: "Clear"
    },
    datepicker: {
      now: "Now",
      today: "Today",
      cancel: "Cancel",
      clear: "Clear",
      confirm: "OK",
      selectDate: "Select date",
      selectTime: "Select time",
      startDate: "Start Date",
      startTime: "Start Time",
      endDate: "End Date",
      endTime: "End Time",
      prevYear: "Previous Year",
      nextYear: "Next Year",
      prevMonth: "Previous Month",
      nextMonth: "Next Month",
      year: "",
      month1: "January",
      month2: "February",
      month3: "March",
      month4: "April",
      month5: "May",
      month6: "June",
      month7: "July",
      month8: "August",
      month9: "September",
      month10: "October",
      month11: "November",
      month12: "December",
      week: "week",
      weeks: {
        sun: "Sun",
        mon: "Mon",
        tue: "Tue",
        wed: "Wed",
        thu: "Thu",
        fri: "Fri",
        sat: "Sat"
      },
      months: {
        jan: "Jan",
        feb: "Feb",
        mar: "Mar",
        apr: "Apr",
        may: "May",
        jun: "Jun",
        jul: "Jul",
        aug: "Aug",
        sep: "Sep",
        oct: "Oct",
        nov: "Nov",
        dec: "Dec"
      }
    },
    select: {
      loading: "Loading",
      noMatch: "No matching data",
      noData: "No data",
      placeholder: "Select"
    },
    cascader: {
      noMatch: "No matching data",
      loading: "Loading",
      placeholder: "Select",
      noData: "No data"
    },
    pagination: {
      goto: "Go to",
      pagesize: "/page",
      total: "Total {total}",
      pageClassifier: ""
    },
    messagebox: {
      title: "Message",
      confirm: "OK",
      cancel: "Cancel",
      error: "Illegal input"
    },
    upload: {
      deleteTip: "press delete to remove",
      delete: "Delete",
      preview: "Preview",
      continue: "Continue"
    },
    table: {
      emptyText: "No Data",
      confirmFilter: "Confirm",
      resetFilter: "Reset",
      clearFilter: "All",
      sumText: "Sum"
    },
    tree: {
      emptyText: "No Data"
    },
    transfer: {
      noMatch: "No matching data",
      noData: "No data",
      titles: ["List 1", "List 2"],
      filterPlaceholder: "Enter keyword",
      noCheckedFormat: "{total} items",
      hasCheckedFormat: "{checked}/{total} checked"
    },
    image: {
      error: "FAILED"
    },
    pageHeader: {
      title: "Back"
    },
    popconfirm: {
      confirmButtonText: "Yes",
      cancelButtonText: "No"
    },
    empty: {
      description: "No Data"
    }
  }
};
_default$6.use(_default$5);
const format$1 = Format();
let lang$2 = defaultLang;
let i18nHandler2;
const t2 = function(path, options2) {
  if (typeof i18nHandler2 === "function") {
    const value = i18nHandler2.apply(this, arguments);
    if (value !== null && value !== void 0 && value !== path)
      return value;
  }
  if (lang$2[path] !== void 0) {
    return format$1(lang$2[path], options2);
  }
  return "";
};
const use2 = function(l) {
  try {
    const ndsLang = require(`./lang/${l}`);
    lang$2 = ndsLang.default;
  } catch (e) {
  }
};
const i18n2 = function(fn) {
  i18nHandler2 = fn || i18nHandler2;
};
var index$1 = { use: use2, t: t2, i18n: i18n2 };
var index$2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  t: t2,
  use: use2,
  i18n: i18n2,
  "default": index$1
}, Symbol.toStringTag, { value: "Module" }));
/*!
 * Font Awesome Free 5.15.4 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 */
function _typeof$4(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$4 = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$4 = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$4(obj);
}
function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target2, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target2, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _defineProperty$1(obj, key2, value) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value;
  }
  return obj;
}
function _objectSpread(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys2 = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys2 = ownKeys2.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys2.forEach(function(key2) {
      _defineProperty$1(target2, key2, source[key2]);
    });
  }
  return target2;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = void 0;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}
var noop = function noop2() {
};
var _WINDOW = {};
var _DOCUMENT = {};
var _MUTATION_OBSERVER = null;
var _PERFORMANCE = {
  mark: noop,
  measure: noop
};
try {
  if (typeof window !== "undefined")
    _WINDOW = window;
  if (typeof document !== "undefined")
    _DOCUMENT = document;
  if (typeof MutationObserver !== "undefined")
    _MUTATION_OBSERVER = MutationObserver;
  if (typeof performance !== "undefined")
    _PERFORMANCE = performance;
} catch (e) {
}
var _ref = _WINDOW.navigator || {}, _ref$userAgent = _ref.userAgent, userAgent = _ref$userAgent === void 0 ? "" : _ref$userAgent;
var WINDOW = _WINDOW;
var DOCUMENT = _DOCUMENT;
var PERFORMANCE = _PERFORMANCE;
!!WINDOW.document;
var IS_DOM = !!DOCUMENT.documentElement && !!DOCUMENT.head && typeof DOCUMENT.addEventListener === "function" && typeof DOCUMENT.createElement === "function";
~userAgent.indexOf("MSIE") || ~userAgent.indexOf("Trident/");
var NAMESPACE_IDENTIFIER = "___FONT_AWESOME___";
var DEFAULT_FAMILY_PREFIX = "fa";
var DEFAULT_REPLACEMENT_CLASS = "svg-inline--fa";
var DATA_FA_I2SVG = "data-fa-i2svg";
(function() {
  try {
    return true;
  } catch (e) {
    return false;
  }
})();
var DUOTONE_CLASSES = {
  GROUP: "group",
  SWAP_OPACITY: "swap-opacity",
  PRIMARY: "primary",
  SECONDARY: "secondary"
};
var initial = WINDOW.FontAwesomeConfig || {};
function getAttrConfig(attr) {
  var element = DOCUMENT.querySelector("script[" + attr + "]");
  if (element) {
    return element.getAttribute(attr);
  }
}
function coerce(val) {
  if (val === "")
    return true;
  if (val === "false")
    return false;
  if (val === "true")
    return true;
  return val;
}
if (DOCUMENT && typeof DOCUMENT.querySelector === "function") {
  var attrs = [["data-family-prefix", "familyPrefix"], ["data-replacement-class", "replacementClass"], ["data-auto-replace-svg", "autoReplaceSvg"], ["data-auto-add-css", "autoAddCss"], ["data-auto-a11y", "autoA11y"], ["data-search-pseudo-elements", "searchPseudoElements"], ["data-observe-mutations", "observeMutations"], ["data-mutate-approach", "mutateApproach"], ["data-keep-original-source", "keepOriginalSource"], ["data-measure-performance", "measurePerformance"], ["data-show-missing-icons", "showMissingIcons"]];
  attrs.forEach(function(_ref2) {
    var _ref22 = _slicedToArray(_ref2, 2), attr = _ref22[0], key2 = _ref22[1];
    var val = coerce(getAttrConfig(attr));
    if (val !== void 0 && val !== null) {
      initial[key2] = val;
    }
  });
}
var _default$4 = {
  familyPrefix: DEFAULT_FAMILY_PREFIX,
  replacementClass: DEFAULT_REPLACEMENT_CLASS,
  autoReplaceSvg: true,
  autoAddCss: true,
  autoA11y: true,
  searchPseudoElements: false,
  observeMutations: true,
  mutateApproach: "async",
  keepOriginalSource: true,
  measurePerformance: false,
  showMissingIcons: true
};
var _config = _objectSpread({}, _default$4, initial);
if (!_config.autoReplaceSvg)
  _config.observeMutations = false;
var config$1 = _objectSpread({}, _config);
WINDOW.FontAwesomeConfig = config$1;
var w = WINDOW || {};
if (!w[NAMESPACE_IDENTIFIER])
  w[NAMESPACE_IDENTIFIER] = {};
if (!w[NAMESPACE_IDENTIFIER].styles)
  w[NAMESPACE_IDENTIFIER].styles = {};
if (!w[NAMESPACE_IDENTIFIER].hooks)
  w[NAMESPACE_IDENTIFIER].hooks = {};
if (!w[NAMESPACE_IDENTIFIER].shims)
  w[NAMESPACE_IDENTIFIER].shims = [];
var namespace = w[NAMESPACE_IDENTIFIER];
var functions = [];
var listener = function listener2() {
  DOCUMENT.removeEventListener("DOMContentLoaded", listener2);
  loaded = 1;
  functions.map(function(fn) {
    return fn();
  });
};
var loaded = false;
if (IS_DOM) {
  loaded = (DOCUMENT.documentElement.doScroll ? /^loaded|^c/ : /^loaded|^i|^c/).test(DOCUMENT.readyState);
  if (!loaded)
    DOCUMENT.addEventListener("DOMContentLoaded", listener);
}
var PENDING = "pending";
var SETTLED = "settled";
var FULFILLED = "fulfilled";
var REJECTED = "rejected";
var NOOP = function NOOP2() {
};
var isNode = typeof global !== "undefined" && typeof global.process !== "undefined" && typeof global.process.emit === "function";
var asyncSetTimer = typeof setImmediate === "undefined" ? setTimeout : setImmediate;
var asyncQueue = [];
var asyncTimer;
function asyncFlush() {
  for (var i = 0; i < asyncQueue.length; i++) {
    asyncQueue[i][0](asyncQueue[i][1]);
  }
  asyncQueue = [];
  asyncTimer = false;
}
function asyncCall(callback, arg) {
  asyncQueue.push([callback, arg]);
  if (!asyncTimer) {
    asyncTimer = true;
    asyncSetTimer(asyncFlush, 0);
  }
}
function invokeResolver(resolver, promise) {
  function resolvePromise(value) {
    resolve$2(promise, value);
  }
  function rejectPromise(reason) {
    reject(promise, reason);
  }
  try {
    resolver(resolvePromise, rejectPromise);
  } catch (e) {
    rejectPromise(e);
  }
}
function invokeCallback(subscriber) {
  var owner = subscriber.owner;
  var settled = owner._state;
  var value = owner._data;
  var callback = subscriber[settled];
  var promise = subscriber.then;
  if (typeof callback === "function") {
    settled = FULFILLED;
    try {
      value = callback(value);
    } catch (e) {
      reject(promise, e);
    }
  }
  if (!handleThenable(promise, value)) {
    if (settled === FULFILLED) {
      resolve$2(promise, value);
    }
    if (settled === REJECTED) {
      reject(promise, value);
    }
  }
}
function handleThenable(promise, value) {
  var resolved;
  try {
    if (promise === value) {
      throw new TypeError("A promises callback cannot return that same promise.");
    }
    if (value && (typeof value === "function" || _typeof$4(value) === "object")) {
      var then2 = value.then;
      if (typeof then2 === "function") {
        then2.call(value, function(val) {
          if (!resolved) {
            resolved = true;
            if (value === val) {
              fulfill(promise, val);
            } else {
              resolve$2(promise, val);
            }
          }
        }, function(reason) {
          if (!resolved) {
            resolved = true;
            reject(promise, reason);
          }
        });
        return true;
      }
    }
  } catch (e) {
    if (!resolved) {
      reject(promise, e);
    }
    return true;
  }
  return false;
}
function resolve$2(promise, value) {
  if (promise === value || !handleThenable(promise, value)) {
    fulfill(promise, value);
  }
}
function fulfill(promise, value) {
  if (promise._state === PENDING) {
    promise._state = SETTLED;
    promise._data = value;
    asyncCall(publishFulfillment, promise);
  }
}
function reject(promise, reason) {
  if (promise._state === PENDING) {
    promise._state = SETTLED;
    promise._data = reason;
    asyncCall(publishRejection, promise);
  }
}
function publish(promise) {
  promise._then = promise._then.forEach(invokeCallback);
}
function publishFulfillment(promise) {
  promise._state = FULFILLED;
  publish(promise);
}
function publishRejection(promise) {
  promise._state = REJECTED;
  publish(promise);
  if (!promise._handled && isNode) {
    global.process.emit("unhandledRejection", promise._data, promise);
  }
}
function notifyRejectionHandled(promise) {
  global.process.emit("rejectionHandled", promise);
}
function P(resolver) {
  if (typeof resolver !== "function") {
    throw new TypeError("Promise resolver " + resolver + " is not a function");
  }
  if (this instanceof P === false) {
    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
  }
  this._then = [];
  invokeResolver(resolver, this);
}
P.prototype = {
  constructor: P,
  _state: PENDING,
  _then: null,
  _data: void 0,
  _handled: false,
  then: function then(onFulfillment, onRejection) {
    var subscriber = {
      owner: this,
      then: new this.constructor(NOOP),
      fulfilled: onFulfillment,
      rejected: onRejection
    };
    if ((onRejection || onFulfillment) && !this._handled) {
      this._handled = true;
      if (this._state === REJECTED && isNode) {
        asyncCall(notifyRejectionHandled, this);
      }
    }
    if (this._state === FULFILLED || this._state === REJECTED) {
      asyncCall(invokeCallback, subscriber);
    } else {
      this._then.push(subscriber);
    }
    return subscriber.then;
  },
  catch: function _catch(onRejection) {
    return this.then(null, onRejection);
  }
};
P.all = function(promises) {
  if (!Array.isArray(promises)) {
    throw new TypeError("You must pass an array to Promise.all().");
  }
  return new P(function(resolve2, reject2) {
    var results = [];
    var remaining = 0;
    function resolver(index2) {
      remaining++;
      return function(value) {
        results[index2] = value;
        if (!--remaining) {
          resolve2(results);
        }
      };
    }
    for (var i = 0, promise; i < promises.length; i++) {
      promise = promises[i];
      if (promise && typeof promise.then === "function") {
        promise.then(resolver(i), reject2);
      } else {
        results[i] = promise;
      }
    }
    if (!remaining) {
      resolve2(results);
    }
  });
};
P.race = function(promises) {
  if (!Array.isArray(promises)) {
    throw new TypeError("You must pass an array to Promise.race().");
  }
  return new P(function(resolve2, reject2) {
    for (var i = 0, promise; i < promises.length; i++) {
      promise = promises[i];
      if (promise && typeof promise.then === "function") {
        promise.then(resolve2, reject2);
      } else {
        resolve2(promise);
      }
    }
  });
};
P.resolve = function(value) {
  if (value && _typeof$4(value) === "object" && value.constructor === P) {
    return value;
  }
  return new P(function(resolve2) {
    resolve2(value);
  });
};
P.reject = function(reason) {
  return new P(function(resolve2, reject2) {
    reject2(reason);
  });
};
var meaninglessTransform = {
  size: 16,
  x: 0,
  y: 0,
  rotate: 0,
  flipX: false,
  flipY: false
};
function insertCss(css2) {
  if (!css2 || !IS_DOM) {
    return;
  }
  var style = DOCUMENT.createElement("style");
  style.setAttribute("type", "text/css");
  style.innerHTML = css2;
  var headChildren = DOCUMENT.head.childNodes;
  var beforeChild = null;
  for (var i = headChildren.length - 1; i > -1; i--) {
    var child2 = headChildren[i];
    var tagName = (child2.tagName || "").toUpperCase();
    if (["STYLE", "LINK"].indexOf(tagName) > -1) {
      beforeChild = child2;
    }
  }
  DOCUMENT.head.insertBefore(style, beforeChild);
  return css2;
}
var idPool = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
function nextUniqueId() {
  var size = 12;
  var id2 = "";
  while (size-- > 0) {
    id2 += idPool[Math.random() * 62 | 0];
  }
  return id2;
}
function htmlEscape(str) {
  return "".concat(str).replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function joinAttributes(attributes) {
  return Object.keys(attributes || {}).reduce(function(acc, attributeName) {
    return acc + "".concat(attributeName, '="').concat(htmlEscape(attributes[attributeName]), '" ');
  }, "").trim();
}
function joinStyles(styles2) {
  return Object.keys(styles2 || {}).reduce(function(acc, styleName) {
    return acc + "".concat(styleName, ": ").concat(styles2[styleName], ";");
  }, "");
}
function transformIsMeaningful(transform2) {
  return transform2.size !== meaninglessTransform.size || transform2.x !== meaninglessTransform.x || transform2.y !== meaninglessTransform.y || transform2.rotate !== meaninglessTransform.rotate || transform2.flipX || transform2.flipY;
}
function transformForSvg(_ref2) {
  var transform2 = _ref2.transform, containerWidth = _ref2.containerWidth, iconWidth = _ref2.iconWidth;
  var outer = {
    transform: "translate(".concat(containerWidth / 2, " 256)")
  };
  var innerTranslate = "translate(".concat(transform2.x * 32, ", ").concat(transform2.y * 32, ") ");
  var innerScale = "scale(".concat(transform2.size / 16 * (transform2.flipX ? -1 : 1), ", ").concat(transform2.size / 16 * (transform2.flipY ? -1 : 1), ") ");
  var innerRotate = "rotate(".concat(transform2.rotate, " 0 0)");
  var inner = {
    transform: "".concat(innerTranslate, " ").concat(innerScale, " ").concat(innerRotate)
  };
  var path = {
    transform: "translate(".concat(iconWidth / 2 * -1, " -256)")
  };
  return {
    outer,
    inner,
    path
  };
}
var ALL_SPACE = {
  x: 0,
  y: 0,
  width: "100%",
  height: "100%"
};
function fillBlack(abstract) {
  var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  if (abstract.attributes && (abstract.attributes.fill || force)) {
    abstract.attributes.fill = "black";
  }
  return abstract;
}
function deGroup(abstract) {
  if (abstract.tag === "g") {
    return abstract.children;
  } else {
    return [abstract];
  }
}
function makeIconMasking(_ref2) {
  var children = _ref2.children, attributes = _ref2.attributes, main = _ref2.main, mask2 = _ref2.mask, explicitMaskId = _ref2.maskId, transform2 = _ref2.transform;
  var mainWidth = main.width, mainPath = main.icon;
  var maskWidth = mask2.width, maskPath = mask2.icon;
  var trans = transformForSvg({
    transform: transform2,
    containerWidth: maskWidth,
    iconWidth: mainWidth
  });
  var maskRect = {
    tag: "rect",
    attributes: _objectSpread({}, ALL_SPACE, {
      fill: "white"
    })
  };
  var maskInnerGroupChildrenMixin = mainPath.children ? {
    children: mainPath.children.map(fillBlack)
  } : {};
  var maskInnerGroup = {
    tag: "g",
    attributes: _objectSpread({}, trans.inner),
    children: [fillBlack(_objectSpread({
      tag: mainPath.tag,
      attributes: _objectSpread({}, mainPath.attributes, trans.path)
    }, maskInnerGroupChildrenMixin))]
  };
  var maskOuterGroup = {
    tag: "g",
    attributes: _objectSpread({}, trans.outer),
    children: [maskInnerGroup]
  };
  var maskId = "mask-".concat(explicitMaskId || nextUniqueId());
  var clipId = "clip-".concat(explicitMaskId || nextUniqueId());
  var maskTag = {
    tag: "mask",
    attributes: _objectSpread({}, ALL_SPACE, {
      id: maskId,
      maskUnits: "userSpaceOnUse",
      maskContentUnits: "userSpaceOnUse"
    }),
    children: [maskRect, maskOuterGroup]
  };
  var defs = {
    tag: "defs",
    children: [{
      tag: "clipPath",
      attributes: {
        id: clipId
      },
      children: deGroup(maskPath)
    }, maskTag]
  };
  children.push(defs, {
    tag: "rect",
    attributes: _objectSpread({
      fill: "currentColor",
      "clip-path": "url(#".concat(clipId, ")"),
      mask: "url(#".concat(maskId, ")")
    }, ALL_SPACE)
  });
  return {
    children,
    attributes
  };
}
function makeIconStandard(_ref2) {
  var children = _ref2.children, attributes = _ref2.attributes, main = _ref2.main, transform2 = _ref2.transform, styles2 = _ref2.styles;
  var styleString = joinStyles(styles2);
  if (styleString.length > 0) {
    attributes["style"] = styleString;
  }
  if (transformIsMeaningful(transform2)) {
    var trans = transformForSvg({
      transform: transform2,
      containerWidth: main.width,
      iconWidth: main.width
    });
    children.push({
      tag: "g",
      attributes: _objectSpread({}, trans.outer),
      children: [{
        tag: "g",
        attributes: _objectSpread({}, trans.inner),
        children: [{
          tag: main.icon.tag,
          children: main.icon.children,
          attributes: _objectSpread({}, main.icon.attributes, trans.path)
        }]
      }]
    });
  } else {
    children.push(main.icon);
  }
  return {
    children,
    attributes
  };
}
function asIcon(_ref2) {
  var children = _ref2.children, main = _ref2.main, mask2 = _ref2.mask, attributes = _ref2.attributes, styles2 = _ref2.styles, transform2 = _ref2.transform;
  if (transformIsMeaningful(transform2) && main.found && !mask2.found) {
    var width = main.width, height = main.height;
    var offset = {
      x: width / height / 2,
      y: 0.5
    };
    attributes["style"] = joinStyles(_objectSpread({}, styles2, {
      "transform-origin": "".concat(offset.x + transform2.x / 16, "em ").concat(offset.y + transform2.y / 16, "em")
    }));
  }
  return [{
    tag: "svg",
    attributes,
    children
  }];
}
function asSymbol(_ref2) {
  var prefix = _ref2.prefix, iconName = _ref2.iconName, children = _ref2.children, attributes = _ref2.attributes, symbol = _ref2.symbol;
  var id2 = symbol === true ? "".concat(prefix, "-").concat(config$1.familyPrefix, "-").concat(iconName) : symbol;
  return [{
    tag: "svg",
    attributes: {
      style: "display: none;"
    },
    children: [{
      tag: "symbol",
      attributes: _objectSpread({}, attributes, {
        id: id2
      }),
      children
    }]
  }];
}
function makeInlineSvgAbstract(params) {
  var _params$icons = params.icons, main = _params$icons.main, mask2 = _params$icons.mask, prefix = params.prefix, iconName = params.iconName, transform2 = params.transform, symbol = params.symbol, title2 = params.title, maskId = params.maskId, titleId = params.titleId, extra = params.extra, _params$watchable = params.watchable, watchable = _params$watchable === void 0 ? false : _params$watchable;
  var _ref2 = mask2.found ? mask2 : main, width = _ref2.width, height = _ref2.height;
  var isUploadedIcon = prefix === "fak";
  var widthClass = isUploadedIcon ? "" : "fa-w-".concat(Math.ceil(width / height * 16));
  var attrClass = [config$1.replacementClass, iconName ? "".concat(config$1.familyPrefix, "-").concat(iconName) : "", widthClass].filter(function(c) {
    return extra.classes.indexOf(c) === -1;
  }).filter(function(c) {
    return c !== "" || !!c;
  }).concat(extra.classes).join(" ");
  var content2 = {
    children: [],
    attributes: _objectSpread({}, extra.attributes, {
      "data-prefix": prefix,
      "data-icon": iconName,
      "class": attrClass,
      "role": extra.attributes.role || "img",
      "xmlns": "http://www.w3.org/2000/svg",
      "viewBox": "0 0 ".concat(width, " ").concat(height)
    })
  };
  var uploadedIconWidthStyle = isUploadedIcon && !~extra.classes.indexOf("fa-fw") ? {
    width: "".concat(width / height * 16 * 0.0625, "em")
  } : {};
  if (watchable) {
    content2.attributes[DATA_FA_I2SVG] = "";
  }
  if (title2)
    content2.children.push({
      tag: "title",
      attributes: {
        id: content2.attributes["aria-labelledby"] || "title-".concat(titleId || nextUniqueId())
      },
      children: [title2]
    });
  var args = _objectSpread({}, content2, {
    prefix,
    iconName,
    main,
    mask: mask2,
    maskId,
    transform: transform2,
    symbol,
    styles: _objectSpread({}, uploadedIconWidthStyle, extra.styles)
  });
  var _ref22 = mask2.found && main.found ? makeIconMasking(args) : makeIconStandard(args), children = _ref22.children, attributes = _ref22.attributes;
  args.children = children;
  args.attributes = attributes;
  if (symbol) {
    return asSymbol(args);
  } else {
    return asIcon(args);
  }
}
var noop$1 = function noop3() {
};
config$1.measurePerformance && PERFORMANCE && PERFORMANCE.mark && PERFORMANCE.measure ? PERFORMANCE : {
  mark: noop$1,
  measure: noop$1
};
var bindInternal4 = function bindInternal42(func, thisContext) {
  return function(a2, b2, c, d) {
    return func.call(thisContext, a2, b2, c, d);
  };
};
var reduce = function fastReduceObject(subject, fn, initialValue, thisContext) {
  var keys = Object.keys(subject), length = keys.length, iterator = thisContext !== void 0 ? bindInternal4(fn, thisContext) : fn, i, key2, result2;
  if (initialValue === void 0) {
    i = 1;
    result2 = subject[keys[0]];
  } else {
    i = 0;
    result2 = initialValue;
  }
  for (; i < length; i++) {
    key2 = keys[i];
    result2 = iterator(result2, subject[key2], key2, subject);
  }
  return result2;
};
function defineIcons(prefix, icons) {
  var params = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var _params$skipHooks = params.skipHooks, skipHooks = _params$skipHooks === void 0 ? false : _params$skipHooks;
  var normalized = Object.keys(icons).reduce(function(acc, iconName) {
    var icon2 = icons[iconName];
    var expanded2 = !!icon2.icon;
    if (expanded2) {
      acc[icon2.iconName] = icon2.icon;
    } else {
      acc[iconName] = icon2;
    }
    return acc;
  }, {});
  if (typeof namespace.hooks.addPack === "function" && !skipHooks) {
    namespace.hooks.addPack(prefix, normalized);
  } else {
    namespace.styles[prefix] = _objectSpread({}, namespace.styles[prefix] || {}, normalized);
  }
  if (prefix === "fas") {
    defineIcons("fa", icons);
  }
}
var styles = namespace.styles, shims = namespace.shims;
var build = function build2() {
  var lookup = function lookup2(reducer) {
    return reduce(styles, function(o3, style, prefix) {
      o3[prefix] = reduce(style, reducer, {});
      return o3;
    }, {});
  };
  lookup(function(acc, icon2, iconName) {
    if (icon2[3]) {
      acc[icon2[3]] = iconName;
    }
    return acc;
  });
  lookup(function(acc, icon2, iconName) {
    var ligatures = icon2[2];
    acc[iconName] = iconName;
    ligatures.forEach(function(ligature) {
      acc[ligature] = iconName;
    });
    return acc;
  });
  var hasRegular = "far" in styles;
  reduce(shims, function(acc, shim) {
    var oldName = shim[0];
    var prefix = shim[1];
    var iconName = shim[2];
    if (prefix === "far" && !hasRegular) {
      prefix = "fas";
    }
    acc[oldName] = {
      prefix,
      iconName
    };
    return acc;
  }, {});
};
build();
namespace.styles;
function iconFromMapping(mapping, prefix, iconName) {
  if (mapping && mapping[prefix] && mapping[prefix][iconName]) {
    return {
      prefix,
      iconName,
      icon: mapping[prefix][iconName]
    };
  }
}
function toHtml(abstractNodes) {
  var tag2 = abstractNodes.tag, _abstractNodes$attrib = abstractNodes.attributes, attributes = _abstractNodes$attrib === void 0 ? {} : _abstractNodes$attrib, _abstractNodes$childr = abstractNodes.children, children = _abstractNodes$childr === void 0 ? [] : _abstractNodes$childr;
  if (typeof abstractNodes === "string") {
    return htmlEscape(abstractNodes);
  } else {
    return "<".concat(tag2, " ").concat(joinAttributes(attributes), ">").concat(children.map(toHtml).join(""), "</").concat(tag2, ">");
  }
}
var parseTransformString = function parseTransformString2(transformString) {
  var transform2 = {
    size: 16,
    x: 0,
    y: 0,
    flipX: false,
    flipY: false,
    rotate: 0
  };
  if (!transformString) {
    return transform2;
  } else {
    return transformString.toLowerCase().split(" ").reduce(function(acc, n) {
      var parts = n.toLowerCase().split("-");
      var first = parts[0];
      var rest = parts.slice(1).join("-");
      if (first && rest === "h") {
        acc.flipX = true;
        return acc;
      }
      if (first && rest === "v") {
        acc.flipY = true;
        return acc;
      }
      rest = parseFloat(rest);
      if (isNaN(rest)) {
        return acc;
      }
      switch (first) {
        case "grow":
          acc.size = acc.size + rest;
          break;
        case "shrink":
          acc.size = acc.size - rest;
          break;
        case "left":
          acc.x = acc.x - rest;
          break;
        case "right":
          acc.x = acc.x + rest;
          break;
        case "up":
          acc.y = acc.y - rest;
          break;
        case "down":
          acc.y = acc.y + rest;
          break;
        case "rotate":
          acc.rotate = acc.rotate + rest;
          break;
      }
      return acc;
    }, transform2);
  }
};
function MissingIcon(error2) {
  this.name = "MissingIcon";
  this.message = error2 || "Icon unavailable";
  this.stack = new Error().stack;
}
MissingIcon.prototype = Object.create(Error.prototype);
MissingIcon.prototype.constructor = MissingIcon;
var FILL = {
  fill: "currentColor"
};
var ANIMATION_BASE = {
  attributeType: "XML",
  repeatCount: "indefinite",
  dur: "2s"
};
({
  tag: "path",
  attributes: _objectSpread({}, FILL, {
    d: "M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"
  })
});
var OPACITY_ANIMATE = _objectSpread({}, ANIMATION_BASE, {
  attributeName: "opacity"
});
({
  tag: "circle",
  attributes: _objectSpread({}, FILL, {
    cx: "256",
    cy: "364",
    r: "28"
  }),
  children: [{
    tag: "animate",
    attributes: _objectSpread({}, ANIMATION_BASE, {
      attributeName: "r",
      values: "28;14;28;28;14;28;"
    })
  }, {
    tag: "animate",
    attributes: _objectSpread({}, OPACITY_ANIMATE, {
      values: "1;0;1;1;0;1;"
    })
  }]
});
({
  tag: "path",
  attributes: _objectSpread({}, FILL, {
    opacity: "1",
    d: "M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"
  }),
  children: [{
    tag: "animate",
    attributes: _objectSpread({}, OPACITY_ANIMATE, {
      values: "1;0;0;0;0;1;"
    })
  }]
});
({
  tag: "path",
  attributes: _objectSpread({}, FILL, {
    opacity: "0",
    d: "M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"
  }),
  children: [{
    tag: "animate",
    attributes: _objectSpread({}, OPACITY_ANIMATE, {
      values: "0;0;1;1;0;0;"
    })
  }]
});
namespace.styles;
function asFoundIcon(icon2) {
  var width = icon2[0];
  var height = icon2[1];
  var _icon$slice = icon2.slice(4), _icon$slice2 = _slicedToArray(_icon$slice, 1), vectorData = _icon$slice2[0];
  var element = null;
  if (Array.isArray(vectorData)) {
    element = {
      tag: "g",
      attributes: {
        class: "".concat(config$1.familyPrefix, "-").concat(DUOTONE_CLASSES.GROUP)
      },
      children: [{
        tag: "path",
        attributes: {
          class: "".concat(config$1.familyPrefix, "-").concat(DUOTONE_CLASSES.SECONDARY),
          fill: "currentColor",
          d: vectorData[0]
        }
      }, {
        tag: "path",
        attributes: {
          class: "".concat(config$1.familyPrefix, "-").concat(DUOTONE_CLASSES.PRIMARY),
          fill: "currentColor",
          d: vectorData[1]
        }
      }]
    };
  } else {
    element = {
      tag: "path",
      attributes: {
        fill: "currentColor",
        d: vectorData
      }
    };
  }
  return {
    found: true,
    width,
    height,
    icon: element
  };
}
namespace.styles;
var baseStyles = 'svg:not(:root).svg-inline--fa {\n  overflow: visible;\n}\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -0.125em;\n}\n.svg-inline--fa.fa-lg {\n  vertical-align: -0.225em;\n}\n.svg-inline--fa.fa-w-1 {\n  width: 0.0625em;\n}\n.svg-inline--fa.fa-w-2 {\n  width: 0.125em;\n}\n.svg-inline--fa.fa-w-3 {\n  width: 0.1875em;\n}\n.svg-inline--fa.fa-w-4 {\n  width: 0.25em;\n}\n.svg-inline--fa.fa-w-5 {\n  width: 0.3125em;\n}\n.svg-inline--fa.fa-w-6 {\n  width: 0.375em;\n}\n.svg-inline--fa.fa-w-7 {\n  width: 0.4375em;\n}\n.svg-inline--fa.fa-w-8 {\n  width: 0.5em;\n}\n.svg-inline--fa.fa-w-9 {\n  width: 0.5625em;\n}\n.svg-inline--fa.fa-w-10 {\n  width: 0.625em;\n}\n.svg-inline--fa.fa-w-11 {\n  width: 0.6875em;\n}\n.svg-inline--fa.fa-w-12 {\n  width: 0.75em;\n}\n.svg-inline--fa.fa-w-13 {\n  width: 0.8125em;\n}\n.svg-inline--fa.fa-w-14 {\n  width: 0.875em;\n}\n.svg-inline--fa.fa-w-15 {\n  width: 0.9375em;\n}\n.svg-inline--fa.fa-w-16 {\n  width: 1em;\n}\n.svg-inline--fa.fa-w-17 {\n  width: 1.0625em;\n}\n.svg-inline--fa.fa-w-18 {\n  width: 1.125em;\n}\n.svg-inline--fa.fa-w-19 {\n  width: 1.1875em;\n}\n.svg-inline--fa.fa-w-20 {\n  width: 1.25em;\n}\n.svg-inline--fa.fa-pull-left {\n  margin-right: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-pull-right {\n  margin-left: 0.3em;\n  width: auto;\n}\n.svg-inline--fa.fa-border {\n  height: 1.5em;\n}\n.svg-inline--fa.fa-li {\n  width: 2em;\n}\n.svg-inline--fa.fa-fw {\n  width: 1.25em;\n}\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -0.125em;\n  width: 1em;\n}\n.fa-layers svg.svg-inline--fa {\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter, .fa-layers-text {\n  display: inline-block;\n  position: absolute;\n  text-align: center;\n}\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center;\n}\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: 0.25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right;\n}\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left;\n}\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right;\n}\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left;\n}\n\n.fa-lg {\n  font-size: 1.3333333333em;\n  line-height: 0.75em;\n  vertical-align: -0.0667em;\n}\n\n.fa-xs {\n  font-size: 0.75em;\n}\n\n.fa-sm {\n  font-size: 0.875em;\n}\n\n.fa-1x {\n  font-size: 1em;\n}\n\n.fa-2x {\n  font-size: 2em;\n}\n\n.fa-3x {\n  font-size: 3em;\n}\n\n.fa-4x {\n  font-size: 4em;\n}\n\n.fa-5x {\n  font-size: 5em;\n}\n\n.fa-6x {\n  font-size: 6em;\n}\n\n.fa-7x {\n  font-size: 7em;\n}\n\n.fa-8x {\n  font-size: 8em;\n}\n\n.fa-9x {\n  font-size: 9em;\n}\n\n.fa-10x {\n  font-size: 10em;\n}\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em;\n}\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0;\n}\n.fa-ul > li {\n  position: relative;\n}\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit;\n}\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: 0.1em;\n  padding: 0.2em 0.25em 0.15em;\n}\n\n.fa-pull-left {\n  float: left;\n}\n\n.fa-pull-right {\n  float: right;\n}\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: 0.3em;\n}\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: 0.3em;\n}\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear;\n}\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8);\n}\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n  }\n}\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg);\n}\n\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg);\n}\n\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg);\n}\n\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1);\n}\n\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1);\n}\n\n.fa-flip-both, .fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1);\n}\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical,\n:root .fa-flip-both {\n  -webkit-filter: none;\n          filter: none;\n}\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2.5em;\n}\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0;\n}\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1.25em;\n}\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2.5em;\n}\n\n.fa-inverse {\n  color: #fff;\n}\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto;\n}\n\n.svg-inline--fa .fa-primary {\n  fill: var(--fa-primary-color, currentColor);\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa .fa-secondary {\n  fill: var(--fa-secondary-color, currentColor);\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-primary {\n  opacity: 0.4;\n  opacity: var(--fa-secondary-opacity, 0.4);\n}\n\n.svg-inline--fa.fa-swap-opacity .fa-secondary {\n  opacity: 1;\n  opacity: var(--fa-primary-opacity, 1);\n}\n\n.svg-inline--fa mask .fa-primary,\n.svg-inline--fa mask .fa-secondary {\n  fill: black;\n}\n\n.fad.fa-inverse {\n  color: #fff;\n}';
function css$1() {
  var dfp = DEFAULT_FAMILY_PREFIX;
  var drc = DEFAULT_REPLACEMENT_CLASS;
  var fp = config$1.familyPrefix;
  var rc = config$1.replacementClass;
  var s = baseStyles;
  if (fp !== dfp || rc !== drc) {
    var dPatt = new RegExp("\\.".concat(dfp, "\\-"), "g");
    var customPropPatt = new RegExp("\\--".concat(dfp, "\\-"), "g");
    var rPatt = new RegExp("\\.".concat(drc), "g");
    s = s.replace(dPatt, ".".concat(fp, "-")).replace(customPropPatt, "--".concat(fp, "-")).replace(rPatt, ".".concat(rc));
  }
  return s;
}
var Library = /* @__PURE__ */ function() {
  function Library2() {
    _classCallCheck$1(this, Library2);
    this.definitions = {};
  }
  _createClass(Library2, [{
    key: "add",
    value: function add2() {
      var _this = this;
      for (var _len = arguments.length, definitions = new Array(_len), _key = 0; _key < _len; _key++) {
        definitions[_key] = arguments[_key];
      }
      var additions = definitions.reduce(this._pullDefinitions, {});
      Object.keys(additions).forEach(function(key2) {
        _this.definitions[key2] = _objectSpread({}, _this.definitions[key2] || {}, additions[key2]);
        defineIcons(key2, additions[key2]);
        build();
      });
    }
  }, {
    key: "reset",
    value: function reset() {
      this.definitions = {};
    }
  }, {
    key: "_pullDefinitions",
    value: function _pullDefinitions(additions, definition) {
      var normalized = definition.prefix && definition.iconName && definition.icon ? {
        0: definition
      } : definition;
      Object.keys(normalized).map(function(key2) {
        var _normalized$key = normalized[key2], prefix = _normalized$key.prefix, iconName = _normalized$key.iconName, icon2 = _normalized$key.icon;
        if (!additions[prefix])
          additions[prefix] = {};
        additions[prefix][iconName] = icon2;
      });
      return additions;
    }
  }]);
  return Library2;
}();
function ensureCss() {
  if (config$1.autoAddCss && !_cssInserted) {
    insertCss(css$1());
    _cssInserted = true;
  }
}
function apiObject(val, abstractCreator) {
  Object.defineProperty(val, "abstract", {
    get: abstractCreator
  });
  Object.defineProperty(val, "html", {
    get: function get2() {
      return val.abstract.map(function(a2) {
        return toHtml(a2);
      });
    }
  });
  Object.defineProperty(val, "node", {
    get: function get2() {
      if (!IS_DOM)
        return;
      var container2 = DOCUMENT.createElement("div");
      container2.innerHTML = val.html;
      return container2.children;
    }
  });
  return val;
}
function findIconDefinition(iconLookup) {
  var _iconLookup$prefix = iconLookup.prefix, prefix = _iconLookup$prefix === void 0 ? "fa" : _iconLookup$prefix, iconName = iconLookup.iconName;
  if (!iconName)
    return;
  return iconFromMapping(library.definitions, prefix, iconName) || iconFromMapping(namespace.styles, prefix, iconName);
}
function resolveIcons(next2) {
  return function(maybeIconDefinition) {
    var params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var iconDefinition = (maybeIconDefinition || {}).icon ? maybeIconDefinition : findIconDefinition(maybeIconDefinition || {});
    var mask2 = params.mask;
    if (mask2) {
      mask2 = (mask2 || {}).icon ? mask2 : findIconDefinition(mask2 || {});
    }
    return next2(iconDefinition, _objectSpread({}, params, {
      mask: mask2
    }));
  };
}
var library = new Library();
var _cssInserted = false;
var parse$6 = {
  transform: function transform(transformString) {
    return parseTransformString(transformString);
  }
};
var icon$6 = resolveIcons(function(iconDefinition) {
  var params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var _params$transform = params.transform, transform2 = _params$transform === void 0 ? meaninglessTransform : _params$transform, _params$symbol = params.symbol, symbol = _params$symbol === void 0 ? false : _params$symbol, _params$mask = params.mask, mask2 = _params$mask === void 0 ? null : _params$mask, _params$maskId = params.maskId, maskId = _params$maskId === void 0 ? null : _params$maskId, _params$title = params.title, title2 = _params$title === void 0 ? null : _params$title, _params$titleId = params.titleId, titleId = _params$titleId === void 0 ? null : _params$titleId, _params$classes = params.classes, classes = _params$classes === void 0 ? [] : _params$classes, _params$attributes = params.attributes, attributes = _params$attributes === void 0 ? {} : _params$attributes, _params$styles = params.styles, styles2 = _params$styles === void 0 ? {} : _params$styles;
  if (!iconDefinition)
    return;
  var prefix = iconDefinition.prefix, iconName = iconDefinition.iconName, icon2 = iconDefinition.icon;
  return apiObject(_objectSpread({
    type: "icon"
  }, iconDefinition), function() {
    ensureCss();
    if (config$1.autoA11y) {
      if (title2) {
        attributes["aria-labelledby"] = "".concat(config$1.replacementClass, "-title-").concat(titleId || nextUniqueId());
      } else {
        attributes["aria-hidden"] = "true";
        attributes["focusable"] = "false";
      }
    }
    return makeInlineSvgAbstract({
      icons: {
        main: asFoundIcon(icon2),
        mask: mask2 ? asFoundIcon(mask2.icon) : {
          found: false,
          width: null,
          height: null,
          icon: {}
        }
      },
      prefix,
      iconName,
      transform: _objectSpread({}, meaninglessTransform, transform2),
      symbol,
      title: title2,
      maskId,
      titleId,
      extra: {
        attributes,
        styles: styles2,
        classes
      }
    });
  });
});
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols2 = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols2 = symbols2.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols2);
  }
  return keys;
}
function _objectSpread2(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key2) {
      _defineProperty(target2, key2, source[key2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key2) {
      Object.defineProperty(target2, key2, Object.getOwnPropertyDescriptor(source, key2));
    });
  }
  return target2;
}
function _typeof$3(obj) {
  "@babel/helpers - typeof";
  return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof$3(obj);
}
function _defineProperty(obj, key2, value) {
  if (key2 in obj) {
    Object.defineProperty(obj, key2, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key2] = value;
  }
  return obj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key2, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key2 = sourceKeys[i];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target2[key2] = source[key2];
  }
  return target2;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target2 = _objectWithoutPropertiesLoose(source, excluded);
  var key2, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key2 = sourceSymbolKeys[i];
      if (excluded.indexOf(key2) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key2))
        continue;
      target2[key2] = source[key2];
    }
  }
  return target2;
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var humps$1 = { exports: {} };
(function(module) {
  (function(global2) {
    var _processKeys = function(convert2, obj, options2) {
      if (!_isObject(obj) || _isDate(obj) || _isRegExp(obj) || _isBoolean(obj) || _isFunction(obj)) {
        return obj;
      }
      var output, i = 0, l = 0;
      if (_isArray(obj)) {
        output = [];
        for (l = obj.length; i < l; i++) {
          output.push(_processKeys(convert2, obj[i], options2));
        }
      } else {
        output = {};
        for (var key2 in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key2)) {
            output[convert2(key2, options2)] = _processKeys(convert2, obj[key2], options2);
          }
        }
      }
      return output;
    };
    var separateWords = function(string, options2) {
      options2 = options2 || {};
      var separator = options2.separator || "_";
      var split = options2.split || /(?=[A-Z])/;
      return string.split(split).join(separator);
    };
    var camelize = function(string) {
      if (_isNumerical(string)) {
        return string;
      }
      string = string.replace(/[\-_\s]+(.)?/g, function(match2, chr) {
        return chr ? chr.toUpperCase() : "";
      });
      return string.substr(0, 1).toLowerCase() + string.substr(1);
    };
    var pascalize = function(string) {
      var camelized = camelize(string);
      return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);
    };
    var decamelize = function(string, options2) {
      return separateWords(string, options2).toLowerCase();
    };
    var toString = Object.prototype.toString;
    var _isFunction = function(obj) {
      return typeof obj === "function";
    };
    var _isObject = function(obj) {
      return obj === Object(obj);
    };
    var _isArray = function(obj) {
      return toString.call(obj) == "[object Array]";
    };
    var _isDate = function(obj) {
      return toString.call(obj) == "[object Date]";
    };
    var _isRegExp = function(obj) {
      return toString.call(obj) == "[object RegExp]";
    };
    var _isBoolean = function(obj) {
      return toString.call(obj) == "[object Boolean]";
    };
    var _isNumerical = function(obj) {
      obj = obj - 0;
      return obj === obj;
    };
    var _processor = function(convert2, options2) {
      var callback = options2 && "process" in options2 ? options2.process : options2;
      if (typeof callback !== "function") {
        return convert2;
      }
      return function(string, options3) {
        return callback(string, convert2, options3);
      };
    };
    var humps2 = {
      camelize,
      decamelize,
      pascalize,
      depascalize: decamelize,
      camelizeKeys: function(object, options2) {
        return _processKeys(_processor(camelize, options2), object);
      },
      decamelizeKeys: function(object, options2) {
        return _processKeys(_processor(decamelize, options2), object, options2);
      },
      pascalizeKeys: function(object, options2) {
        return _processKeys(_processor(pascalize, options2), object);
      },
      depascalizeKeys: function() {
        return this.decamelizeKeys.apply(this, arguments);
      }
    };
    if (module.exports) {
      module.exports = humps2;
    } else {
      global2.humps = humps2;
    }
  })(commonjsGlobal);
})(humps$1);
var humps = humps$1.exports;
var _excluded = ["class", "style", "attrs"];
function styleToObject(style) {
  return style.split(";").map(function(s) {
    return s.trim();
  }).filter(function(s) {
    return s;
  }).reduce(function(acc, pair) {
    var i = pair.indexOf(":");
    var prop2 = humps.camelize(pair.slice(0, i));
    var value = pair.slice(i + 1).trim();
    acc[prop2] = value;
    return acc;
  }, {});
}
function classToObject(cls) {
  return cls.split(/\s+/).reduce(function(acc, c) {
    acc[c] = true;
    return acc;
  }, {});
}
function combineClassObjects() {
  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {
    objs[_key] = arguments[_key];
  }
  return objs.reduce(function(acc, obj) {
    if (Array.isArray(obj)) {
      acc = acc.concat(obj);
    } else {
      acc.push(obj);
    }
    return acc;
  }, []);
}
function convert(h, element) {
  var props = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var data3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  var children = (element.children || []).map(convert.bind(null, h));
  var mixins2 = Object.keys(element.attributes || {}).reduce(function(acc, key2) {
    var val = element.attributes[key2];
    switch (key2) {
      case "class":
        acc["class"] = classToObject(val);
        break;
      case "style":
        acc["style"] = styleToObject(val);
        break;
      default:
        acc.attrs[key2] = val;
    }
    return acc;
  }, {
    "class": {},
    style: {},
    attrs: {}
  });
  var _data$class = data3.class, dClass = _data$class === void 0 ? {} : _data$class, _data$style = data3.style, dStyle = _data$style === void 0 ? {} : _data$style, _data$attrs = data3.attrs, dAttrs = _data$attrs === void 0 ? {} : _data$attrs, remainingData = _objectWithoutProperties(data3, _excluded);
  if (typeof element === "string") {
    return element;
  } else {
    return h(element.tag, _objectSpread2(_objectSpread2({
      class: combineClassObjects(mixins2.class, dClass),
      style: _objectSpread2(_objectSpread2({}, mixins2.style), dStyle),
      attrs: _objectSpread2(_objectSpread2({}, mixins2.attrs), dAttrs)
    }, remainingData), {}, {
      props
    }), children);
  }
}
var PRODUCTION = false;
try {
  PRODUCTION = true;
} catch (e) {
}
function log() {
  if (!PRODUCTION && console && typeof console.error === "function") {
    var _console;
    (_console = console).error.apply(_console, arguments);
  }
}
function objectWithKey(key2, value) {
  return Array.isArray(value) && value.length > 0 || !Array.isArray(value) && value ? _defineProperty({}, key2, value) : {};
}
function classList(props) {
  var _classes;
  var classes = (_classes = {
    "fa-spin": props.spin,
    "fa-spin-pulse": props.spinPulse,
    "fa-spin-reverse": props.spinReverse,
    "fa-pulse": props.pulse,
    "fa-beat": props.beat,
    "fa-fade": props.fade,
    "fa-flash": props.flash,
    "fa-fw": props.fixedWidth,
    "fa-border": props.border,
    "fa-li": props.listItem,
    "fa-inverse": props.inverse,
    "fa-flip": props.flip === true,
    "fa-flip-horizontal": props.flip === "horizontal" || props.flip === "both",
    "fa-flip-vertical": props.flip === "vertical" || props.flip === "both"
  }, _defineProperty(_classes, "fa-".concat(props.size), props.size !== null), _defineProperty(_classes, "fa-rotate-".concat(props.rotation), props.rotation !== null), _defineProperty(_classes, "fa-pull-".concat(props.pull), props.pull !== null), _defineProperty(_classes, "fa-swap-opacity", props.swapOpacity), _defineProperty(_classes, "fa-bounce", props.bounce), _defineProperty(_classes, "fa-shake", props.shake), _defineProperty(_classes, "fa-beat-fade", props.beatFade), _classes);
  return Object.keys(classes).map(function(key2) {
    return classes[key2] ? key2 : null;
  }).filter(function(key2) {
    return key2;
  });
}
function normalizeIconArgs(icon2) {
  if (icon2 && _typeof$3(icon2) === "object" && icon2.prefix && icon2.iconName && icon2.icon) {
    return icon2;
  }
  if (parse$6.icon) {
    return parse$6.icon(icon2);
  }
  if (icon2 === null) {
    return null;
  }
  if (_typeof$3(icon2) === "object" && icon2.prefix && icon2.iconName) {
    return icon2;
  }
  if (Array.isArray(icon2) && icon2.length === 2) {
    return {
      prefix: icon2[0],
      iconName: icon2[1]
    };
  }
  if (typeof icon2 === "string") {
    return {
      prefix: "fas",
      iconName: icon2
    };
  }
}
var FontAwesomeIcon = {
  name: "FontAwesomeIcon",
  functional: true,
  props: {
    beat: {
      type: Boolean,
      default: false
    },
    border: {
      type: Boolean,
      default: false
    },
    fade: {
      type: Boolean,
      default: false
    },
    fixedWidth: {
      type: Boolean,
      default: false
    },
    flash: {
      type: Boolean,
      default: false
    },
    flip: {
      type: [Boolean, String],
      default: false,
      validator: function validator(value) {
        return [true, false, "horizontal", "vertical", "both"].indexOf(value) > -1;
      }
    },
    icon: {
      type: [Object, Array, String],
      required: true
    },
    mask: {
      type: [Object, Array, String],
      default: null
    },
    listItem: {
      type: Boolean,
      default: false
    },
    pull: {
      type: String,
      default: null,
      validator: function validator2(value) {
        return ["right", "left"].indexOf(value) > -1;
      }
    },
    pulse: {
      type: Boolean,
      default: false
    },
    rotation: {
      type: [String, Number],
      default: null,
      validator: function validator3(value) {
        return [90, 180, 270].indexOf(parseInt(value, 10)) > -1;
      }
    },
    swapOpacity: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: null,
      validator: function validator4(value) {
        return ["2xs", "xs", "sm", "lg", "xl", "2xl", "1x", "2x", "3x", "4x", "5x", "6x", "7x", "8x", "9x", "10x"].indexOf(value) > -1;
      }
    },
    spin: {
      type: Boolean,
      default: false
    },
    spinPulse: {
      type: Boolean,
      default: false
    },
    spinReverse: {
      type: Boolean,
      default: false
    },
    transform: {
      type: [String, Object],
      default: null
    },
    symbol: {
      type: [Boolean, String],
      default: false
    },
    title: {
      type: String,
      default: null
    },
    inverse: {
      type: Boolean,
      default: false
    },
    bounce: {
      type: Boolean,
      default: false
    },
    shake: {
      type: Boolean,
      default: false
    },
    beatFade: {
      type: Boolean,
      default: false
    }
  },
  render: function render(createElement, context) {
    var props = context.props;
    var iconArgs = props.icon, maskArgs = props.mask, symbol = props.symbol, title2 = props.title;
    var icon$12 = normalizeIconArgs(iconArgs);
    var classes = objectWithKey("classes", classList(props));
    var transform2 = objectWithKey("transform", typeof props.transform === "string" ? parse$6.transform(props.transform) : props.transform);
    var mask2 = objectWithKey("mask", normalizeIconArgs(maskArgs));
    var renderedIcon = icon$6(icon$12, _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, classes), transform2), mask2), {}, {
      symbol,
      title: title2
    }));
    if (!renderedIcon) {
      return log("Could not find one or more icon(s)", icon$12, mask2);
    }
    var abstract = renderedIcon.abstract;
    var convertCurry = convert.bind(null, createElement);
    return convertCurry(abstract[0], {}, context.data);
  }
};
var _sfc_main$J = Vue.extend({
  name: "n8n-text",
  props: {
    bold: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["xsmall", "small", "mini", "medium", "large", "xlarge"].includes(value)
    },
    color: {
      type: String,
      validator: (value) => ["primary", "text-dark", "text-base", "text-light", "text-xlight", "danger", "success", "warning"].includes(value)
    },
    align: {
      type: String,
      validator: (value) => ["right", "left", "center"].includes(value)
    },
    compact: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: "span"
    }
  },
  computed: {
    classes() {
      const applied = [];
      if (this.align) {
        applied.push(`align-${this.align}`);
      }
      if (this.color) {
        applied.push(this.color);
      }
      if (this.compact) {
        applied.push("compact");
      }
      applied.push(`size-${this.size}`);
      applied.push(this.bold ? "bold" : "regular");
      return applied.map((c) => this.$style[c]);
    }
  }
});
const bold$2 = "_bold_e4k11_1";
const regular$1 = "_regular_e4k11_5";
const compact$1 = "_compact_e4k11_34";
const primary$4 = "_primary_e4k11_38";
const danger$6 = "_danger_e4k11_58";
const success$3 = "_success_e4k11_62";
const warning$6 = "_warning_e4k11_66";
var style0$E = {
  bold: bold$2,
  regular: regular$1,
  "size-xlarge": "_size-xlarge_e4k11_9",
  "size-large": "_size-large_e4k11_14",
  "size-medium": "_size-medium_e4k11_19",
  "size-small": "_size-small_e4k11_24",
  "size-xsmall": "_size-xsmall_e4k11_29",
  compact: compact$1,
  primary: primary$4,
  "text-dark": "_text-dark_e4k11_42",
  "text-base": "_text-base_e4k11_46",
  "text-light": "_text-light_e4k11_50",
  "text-xlight": "_text-xlight_e4k11_54",
  danger: danger$6,
  success: success$3,
  warning: warning$6,
  "align-left": "_align-left_e4k11_70",
  "align-right": "_align-right_e4k11_74",
  "align-center": "_align-center_e4k11_78"
};
function normalizeComponent(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
  var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
  if (render50) {
    options2.render = render50;
    options2.staticRenderFns = staticRenderFns;
    options2._compiled = true;
  }
  if (functionalTemplate) {
    options2.functional = true;
  }
  if (scopeId) {
    options2._scopeId = "data-v-" + scopeId;
  }
  var hook2;
  if (moduleIdentifier) {
    hook2 = function(context) {
      context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
      if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
        context = __VUE_SSR_CONTEXT__;
      }
      if (injectStyles) {
        injectStyles.call(this, context);
      }
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    };
    options2._ssrRegister = hook2;
  } else if (injectStyles) {
    hook2 = shadowMode ? function() {
      injectStyles.call(
        this,
        (options2.functional ? this.parent : this).$root.$options.shadowRoot
      );
    } : injectStyles;
  }
  if (hook2) {
    if (options2.functional) {
      options2._injectStyles = hook2;
      var originalRender = options2.render;
      options2.render = function renderWithStyleInjection(h, context) {
        hook2.call(context);
        return originalRender(h, context);
      };
    } else {
      var existing = options2.beforeCreate;
      options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
    }
  }
  return {
    exports: scriptExports,
    options: options2
  };
}
var _sfc_render$M = function render2() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c(_vm.tag, _vm._g({ tag: "component", class: ["n8n-text", ..._vm.classes] }, _vm.$listeners), [_vm._t("default")], 2);
};
var _sfc_staticRenderFns$M = [];
const __cssModules$E = {
  "$style": style0$E
};
function _sfc_injectStyles$E(ctx2) {
  for (var key2 in __cssModules$E) {
    this[key2] = __cssModules$E[key2];
  }
}
var __component__$M = /* @__PURE__ */ normalizeComponent(
  _sfc_main$J,
  _sfc_render$M,
  _sfc_staticRenderFns$M,
  false,
  _sfc_injectStyles$E,
  null,
  null,
  null
);
var N8nText = __component__$M.exports;
var _sfc_main$I = Vue.extend({
  name: "n8n-icon",
  components: {
    FontAwesomeIcon,
    N8nText
  },
  props: {
    icon: {
      required: true
    },
    size: {
      type: String,
      default: "medium"
    },
    spin: {
      type: Boolean,
      default: false
    },
    color: {
      type: String
    }
  }
});
const xlarge$3 = "_xlarge_1pnjy_1";
const large$2 = "_large_1pnjy_5";
const medium$4 = "_medium_1pnjy_9";
const small$4 = "_small_1pnjy_13";
const xsmall = "_xsmall_1pnjy_17";
var style0$D = {
  xlarge: xlarge$3,
  large: large$2,
  medium: medium$4,
  small: small$4,
  xsmall
};
var _sfc_render$L = function render3() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("n8n-text", { staticClass: "n8n-icon", attrs: { "size": _vm.size, "color": _vm.color, "compact": true } }, [_c("font-awesome-icon", { class: _vm.$style[_vm.size], attrs: { "icon": _vm.icon, "spin": _vm.spin } })], 1);
};
var _sfc_staticRenderFns$L = [];
const __cssModules$D = {
  "$style": style0$D
};
function _sfc_injectStyles$D(ctx2) {
  for (var key2 in __cssModules$D) {
    this[key2] = __cssModules$D[key2];
  }
}
var __component__$L = /* @__PURE__ */ normalizeComponent(
  _sfc_main$I,
  _sfc_render$L,
  _sfc_staticRenderFns$L,
  false,
  _sfc_injectStyles$D,
  null,
  null,
  null
);
var N8nIcon = __component__$L.exports;
var _sfc_main$H = Vue.extend({
  name: "n8n-spinner",
  components: {
    N8nIcon
  },
  props: {
    size: {
      type: String,
      validator(value) {
        return ["small", "medium", "large"].includes(value);
      }
    },
    type: {
      type: String,
      validator(value) {
        return ["dots", "ring"].includes(value);
      },
      default: "dots"
    }
  }
});
var Spinner_vue_vue_type_style_index_0_lang = "";
var _sfc_render$K = function render4() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("span", { staticClass: "n8n-spinner" }, [_vm.type === "ring" ? _c("div", { staticClass: "lds-ring" }, [_c("div"), _c("div"), _c("div"), _c("div")]) : _c("n8n-icon", { attrs: { "icon": "spinner", "size": _vm.size, "spin": "" } })], 1);
};
var _sfc_staticRenderFns$K = [];
var __component__$K = /* @__PURE__ */ normalizeComponent(
  _sfc_main$H,
  _sfc_render$K,
  _sfc_staticRenderFns$K,
  false,
  null,
  null,
  null,
  null
);
var Spinner = __component__$K.exports;
var _sfc_main$G = Vue.extend({
  name: "n8n-button",
  props: {
    label: {
      type: String
    },
    type: {
      type: String,
      default: "primary",
      validator: (value) => ["primary", "secondary", "tertiary", "success", "warning", "danger"].includes(value)
    },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["mini", "small", "medium", "large", "xlarge"].includes(value)
    },
    loading: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    outline: {
      type: Boolean,
      default: false
    },
    text: {
      type: Boolean,
      default: false
    },
    icon: {
      type: [String, Array]
    },
    block: {
      type: Boolean,
      default: false
    },
    active: {
      type: Boolean,
      default: false
    },
    float: {
      type: String,
      validator: (value) => ["left", "right"].includes(value)
    },
    square: {
      type: Boolean,
      default: false
    }
  },
  components: {
    N8nSpinner: Spinner,
    N8nIcon
  },
  computed: {
    ariaBusy() {
      return this.loading ? "true" : "false";
    },
    ariaDisabled() {
      return this.disabled ? "true" : "false";
    },
    classes() {
      return `button ${this.$style.button} ${this.$style[this.type]}${this.size ? ` ${this.$style[this.size]}` : ""}${this.outline ? ` ${this.$style.outline}` : ""}${this.loading ? ` ${this.$style.loading}` : ""}${this.float ? ` ${this.$style[`float-${this.float}`]}` : ""}${this.text ? ` ${this.$style.text}` : ""}${this.disabled ? ` ${this.$style.disabled}` : ""}${this.block ? ` ${this.$style.block}` : ""}${this.active ? ` ${this.$style.active}` : ""}${this.icon || this.loading ? ` ${this.$style.icon}` : ""}${this.square ? ` ${this.$style.square}` : ""}`;
    }
  }
});
const button$4 = "_button_1qq65_115";
const active$2 = "_active_1qq65_146";
const secondary$3 = "_secondary_1qq65_170";
const tertiary$1 = "_tertiary_1qq65_183";
const success$2 = "_success_1qq65_197";
const warning$5 = "_warning_1qq65_208";
const danger$5 = "_danger_1qq65_219";
const mini = "_mini_1qq65_234";
const square$2 = "_square_1qq65_239";
const small$3 = "_small_1qq65_244";
const medium$3 = "_medium_1qq65_254";
const large$1 = "_large_1qq65_264";
const xlarge$2 = "_xlarge_1qq65_269";
const outline = "_outline_1qq65_282";
const primary$3 = "_primary_1qq65_288";
const text$2 = "_text_1qq65_312";
const loading$2 = "_loading_1qq65_355";
const disabled$4 = "_disabled_1qq65_371";
const transparent = "_transparent_1qq65_379";
const icon$5 = "_icon_1qq65_384";
const block$3 = "_block_1qq65_392";
var style0$C = {
  button: button$4,
  active: active$2,
  secondary: secondary$3,
  tertiary: tertiary$1,
  success: success$2,
  warning: warning$5,
  danger: danger$5,
  mini,
  square: square$2,
  small: small$3,
  medium: medium$3,
  large: large$1,
  xlarge: xlarge$2,
  outline,
  primary: primary$3,
  text: text$2,
  loading: loading$2,
  disabled: disabled$4,
  transparent,
  icon: icon$5,
  block: block$3,
  "float-left": "_float-left_1qq65_396",
  "float-right": "_float-right_1qq65_400"
};
var _sfc_render$J = function render5() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("button", _vm._g({ class: _vm.classes, attrs: { "disabled": _vm.disabled || _vm.loading, "aria-disabled": _vm.ariaDisabled, "aria-busy": _vm.ariaBusy, "aria-live": "polite" } }, _vm.$listeners), [_vm.loading || _vm.icon ? _c("span", { class: _vm.$style.icon }, [_vm.loading ? _c("n8n-spinner", { attrs: { "size": _vm.size } }) : _vm.icon ? _c("n8n-icon", { attrs: { "icon": _vm.icon, "size": _vm.size } }) : _vm._e()], 1) : _vm._e(), _vm.label || _vm.$slots.default ? _c("span", [_vm._t("default", function() {
    return [_vm._v(_vm._s(_vm.label))];
  })], 2) : _vm._e()]);
};
var _sfc_staticRenderFns$J = [];
const __cssModules$C = {
  "$style": style0$C
};
function _sfc_injectStyles$C(ctx2) {
  for (var key2 in __cssModules$C) {
    this[key2] = __cssModules$C[key2];
  }
}
var __component__$J = /* @__PURE__ */ normalizeComponent(
  _sfc_main$G,
  _sfc_render$J,
  _sfc_staticRenderFns$J,
  false,
  _sfc_injectStyles$C,
  null,
  null,
  null
);
var N8nButton = __component__$J.exports;
var _sfc_main$F = Vue.extend({
  name: "n8n-heading",
  props: {
    tag: {
      type: String,
      default: "span"
    },
    bold: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["2xlarge", "xlarge", "large", "medium", "small"].includes(value)
    },
    color: {
      type: String,
      validator: (value) => ["primary", "text-dark", "text-base", "text-light", "text-xlight", "danger"].includes(value)
    },
    align: {
      type: String,
      validator: (value) => ["right", "left", "center"].includes(value)
    }
  },
  computed: {
    classes() {
      const applied = [];
      if (this.align) {
        applied.push(`align-${this.align}`);
      }
      if (this.color) {
        applied.push(this.color);
      }
      applied.push(`size-${this.size}`);
      applied.push(this.bold ? "bold" : "regular");
      return applied.map((c) => this.$style[c]);
    }
  }
});
const bold$1 = "_bold_1a5p7_1";
const regular = "_regular_1a5p7_5";
const primary$2 = "_primary_1a5p7_34";
const danger$4 = "_danger_1a5p7_54";
var style0$B = {
  bold: bold$1,
  regular,
  "size-2xlarge": "_size-2xlarge_1a5p7_9",
  "size-xlarge": "_size-xlarge_1a5p7_14",
  "size-large": "_size-large_1a5p7_19",
  "size-medium": "_size-medium_1a5p7_24",
  "size-small": "_size-small_1a5p7_29",
  primary: primary$2,
  "text-dark": "_text-dark_1a5p7_38",
  "text-base": "_text-base_1a5p7_42",
  "text-light": "_text-light_1a5p7_46",
  "text-xlight": "_text-xlight_1a5p7_50",
  danger: danger$4,
  "align-left": "_align-left_1a5p7_58",
  "align-right": "_align-right_1a5p7_62",
  "align-center": "_align-center_1a5p7_66"
};
var _sfc_render$I = function render6() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c(_vm.tag, _vm._g({ tag: "component", class: ["n8n-heading", ..._vm.classes] }, _vm.$listeners), [_vm._t("default")], 2);
};
var _sfc_staticRenderFns$I = [];
const __cssModules$B = {
  "$style": style0$B
};
function _sfc_injectStyles$B(ctx2) {
  for (var key2 in __cssModules$B) {
    this[key2] = __cssModules$B[key2];
  }
}
var __component__$I = /* @__PURE__ */ normalizeComponent(
  _sfc_main$F,
  _sfc_render$I,
  _sfc_staticRenderFns$I,
  false,
  _sfc_injectStyles$B,
  null,
  null,
  null
);
var N8nHeading = __component__$I.exports;
const CALLOUT_DEFAULT_ICONS = {
  info: "info-circle",
  success: "check-circle",
  warning: "exclamation-triangle",
  danger: "times-circle"
};
var _sfc_main$E = Vue.extend({
  name: "n8n-callout",
  components: {
    N8nIcon
  },
  props: {
    theme: {
      type: String,
      required: true,
      validator: (value) => ["info", "success", "secondary", "warning", "danger", "custom"].includes(value)
    },
    icon: {
      type: String,
      default: "info-circle"
    }
  },
  computed: {
    classes() {
      return [
        "n8n-callout",
        this.$style.callout,
        this.$style[this.theme]
      ];
    },
    getIcon() {
      if (Object.keys(CALLOUT_DEFAULT_ICONS).includes(this.theme)) {
        return CALLOUT_DEFAULT_ICONS[this.theme];
      }
      return this.icon;
    }
  }
});
const callout$1 = "_callout_p74de_1";
const info$2 = "_info_p74de_16";
const custom$1 = "_custom_p74de_16";
const warning$4 = "_warning_p74de_22";
const success$1 = "_success_p74de_28";
const danger$3 = "_danger_p74de_34";
const icon$4 = "_icon_p74de_40";
const secondary$2 = "_secondary_p74de_44";
var style0$A = {
  callout: callout$1,
  "message-section": "_message-section_p74de_12",
  info: info$2,
  custom: custom$1,
  warning: warning$4,
  success: success$1,
  danger: danger$3,
  icon: icon$4,
  secondary: secondary$2
};
var _sfc_render$H = function render7() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: _vm.classes, attrs: { "role": "alert" } }, [_c("div", { class: _vm.$style["message-section"] }, [_c("div", { class: _vm.$style.icon }, [_c("n8n-icon", { attrs: { "icon": _vm.getIcon, "size": _vm.theme === "secondary" ? "medium" : "large" } })], 1), _vm._t("default"), _vm._v("\xA0 "), _vm._t("actions")], 2), _vm._t("trailingContent")], 2);
};
var _sfc_staticRenderFns$H = [];
const __cssModules$A = {
  "$style": style0$A
};
function _sfc_injectStyles$A(ctx2) {
  for (var key2 in __cssModules$A) {
    this[key2] = __cssModules$A[key2];
  }
}
var __component__$H = /* @__PURE__ */ normalizeComponent(
  _sfc_main$E,
  _sfc_render$H,
  _sfc_staticRenderFns$H,
  false,
  _sfc_injectStyles$A,
  null,
  null,
  null
);
var N8nCallout = __component__$H.exports;
var _sfc_main$D = Vue.extend({
  name: "n8n-action-box",
  components: {
    N8nButton,
    N8nHeading,
    N8nText,
    N8nCallout
  },
  props: {
    emoji: {
      type: String
    },
    heading: {
      type: String
    },
    buttonText: {
      type: String
    },
    buttonType: {
      type: String
    },
    description: {
      type: String
    },
    calloutText: {
      type: String
    },
    calloutTheme: {
      type: String,
      default: "info"
    },
    calloutIcon: {
      type: String
    }
  }
});
const container$c = "_container_pvdcm_1";
const emoji = "_emoji_pvdcm_16";
const heading$3 = "_heading_pvdcm_20";
const description$1 = "_description_pvdcm_24";
const callout = "_callout_pvdcm_30";
var style0$z = {
  container: container$c,
  emoji,
  heading: heading$3,
  description: description$1,
  callout
};
var _sfc_render$G = function render8() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: ["n8n-action-box", _vm.$style.container] }, [_vm.emoji ? _c("div", { class: _vm.$style.emoji }, [_vm._v(" " + _vm._s(_vm.emoji) + " ")]) : _vm._e(), _vm.heading || _vm.$slots.heading ? _c("div", { class: _vm.$style.heading }, [_c("n8n-heading", { attrs: { "size": "xlarge", "align": "center" } }, [_vm._t("heading", function() {
    return [_vm._v(_vm._s(_vm.heading))];
  })], 2)], 1) : _vm._e(), _c("div", { class: _vm.$style.description, on: { "click": function($event) {
    return _vm.$emit("descriptionClick", $event);
  } } }, [_c("n8n-text", { attrs: { "color": "text-base" } }, [_vm._t("description", function() {
    return [_c("span", { domProps: { "innerHTML": _vm._s(_vm.description) } })];
  })], 2)], 1), _vm.buttonText ? _c("n8n-button", { attrs: { "label": _vm.buttonText, "type": _vm.buttonType, "size": "large" }, on: { "click": function($event) {
    return _vm.$emit("click", $event);
  } } }) : _vm._e(), _vm.calloutText ? _c("n8n-callout", { class: _vm.$style.callout, attrs: { "theme": _vm.calloutTheme, "icon": _vm.calloutIcon } }, [[_c("n8n-text", { attrs: { "color": "text-base" } }, [_c("span", { attrs: { "size": "small" }, domProps: { "innerHTML": _vm._s(_vm.calloutText) } })])]], 2) : _vm._e()], 1);
};
var _sfc_staticRenderFns$G = [];
const __cssModules$z = {
  "$style": style0$z
};
function _sfc_injectStyles$z(ctx2) {
  for (var key2 in __cssModules$z) {
    this[key2] = __cssModules$z[key2];
  }
}
var __component__$G = /* @__PURE__ */ normalizeComponent(
  _sfc_main$D,
  _sfc_render$G,
  _sfc_staticRenderFns$G,
  false,
  _sfc_injectStyles$z,
  null,
  null,
  null
);
var N8nActionBox = __component__$G.exports;
var dropdown = { exports: {} };
var migrating = {};
migrating.__esModule = true;
migrating.default = {
  mounted: function mounted() {
    return;
  },
  methods: {
    getMigratingConfig: function getMigratingConfig() {
      return {
        props: {},
        events: {}
      };
    }
  }
};
var clickoutside = {};
var dom = {};
dom.__esModule = true;
dom.isInContainer = dom.getScrollContainer = dom.isScroll = dom.getStyle = dom.once = dom.off = dom.on = void 0;
var _typeof$2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
dom.hasClass = hasClass;
dom.addClass = addClass;
dom.removeClass = removeClass;
dom.setStyle = setStyle;
var _vue$6 = Vue;
var _vue2$6 = _interopRequireDefault$9(_vue$6);
function _interopRequireDefault$9(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var isServer$1 = _vue2$6.default.prototype.$isServer;
var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var ieVersion = isServer$1 ? 0 : Number(document.documentMode);
var trim = function trim2(string) {
  return (string || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
};
var camelCase = function camelCase2(name) {
  return name.replace(SPECIAL_CHARS_REGEXP, function(_2, separator, letter, offset) {
    return offset ? letter.toUpperCase() : letter;
  }).replace(MOZ_HACK_REGEXP, "Moz$1");
};
var on$1 = dom.on = function() {
  if (!isServer$1 && document.addEventListener) {
    return function(element, event, handler2) {
      if (element && event && handler2) {
        element.addEventListener(event, handler2, false);
      }
    };
  } else {
    return function(element, event, handler2) {
      if (element && event && handler2) {
        element.attachEvent("on" + event, handler2);
      }
    };
  }
}();
var off = dom.off = function() {
  if (!isServer$1 && document.removeEventListener) {
    return function(element, event, handler2) {
      if (element && event) {
        element.removeEventListener(event, handler2, false);
      }
    };
  } else {
    return function(element, event, handler2) {
      if (element && event) {
        element.detachEvent("on" + event, handler2);
      }
    };
  }
}();
dom.once = function once(el2, event, fn) {
  var listener3 = function listener4() {
    if (fn) {
      fn.apply(this, arguments);
    }
    off(el2, event, listener4);
  };
  on$1(el2, event, listener3);
};
function hasClass(el2, cls) {
  if (!el2 || !cls)
    return false;
  if (cls.indexOf(" ") !== -1)
    throw new Error("className should not contain space.");
  if (el2.classList) {
    return el2.classList.contains(cls);
  } else {
    return (" " + el2.className + " ").indexOf(" " + cls + " ") > -1;
  }
}
function addClass(el2, cls) {
  if (!el2)
    return;
  var curClass = el2.className;
  var classes = (cls || "").split(" ");
  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName)
      continue;
    if (el2.classList) {
      el2.classList.add(clsName);
    } else if (!hasClass(el2, clsName)) {
      curClass += " " + clsName;
    }
  }
  if (!el2.classList) {
    el2.setAttribute("class", curClass);
  }
}
function removeClass(el2, cls) {
  if (!el2 || !cls)
    return;
  var classes = cls.split(" ");
  var curClass = " " + el2.className + " ";
  for (var i = 0, j = classes.length; i < j; i++) {
    var clsName = classes[i];
    if (!clsName)
      continue;
    if (el2.classList) {
      el2.classList.remove(clsName);
    } else if (hasClass(el2, clsName)) {
      curClass = curClass.replace(" " + clsName + " ", " ");
    }
  }
  if (!el2.classList) {
    el2.setAttribute("class", trim(curClass));
  }
}
var getStyle = dom.getStyle = ieVersion < 9 ? function(element, styleName) {
  if (isServer$1)
    return;
  if (!element || !styleName)
    return null;
  styleName = camelCase(styleName);
  if (styleName === "float") {
    styleName = "styleFloat";
  }
  try {
    switch (styleName) {
      case "opacity":
        try {
          return element.filters.item("alpha").opacity / 100;
        } catch (e) {
          return 1;
        }
      default:
        return element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : null;
    }
  } catch (e) {
    return element.style[styleName];
  }
} : function(element, styleName) {
  if (isServer$1)
    return;
  if (!element || !styleName)
    return null;
  styleName = camelCase(styleName);
  if (styleName === "float") {
    styleName = "cssFloat";
  }
  try {
    var computed2 = document.defaultView.getComputedStyle(element, "");
    return element.style[styleName] || computed2 ? computed2[styleName] : null;
  } catch (e) {
    return element.style[styleName];
  }
};
function setStyle(element, styleName, value) {
  if (!element || !styleName)
    return;
  if ((typeof styleName === "undefined" ? "undefined" : _typeof$2(styleName)) === "object") {
    for (var prop2 in styleName) {
      if (styleName.hasOwnProperty(prop2)) {
        setStyle(element, prop2, styleName[prop2]);
      }
    }
  } else {
    styleName = camelCase(styleName);
    if (styleName === "opacity" && ieVersion < 9) {
      element.style.filter = isNaN(value) ? "" : "alpha(opacity=" + value * 100 + ")";
    } else {
      element.style[styleName] = value;
    }
  }
}
var isScroll = dom.isScroll = function isScroll2(el2, vertical) {
  if (isServer$1)
    return;
  var determinedDirection = vertical !== null && vertical !== void 0;
  var overflow2 = determinedDirection ? vertical ? getStyle(el2, "overflow-y") : getStyle(el2, "overflow-x") : getStyle(el2, "overflow");
  return overflow2.match(/(scroll|auto|overlay)/);
};
dom.getScrollContainer = function getScrollContainer(el2, vertical) {
  if (isServer$1)
    return;
  var parent = el2;
  while (parent) {
    if ([window, document, document.documentElement].includes(parent)) {
      return window;
    }
    if (isScroll(parent, vertical)) {
      return parent;
    }
    parent = parent.parentNode;
  }
  return parent;
};
dom.isInContainer = function isInContainer(el2, container2) {
  if (isServer$1 || !el2 || !container2)
    return false;
  var elRect = el2.getBoundingClientRect();
  var containerRect = void 0;
  if ([window, document, document.documentElement, null, void 0].includes(container2)) {
    containerRect = {
      top: 0,
      right: window.innerWidth,
      bottom: window.innerHeight,
      left: 0
    };
  } else {
    containerRect = container2.getBoundingClientRect();
  }
  return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
};
clickoutside.__esModule = true;
var _vue$5 = Vue;
var _vue2$5 = _interopRequireDefault$8(_vue$5);
var _dom$3 = dom;
function _interopRequireDefault$8(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var nodeList = [];
var ctx = "@@clickoutsideContext";
var startClick = void 0;
var seed = 0;
!_vue2$5.default.prototype.$isServer && (0, _dom$3.on)(document, "mousedown", function(e) {
  return startClick = e;
});
!_vue2$5.default.prototype.$isServer && (0, _dom$3.on)(document, "mouseup", function(e) {
  nodeList.forEach(function(node2) {
    return node2[ctx].documentHandler(e, startClick);
  });
});
function createDocumentHandler(el2, binding, vnode) {
  return function() {
    var mouseup = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var mousedown = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!vnode || !vnode.context || !mouseup.target || !mousedown.target || el2.contains(mouseup.target) || el2.contains(mousedown.target) || el2 === mouseup.target || vnode.context.popperElm && (vnode.context.popperElm.contains(mouseup.target) || vnode.context.popperElm.contains(mousedown.target)))
      return;
    if (binding.expression && el2[ctx].methodName && vnode.context[el2[ctx].methodName]) {
      vnode.context[el2[ctx].methodName]();
    } else {
      el2[ctx].bindingFn && el2[ctx].bindingFn();
    }
  };
}
clickoutside.default = {
  bind: function bind(el2, binding, vnode) {
    nodeList.push(el2);
    var id2 = seed++;
    el2[ctx] = {
      id: id2,
      documentHandler: createDocumentHandler(el2, binding, vnode),
      methodName: binding.expression,
      bindingFn: binding.value
    };
  },
  update: function update(el2, binding, vnode) {
    el2[ctx].documentHandler = createDocumentHandler(el2, binding, vnode);
    el2[ctx].methodName = binding.expression;
    el2[ctx].bindingFn = binding.value;
  },
  unbind: function unbind(el2) {
    var len = nodeList.length;
    for (var i = 0; i < len; i++) {
      if (nodeList[i][ctx].id === el2[ctx].id) {
        nodeList.splice(i, 1);
        break;
      }
    }
    delete el2[ctx];
  }
};
var button$3 = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 95);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    95: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "button",
          {
            staticClass: "el-button",
            class: [
              _vm.type ? "el-button--" + _vm.type : "",
              _vm.buttonSize ? "el-button--" + _vm.buttonSize : "",
              {
                "is-disabled": _vm.buttonDisabled,
                "is-loading": _vm.loading,
                "is-plain": _vm.plain,
                "is-round": _vm.round,
                "is-circle": _vm.circle
              }
            ],
            attrs: {
              disabled: _vm.buttonDisabled || _vm.loading,
              autofocus: _vm.autofocus,
              type: _vm.nativeType
            },
            on: { click: _vm.handleClick }
          },
          [
            _vm.loading ? _c("i", { staticClass: "el-icon-loading" }) : _vm._e(),
            _vm.icon && !_vm.loading ? _c("i", { class: _vm.icon }) : _vm._e(),
            _vm.$slots.default ? _c("span", [_vm._t("default")], 2) : _vm._e()
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var buttonvue_type_script_lang_js_ = {
        name: "ElButton",
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        props: {
          type: {
            type: String,
            default: "default"
          },
          size: String,
          icon: {
            type: String,
            default: ""
          },
          nativeType: {
            type: String,
            default: "button"
          },
          loading: Boolean,
          disabled: Boolean,
          plain: Boolean,
          autofocus: Boolean,
          round: Boolean,
          circle: Boolean
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          buttonSize: function buttonSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          buttonDisabled: function buttonDisabled() {
            return this.$options.propsData.hasOwnProperty("disabled") ? this.disabled : (this.elForm || {}).disabled;
          }
        },
        methods: {
          handleClick: function handleClick(evt) {
            this.$emit("click", evt);
          }
        }
      };
      var src_buttonvue_type_script_lang_js_ = buttonvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_buttonvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/button/src/button.vue";
      var src_button = component.exports;
      src_button.install = function(Vue2) {
        Vue2.component(src_button.name, src_button);
      };
      __webpack_exports__["default"] = src_button;
    }
  });
})(button$3);
var buttonGroup = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 96);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    96: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-button-group" }, [_vm._t("default")], 2);
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var button_groupvue_type_script_lang_js_ = {
        name: "ElButtonGroup"
      };
      var src_button_groupvue_type_script_lang_js_ = button_groupvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_button_groupvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/button/src/button-group.vue";
      var button_group = component.exports;
      button_group.install = function(Vue2) {
        Vue2.component(button_group.name, button_group);
      };
      __webpack_exports__["default"] = button_group;
    }
  });
})(buttonGroup);
var ButtonGroup = /* @__PURE__ */ getDefaultExportFromCjs(buttonGroup.exports);
var emitter = {};
emitter.__esModule = true;
function _broadcast(componentName, eventName, params) {
  this.$children.forEach(function(child2) {
    var name = child2.$options.componentName;
    if (name === componentName) {
      child2.$emit.apply(child2, [eventName].concat(params));
    } else {
      _broadcast.apply(child2, [componentName, eventName].concat([params]));
    }
  });
}
emitter.default = {
  methods: {
    dispatch: function dispatch(componentName, eventName, params) {
      var parent = this.$parent || this.$root;
      var name = parent.$options.componentName;
      while (parent && (!name || name !== componentName)) {
        parent = parent.$parent;
        if (parent) {
          name = parent.$options.componentName;
        }
      }
      if (parent) {
        parent.$emit.apply(parent, [eventName].concat(params));
      }
    },
    broadcast: function broadcast(componentName, eventName, params) {
      _broadcast.call(this, componentName, eventName, params);
    }
  }
};
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 128);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    11: function(module2, exports) {
      module2.exports = migrating;
    },
    12: function(module2, exports) {
      module2.exports = clickoutside;
    },
    128: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var clickoutside_ = __webpack_require__(12);
      var clickoutside_default = /* @__PURE__ */ __webpack_require__.n(clickoutside_);
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var migrating_ = __webpack_require__(11);
      var migrating_default = /* @__PURE__ */ __webpack_require__.n(migrating_);
      var button_ = __webpack_require__(14);
      var button_default = /* @__PURE__ */ __webpack_require__.n(button_);
      var button_group_ = __webpack_require__(35);
      var button_group_default = /* @__PURE__ */ __webpack_require__.n(button_group_);
      var util_ = __webpack_require__(3);
      var dropdownvue_type_script_lang_js_ = {
        name: "ElDropdown",
        componentName: "ElDropdown",
        mixins: [emitter_default.a, migrating_default.a],
        directives: { Clickoutside: clickoutside_default.a },
        components: {
          ElButton: button_default.a,
          ElButtonGroup: button_group_default.a
        },
        provide: function provide() {
          return {
            dropdown: this
          };
        },
        props: {
          trigger: {
            type: String,
            default: "hover"
          },
          type: String,
          size: {
            type: String,
            default: ""
          },
          splitButton: Boolean,
          hideOnClick: {
            type: Boolean,
            default: true
          },
          placement: {
            type: String,
            default: "bottom-end"
          },
          visibleArrow: {
            default: true
          },
          showTimeout: {
            type: Number,
            default: 250
          },
          hideTimeout: {
            type: Number,
            default: 150
          },
          tabindex: {
            type: Number,
            default: 0
          },
          disabled: {
            type: Boolean,
            default: false
          }
        },
        data: function data3() {
          return {
            timeout: null,
            visible: false,
            triggerElm: null,
            menuItems: null,
            menuItemsArray: null,
            dropdownElm: null,
            focusing: false,
            listId: "dropdown-menu-" + Object(util_["generateId"])()
          };
        },
        computed: {
          dropdownSize: function dropdownSize() {
            return this.size || (this.$ELEMENT || {}).size;
          }
        },
        mounted: function mounted2() {
          this.$on("menu-item-click", this.handleMenuItemClick);
        },
        watch: {
          visible: function visible3(val) {
            this.broadcast("ElDropdownMenu", "visible", val);
            this.$emit("visible-change", val);
          },
          focusing: function focusing(val) {
            var selfDefine = this.$el.querySelector(".el-dropdown-selfdefine");
            if (selfDefine) {
              if (val) {
                selfDefine.className += " focusing";
              } else {
                selfDefine.className = selfDefine.className.replace("focusing", "");
              }
            }
          }
        },
        methods: {
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "menu-align": "menu-align is renamed to placement."
              }
            };
          },
          show: function show() {
            var _this = this;
            if (this.disabled)
              return;
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this.visible = true;
            }, this.trigger === "click" ? 0 : this.showTimeout);
          },
          hide: function hide() {
            var _this2 = this;
            if (this.disabled)
              return;
            this.removeTabindex();
            if (this.tabindex >= 0) {
              this.resetTabindex(this.triggerElm);
            }
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this2.visible = false;
            }, this.trigger === "click" ? 0 : this.hideTimeout);
          },
          handleClick: function handleClick() {
            if (this.disabled)
              return;
            if (this.visible) {
              this.hide();
            } else {
              this.show();
            }
          },
          handleTriggerKeyDown: function handleTriggerKeyDown(ev) {
            var keyCode = ev.keyCode;
            if ([38, 40].indexOf(keyCode) > -1) {
              this.removeTabindex();
              this.resetTabindex(this.menuItems[0]);
              this.menuItems[0].focus();
              ev.preventDefault();
              ev.stopPropagation();
            } else if (keyCode === 13) {
              this.handleClick();
            } else if ([9, 27].indexOf(keyCode) > -1) {
              this.hide();
            }
          },
          handleItemKeyDown: function handleItemKeyDown(ev) {
            var keyCode = ev.keyCode;
            var target2 = ev.target;
            var currentIndex = this.menuItemsArray.indexOf(target2);
            var max = this.menuItemsArray.length - 1;
            var nextIndex = void 0;
            if ([38, 40].indexOf(keyCode) > -1) {
              if (keyCode === 38) {
                nextIndex = currentIndex !== 0 ? currentIndex - 1 : 0;
              } else {
                nextIndex = currentIndex < max ? currentIndex + 1 : max;
              }
              this.removeTabindex();
              this.resetTabindex(this.menuItems[nextIndex]);
              this.menuItems[nextIndex].focus();
              ev.preventDefault();
              ev.stopPropagation();
            } else if (keyCode === 13) {
              this.triggerElmFocus();
              target2.click();
              if (this.hideOnClick) {
                this.visible = false;
              }
            } else if ([9, 27].indexOf(keyCode) > -1) {
              this.hide();
              this.triggerElmFocus();
            }
          },
          resetTabindex: function resetTabindex(ele) {
            this.removeTabindex();
            ele.setAttribute("tabindex", "0");
          },
          removeTabindex: function removeTabindex() {
            this.triggerElm.setAttribute("tabindex", "-1");
            this.menuItemsArray.forEach(function(item2) {
              item2.setAttribute("tabindex", "-1");
            });
          },
          initAria: function initAria() {
            this.dropdownElm.setAttribute("id", this.listId);
            this.triggerElm.setAttribute("aria-haspopup", "list");
            this.triggerElm.setAttribute("aria-controls", this.listId);
            if (!this.splitButton) {
              this.triggerElm.setAttribute("role", "button");
              this.triggerElm.setAttribute("tabindex", this.tabindex);
              this.triggerElm.setAttribute("class", (this.triggerElm.getAttribute("class") || "") + " el-dropdown-selfdefine");
            }
          },
          initEvent: function initEvent() {
            var _this3 = this;
            var trigger = this.trigger, show = this.show, hide = this.hide, handleClick = this.handleClick, splitButton = this.splitButton, handleTriggerKeyDown = this.handleTriggerKeyDown, handleItemKeyDown = this.handleItemKeyDown;
            this.triggerElm = splitButton ? this.$refs.trigger.$el : this.$slots.default[0].elm;
            var dropdownElm = this.dropdownElm;
            this.triggerElm.addEventListener("keydown", handleTriggerKeyDown);
            dropdownElm.addEventListener("keydown", handleItemKeyDown, true);
            if (!splitButton) {
              this.triggerElm.addEventListener("focus", function() {
                _this3.focusing = true;
              });
              this.triggerElm.addEventListener("blur", function() {
                _this3.focusing = false;
              });
              this.triggerElm.addEventListener("click", function() {
                _this3.focusing = false;
              });
            }
            if (trigger === "hover") {
              this.triggerElm.addEventListener("mouseenter", show);
              this.triggerElm.addEventListener("mouseleave", hide);
              dropdownElm.addEventListener("mouseenter", show);
              dropdownElm.addEventListener("mouseleave", hide);
            } else if (trigger === "click") {
              this.triggerElm.addEventListener("click", handleClick);
            }
          },
          handleMenuItemClick: function handleMenuItemClick(command, instance) {
            if (this.hideOnClick) {
              this.visible = false;
            }
            this.$emit("command", command, instance);
          },
          triggerElmFocus: function triggerElmFocus() {
            this.triggerElm.focus && this.triggerElm.focus();
          },
          initDomOperation: function initDomOperation() {
            this.dropdownElm = this.popperElm;
            this.menuItems = this.dropdownElm.querySelectorAll("[tabindex='-1']");
            this.menuItemsArray = [].slice.call(this.menuItems);
            this.initEvent();
            this.initAria();
          }
        },
        render: function render51(h) {
          var _this4 = this;
          var hide = this.hide, splitButton = this.splitButton, type = this.type, dropdownSize = this.dropdownSize, disabled2 = this.disabled;
          var handleMainButtonClick = function handleMainButtonClick2(event) {
            _this4.$emit("click", event);
            hide();
          };
          var triggerElm = null;
          if (splitButton) {
            triggerElm = h("el-button-group", [h(
              "el-button",
              {
                attrs: { type, size: dropdownSize, disabled: disabled2 },
                nativeOn: {
                  "click": handleMainButtonClick
                }
              },
              [this.$slots.default]
            ), h(
              "el-button",
              {
                ref: "trigger",
                attrs: { type, size: dropdownSize, disabled: disabled2 },
                "class": "el-dropdown__caret-button"
              },
              [h("i", { "class": "el-dropdown__icon el-icon-arrow-down" })]
            )]);
          } else {
            triggerElm = this.$slots.default;
            var vnodeData = triggerElm[0].data || {};
            var _vnodeData$attrs = vnodeData.attrs, attrs = _vnodeData$attrs === void 0 ? {} : _vnodeData$attrs;
            if (disabled2 && !attrs.disabled) {
              attrs.disabled = true;
              vnodeData.attrs = attrs;
            }
          }
          var menuElm = disabled2 ? null : this.$slots.dropdown;
          return h(
            "div",
            {
              "class": "el-dropdown",
              directives: [{
                name: "clickoutside",
                value: hide
              }],
              attrs: { "aria-disabled": disabled2 }
            },
            [triggerElm, menuElm]
          );
        }
      };
      var src_dropdownvue_type_script_lang_js_ = dropdownvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var render50, staticRenderFns;
      var component = Object(componentNormalizer["a"])(
        src_dropdownvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/dropdown/src/dropdown.vue";
      var dropdown2 = component.exports;
      dropdown2.install = function(Vue2) {
        Vue2.component(dropdown2.name, dropdown2);
      };
      __webpack_exports__["default"] = dropdown2;
    },
    14: function(module2, exports) {
      module2.exports = button$3.exports;
    },
    3: function(module2, exports) {
      module2.exports = util$2;
    },
    35: function(module2, exports) {
      module2.exports = buttonGroup.exports;
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    }
  });
})(dropdown);
var Dropdown = /* @__PURE__ */ getDefaultExportFromCjs(dropdown.exports);
var dropdownMenu = { exports: {} };
var vuePopper = {};
var popup = {};
var merge = {};
merge.__esModule = true;
merge.default = function(target2) {
  for (var i = 1, j = arguments.length; i < j; i++) {
    var source = arguments[i] || {};
    for (var prop2 in source) {
      if (source.hasOwnProperty(prop2)) {
        var value = source[prop2];
        if (value !== void 0) {
          target2[prop2] = value;
        }
      }
    }
  }
  return target2;
};
var popupManager = {};
popupManager.__esModule = true;
var _vue$4 = Vue;
var _vue2$4 = _interopRequireDefault$7(_vue$4);
var _dom$2 = dom;
function _interopRequireDefault$7(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var hasModal = false;
var hasInitZIndex = false;
var zIndex = void 0;
var getModal = function getModal2() {
  if (_vue2$4.default.prototype.$isServer)
    return;
  var modalDom = PopupManager.modalDom;
  if (modalDom) {
    hasModal = true;
  } else {
    hasModal = false;
    modalDom = document.createElement("div");
    PopupManager.modalDom = modalDom;
    modalDom.addEventListener("touchmove", function(event) {
      event.preventDefault();
      event.stopPropagation();
    });
    modalDom.addEventListener("click", function() {
      PopupManager.doOnModalClick && PopupManager.doOnModalClick();
    });
  }
  return modalDom;
};
var instances = {};
var PopupManager = {
  modalFade: true,
  getInstance: function getInstance(id2) {
    return instances[id2];
  },
  register: function register(id2, instance) {
    if (id2 && instance) {
      instances[id2] = instance;
    }
  },
  deregister: function deregister(id2) {
    if (id2) {
      instances[id2] = null;
      delete instances[id2];
    }
  },
  nextZIndex: function nextZIndex() {
    return PopupManager.zIndex++;
  },
  modalStack: [],
  doOnModalClick: function doOnModalClick() {
    var topItem = PopupManager.modalStack[PopupManager.modalStack.length - 1];
    if (!topItem)
      return;
    var instance = PopupManager.getInstance(topItem.id);
    if (instance && instance.closeOnClickModal) {
      instance.close();
    }
  },
  openModal: function openModal(id2, zIndex2, dom2, modalClass, modalFade) {
    if (_vue2$4.default.prototype.$isServer)
      return;
    if (!id2 || zIndex2 === void 0)
      return;
    this.modalFade = modalFade;
    var modalStack = this.modalStack;
    for (var i = 0, j = modalStack.length; i < j; i++) {
      var item2 = modalStack[i];
      if (item2.id === id2) {
        return;
      }
    }
    var modalDom = getModal();
    (0, _dom$2.addClass)(modalDom, "v-modal");
    if (this.modalFade && !hasModal) {
      (0, _dom$2.addClass)(modalDom, "v-modal-enter");
    }
    if (modalClass) {
      var classArr = modalClass.trim().split(/\s+/);
      classArr.forEach(function(item3) {
        return (0, _dom$2.addClass)(modalDom, item3);
      });
    }
    setTimeout(function() {
      (0, _dom$2.removeClass)(modalDom, "v-modal-enter");
    }, 200);
    if (dom2 && dom2.parentNode && dom2.parentNode.nodeType !== 11) {
      dom2.parentNode.appendChild(modalDom);
    } else {
      document.body.appendChild(modalDom);
    }
    if (zIndex2) {
      modalDom.style.zIndex = zIndex2;
    }
    modalDom.tabIndex = 0;
    modalDom.style.display = "";
    this.modalStack.push({ id: id2, zIndex: zIndex2, modalClass });
  },
  closeModal: function closeModal(id2) {
    var modalStack = this.modalStack;
    var modalDom = getModal();
    if (modalStack.length > 0) {
      var topItem = modalStack[modalStack.length - 1];
      if (topItem.id === id2) {
        if (topItem.modalClass) {
          var classArr = topItem.modalClass.trim().split(/\s+/);
          classArr.forEach(function(item2) {
            return (0, _dom$2.removeClass)(modalDom, item2);
          });
        }
        modalStack.pop();
        if (modalStack.length > 0) {
          modalDom.style.zIndex = modalStack[modalStack.length - 1].zIndex;
        }
      } else {
        for (var i = modalStack.length - 1; i >= 0; i--) {
          if (modalStack[i].id === id2) {
            modalStack.splice(i, 1);
            break;
          }
        }
      }
    }
    if (modalStack.length === 0) {
      if (this.modalFade) {
        (0, _dom$2.addClass)(modalDom, "v-modal-leave");
      }
      setTimeout(function() {
        if (modalStack.length === 0) {
          if (modalDom.parentNode)
            modalDom.parentNode.removeChild(modalDom);
          modalDom.style.display = "none";
          PopupManager.modalDom = void 0;
        }
        (0, _dom$2.removeClass)(modalDom, "v-modal-leave");
      }, 200);
    }
  }
};
Object.defineProperty(PopupManager, "zIndex", {
  configurable: true,
  get: function get() {
    if (!hasInitZIndex) {
      zIndex = zIndex || (_vue2$4.default.prototype.$ELEMENT || {}).zIndex || 2e3;
      hasInitZIndex = true;
    }
    return zIndex;
  },
  set: function set(value) {
    zIndex = value;
  }
});
var getTopPopup = function getTopPopup2() {
  if (_vue2$4.default.prototype.$isServer)
    return;
  if (PopupManager.modalStack.length > 0) {
    var topPopup = PopupManager.modalStack[PopupManager.modalStack.length - 1];
    if (!topPopup)
      return;
    var instance = PopupManager.getInstance(topPopup.id);
    return instance;
  }
};
if (!_vue2$4.default.prototype.$isServer) {
  window.addEventListener("keydown", function(event) {
    if (event.keyCode === 27) {
      var topPopup = getTopPopup();
      if (topPopup && topPopup.closeOnPressEscape) {
        topPopup.handleClose ? topPopup.handleClose() : topPopup.handleAction ? topPopup.handleAction("cancel") : topPopup.close();
      }
    }
  });
}
popupManager.default = PopupManager;
var scrollbarWidth = {};
scrollbarWidth.__esModule = true;
scrollbarWidth.default = function() {
  if (_vue2$3.default.prototype.$isServer)
    return 0;
  if (scrollBarWidth$1 !== void 0)
    return scrollBarWidth$1;
  var outer = document.createElement("div");
  outer.className = "el-scrollbar__wrap";
  outer.style.visibility = "hidden";
  outer.style.width = "100px";
  outer.style.position = "absolute";
  outer.style.top = "-9999px";
  document.body.appendChild(outer);
  var widthNoScroll = outer.offsetWidth;
  outer.style.overflow = "scroll";
  var inner = document.createElement("div");
  inner.style.width = "100%";
  outer.appendChild(inner);
  var widthWithScroll = inner.offsetWidth;
  outer.parentNode.removeChild(outer);
  scrollBarWidth$1 = widthNoScroll - widthWithScroll;
  return scrollBarWidth$1;
};
var _vue$3 = Vue;
var _vue2$3 = _interopRequireDefault$6(_vue$3);
function _interopRequireDefault$6(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var scrollBarWidth$1 = void 0;
popup.__esModule = true;
popup.PopupManager = void 0;
var _vue$2 = Vue;
var _vue2$2 = _interopRequireDefault$5(_vue$2);
var _merge = merge;
var _merge2 = _interopRequireDefault$5(_merge);
var _popupManager = popupManager;
var _popupManager2 = _interopRequireDefault$5(_popupManager);
var _scrollbarWidth = scrollbarWidth;
var _scrollbarWidth2 = _interopRequireDefault$5(_scrollbarWidth);
var _dom$1 = dom;
function _interopRequireDefault$5(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var idSeed = 1;
var scrollBarWidth = void 0;
popup.default = {
  props: {
    visible: {
      type: Boolean,
      default: false
    },
    openDelay: {},
    closeDelay: {},
    zIndex: {},
    modal: {
      type: Boolean,
      default: false
    },
    modalFade: {
      type: Boolean,
      default: true
    },
    modalClass: {},
    modalAppendToBody: {
      type: Boolean,
      default: false
    },
    lockScroll: {
      type: Boolean,
      default: true
    },
    closeOnPressEscape: {
      type: Boolean,
      default: false
    },
    closeOnClickModal: {
      type: Boolean,
      default: false
    }
  },
  beforeMount: function beforeMount() {
    this._popupId = "popup-" + idSeed++;
    _popupManager2.default.register(this._popupId, this);
  },
  beforeDestroy: function beforeDestroy() {
    _popupManager2.default.deregister(this._popupId);
    _popupManager2.default.closeModal(this._popupId);
    this.restoreBodyStyle();
  },
  data: function data() {
    return {
      opened: false,
      bodyPaddingRight: null,
      computedBodyPaddingRight: 0,
      withoutHiddenClass: true,
      rendered: false
    };
  },
  watch: {
    visible: function visible(val) {
      var _this = this;
      if (val) {
        if (this._opening)
          return;
        if (!this.rendered) {
          this.rendered = true;
          _vue2$2.default.nextTick(function() {
            _this.open();
          });
        } else {
          this.open();
        }
      } else {
        this.close();
      }
    }
  },
  methods: {
    open: function open(options2) {
      var _this2 = this;
      if (!this.rendered) {
        this.rendered = true;
      }
      var props = (0, _merge2.default)({}, this.$props || this, options2);
      if (this._closeTimer) {
        clearTimeout(this._closeTimer);
        this._closeTimer = null;
      }
      clearTimeout(this._openTimer);
      var openDelay = Number(props.openDelay);
      if (openDelay > 0) {
        this._openTimer = setTimeout(function() {
          _this2._openTimer = null;
          _this2.doOpen(props);
        }, openDelay);
      } else {
        this.doOpen(props);
      }
    },
    doOpen: function doOpen(props) {
      if (this.$isServer)
        return;
      if (this.willOpen && !this.willOpen())
        return;
      if (this.opened)
        return;
      this._opening = true;
      var dom2 = this.$el;
      var modal = props.modal;
      var zIndex2 = props.zIndex;
      if (zIndex2) {
        _popupManager2.default.zIndex = zIndex2;
      }
      if (modal) {
        if (this._closing) {
          _popupManager2.default.closeModal(this._popupId);
          this._closing = false;
        }
        _popupManager2.default.openModal(this._popupId, _popupManager2.default.nextZIndex(), this.modalAppendToBody ? void 0 : dom2, props.modalClass, props.modalFade);
        if (props.lockScroll) {
          this.withoutHiddenClass = !(0, _dom$1.hasClass)(document.body, "el-popup-parent--hidden");
          if (this.withoutHiddenClass) {
            this.bodyPaddingRight = document.body.style.paddingRight;
            this.computedBodyPaddingRight = parseInt((0, _dom$1.getStyle)(document.body, "paddingRight"), 10);
          }
          scrollBarWidth = (0, _scrollbarWidth2.default)();
          var bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;
          var bodyOverflowY = (0, _dom$1.getStyle)(document.body, "overflowY");
          if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === "scroll") && this.withoutHiddenClass) {
            document.body.style.paddingRight = this.computedBodyPaddingRight + scrollBarWidth + "px";
          }
          (0, _dom$1.addClass)(document.body, "el-popup-parent--hidden");
        }
      }
      if (getComputedStyle(dom2).position === "static") {
        dom2.style.position = "absolute";
      }
      dom2.style.zIndex = _popupManager2.default.nextZIndex();
      this.opened = true;
      this.onOpen && this.onOpen();
      this.doAfterOpen();
    },
    doAfterOpen: function doAfterOpen() {
      this._opening = false;
    },
    close: function close() {
      var _this3 = this;
      if (this.willClose && !this.willClose())
        return;
      if (this._openTimer !== null) {
        clearTimeout(this._openTimer);
        this._openTimer = null;
      }
      clearTimeout(this._closeTimer);
      var closeDelay = Number(this.closeDelay);
      if (closeDelay > 0) {
        this._closeTimer = setTimeout(function() {
          _this3._closeTimer = null;
          _this3.doClose();
        }, closeDelay);
      } else {
        this.doClose();
      }
    },
    doClose: function doClose() {
      this._closing = true;
      this.onClose && this.onClose();
      if (this.lockScroll) {
        setTimeout(this.restoreBodyStyle, 200);
      }
      this.opened = false;
      this.doAfterClose();
    },
    doAfterClose: function doAfterClose() {
      _popupManager2.default.closeModal(this._popupId);
      this._closing = false;
    },
    restoreBodyStyle: function restoreBodyStyle() {
      if (this.modal && this.withoutHiddenClass) {
        document.body.style.paddingRight = this.bodyPaddingRight;
        (0, _dom$1.removeClass)(document.body, "el-popup-parent--hidden");
      }
      this.withoutHiddenClass = true;
    }
  }
};
popup.PopupManager = _popupManager2.default;
var popper = { exports: {} };
(function(module) {
  var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  (function(root2, factory2) {
    if (_typeof2(module) === "object" && module.exports) {
      module.exports = factory2();
    } else {
      root2.Popper = factory2();
    }
  })(void 0, function() {
    var root2 = window;
    var DEFAULTS = {
      placement: "bottom",
      gpuAcceleration: true,
      offset: 0,
      boundariesElement: "viewport",
      boundariesPadding: 5,
      preventOverflowOrder: ["left", "right", "top", "bottom"],
      flipBehavior: "flip",
      arrowElement: "[x-arrow]",
      arrowOffset: 0,
      modifiers: ["shift", "offset", "preventOverflow", "keepTogether", "arrow", "flip", "applyStyle"],
      modifiersIgnored: [],
      forceAbsolute: false
    };
    function Popper(reference3, popper2, options2) {
      this._reference = reference3.jquery ? reference3[0] : reference3;
      this.state = {};
      var isNotDefined = typeof popper2 === "undefined" || popper2 === null;
      var isConfig = popper2 && Object.prototype.toString.call(popper2) === "[object Object]";
      if (isNotDefined || isConfig) {
        this._popper = this.parse(isConfig ? popper2 : {});
      } else {
        this._popper = popper2.jquery ? popper2[0] : popper2;
      }
      this._options = Object.assign({}, DEFAULTS, options2);
      this._options.modifiers = this._options.modifiers.map(function(modifier) {
        if (this._options.modifiersIgnored.indexOf(modifier) !== -1)
          return;
        if (modifier === "applyStyle") {
          this._popper.setAttribute("x-placement", this._options.placement);
        }
        return this.modifiers[modifier] || modifier;
      }.bind(this));
      this.state.position = this._getPosition(this._popper, this._reference);
      setStyle2(this._popper, { position: this.state.position, top: 0 });
      this.update();
      this._setupEventListeners();
      return this;
    }
    Popper.prototype.destroy = function() {
      this._popper.removeAttribute("x-placement");
      this._popper.style.left = "";
      this._popper.style.position = "";
      this._popper.style.top = "";
      this._popper.style[getSupportedPropertyName("transform")] = "";
      this._removeEventListeners();
      if (this._options.removeOnDestroy) {
        this._popper.remove();
      }
      return this;
    };
    Popper.prototype.update = function() {
      var data3 = { instance: this, styles: {} };
      data3.placement = this._options.placement;
      data3._originalPlacement = this._options.placement;
      data3.offsets = this._getOffsets(this._popper, this._reference, data3.placement);
      data3.boundaries = this._getBoundaries(data3, this._options.boundariesPadding, this._options.boundariesElement);
      data3 = this.runModifiers(data3, this._options.modifiers);
      if (typeof this.state.updateCallback === "function") {
        this.state.updateCallback(data3);
      }
    };
    Popper.prototype.onCreate = function(callback) {
      callback(this);
      return this;
    };
    Popper.prototype.onUpdate = function(callback) {
      this.state.updateCallback = callback;
      return this;
    };
    Popper.prototype.parse = function(config2) {
      var defaultConfig = {
        tagName: "div",
        classNames: ["popper"],
        attributes: [],
        parent: root2.document.body,
        content: "",
        contentType: "text",
        arrowTagName: "div",
        arrowClassNames: ["popper__arrow"],
        arrowAttributes: ["x-arrow"]
      };
      config2 = Object.assign({}, defaultConfig, config2);
      var d = root2.document;
      var popper2 = d.createElement(config2.tagName);
      addClassNames(popper2, config2.classNames);
      addAttributes(popper2, config2.attributes);
      if (config2.contentType === "node") {
        popper2.appendChild(config2.content.jquery ? config2.content[0] : config2.content);
      } else if (config2.contentType === "html") {
        popper2.innerHTML = config2.content;
      } else {
        popper2.textContent = config2.content;
      }
      if (config2.arrowTagName) {
        var arrow = d.createElement(config2.arrowTagName);
        addClassNames(arrow, config2.arrowClassNames);
        addAttributes(arrow, config2.arrowAttributes);
        popper2.appendChild(arrow);
      }
      var parent = config2.parent.jquery ? config2.parent[0] : config2.parent;
      if (typeof parent === "string") {
        parent = d.querySelectorAll(config2.parent);
        if (parent.length > 1) {
          console.warn("WARNING: the given `parent` query(" + config2.parent + ") matched more than one element, the first one will be used");
        }
        if (parent.length === 0) {
          throw "ERROR: the given `parent` doesn't exists!";
        }
        parent = parent[0];
      }
      if (parent.length > 1 && parent instanceof Element === false) {
        console.warn("WARNING: you have passed as parent a list of elements, the first one will be used");
        parent = parent[0];
      }
      parent.appendChild(popper2);
      return popper2;
      function addClassNames(element, classNames) {
        classNames.forEach(function(className) {
          element.classList.add(className);
        });
      }
      function addAttributes(element, attributes) {
        attributes.forEach(function(attribute2) {
          element.setAttribute(attribute2.split(":")[0], attribute2.split(":")[1] || "");
        });
      }
    };
    Popper.prototype._getPosition = function(popper2, reference3) {
      getOffsetParent(reference3);
      if (this._options.forceAbsolute) {
        return "absolute";
      }
      var isParentFixed = isFixed(reference3);
      return isParentFixed ? "fixed" : "absolute";
    };
    Popper.prototype._getOffsets = function(popper2, reference3, placement) {
      placement = placement.split("-")[0];
      var popperOffsets = {};
      popperOffsets.position = this.state.position;
      var isParentFixed = popperOffsets.position === "fixed";
      var referenceOffsets = getOffsetRectRelativeToCustomParent(reference3, getOffsetParent(popper2), isParentFixed);
      var popperRect = getOuterSizes(popper2);
      if (["right", "left"].indexOf(placement) !== -1) {
        popperOffsets.top = referenceOffsets.top + referenceOffsets.height / 2 - popperRect.height / 2;
        if (placement === "left") {
          popperOffsets.left = referenceOffsets.left - popperRect.width;
        } else {
          popperOffsets.left = referenceOffsets.right;
        }
      } else {
        popperOffsets.left = referenceOffsets.left + referenceOffsets.width / 2 - popperRect.width / 2;
        if (placement === "top") {
          popperOffsets.top = referenceOffsets.top - popperRect.height;
        } else {
          popperOffsets.top = referenceOffsets.bottom;
        }
      }
      popperOffsets.width = popperRect.width;
      popperOffsets.height = popperRect.height;
      return {
        popper: popperOffsets,
        reference: referenceOffsets
      };
    };
    Popper.prototype._setupEventListeners = function() {
      this.state.updateBound = this.update.bind(this);
      root2.addEventListener("resize", this.state.updateBound);
      if (this._options.boundariesElement !== "window") {
        var target2 = getScrollParent(this._reference);
        if (target2 === root2.document.body || target2 === root2.document.documentElement) {
          target2 = root2;
        }
        target2.addEventListener("scroll", this.state.updateBound);
        this.state.scrollTarget = target2;
      }
    };
    Popper.prototype._removeEventListeners = function() {
      root2.removeEventListener("resize", this.state.updateBound);
      if (this._options.boundariesElement !== "window" && this.state.scrollTarget) {
        this.state.scrollTarget.removeEventListener("scroll", this.state.updateBound);
        this.state.scrollTarget = null;
      }
      this.state.updateBound = null;
    };
    Popper.prototype._getBoundaries = function(data3, padding, boundariesElement) {
      var boundaries = {};
      var width, height;
      if (boundariesElement === "window") {
        var body2 = root2.document.body, html = root2.document.documentElement;
        height = Math.max(body2.scrollHeight, body2.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
        width = Math.max(body2.scrollWidth, body2.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);
        boundaries = {
          top: 0,
          right: width,
          bottom: height,
          left: 0
        };
      } else if (boundariesElement === "viewport") {
        var offsetParent = getOffsetParent(this._popper);
        var scrollParent = getScrollParent(this._popper);
        var offsetParentRect = getOffsetRect(offsetParent);
        var getScrollTopValue = function getScrollTopValue2(element) {
          return element == document.body ? Math.max(document.documentElement.scrollTop, document.body.scrollTop) : element.scrollTop;
        };
        var getScrollLeftValue = function getScrollLeftValue2(element) {
          return element == document.body ? Math.max(document.documentElement.scrollLeft, document.body.scrollLeft) : element.scrollLeft;
        };
        var scrollTop = data3.offsets.popper.position === "fixed" ? 0 : getScrollTopValue(scrollParent);
        var scrollLeft = data3.offsets.popper.position === "fixed" ? 0 : getScrollLeftValue(scrollParent);
        boundaries = {
          top: 0 - (offsetParentRect.top - scrollTop),
          right: root2.document.documentElement.clientWidth - (offsetParentRect.left - scrollLeft),
          bottom: root2.document.documentElement.clientHeight - (offsetParentRect.top - scrollTop),
          left: 0 - (offsetParentRect.left - scrollLeft)
        };
      } else {
        if (getOffsetParent(this._popper) === boundariesElement) {
          boundaries = {
            top: 0,
            left: 0,
            right: boundariesElement.clientWidth,
            bottom: boundariesElement.clientHeight
          };
        } else {
          boundaries = getOffsetRect(boundariesElement);
        }
      }
      boundaries.left += padding;
      boundaries.right -= padding;
      boundaries.top = boundaries.top + padding;
      boundaries.bottom = boundaries.bottom - padding;
      return boundaries;
    };
    Popper.prototype.runModifiers = function(data3, modifiers, ends) {
      var modifiersToRun = modifiers.slice();
      if (ends !== void 0) {
        modifiersToRun = this._options.modifiers.slice(0, getArrayKeyIndex(this._options.modifiers, ends));
      }
      modifiersToRun.forEach(function(modifier) {
        if (isFunction3(modifier)) {
          data3 = modifier.call(this, data3);
        }
      }.bind(this));
      return data3;
    };
    Popper.prototype.isModifierRequired = function(requesting, requested) {
      var index2 = getArrayKeyIndex(this._options.modifiers, requesting);
      return !!this._options.modifiers.slice(0, index2).filter(function(modifier) {
        return modifier === requested;
      }).length;
    };
    Popper.prototype.modifiers = {};
    Popper.prototype.modifiers.applyStyle = function(data3) {
      var styles2 = {
        position: data3.offsets.popper.position
      };
      var left2 = Math.round(data3.offsets.popper.left);
      var top2 = Math.round(data3.offsets.popper.top);
      var prefixedProperty;
      if (this._options.gpuAcceleration && (prefixedProperty = getSupportedPropertyName("transform"))) {
        styles2[prefixedProperty] = "translate3d(" + left2 + "px, " + top2 + "px, 0)";
        styles2.top = 0;
        styles2.left = 0;
      } else {
        styles2.left = left2;
        styles2.top = top2;
      }
      Object.assign(styles2, data3.styles);
      setStyle2(this._popper, styles2);
      this._popper.setAttribute("x-placement", data3.placement);
      if (this.isModifierRequired(this.modifiers.applyStyle, this.modifiers.arrow) && data3.offsets.arrow) {
        setStyle2(data3.arrowElement, data3.offsets.arrow);
      }
      return data3;
    };
    Popper.prototype.modifiers.shift = function(data3) {
      var placement = data3.placement;
      var basePlacement = placement.split("-")[0];
      var shiftVariation = placement.split("-")[1];
      if (shiftVariation) {
        var reference3 = data3.offsets.reference;
        var popper2 = getPopperClientRect(data3.offsets.popper);
        var shiftOffsets = {
          y: {
            start: { top: reference3.top },
            end: { top: reference3.top + reference3.height - popper2.height }
          },
          x: {
            start: { left: reference3.left },
            end: { left: reference3.left + reference3.width - popper2.width }
          }
        };
        var axis = ["bottom", "top"].indexOf(basePlacement) !== -1 ? "x" : "y";
        data3.offsets.popper = Object.assign(popper2, shiftOffsets[axis][shiftVariation]);
      }
      return data3;
    };
    Popper.prototype.modifiers.preventOverflow = function(data3) {
      var order2 = this._options.preventOverflowOrder;
      var popper2 = getPopperClientRect(data3.offsets.popper);
      var check2 = {
        left: function left2() {
          var left3 = popper2.left;
          if (popper2.left < data3.boundaries.left) {
            left3 = Math.max(popper2.left, data3.boundaries.left);
          }
          return { left: left3 };
        },
        right: function right2() {
          var left2 = popper2.left;
          if (popper2.right > data3.boundaries.right) {
            left2 = Math.min(popper2.left, data3.boundaries.right - popper2.width);
          }
          return { left: left2 };
        },
        top: function top2() {
          var top3 = popper2.top;
          if (popper2.top < data3.boundaries.top) {
            top3 = Math.max(popper2.top, data3.boundaries.top);
          }
          return { top: top3 };
        },
        bottom: function bottom2() {
          var top2 = popper2.top;
          if (popper2.bottom > data3.boundaries.bottom) {
            top2 = Math.min(popper2.top, data3.boundaries.bottom - popper2.height);
          }
          return { top: top2 };
        }
      };
      order2.forEach(function(direction) {
        data3.offsets.popper = Object.assign(popper2, check2[direction]());
      });
      return data3;
    };
    Popper.prototype.modifiers.keepTogether = function(data3) {
      var popper2 = getPopperClientRect(data3.offsets.popper);
      var reference3 = data3.offsets.reference;
      var f = Math.floor;
      if (popper2.right < f(reference3.left)) {
        data3.offsets.popper.left = f(reference3.left) - popper2.width;
      }
      if (popper2.left > f(reference3.right)) {
        data3.offsets.popper.left = f(reference3.right);
      }
      if (popper2.bottom < f(reference3.top)) {
        data3.offsets.popper.top = f(reference3.top) - popper2.height;
      }
      if (popper2.top > f(reference3.bottom)) {
        data3.offsets.popper.top = f(reference3.bottom);
      }
      return data3;
    };
    Popper.prototype.modifiers.flip = function(data3) {
      if (!this.isModifierRequired(this.modifiers.flip, this.modifiers.preventOverflow)) {
        console.warn("WARNING: preventOverflow modifier is required by flip modifier in order to work, be sure to include it before flip!");
        return data3;
      }
      if (data3.flipped && data3.placement === data3._originalPlacement) {
        return data3;
      }
      var placement = data3.placement.split("-")[0];
      var placementOpposite = getOppositePlacement(placement);
      var variation = data3.placement.split("-")[1] || "";
      var flipOrder = [];
      if (this._options.flipBehavior === "flip") {
        flipOrder = [placement, placementOpposite];
      } else {
        flipOrder = this._options.flipBehavior;
      }
      flipOrder.forEach(function(step, index2) {
        if (placement !== step || flipOrder.length === index2 + 1) {
          return;
        }
        placement = data3.placement.split("-")[0];
        placementOpposite = getOppositePlacement(placement);
        var popperOffsets = getPopperClientRect(data3.offsets.popper);
        var a2 = ["right", "bottom"].indexOf(placement) !== -1;
        if (a2 && Math.floor(data3.offsets.reference[placement]) > Math.floor(popperOffsets[placementOpposite]) || !a2 && Math.floor(data3.offsets.reference[placement]) < Math.floor(popperOffsets[placementOpposite])) {
          data3.flipped = true;
          data3.placement = flipOrder[index2 + 1];
          if (variation) {
            data3.placement += "-" + variation;
          }
          data3.offsets.popper = this._getOffsets(this._popper, this._reference, data3.placement).popper;
          data3 = this.runModifiers(data3, this._options.modifiers, this._flip);
        }
      }.bind(this));
      return data3;
    };
    Popper.prototype.modifiers.offset = function(data3) {
      var offset = this._options.offset;
      var popper2 = data3.offsets.popper;
      if (data3.placement.indexOf("left") !== -1) {
        popper2.top -= offset;
      } else if (data3.placement.indexOf("right") !== -1) {
        popper2.top += offset;
      } else if (data3.placement.indexOf("top") !== -1) {
        popper2.left -= offset;
      } else if (data3.placement.indexOf("bottom") !== -1) {
        popper2.left += offset;
      }
      return data3;
    };
    Popper.prototype.modifiers.arrow = function(data3) {
      var arrow = this._options.arrowElement;
      var arrowOffset = this._options.arrowOffset;
      if (typeof arrow === "string") {
        arrow = this._popper.querySelector(arrow);
      }
      if (!arrow) {
        return data3;
      }
      if (!this._popper.contains(arrow)) {
        console.warn("WARNING: `arrowElement` must be child of its popper element!");
        return data3;
      }
      if (!this.isModifierRequired(this.modifiers.arrow, this.modifiers.keepTogether)) {
        console.warn("WARNING: keepTogether modifier is required by arrow modifier in order to work, be sure to include it before arrow!");
        return data3;
      }
      var arrowStyle = {};
      var placement = data3.placement.split("-")[0];
      var popper2 = getPopperClientRect(data3.offsets.popper);
      var reference3 = data3.offsets.reference;
      var isVertical = ["left", "right"].indexOf(placement) !== -1;
      var len = isVertical ? "height" : "width";
      var side = isVertical ? "top" : "left";
      var altSide = isVertical ? "left" : "top";
      var opSide = isVertical ? "bottom" : "right";
      var arrowSize = getOuterSizes(arrow)[len];
      if (reference3[opSide] - arrowSize < popper2[side]) {
        data3.offsets.popper[side] -= popper2[side] - (reference3[opSide] - arrowSize);
      }
      if (reference3[side] + arrowSize > popper2[opSide]) {
        data3.offsets.popper[side] += reference3[side] + arrowSize - popper2[opSide];
      }
      var center = reference3[side] + (arrowOffset || reference3[len] / 2 - arrowSize / 2);
      var sideValue = center - popper2[side];
      sideValue = Math.max(Math.min(popper2[len] - arrowSize - 8, sideValue), 8);
      arrowStyle[side] = sideValue;
      arrowStyle[altSide] = "";
      data3.offsets.arrow = arrowStyle;
      data3.arrowElement = arrow;
      return data3;
    };
    function getOuterSizes(element) {
      var _display = element.style.display, _visibility = element.style.visibility;
      element.style.display = "block";
      element.style.visibility = "hidden";
      element.offsetWidth;
      var styles2 = root2.getComputedStyle(element);
      var x2 = parseFloat(styles2.marginTop) + parseFloat(styles2.marginBottom);
      var y = parseFloat(styles2.marginLeft) + parseFloat(styles2.marginRight);
      var result2 = { width: element.offsetWidth + y, height: element.offsetHeight + x2 };
      element.style.display = _display;
      element.style.visibility = _visibility;
      return result2;
    }
    function getOppositePlacement(placement) {
      var hash2 = { left: "right", right: "left", bottom: "top", top: "bottom" };
      return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash2[matched];
      });
    }
    function getPopperClientRect(popperOffsets) {
      var offsets = Object.assign({}, popperOffsets);
      offsets.right = offsets.left + offsets.width;
      offsets.bottom = offsets.top + offsets.height;
      return offsets;
    }
    function getArrayKeyIndex(arr, keyToFind) {
      var i = 0, key2;
      for (key2 in arr) {
        if (arr[key2] === keyToFind) {
          return i;
        }
        i++;
      }
      return null;
    }
    function getStyleComputedProperty(element, property) {
      var css2 = root2.getComputedStyle(element, null);
      return css2[property];
    }
    function getOffsetParent(element) {
      var offsetParent = element.offsetParent;
      return offsetParent === root2.document.body || !offsetParent ? root2.document.documentElement : offsetParent;
    }
    function getScrollParent(element) {
      var parent = element.parentNode;
      if (!parent) {
        return element;
      }
      if (parent === root2.document) {
        if (root2.document.body.scrollTop || root2.document.body.scrollLeft) {
          return root2.document.body;
        } else {
          return root2.document.documentElement;
        }
      }
      if (["scroll", "auto"].indexOf(getStyleComputedProperty(parent, "overflow")) !== -1 || ["scroll", "auto"].indexOf(getStyleComputedProperty(parent, "overflow-x")) !== -1 || ["scroll", "auto"].indexOf(getStyleComputedProperty(parent, "overflow-y")) !== -1) {
        return parent;
      }
      return getScrollParent(element.parentNode);
    }
    function isFixed(element) {
      if (element === root2.document.body) {
        return false;
      }
      if (getStyleComputedProperty(element, "position") === "fixed") {
        return true;
      }
      return element.parentNode ? isFixed(element.parentNode) : element;
    }
    function setStyle2(element, styles2) {
      function is_numeric(n) {
        return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
      }
      Object.keys(styles2).forEach(function(prop2) {
        var unit = "";
        if (["width", "height", "top", "right", "bottom", "left"].indexOf(prop2) !== -1 && is_numeric(styles2[prop2])) {
          unit = "px";
        }
        element.style[prop2] = styles2[prop2] + unit;
      });
    }
    function isFunction3(functionToCheck) {
      var getType = {};
      return functionToCheck && getType.toString.call(functionToCheck) === "[object Function]";
    }
    function getOffsetRect(element) {
      var elementRect = {
        width: element.offsetWidth,
        height: element.offsetHeight,
        left: element.offsetLeft,
        top: element.offsetTop
      };
      elementRect.right = elementRect.left + elementRect.width;
      elementRect.bottom = elementRect.top + elementRect.height;
      return elementRect;
    }
    function getBoundingClientRect(element) {
      var rect2 = element.getBoundingClientRect();
      var isIE2 = navigator.userAgent.indexOf("MSIE") != -1;
      var rectTop = isIE2 && element.tagName === "HTML" ? -element.scrollTop : rect2.top;
      return {
        left: rect2.left,
        top: rectTop,
        right: rect2.right,
        bottom: rect2.bottom,
        width: rect2.right - rect2.left,
        height: rect2.bottom - rectTop
      };
    }
    function getOffsetRectRelativeToCustomParent(element, parent, fixed) {
      var elementRect = getBoundingClientRect(element);
      var parentRect = getBoundingClientRect(parent);
      if (fixed) {
        var scrollParent = getScrollParent(parent);
        parentRect.top += scrollParent.scrollTop;
        parentRect.bottom += scrollParent.scrollTop;
        parentRect.left += scrollParent.scrollLeft;
        parentRect.right += scrollParent.scrollLeft;
      }
      var rect2 = {
        top: elementRect.top - parentRect.top,
        left: elementRect.left - parentRect.left,
        bottom: elementRect.top - parentRect.top + elementRect.height,
        right: elementRect.left - parentRect.left + elementRect.width,
        width: elementRect.width,
        height: elementRect.height
      };
      return rect2;
    }
    function getSupportedPropertyName(property) {
      var prefixes = ["", "ms", "webkit", "moz", "o"];
      for (var i = 0; i < prefixes.length; i++) {
        var toCheck = prefixes[i] ? prefixes[i] + property.charAt(0).toUpperCase() + property.slice(1) : property;
        if (typeof root2.document.body.style[toCheck] !== "undefined") {
          return toCheck;
        }
      }
      return null;
    }
    if (!Object.assign) {
      Object.defineProperty(Object, "assign", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function value(target2) {
          if (target2 === void 0 || target2 === null) {
            throw new TypeError("Cannot convert first argument to object");
          }
          var to = Object(target2);
          for (var i = 1; i < arguments.length; i++) {
            var nextSource = arguments[i];
            if (nextSource === void 0 || nextSource === null) {
              continue;
            }
            nextSource = Object(nextSource);
            var keysArray = Object.keys(nextSource);
            for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
              var nextKey = keysArray[nextIndex];
              var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
              if (desc !== void 0 && desc.enumerable) {
                to[nextKey] = nextSource[nextKey];
              }
            }
          }
          return to;
        }
      });
    }
    return Popper;
  });
})(popper);
vuePopper.__esModule = true;
var _vue$1 = Vue;
var _vue2$1 = _interopRequireDefault$4(_vue$1);
var _popup = popup;
function _interopRequireDefault$4(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var PopperJS = _vue2$1.default.prototype.$isServer ? function() {
} : popper.exports;
var stop = function stop2(e) {
  return e.stopPropagation();
};
vuePopper.default = {
  props: {
    transformOrigin: {
      type: [Boolean, String],
      default: true
    },
    placement: {
      type: String,
      default: "bottom"
    },
    boundariesPadding: {
      type: Number,
      default: 5
    },
    reference: {},
    popper: {},
    offset: {
      default: 0
    },
    value: Boolean,
    visibleArrow: Boolean,
    arrowOffset: {
      type: Number,
      default: 35
    },
    appendToBody: {
      type: Boolean,
      default: true
    },
    popperOptions: {
      type: Object,
      default: function _default() {
        return {
          gpuAcceleration: false
        };
      }
    }
  },
  data: function data2() {
    return {
      showPopper: false,
      currentPlacement: ""
    };
  },
  watch: {
    value: {
      immediate: true,
      handler: function handler(val) {
        this.showPopper = val;
        this.$emit("input", val);
      }
    },
    showPopper: function showPopper(val) {
      if (this.disabled)
        return;
      val ? this.updatePopper() : this.destroyPopper();
      this.$emit("input", val);
    }
  },
  methods: {
    createPopper: function createPopper() {
      var _this = this;
      if (this.$isServer)
        return;
      this.currentPlacement = this.currentPlacement || this.placement;
      if (!/^(top|bottom|left|right)(-start|-end)?$/g.test(this.currentPlacement)) {
        return;
      }
      var options2 = this.popperOptions;
      var popper2 = this.popperElm = this.popperElm || this.popper || this.$refs.popper;
      var reference3 = this.referenceElm = this.referenceElm || this.reference || this.$refs.reference;
      if (!reference3 && this.$slots.reference && this.$slots.reference[0]) {
        reference3 = this.referenceElm = this.$slots.reference[0].elm;
      }
      if (!popper2 || !reference3)
        return;
      if (this.visibleArrow)
        this.appendArrow(popper2);
      if (this.appendToBody)
        document.body.appendChild(this.popperElm);
      if (this.popperJS && this.popperJS.destroy) {
        this.popperJS.destroy();
      }
      options2.placement = this.currentPlacement;
      options2.offset = this.offset;
      options2.arrowOffset = this.arrowOffset;
      this.popperJS = new PopperJS(reference3, popper2, options2);
      this.popperJS.onCreate(function(_2) {
        _this.$emit("created", _this);
        _this.resetTransformOrigin();
        _this.$nextTick(_this.updatePopper);
      });
      if (typeof options2.onUpdate === "function") {
        this.popperJS.onUpdate(options2.onUpdate);
      }
      this.popperJS._popper.style.zIndex = _popup.PopupManager.nextZIndex();
      this.popperElm.addEventListener("click", stop);
    },
    updatePopper: function updatePopper() {
      var popperJS = this.popperJS;
      if (popperJS) {
        popperJS.update();
        if (popperJS._popper) {
          popperJS._popper.style.zIndex = _popup.PopupManager.nextZIndex();
        }
      } else {
        this.createPopper();
      }
    },
    doDestroy: function doDestroy(forceDestroy) {
      if (!this.popperJS || this.showPopper && !forceDestroy)
        return;
      this.popperJS.destroy();
      this.popperJS = null;
    },
    destroyPopper: function destroyPopper() {
      if (this.popperJS) {
        this.resetTransformOrigin();
      }
    },
    resetTransformOrigin: function resetTransformOrigin() {
      if (!this.transformOrigin)
        return;
      var placementMap = {
        top: "bottom",
        bottom: "top",
        left: "right",
        right: "left"
      };
      var placement = this.popperJS._popper.getAttribute("x-placement").split("-")[0];
      var origin = placementMap[placement];
      this.popperJS._popper.style.transformOrigin = typeof this.transformOrigin === "string" ? this.transformOrigin : ["top", "bottom"].indexOf(placement) > -1 ? "center " + origin : origin + " center";
    },
    appendArrow: function appendArrow(element) {
      var hash2 = void 0;
      if (this.appended) {
        return;
      }
      this.appended = true;
      for (var item2 in element.attributes) {
        if (/^_v-/.test(element.attributes[item2].name)) {
          hash2 = element.attributes[item2].name;
          break;
        }
      }
      var arrow = document.createElement("div");
      if (hash2) {
        arrow.setAttribute(hash2, "");
      }
      arrow.setAttribute("x-arrow", "");
      arrow.className = "popper__arrow";
      element.appendChild(arrow);
    }
  },
  beforeDestroy: function beforeDestroy2() {
    this.doDestroy(true);
    if (this.popperElm && this.popperElm.parentNode === document.body) {
      this.popperElm.removeEventListener("click", stop);
      document.body.removeChild(this.popperElm);
    }
  },
  deactivated: function deactivated() {
    this.$options.beforeDestroy[0].call(this);
  }
};
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 82);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    5: function(module2, exports) {
      module2.exports = vuePopper;
    },
    82: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          { attrs: { name: "el-zoom-in-top" }, on: { "after-leave": _vm.doDestroy } },
          [
            _c(
              "ul",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.showPopper,
                    expression: "showPopper"
                  }
                ],
                staticClass: "el-dropdown-menu el-popper",
                class: [_vm.size && "el-dropdown-menu--" + _vm.size]
              },
              [_vm._t("default")],
              2
            )
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var dropdown_menuvue_type_script_lang_js_ = {
        name: "ElDropdownMenu",
        componentName: "ElDropdownMenu",
        mixins: [vue_popper_default.a],
        props: {
          visibleArrow: {
            type: Boolean,
            default: true
          },
          arrowOffset: {
            type: Number,
            default: 0
          }
        },
        data: function data3() {
          return {
            size: this.dropdown.dropdownSize
          };
        },
        inject: ["dropdown"],
        created: function created() {
          var _this = this;
          this.$on("updatePopper", function() {
            if (_this.showPopper)
              _this.updatePopper();
          });
          this.$on("visible", function(val) {
            _this.showPopper = val;
          });
        },
        mounted: function mounted2() {
          this.dropdown.popperElm = this.popperElm = this.$el;
          this.referenceElm = this.dropdown.$el;
          this.dropdown.initDomOperation();
        },
        watch: {
          "dropdown.placement": {
            immediate: true,
            handler: function handler2(val) {
              this.currentPlacement = val;
            }
          }
        }
      };
      var src_dropdown_menuvue_type_script_lang_js_ = dropdown_menuvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_dropdown_menuvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/dropdown/src/dropdown-menu.vue";
      var dropdown_menu = component.exports;
      dropdown_menu.install = function(Vue2) {
        Vue2.component(dropdown_menu.name, dropdown_menu);
      };
      __webpack_exports__["default"] = dropdown_menu;
    }
  });
})(dropdownMenu);
var DropdownMenu = /* @__PURE__ */ getDefaultExportFromCjs(dropdownMenu.exports);
var dropdownItem = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 83);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    83: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "li",
          {
            staticClass: "el-dropdown-menu__item",
            class: {
              "is-disabled": _vm.disabled,
              "el-dropdown-menu__item--divided": _vm.divided
            },
            attrs: {
              "aria-disabled": _vm.disabled,
              tabindex: _vm.disabled ? null : -1
            },
            on: { click: _vm.handleClick }
          },
          [_vm.icon ? _c("i", { class: _vm.icon }) : _vm._e(), _vm._t("default")],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var dropdown_itemvue_type_script_lang_js_ = {
        name: "ElDropdownItem",
        mixins: [emitter_default.a],
        props: {
          command: {},
          disabled: Boolean,
          divided: Boolean,
          icon: String
        },
        methods: {
          handleClick: function handleClick(e) {
            this.dispatch("ElDropdown", "menu-item-click", [this.command, this]);
          }
        }
      };
      var src_dropdown_itemvue_type_script_lang_js_ = dropdown_itemvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_dropdown_itemvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/dropdown/src/dropdown-item.vue";
      var dropdown_item = component.exports;
      dropdown_item.install = function(Vue2) {
        Vue2.component(dropdown_item.name, dropdown_item);
      };
      __webpack_exports__["default"] = dropdown_item;
    }
  });
})(dropdownItem);
var DropdownItem = /* @__PURE__ */ getDefaultExportFromCjs(dropdownItem.exports);
var _sfc_main$C = Vue.extend({
  name: "n8n-action-dropdown",
  components: {
    ElDropdownMenu: DropdownMenu,
    ElDropdown: Dropdown,
    ElDropdownItem: DropdownItem,
    N8nIcon
  },
  props: {
    items: {
      type: Array,
      required: true
    },
    placement: {
      type: String,
      default: "bottom",
      validator: (value) => ["top", "top-end", "top-start", "bottom", "bottom-end", "bottom-start"].includes(value)
    },
    activatorIcon: {
      type: String,
      default: "ellipsis-v"
    },
    iconSize: {
      type: String,
      default: "medium",
      validator: (value) => ["small", "medium", "large"].includes(value)
    },
    trigger: {
      type: String,
      default: "click",
      validator: (value) => ["click", "hover"].includes(value)
    }
  },
  methods: {
    onSelect(action) {
      this.$emit("select", action);
    }
  }
});
const activator = "_activator_lf4ng_1";
const itemContainer$2 = "_itemContainer_lf4ng_16";
const icon$3 = "_icon_lf4ng_20";
const hasCustomStyling = "_hasCustomStyling_lf4ng_28";
var style0$y = {
  activator,
  itemContainer: itemContainer$2,
  icon: icon$3,
  hasCustomStyling
};
var _sfc_render$F = function render9() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: ["action-dropdown-container", _vm.$style.actionDropdownContainer] }, [_c("el-dropdown", { attrs: { "placement": _vm.placement, "trigger": _vm.trigger }, on: { "command": _vm.onSelect } }, [_c("div", { class: _vm.$style.activator, on: { "click": function($event) {
    $event.preventDefault();
  } } }, [_c("n8n-icon", { attrs: { "icon": _vm.activatorIcon } })], 1), _c("el-dropdown-menu", { class: _vm.$style.userActionsMenu, attrs: { "slot": "dropdown" }, slot: "dropdown" }, _vm._l(_vm.items, function(item2) {
    return _c("el-dropdown-item", { key: item2.id, attrs: { "command": item2.id, "disabled": item2.disabled, "divided": item2.divided } }, [_c("div", { class: {
      [_vm.$style.itemContainer]: true,
      [_vm.$style.hasCustomStyling]: item2.customClass !== void 0,
      [item2.customClass]: item2.customClass !== void 0
    } }, [item2.icon ? _c("span", { class: _vm.$style.icon }, [_c("n8n-icon", { attrs: { "icon": item2.icon, "size": item2.iconSize } })], 1) : _vm._e(), _c("span", { class: _vm.$style.label }, [_vm._v(" " + _vm._s(item2.label) + " ")])])]);
  }), 1)], 1)], 1);
};
var _sfc_staticRenderFns$F = [];
const __cssModules$y = {
  "$style": style0$y
};
function _sfc_injectStyles$y(ctx2) {
  for (var key2 in __cssModules$y) {
    this[key2] = __cssModules$y[key2];
  }
}
var __component__$F = /* @__PURE__ */ normalizeComponent(
  _sfc_main$C,
  _sfc_render$F,
  _sfc_staticRenderFns$F,
  false,
  _sfc_injectStyles$y,
  null,
  null,
  null
);
var N8nActionDropdown = __component__$F.exports;
var _sfc_main$B = Vue.extend({
  name: "n8n-action-toggle",
  components: {
    ElDropdown: Dropdown,
    ElDropdownMenu: DropdownMenu,
    ElDropdownItem: DropdownItem,
    N8nIcon
  },
  props: {
    actions: {
      type: Array,
      default: () => []
    },
    placement: {
      type: String,
      default: "bottom",
      validator: (value) => ["top", "top-end", "top-start", "bottom", "bottom-end", "bottom-start"].includes(value)
    },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["mini", "small", "medium"].includes(value)
    },
    iconSize: {
      type: String
    },
    theme: {
      type: String,
      default: "default",
      validator: (value) => ["default", "dark"].includes(value)
    }
  },
  methods: {
    onCommand(value) {
      this.$emit("action", value);
    },
    onVisibleChange(value) {
      this.$emit("visible-change", value);
    }
  }
});
const container$b = "_container_cqn9p_1";
const button$2 = "_button_cqn9p_5";
const dark = "_dark_cqn9p_18";
const iconContainer = "_iconContainer_cqn9p_25";
var style0$x = {
  container: container$b,
  button: button$2,
  dark,
  iconContainer
};
var _sfc_render$E = function render10() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("span", { class: _vm.$style.container }, [_c("el-dropdown", { attrs: { "placement": _vm.placement, "size": _vm.size, "trigger": "click" }, on: { "command": _vm.onCommand, "visible-change": _vm.onVisibleChange }, nativeOn: { "click": function($event) {
    $event.stopPropagation();
  } } }, [_c("span", { class: { [_vm.$style.button]: true, [_vm.$style[_vm.theme]]: !!_vm.theme } }, [_c(_vm.$options.components.N8nIcon, { tag: "component", attrs: { "icon": "ellipsis-v", "size": _vm.iconSize } })], 1), _c("el-dropdown-menu", { attrs: { "slot": "dropdown" }, slot: "dropdown" }, _vm._l(_vm.actions, function(action) {
    return _c("el-dropdown-item", { key: action.value, attrs: { "command": action.value, "disabled": action.disabled } }, [_vm._v(" " + _vm._s(action.label) + " "), _c("div", { class: _vm.$style.iconContainer }, [action.type === "external-link" ? _c(_vm.$options.components.N8nIcon, { tag: "component", attrs: { "icon": "external-link-alt", "size": "xsmall", "color": "text-base" } }) : _vm._e()], 1)]);
  }), 1)], 1)], 1);
};
var _sfc_staticRenderFns$E = [];
const __cssModules$x = {
  "$style": style0$x
};
function _sfc_injectStyles$x(ctx2) {
  for (var key2 in __cssModules$x) {
    this[key2] = __cssModules$x[key2];
  }
}
var __component__$E = /* @__PURE__ */ normalizeComponent(
  _sfc_main$B,
  _sfc_render$E,
  _sfc_staticRenderFns$E,
  false,
  _sfc_injectStyles$x,
  null,
  null,
  null
);
var N8nActionToggle = __component__$E.exports;
var vue2BoringAvatars_umd = { exports: {} };
(function(module, exports) {
  (function webpackUniversalModuleDefinition(root2, factory2) {
    module.exports = factory2();
  })(typeof self !== "undefined" ? self : commonjsGlobal$1, function() {
    return function(modules) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          i: moduleId,
          l: false,
          exports: {}
        };
        modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports2, name, getter) {
        if (!__webpack_require__.o(exports2, name)) {
          Object.defineProperty(exports2, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports2) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports2, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key2 in value)
            __webpack_require__.d(ns, key2, function(key3) {
              return value[key3];
            }.bind(null, key2));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? function getDefault() {
          return module2["default"];
        } : function getModuleExports() {
          return module2;
        };
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      __webpack_require__.p = "";
      return __webpack_require__(__webpack_require__.s = "fb15");
    }({
      "00ee": function(module2, exports2, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__("b622");
        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        var test2 = {};
        test2[TO_STRING_TAG] = "z";
        module2.exports = String(test2) === "[object z]";
      },
      "0366": function(module2, exports2, __webpack_require__) {
        var aFunction = __webpack_require__("1c0b");
        module2.exports = function(fn, that, length) {
          aFunction(fn);
          if (that === void 0)
            return fn;
          switch (length) {
            case 0:
              return function() {
                return fn.call(that);
              };
            case 1:
              return function(a2) {
                return fn.call(that, a2);
              };
            case 2:
              return function(a2, b2) {
                return fn.call(that, a2, b2);
              };
            case 3:
              return function(a2, b2, c) {
                return fn.call(that, a2, b2, c);
              };
          }
          return function() {
            return fn.apply(that, arguments);
          };
        };
      },
      "06cf": function(module2, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var propertyIsEnumerableModule = __webpack_require__("d1e7");
        var createPropertyDescriptor = __webpack_require__("5c6c");
        var toIndexedObject = __webpack_require__("fc6a");
        var toPrimitive = __webpack_require__("c04e");
        var has2 = __webpack_require__("5135");
        var IE8_DOM_DEFINE = __webpack_require__("0cfb");
        var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        exports2.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P2) {
          O = toIndexedObject(O);
          P2 = toPrimitive(P2, true);
          if (IE8_DOM_DEFINE)
            try {
              return $getOwnPropertyDescriptor(O, P2);
            } catch (error2) {
            }
          if (has2(O, P2))
            return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P2), O[P2]);
        };
      },
      "0cb2": function(module2, exports2, __webpack_require__) {
        var toObject2 = __webpack_require__("7b0b");
        var floor2 = Math.floor;
        var replace3 = "".replace;
        var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
        var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;
        module2.exports = function(matched, str, position, captures, namedCaptures, replacement) {
          var tailPos = position + matched.length;
          var m2 = captures.length;
          var symbols2 = SUBSTITUTION_SYMBOLS_NO_NAMED;
          if (namedCaptures !== void 0) {
            namedCaptures = toObject2(namedCaptures);
            symbols2 = SUBSTITUTION_SYMBOLS;
          }
          return replace3.call(replacement, symbols2, function(match2, ch) {
            var capture;
            switch (ch.charAt(0)) {
              case "$":
                return "$";
              case "&":
                return matched;
              case "`":
                return str.slice(0, position);
              case "'":
                return str.slice(tailPos);
              case "<":
                capture = namedCaptures[ch.slice(1, -1)];
                break;
              default:
                var n = +ch;
                if (n === 0)
                  return match2;
                if (n > m2) {
                  var f = floor2(n / 10);
                  if (f === 0)
                    return match2;
                  if (f <= m2)
                    return captures[f - 1] === void 0 ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                  return match2;
                }
                capture = captures[n - 1];
            }
            return capture === void 0 ? "" : capture;
          });
        };
      },
      "0cfb": function(module2, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var fails = __webpack_require__("d039");
        var createElement = __webpack_require__("cc12");
        module2.exports = !DESCRIPTORS && !fails(function() {
          return Object.defineProperty(createElement("div"), "a", {
            get: function() {
              return 7;
            }
          }).a != 7;
        });
      },
      "14c3": function(module2, exports2, __webpack_require__) {
        var classof = __webpack_require__("c6b6");
        var regexpExec = __webpack_require__("9263");
        module2.exports = function(R, S) {
          var exec = R.exec;
          if (typeof exec === "function") {
            var result2 = exec.call(R, S);
            if (typeof result2 !== "object") {
              throw TypeError("RegExp exec method returned something other than an Object or null");
            }
            return result2;
          }
          if (classof(R) !== "RegExp") {
            throw TypeError("RegExp#exec called on incompatible receiver");
          }
          return regexpExec.call(R, S);
        };
      },
      "1be4": function(module2, exports2, __webpack_require__) {
        var getBuiltIn = __webpack_require__("d066");
        module2.exports = getBuiltIn("document", "documentElement");
      },
      "1c0b": function(module2, exports2) {
        module2.exports = function(it2) {
          if (typeof it2 != "function") {
            throw TypeError(String(it2) + " is not a function");
          }
          return it2;
        };
      },
      "1c7e": function(module2, exports2, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__("b622");
        var ITERATOR = wellKnownSymbol("iterator");
        var SAFE_CLOSING = false;
        try {
          var called = 0;
          var iteratorWithReturn = {
            next: function() {
              return { done: !!called++ };
            },
            "return": function() {
              SAFE_CLOSING = true;
            }
          };
          iteratorWithReturn[ITERATOR] = function() {
            return this;
          };
          Array.from(iteratorWithReturn, function() {
            throw 2;
          });
        } catch (error2) {
        }
        module2.exports = function(exec, SKIP_CLOSING) {
          if (!SKIP_CLOSING && !SAFE_CLOSING)
            return false;
          var ITERATION_SUPPORT = false;
          try {
            var object = {};
            object[ITERATOR] = function() {
              return {
                next: function() {
                  return { done: ITERATION_SUPPORT = true };
                }
              };
            };
            exec(object);
          } catch (error2) {
          }
          return ITERATION_SUPPORT;
        };
      },
      "1d80": function(module2, exports2) {
        module2.exports = function(it2) {
          if (it2 == void 0)
            throw TypeError("Can't call method on " + it2);
          return it2;
        };
      },
      "1dde": function(module2, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        var wellKnownSymbol = __webpack_require__("b622");
        var V8_VERSION = __webpack_require__("2d00");
        var SPECIES = wellKnownSymbol("species");
        module2.exports = function(METHOD_NAME) {
          return V8_VERSION >= 51 || !fails(function() {
            var array = [];
            var constructor = array.constructor = {};
            constructor[SPECIES] = function() {
              return { foo: 1 };
            };
            return array[METHOD_NAME](Boolean).foo !== 1;
          });
        };
      },
      "23cb": function(module2, exports2, __webpack_require__) {
        var toInteger = __webpack_require__("a691");
        var max = Math.max;
        var min = Math.min;
        module2.exports = function(index2, length) {
          var integer = toInteger(index2);
          return integer < 0 ? max(integer + length, 0) : min(integer, length);
        };
      },
      "23e7": function(module2, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
        var createNonEnumerableProperty = __webpack_require__("9112");
        var redefine = __webpack_require__("6eeb");
        var setGlobal = __webpack_require__("ce4e");
        var copyConstructorProperties = __webpack_require__("e893");
        var isForced = __webpack_require__("94ca");
        module2.exports = function(options2, source) {
          var TARGET = options2.target;
          var GLOBAL = options2.global;
          var STATIC = options2.stat;
          var FORCED, target2, key2, targetProperty, sourceProperty, descriptor;
          if (GLOBAL) {
            target2 = global2;
          } else if (STATIC) {
            target2 = global2[TARGET] || setGlobal(TARGET, {});
          } else {
            target2 = (global2[TARGET] || {}).prototype;
          }
          if (target2)
            for (key2 in source) {
              sourceProperty = source[key2];
              if (options2.noTargetGet) {
                descriptor = getOwnPropertyDescriptor(target2, key2);
                targetProperty = descriptor && descriptor.value;
              } else
                targetProperty = target2[key2];
              FORCED = isForced(GLOBAL ? key2 : TARGET + (STATIC ? "." : "#") + key2, options2.forced);
              if (!FORCED && targetProperty !== void 0) {
                if (typeof sourceProperty === typeof targetProperty)
                  continue;
                copyConstructorProperties(sourceProperty, targetProperty);
              }
              if (options2.sham || targetProperty && targetProperty.sham) {
                createNonEnumerableProperty(sourceProperty, "sham", true);
              }
              redefine(target2, key2, sourceProperty, options2);
            }
        };
      },
      "241c": function(module2, exports2, __webpack_require__) {
        var internalObjectKeys = __webpack_require__("ca84");
        var enumBugKeys = __webpack_require__("7839");
        var hiddenKeys = enumBugKeys.concat("length", "prototype");
        exports2.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
          return internalObjectKeys(O, hiddenKeys);
        };
      },
      "2a62": function(module2, exports2, __webpack_require__) {
        var anObject = __webpack_require__("825a");
        module2.exports = function(iterator) {
          var returnMethod = iterator["return"];
          if (returnMethod !== void 0) {
            return anObject(returnMethod.call(iterator)).value;
          }
        };
      },
      "2d00": function(module2, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var userAgent2 = __webpack_require__("342f");
        var process = global2.process;
        var versions = process && process.versions;
        var v8 = versions && versions.v8;
        var match2, version;
        if (v8) {
          match2 = v8.split(".");
          version = match2[0] < 4 ? 1 : match2[0] + match2[1];
        } else if (userAgent2) {
          match2 = userAgent2.match(/Edge\/(\d+)/);
          if (!match2 || match2[1] >= 74) {
            match2 = userAgent2.match(/Chrome\/(\d+)/);
            if (match2)
              version = match2[1];
          }
        }
        module2.exports = version && +version;
      },
      "342f": function(module2, exports2, __webpack_require__) {
        var getBuiltIn = __webpack_require__("d066");
        module2.exports = getBuiltIn("navigator", "userAgent") || "";
      },
      "35a1": function(module2, exports2, __webpack_require__) {
        var classof = __webpack_require__("f5df");
        var Iterators = __webpack_require__("3f8c");
        var wellKnownSymbol = __webpack_require__("b622");
        var ITERATOR = wellKnownSymbol("iterator");
        module2.exports = function(it2) {
          if (it2 != void 0)
            return it2[ITERATOR] || it2["@@iterator"] || Iterators[classof(it2)];
        };
      },
      "37e8": function(module2, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var definePropertyModule = __webpack_require__("9bf2");
        var anObject = __webpack_require__("825a");
        var objectKeys = __webpack_require__("df75");
        module2.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
          anObject(O);
          var keys = objectKeys(Properties);
          var length = keys.length;
          var index2 = 0;
          var key2;
          while (length > index2)
            definePropertyModule.f(O, key2 = keys[index2++], Properties[key2]);
          return O;
        };
      },
      "3bbe": function(module2, exports2, __webpack_require__) {
        var isObject2 = __webpack_require__("861d");
        module2.exports = function(it2) {
          if (!isObject2(it2) && it2 !== null) {
            throw TypeError("Can't set " + String(it2) + " as a prototype");
          }
          return it2;
        };
      },
      "3ca3": function(module2, exports2, __webpack_require__) {
        var charAt = __webpack_require__("6547").charAt;
        var InternalStateModule = __webpack_require__("69f3");
        var defineIterator = __webpack_require__("7dd0");
        var STRING_ITERATOR = "String Iterator";
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
        defineIterator(String, "String", function(iterated) {
          setInternalState(this, {
            type: STRING_ITERATOR,
            string: String(iterated),
            index: 0
          });
        }, function next2() {
          var state = getInternalState(this);
          var string = state.string;
          var index2 = state.index;
          var point;
          if (index2 >= string.length)
            return { value: void 0, done: true };
          point = charAt(string, index2);
          state.index += point.length;
          return { value: point, done: false };
        });
      },
      "3f8c": function(module2, exports2) {
        module2.exports = {};
      },
      "428f": function(module2, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        module2.exports = global2;
      },
      "44ad": function(module2, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        var classof = __webpack_require__("c6b6");
        var split = "".split;
        module2.exports = fails(function() {
          return !Object("z").propertyIsEnumerable(0);
        }) ? function(it2) {
          return classof(it2) == "String" ? split.call(it2, "") : Object(it2);
        } : Object;
      },
      "44d2": function(module2, exports2, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__("b622");
        var create2 = __webpack_require__("7c73");
        var definePropertyModule = __webpack_require__("9bf2");
        var UNSCOPABLES = wellKnownSymbol("unscopables");
        var ArrayPrototype = Array.prototype;
        if (ArrayPrototype[UNSCOPABLES] == void 0) {
          definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
            configurable: true,
            value: create2(null)
          });
        }
        module2.exports = function(key2) {
          ArrayPrototype[UNSCOPABLES][key2] = true;
        };
      },
      "4930": function(module2, exports2, __webpack_require__) {
        var V8_VERSION = __webpack_require__("2d00");
        var fails = __webpack_require__("d039");
        module2.exports = !!Object.getOwnPropertySymbols && !fails(function() {
          return !String(Symbol()) || !Symbol.sham && V8_VERSION && V8_VERSION < 41;
        });
      },
      "4d64": function(module2, exports2, __webpack_require__) {
        var toIndexedObject = __webpack_require__("fc6a");
        var toLength = __webpack_require__("50c4");
        var toAbsoluteIndex = __webpack_require__("23cb");
        var createMethod = function(IS_INCLUDES) {
          return function($this, el2, fromIndex) {
            var O = toIndexedObject($this);
            var length = toLength(O.length);
            var index2 = toAbsoluteIndex(fromIndex, length);
            var value;
            if (IS_INCLUDES && el2 != el2)
              while (length > index2) {
                value = O[index2++];
                if (value != value)
                  return true;
              }
            else
              for (; length > index2; index2++) {
                if ((IS_INCLUDES || index2 in O) && O[index2] === el2)
                  return IS_INCLUDES || index2 || 0;
              }
            return !IS_INCLUDES && -1;
          };
        };
        module2.exports = {
          includes: createMethod(true),
          indexOf: createMethod(false)
        };
      },
      "4df4": function(module2, exports2, __webpack_require__) {
        var bind2 = __webpack_require__("0366");
        var toObject2 = __webpack_require__("7b0b");
        var callWithSafeIterationClosing = __webpack_require__("9bdd");
        var isArrayIteratorMethod = __webpack_require__("e95a");
        var toLength = __webpack_require__("50c4");
        var createProperty = __webpack_require__("8418");
        var getIteratorMethod = __webpack_require__("35a1");
        module2.exports = function from(arrayLike) {
          var O = toObject2(arrayLike);
          var C = typeof this == "function" ? this : Array;
          var argumentsLength = arguments.length;
          var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
          var mapping = mapfn !== void 0;
          var iteratorMethod = getIteratorMethod(O);
          var index2 = 0;
          var length, result2, step, iterator, next2, value;
          if (mapping)
            mapfn = bind2(mapfn, argumentsLength > 2 ? arguments[2] : void 0, 2);
          if (iteratorMethod != void 0 && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
            iterator = iteratorMethod.call(O);
            next2 = iterator.next;
            result2 = new C();
            for (; !(step = next2.call(iterator)).done; index2++) {
              value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index2], true) : step.value;
              createProperty(result2, index2, value);
            }
          } else {
            length = toLength(O.length);
            result2 = new C(length);
            for (; length > index2; index2++) {
              value = mapping ? mapfn(O[index2], index2) : O[index2];
              createProperty(result2, index2, value);
            }
          }
          result2.length = index2;
          return result2;
        };
      },
      "50c4": function(module2, exports2, __webpack_require__) {
        var toInteger = __webpack_require__("a691");
        var min = Math.min;
        module2.exports = function(argument) {
          return argument > 0 ? min(toInteger(argument), 9007199254740991) : 0;
        };
      },
      "5135": function(module2, exports2, __webpack_require__) {
        var toObject2 = __webpack_require__("7b0b");
        var hasOwnProperty2 = {}.hasOwnProperty;
        module2.exports = function hasOwn2(it2, key2) {
          return hasOwnProperty2.call(toObject2(it2), key2);
        };
      },
      "5319": function(module2, exports2, __webpack_require__) {
        var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
        var anObject = __webpack_require__("825a");
        var toLength = __webpack_require__("50c4");
        var toInteger = __webpack_require__("a691");
        var requireObjectCoercible = __webpack_require__("1d80");
        var advanceStringIndex = __webpack_require__("8aa5");
        var getSubstitution = __webpack_require__("0cb2");
        var regExpExec = __webpack_require__("14c3");
        var max = Math.max;
        var min = Math.min;
        var maybeToString = function(it2) {
          return it2 === void 0 ? it2 : String(it2);
        };
        fixRegExpWellKnownSymbolLogic("replace", 2, function(REPLACE, nativeReplace, maybeCallNative, reason) {
          var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
          var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
          var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? "$" : "$0";
          return [
            function replace3(searchValue, replaceValue) {
              var O = requireObjectCoercible(this);
              var replacer = searchValue == void 0 ? void 0 : searchValue[REPLACE];
              return replacer !== void 0 ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);
            },
            function(regexp, replaceValue) {
              if (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0 || typeof replaceValue === "string" && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1) {
                var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
                if (res.done)
                  return res.value;
              }
              var rx2 = anObject(regexp);
              var S = String(this);
              var functionalReplace = typeof replaceValue === "function";
              if (!functionalReplace)
                replaceValue = String(replaceValue);
              var global2 = rx2.global;
              if (global2) {
                var fullUnicode = rx2.unicode;
                rx2.lastIndex = 0;
              }
              var results = [];
              while (true) {
                var result2 = regExpExec(rx2, S);
                if (result2 === null)
                  break;
                results.push(result2);
                if (!global2)
                  break;
                var matchStr = String(result2[0]);
                if (matchStr === "")
                  rx2.lastIndex = advanceStringIndex(S, toLength(rx2.lastIndex), fullUnicode);
              }
              var accumulatedResult = "";
              var nextSourcePosition = 0;
              for (var i = 0; i < results.length; i++) {
                result2 = results[i];
                var matched = String(result2[0]);
                var position = max(min(toInteger(result2.index), S.length), 0);
                var captures = [];
                for (var j = 1; j < result2.length; j++)
                  captures.push(maybeToString(result2[j]));
                var namedCaptures = result2.groups;
                if (functionalReplace) {
                  var replacerArgs = [matched].concat(captures, position, S);
                  if (namedCaptures !== void 0)
                    replacerArgs.push(namedCaptures);
                  var replacement = String(replaceValue.apply(void 0, replacerArgs));
                } else {
                  replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
                }
                if (position >= nextSourcePosition) {
                  accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
                  nextSourcePosition = position + matched.length;
                }
              }
              return accumulatedResult + S.slice(nextSourcePosition);
            }
          ];
        });
      },
      "5692": function(module2, exports2, __webpack_require__) {
        var IS_PURE = __webpack_require__("c430");
        var store = __webpack_require__("c6cd");
        (module2.exports = function(key2, value) {
          return store[key2] || (store[key2] = value !== void 0 ? value : {});
        })("versions", []).push({
          version: "3.13.0",
          mode: IS_PURE ? "pure" : "global",
          copyright: "\xA9 2021 Denis Pushkarev (zloirock.ru)"
        });
      },
      "56ef": function(module2, exports2, __webpack_require__) {
        var getBuiltIn = __webpack_require__("d066");
        var getOwnPropertyNamesModule = __webpack_require__("241c");
        var getOwnPropertySymbolsModule = __webpack_require__("7418");
        var anObject = __webpack_require__("825a");
        module2.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys2(it2) {
          var keys = getOwnPropertyNamesModule.f(anObject(it2));
          var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
          return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it2)) : keys;
        };
      },
      "5899": function(module2, exports2) {
        module2.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
      },
      "58a8": function(module2, exports2, __webpack_require__) {
        var requireObjectCoercible = __webpack_require__("1d80");
        var whitespaces = __webpack_require__("5899");
        var whitespace2 = "[" + whitespaces + "]";
        var ltrim = RegExp("^" + whitespace2 + whitespace2 + "*");
        var rtrim = RegExp(whitespace2 + whitespace2 + "*$");
        var createMethod = function(TYPE) {
          return function($this) {
            var string = String(requireObjectCoercible($this));
            if (TYPE & 1)
              string = string.replace(ltrim, "");
            if (TYPE & 2)
              string = string.replace(rtrim, "");
            return string;
          };
        };
        module2.exports = {
          start: createMethod(1),
          end: createMethod(2),
          trim: createMethod(3)
        };
      },
      "5c6c": function(module2, exports2) {
        module2.exports = function(bitmap, value) {
          return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value
          };
        };
      },
      "6547": function(module2, exports2, __webpack_require__) {
        var toInteger = __webpack_require__("a691");
        var requireObjectCoercible = __webpack_require__("1d80");
        var createMethod = function(CONVERT_TO_STRING) {
          return function($this, pos) {
            var S = String(requireObjectCoercible($this));
            var position = toInteger(pos);
            var size = S.length;
            var first, second;
            if (position < 0 || position >= size)
              return CONVERT_TO_STRING ? "" : void 0;
            first = S.charCodeAt(position);
            return first < 55296 || first > 56319 || position + 1 === size || (second = S.charCodeAt(position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
          };
        };
        module2.exports = {
          codeAt: createMethod(false),
          charAt: createMethod(true)
        };
      },
      "69f3": function(module2, exports2, __webpack_require__) {
        var NATIVE_WEAK_MAP = __webpack_require__("7f9a");
        var global2 = __webpack_require__("da84");
        var isObject2 = __webpack_require__("861d");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var objectHas = __webpack_require__("5135");
        var shared2 = __webpack_require__("c6cd");
        var sharedKey = __webpack_require__("f772");
        var hiddenKeys = __webpack_require__("d012");
        var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
        var WeakMap2 = global2.WeakMap;
        var set3, get2, has2;
        var enforce = function(it2) {
          return has2(it2) ? get2(it2) : set3(it2, {});
        };
        var getterFor = function(TYPE) {
          return function(it2) {
            var state;
            if (!isObject2(it2) || (state = get2(it2)).type !== TYPE) {
              throw TypeError("Incompatible receiver, " + TYPE + " required");
            }
            return state;
          };
        };
        if (NATIVE_WEAK_MAP || shared2.state) {
          var store = shared2.state || (shared2.state = new WeakMap2());
          var wmget = store.get;
          var wmhas = store.has;
          var wmset = store.set;
          set3 = function(it2, metadata) {
            if (wmhas.call(store, it2))
              throw new TypeError(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it2;
            wmset.call(store, it2, metadata);
            return metadata;
          };
          get2 = function(it2) {
            return wmget.call(store, it2) || {};
          };
          has2 = function(it2) {
            return wmhas.call(store, it2);
          };
        } else {
          var STATE = sharedKey("state");
          hiddenKeys[STATE] = true;
          set3 = function(it2, metadata) {
            if (objectHas(it2, STATE))
              throw new TypeError(OBJECT_ALREADY_INITIALIZED);
            metadata.facade = it2;
            createNonEnumerableProperty(it2, STATE, metadata);
            return metadata;
          };
          get2 = function(it2) {
            return objectHas(it2, STATE) ? it2[STATE] : {};
          };
          has2 = function(it2) {
            return objectHas(it2, STATE);
          };
        }
        module2.exports = {
          set: set3,
          get: get2,
          has: has2,
          enforce,
          getterFor
        };
      },
      "6eeb": function(module2, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var has2 = __webpack_require__("5135");
        var setGlobal = __webpack_require__("ce4e");
        var inspectSource = __webpack_require__("8925");
        var InternalStateModule = __webpack_require__("69f3");
        var getInternalState = InternalStateModule.get;
        var enforceInternalState = InternalStateModule.enforce;
        var TEMPLATE = String(String).split("String");
        (module2.exports = function(O, key2, value, options2) {
          var unsafe = options2 ? !!options2.unsafe : false;
          var simple2 = options2 ? !!options2.enumerable : false;
          var noTargetGet = options2 ? !!options2.noTargetGet : false;
          var state;
          if (typeof value == "function") {
            if (typeof key2 == "string" && !has2(value, "name")) {
              createNonEnumerableProperty(value, "name", key2);
            }
            state = enforceInternalState(value);
            if (!state.source) {
              state.source = TEMPLATE.join(typeof key2 == "string" ? key2 : "");
            }
          }
          if (O === global2) {
            if (simple2)
              O[key2] = value;
            else
              setGlobal(key2, value);
            return;
          } else if (!unsafe) {
            delete O[key2];
          } else if (!noTargetGet && O[key2]) {
            simple2 = true;
          }
          if (simple2)
            O[key2] = value;
          else
            createNonEnumerableProperty(O, key2, value);
        })(Function.prototype, "toString", function toString() {
          return typeof this == "function" && getInternalState(this).source || inspectSource(this);
        });
      },
      "7156": function(module2, exports2, __webpack_require__) {
        var isObject2 = __webpack_require__("861d");
        var setPrototypeOf = __webpack_require__("d2bb");
        module2.exports = function($this, dummy, Wrapper) {
          var NewTarget, NewTargetPrototype;
          if (setPrototypeOf && typeof (NewTarget = dummy.constructor) == "function" && NewTarget !== Wrapper && isObject2(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype)
            setPrototypeOf($this, NewTargetPrototype);
          return $this;
        };
      },
      "7418": function(module2, exports2) {
        exports2.f = Object.getOwnPropertySymbols;
      },
      "7839": function(module2, exports2) {
        module2.exports = [
          "constructor",
          "hasOwnProperty",
          "isPrototypeOf",
          "propertyIsEnumerable",
          "toLocaleString",
          "toString",
          "valueOf"
        ];
      },
      "7b0b": function(module2, exports2, __webpack_require__) {
        var requireObjectCoercible = __webpack_require__("1d80");
        module2.exports = function(argument) {
          return Object(requireObjectCoercible(argument));
        };
      },
      "7c73": function(module2, exports2, __webpack_require__) {
        var anObject = __webpack_require__("825a");
        var defineProperties = __webpack_require__("37e8");
        var enumBugKeys = __webpack_require__("7839");
        var hiddenKeys = __webpack_require__("d012");
        var html = __webpack_require__("1be4");
        var documentCreateElement = __webpack_require__("cc12");
        var sharedKey = __webpack_require__("f772");
        var GT2 = ">";
        var LT2 = "<";
        var PROTOTYPE = "prototype";
        var SCRIPT = "script";
        var IE_PROTO = sharedKey("IE_PROTO");
        var EmptyConstructor = function() {
        };
        var scriptTag = function(content2) {
          return LT2 + SCRIPT + GT2 + content2 + LT2 + "/" + SCRIPT + GT2;
        };
        var NullProtoObjectViaActiveX = function(activeXDocument2) {
          activeXDocument2.write(scriptTag(""));
          activeXDocument2.close();
          var temp = activeXDocument2.parentWindow.Object;
          activeXDocument2 = null;
          return temp;
        };
        var NullProtoObjectViaIFrame = function() {
          var iframe = documentCreateElement("iframe");
          var JS = "java" + SCRIPT + ":";
          var iframeDocument;
          iframe.style.display = "none";
          html.appendChild(iframe);
          iframe.src = String(JS);
          iframeDocument = iframe.contentWindow.document;
          iframeDocument.open();
          iframeDocument.write(scriptTag("document.F=Object"));
          iframeDocument.close();
          return iframeDocument.F;
        };
        var activeXDocument;
        var NullProtoObject = function() {
          try {
            activeXDocument = document.domain && new ActiveXObject("htmlfile");
          } catch (error2) {
          }
          NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
          var length = enumBugKeys.length;
          while (length--)
            delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
          return NullProtoObject();
        };
        hiddenKeys[IE_PROTO] = true;
        module2.exports = Object.create || function create2(O, Properties) {
          var result2;
          if (O !== null) {
            EmptyConstructor[PROTOTYPE] = anObject(O);
            result2 = new EmptyConstructor();
            EmptyConstructor[PROTOTYPE] = null;
            result2[IE_PROTO] = O;
          } else
            result2 = NullProtoObject();
          return Properties === void 0 ? result2 : defineProperties(result2, Properties);
        };
      },
      "7dd0": function(module2, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var createIteratorConstructor = __webpack_require__("9ed3");
        var getPrototypeOf = __webpack_require__("e163");
        var setPrototypeOf = __webpack_require__("d2bb");
        var setToStringTag = __webpack_require__("d44e");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var redefine = __webpack_require__("6eeb");
        var wellKnownSymbol = __webpack_require__("b622");
        var IS_PURE = __webpack_require__("c430");
        var Iterators = __webpack_require__("3f8c");
        var IteratorsCore = __webpack_require__("ae93");
        var IteratorPrototype = IteratorsCore.IteratorPrototype;
        var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
        var ITERATOR = wellKnownSymbol("iterator");
        var KEYS = "keys";
        var VALUES = "values";
        var ENTRIES = "entries";
        var returnThis = function() {
          return this;
        };
        module2.exports = function(Iterable, NAME, IteratorConstructor, next2, DEFAULT2, IS_SET, FORCED) {
          createIteratorConstructor(IteratorConstructor, NAME, next2);
          var getIterationMethod = function(KIND) {
            if (KIND === DEFAULT2 && defaultIterator)
              return defaultIterator;
            if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
              return IterablePrototype[KIND];
            switch (KIND) {
              case KEYS:
                return function keys() {
                  return new IteratorConstructor(this, KIND);
                };
              case VALUES:
                return function values() {
                  return new IteratorConstructor(this, KIND);
                };
              case ENTRIES:
                return function entries() {
                  return new IteratorConstructor(this, KIND);
                };
            }
            return function() {
              return new IteratorConstructor(this);
            };
          };
          var TO_STRING_TAG = NAME + " Iterator";
          var INCORRECT_VALUES_NAME = false;
          var IterablePrototype = Iterable.prototype;
          var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT2 && IterablePrototype[DEFAULT2];
          var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT2);
          var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
          var CurrentIteratorPrototype, methods, KEY;
          if (anyNativeIterator) {
            CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
            if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
              if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                if (setPrototypeOf) {
                  setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                } else if (typeof CurrentIteratorPrototype[ITERATOR] != "function") {
                  createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
                }
              }
              setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
              if (IS_PURE)
                Iterators[TO_STRING_TAG] = returnThis;
            }
          }
          if (DEFAULT2 == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
              return nativeIterator.call(this);
            };
          }
          if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
            createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
          }
          Iterators[NAME] = defaultIterator;
          if (DEFAULT2) {
            methods = {
              values: getIterationMethod(VALUES),
              keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
              entries: getIterationMethod(ENTRIES)
            };
            if (FORCED)
              for (KEY in methods) {
                if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                  redefine(IterablePrototype, KEY, methods[KEY]);
                }
              }
            else
              $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
          }
          return methods;
        };
      },
      "7f9a": function(module2, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var inspectSource = __webpack_require__("8925");
        var WeakMap2 = global2.WeakMap;
        module2.exports = typeof WeakMap2 === "function" && /native code/.test(inspectSource(WeakMap2));
      },
      "825a": function(module2, exports2, __webpack_require__) {
        var isObject2 = __webpack_require__("861d");
        module2.exports = function(it2) {
          if (!isObject2(it2)) {
            throw TypeError(String(it2) + " is not an object");
          }
          return it2;
        };
      },
      "83ab": function(module2, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        module2.exports = !fails(function() {
          return Object.defineProperty({}, 1, { get: function() {
            return 7;
          } })[1] != 7;
        });
      },
      "8418": function(module2, exports2, __webpack_require__) {
        var toPrimitive = __webpack_require__("c04e");
        var definePropertyModule = __webpack_require__("9bf2");
        var createPropertyDescriptor = __webpack_require__("5c6c");
        module2.exports = function(object, key2, value) {
          var propertyKey = toPrimitive(key2);
          if (propertyKey in object)
            definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
          else
            object[propertyKey] = value;
        };
      },
      "861d": function(module2, exports2) {
        module2.exports = function(it2) {
          return typeof it2 === "object" ? it2 !== null : typeof it2 === "function";
        };
      },
      "8875": function(module2, exports2, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(root2, factory2) {
          {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory2, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports2, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module2.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          }
        })(typeof self !== "undefined" ? self : this, function() {
          function getCurrentScript() {
            var descriptor = Object.getOwnPropertyDescriptor(document, "currentScript");
            if (!descriptor && "currentScript" in document && document.currentScript) {
              return document.currentScript;
            }
            if (descriptor && descriptor.get !== getCurrentScript && document.currentScript) {
              return document.currentScript;
            }
            try {
              throw new Error();
            } catch (err) {
              var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/ig, ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/ig, stackDetails = ieStackRegExp.exec(err.stack) || ffStackRegExp.exec(err.stack), scriptLocation = stackDetails && stackDetails[1] || false, line = stackDetails && stackDetails[2] || false, currentLocation = document.location.href.replace(document.location.hash, ""), pageSource, inlineScriptSourceRegExp, inlineScriptSource, scripts = document.getElementsByTagName("script");
              if (scriptLocation === currentLocation) {
                pageSource = document.documentElement.outerHTML;
                inlineScriptSourceRegExp = new RegExp("(?:[^\\n]+?\\n){0," + (line - 2) + "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*", "i");
                inlineScriptSource = pageSource.replace(inlineScriptSourceRegExp, "$1").trim();
              }
              for (var i = 0; i < scripts.length; i++) {
                if (scripts[i].readyState === "interactive") {
                  return scripts[i];
                }
                if (scripts[i].src === scriptLocation) {
                  return scripts[i];
                }
                if (scriptLocation === currentLocation && scripts[i].innerHTML && scripts[i].innerHTML.trim() === inlineScriptSource) {
                  return scripts[i];
                }
              }
              return null;
            }
          }
          return getCurrentScript;
        });
      },
      "8925": function(module2, exports2, __webpack_require__) {
        var store = __webpack_require__("c6cd");
        var functionToString = Function.toString;
        if (typeof store.inspectSource != "function") {
          store.inspectSource = function(it2) {
            return functionToString.call(it2);
          };
        }
        module2.exports = store.inspectSource;
      },
      "8aa5": function(module2, exports2, __webpack_require__) {
        var charAt = __webpack_require__("6547").charAt;
        module2.exports = function(S, index2, unicode) {
          return index2 + (unicode ? charAt(S, index2).length : 1);
        };
      },
      "90e3": function(module2, exports2) {
        var id2 = 0;
        var postfix = Math.random();
        module2.exports = function(key2) {
          return "Symbol(" + String(key2 === void 0 ? "" : key2) + ")_" + (++id2 + postfix).toString(36);
        };
      },
      "9112": function(module2, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var definePropertyModule = __webpack_require__("9bf2");
        var createPropertyDescriptor = __webpack_require__("5c6c");
        module2.exports = DESCRIPTORS ? function(object, key2, value) {
          return definePropertyModule.f(object, key2, createPropertyDescriptor(1, value));
        } : function(object, key2, value) {
          object[key2] = value;
          return object;
        };
      },
      "9263": function(module2, exports2, __webpack_require__) {
        var regexpFlags = __webpack_require__("ad6d");
        var stickyHelpers = __webpack_require__("9f7f");
        var shared2 = __webpack_require__("5692");
        var nativeExec = RegExp.prototype.exec;
        var nativeReplace = shared2("native-string-replace", String.prototype.replace);
        var patchedExec = nativeExec;
        var UPDATES_LAST_INDEX_WRONG = function() {
          var re1 = /a/;
          var re2 = /b*/g;
          nativeExec.call(re1, "a");
          nativeExec.call(re2, "a");
          return re1.lastIndex !== 0 || re2.lastIndex !== 0;
        }();
        var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;
        var NPCG_INCLUDED = /()??/.exec("")[1] !== void 0;
        var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;
        if (PATCH) {
          patchedExec = function exec(str) {
            var re2 = this;
            var lastIndex, reCopy, match2, i;
            var sticky2 = UNSUPPORTED_Y && re2.sticky;
            var flags2 = regexpFlags.call(re2);
            var source = re2.source;
            var charsAdded = 0;
            var strCopy = str;
            if (sticky2) {
              flags2 = flags2.replace("y", "");
              if (flags2.indexOf("g") === -1) {
                flags2 += "g";
              }
              strCopy = String(str).slice(re2.lastIndex);
              if (re2.lastIndex > 0 && (!re2.multiline || re2.multiline && str[re2.lastIndex - 1] !== "\n")) {
                source = "(?: " + source + ")";
                strCopy = " " + strCopy;
                charsAdded++;
              }
              reCopy = new RegExp("^(?:" + source + ")", flags2);
            }
            if (NPCG_INCLUDED) {
              reCopy = new RegExp("^" + source + "$(?!\\s)", flags2);
            }
            if (UPDATES_LAST_INDEX_WRONG)
              lastIndex = re2.lastIndex;
            match2 = nativeExec.call(sticky2 ? reCopy : re2, strCopy);
            if (sticky2) {
              if (match2) {
                match2.input = match2.input.slice(charsAdded);
                match2[0] = match2[0].slice(charsAdded);
                match2.index = re2.lastIndex;
                re2.lastIndex += match2[0].length;
              } else
                re2.lastIndex = 0;
            } else if (UPDATES_LAST_INDEX_WRONG && match2) {
              re2.lastIndex = re2.global ? match2.index + match2[0].length : lastIndex;
            }
            if (NPCG_INCLUDED && match2 && match2.length > 1) {
              nativeReplace.call(match2[0], reCopy, function() {
                for (i = 1; i < arguments.length - 2; i++) {
                  if (arguments[i] === void 0)
                    match2[i] = void 0;
                }
              });
            }
            return match2;
          };
        }
        module2.exports = patchedExec;
      },
      "94ca": function(module2, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        var replacement = /#|\.prototype\./;
        var isForced = function(feature, detection) {
          var value = data3[normalize4(feature)];
          return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == "function" ? fails(detection) : !!detection;
        };
        var normalize4 = isForced.normalize = function(string) {
          return String(string).replace(replacement, ".").toLowerCase();
        };
        var data3 = isForced.data = {};
        var NATIVE = isForced.NATIVE = "N";
        var POLYFILL = isForced.POLYFILL = "P";
        module2.exports = isForced;
      },
      "9bdd": function(module2, exports2, __webpack_require__) {
        var anObject = __webpack_require__("825a");
        var iteratorClose = __webpack_require__("2a62");
        module2.exports = function(iterator, fn, value, ENTRIES) {
          try {
            return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
          } catch (error2) {
            iteratorClose(iterator);
            throw error2;
          }
        };
      },
      "9bf2": function(module2, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var IE8_DOM_DEFINE = __webpack_require__("0cfb");
        var anObject = __webpack_require__("825a");
        var toPrimitive = __webpack_require__("c04e");
        var $defineProperty = Object.defineProperty;
        exports2.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P2, Attributes) {
          anObject(O);
          P2 = toPrimitive(P2, true);
          anObject(Attributes);
          if (IE8_DOM_DEFINE)
            try {
              return $defineProperty(O, P2, Attributes);
            } catch (error2) {
            }
          if ("get" in Attributes || "set" in Attributes)
            throw TypeError("Accessors not supported");
          if ("value" in Attributes)
            O[P2] = Attributes.value;
          return O;
        };
      },
      "9ed3": function(module2, exports2, __webpack_require__) {
        var IteratorPrototype = __webpack_require__("ae93").IteratorPrototype;
        var create2 = __webpack_require__("7c73");
        var createPropertyDescriptor = __webpack_require__("5c6c");
        var setToStringTag = __webpack_require__("d44e");
        var Iterators = __webpack_require__("3f8c");
        var returnThis = function() {
          return this;
        };
        module2.exports = function(IteratorConstructor, NAME, next2) {
          var TO_STRING_TAG = NAME + " Iterator";
          IteratorConstructor.prototype = create2(IteratorPrototype, { next: createPropertyDescriptor(1, next2) });
          setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
          Iterators[TO_STRING_TAG] = returnThis;
          return IteratorConstructor;
        };
      },
      "9f7f": function(module2, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        function RE(s, f) {
          return RegExp(s, f);
        }
        exports2.UNSUPPORTED_Y = fails(function() {
          var re2 = RE("a", "y");
          re2.lastIndex = 2;
          return re2.exec("abcd") != null;
        });
        exports2.BROKEN_CARET = fails(function() {
          var re2 = RE("^r", "gy");
          re2.lastIndex = 2;
          return re2.exec("str") != null;
        });
      },
      "a630": function(module2, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var from = __webpack_require__("4df4");
        var checkCorrectnessOfIteration = __webpack_require__("1c7e");
        var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
          Array.from(iterable);
        });
        $({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
          from
        });
      },
      "a691": function(module2, exports2) {
        var ceil = Math.ceil;
        var floor2 = Math.floor;
        module2.exports = function(argument) {
          return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor2 : ceil)(argument);
        };
      },
      "a9e3": function(module2, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var global2 = __webpack_require__("da84");
        var isForced = __webpack_require__("94ca");
        var redefine = __webpack_require__("6eeb");
        var has2 = __webpack_require__("5135");
        var classof = __webpack_require__("c6b6");
        var inheritIfRequired = __webpack_require__("7156");
        var toPrimitive = __webpack_require__("c04e");
        var fails = __webpack_require__("d039");
        var create2 = __webpack_require__("7c73");
        var getOwnPropertyNames = __webpack_require__("241c").f;
        var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
        var defineProperty = __webpack_require__("9bf2").f;
        var trim3 = __webpack_require__("58a8").trim;
        var NUMBER = "Number";
        var NativeNumber = global2[NUMBER];
        var NumberPrototype = NativeNumber.prototype;
        var BROKEN_CLASSOF = classof(create2(NumberPrototype)) == NUMBER;
        var toNumber = function(argument) {
          var it2 = toPrimitive(argument, false);
          var first, third, radix, maxCode, digits, length, index2, code3;
          if (typeof it2 == "string" && it2.length > 2) {
            it2 = trim3(it2);
            first = it2.charCodeAt(0);
            if (first === 43 || first === 45) {
              third = it2.charCodeAt(2);
              if (third === 88 || third === 120)
                return NaN;
            } else if (first === 48) {
              switch (it2.charCodeAt(1)) {
                case 66:
                case 98:
                  radix = 2;
                  maxCode = 49;
                  break;
                case 79:
                case 111:
                  radix = 8;
                  maxCode = 55;
                  break;
                default:
                  return +it2;
              }
              digits = it2.slice(2);
              length = digits.length;
              for (index2 = 0; index2 < length; index2++) {
                code3 = digits.charCodeAt(index2);
                if (code3 < 48 || code3 > maxCode)
                  return NaN;
              }
              return parseInt(digits, radix);
            }
          }
          return +it2;
        };
        if (isForced(NUMBER, !NativeNumber(" 0o1") || !NativeNumber("0b1") || NativeNumber("+0x1"))) {
          var NumberWrapper = function Number2(value) {
            var it2 = arguments.length < 1 ? 0 : value;
            var dummy = this;
            return dummy instanceof NumberWrapper && (BROKEN_CLASSOF ? fails(function() {
              NumberPrototype.valueOf.call(dummy);
            }) : classof(dummy) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it2)), dummy, NumberWrapper) : toNumber(it2);
          };
          for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","), j = 0, key2; keys.length > j; j++) {
            if (has2(NativeNumber, key2 = keys[j]) && !has2(NumberWrapper, key2)) {
              defineProperty(NumberWrapper, key2, getOwnPropertyDescriptor(NativeNumber, key2));
            }
          }
          NumberWrapper.prototype = NumberPrototype;
          NumberPrototype.constructor = NumberWrapper;
          redefine(global2, NUMBER, NumberWrapper);
        }
      },
      "ac1f": function(module2, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var exec = __webpack_require__("9263");
        $({ target: "RegExp", proto: true, forced: /./.exec !== exec }, {
          exec
        });
      },
      "ad6d": function(module2, exports2, __webpack_require__) {
        var anObject = __webpack_require__("825a");
        module2.exports = function() {
          var that = anObject(this);
          var result2 = "";
          if (that.global)
            result2 += "g";
          if (that.ignoreCase)
            result2 += "i";
          if (that.multiline)
            result2 += "m";
          if (that.dotAll)
            result2 += "s";
          if (that.unicode)
            result2 += "u";
          if (that.sticky)
            result2 += "y";
          return result2;
        };
      },
      "ae93": function(module2, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        var getPrototypeOf = __webpack_require__("e163");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var has2 = __webpack_require__("5135");
        var wellKnownSymbol = __webpack_require__("b622");
        var IS_PURE = __webpack_require__("c430");
        var ITERATOR = wellKnownSymbol("iterator");
        var BUGGY_SAFARI_ITERATORS = false;
        var returnThis = function() {
          return this;
        };
        var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
        if ([].keys) {
          arrayIterator = [].keys();
          if (!("next" in arrayIterator))
            BUGGY_SAFARI_ITERATORS = true;
          else {
            PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
            if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
              IteratorPrototype = PrototypeOfArrayIteratorPrototype;
          }
        }
        var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == void 0 || fails(function() {
          var test2 = {};
          return IteratorPrototype[ITERATOR].call(test2) !== test2;
        });
        if (NEW_ITERATOR_PROTOTYPE)
          IteratorPrototype = {};
        if ((!IS_PURE || NEW_ITERATOR_PROTOTYPE) && !has2(IteratorPrototype, ITERATOR)) {
          createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
        }
        module2.exports = {
          IteratorPrototype,
          BUGGY_SAFARI_ITERATORS
        };
      },
      "b0c0": function(module2, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var defineProperty = __webpack_require__("9bf2").f;
        var FunctionPrototype = Function.prototype;
        var FunctionPrototypeToString = FunctionPrototype.toString;
        var nameRE = /^\s*function ([^ (]*)/;
        var NAME = "name";
        if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
          defineProperty(FunctionPrototype, NAME, {
            configurable: true,
            get: function() {
              try {
                return FunctionPrototypeToString.call(this).match(nameRE)[1];
              } catch (error2) {
                return "";
              }
            }
          });
        }
      },
      "b622": function(module2, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var shared2 = __webpack_require__("5692");
        var has2 = __webpack_require__("5135");
        var uid2 = __webpack_require__("90e3");
        var NATIVE_SYMBOL = __webpack_require__("4930");
        var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");
        var WellKnownSymbolsStore = shared2("wks");
        var Symbol2 = global2.Symbol;
        var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid2;
        module2.exports = function(name) {
          if (!has2(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == "string")) {
            if (NATIVE_SYMBOL && has2(Symbol2, name)) {
              WellKnownSymbolsStore[name] = Symbol2[name];
            } else {
              WellKnownSymbolsStore[name] = createWellKnownSymbol("Symbol." + name);
            }
          }
          return WellKnownSymbolsStore[name];
        };
      },
      "c04e": function(module2, exports2, __webpack_require__) {
        var isObject2 = __webpack_require__("861d");
        module2.exports = function(input2, PREFERRED_STRING) {
          if (!isObject2(input2))
            return input2;
          var fn, val;
          if (PREFERRED_STRING && typeof (fn = input2.toString) == "function" && !isObject2(val = fn.call(input2)))
            return val;
          if (typeof (fn = input2.valueOf) == "function" && !isObject2(val = fn.call(input2)))
            return val;
          if (!PREFERRED_STRING && typeof (fn = input2.toString) == "function" && !isObject2(val = fn.call(input2)))
            return val;
          throw TypeError("Can't convert object to primitive value");
        };
      },
      "c430": function(module2, exports2) {
        module2.exports = false;
      },
      "c6b6": function(module2, exports2) {
        var toString = {}.toString;
        module2.exports = function(it2) {
          return toString.call(it2).slice(8, -1);
        };
      },
      "c6cd": function(module2, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var setGlobal = __webpack_require__("ce4e");
        var SHARED = "__core-js_shared__";
        var store = global2[SHARED] || setGlobal(SHARED, {});
        module2.exports = store;
      },
      "c8ba": function(module2, exports2) {
        var g;
        g = function() {
          return this;
        }();
        try {
          g = g || new Function("return this")();
        } catch (e) {
          if (typeof window === "object")
            g = window;
        }
        module2.exports = g;
      },
      "ca84": function(module2, exports2, __webpack_require__) {
        var has2 = __webpack_require__("5135");
        var toIndexedObject = __webpack_require__("fc6a");
        var indexOf = __webpack_require__("4d64").indexOf;
        var hiddenKeys = __webpack_require__("d012");
        module2.exports = function(object, names) {
          var O = toIndexedObject(object);
          var i = 0;
          var result2 = [];
          var key2;
          for (key2 in O)
            !has2(hiddenKeys, key2) && has2(O, key2) && result2.push(key2);
          while (names.length > i)
            if (has2(O, key2 = names[i++])) {
              ~indexOf(result2, key2) || result2.push(key2);
            }
          return result2;
        };
      },
      "caad": function(module2, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var $includes = __webpack_require__("4d64").includes;
        var addToUnscopables = __webpack_require__("44d2");
        $({ target: "Array", proto: true }, {
          includes: function includes(el2) {
            return $includes(this, el2, arguments.length > 1 ? arguments[1] : void 0);
          }
        });
        addToUnscopables("includes");
      },
      "cc12": function(module2, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var isObject2 = __webpack_require__("861d");
        var document2 = global2.document;
        var EXISTS = isObject2(document2) && isObject2(document2.createElement);
        module2.exports = function(it2) {
          return EXISTS ? document2.createElement(it2) : {};
        };
      },
      "ce4e": function(module2, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var createNonEnumerableProperty = __webpack_require__("9112");
        module2.exports = function(key2, value) {
          try {
            createNonEnumerableProperty(global2, key2, value);
          } catch (error2) {
            global2[key2] = value;
          }
          return value;
        };
      },
      "d012": function(module2, exports2) {
        module2.exports = {};
      },
      "d039": function(module2, exports2) {
        module2.exports = function(exec) {
          try {
            return !!exec();
          } catch (error2) {
            return true;
          }
        };
      },
      "d066": function(module2, exports2, __webpack_require__) {
        var path = __webpack_require__("428f");
        var global2 = __webpack_require__("da84");
        var aFunction = function(variable) {
          return typeof variable == "function" ? variable : void 0;
        };
        module2.exports = function(namespace2, method) {
          return arguments.length < 2 ? aFunction(path[namespace2]) || aFunction(global2[namespace2]) : path[namespace2] && path[namespace2][method] || global2[namespace2] && global2[namespace2][method];
        };
      },
      "d1e7": function(module2, exports2, __webpack_require__) {
        var $propertyIsEnumerable = {}.propertyIsEnumerable;
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
        exports2.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
          var descriptor = getOwnPropertyDescriptor(this, V);
          return !!descriptor && descriptor.enumerable;
        } : $propertyIsEnumerable;
      },
      "d2bb": function(module2, exports2, __webpack_require__) {
        var anObject = __webpack_require__("825a");
        var aPossiblePrototype = __webpack_require__("3bbe");
        module2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
          var CORRECT_SETTER = false;
          var test2 = {};
          var setter;
          try {
            setter = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set;
            setter.call(test2, []);
            CORRECT_SETTER = test2 instanceof Array;
          } catch (error2) {
          }
          return function setPrototypeOf(O, proto) {
            anObject(O);
            aPossiblePrototype(proto);
            if (CORRECT_SETTER)
              setter.call(O, proto);
            else
              O.__proto__ = proto;
            return O;
          };
        }() : void 0);
      },
      "d44e": function(module2, exports2, __webpack_require__) {
        var defineProperty = __webpack_require__("9bf2").f;
        var has2 = __webpack_require__("5135");
        var wellKnownSymbol = __webpack_require__("b622");
        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        module2.exports = function(it2, TAG, STATIC) {
          if (it2 && !has2(it2 = STATIC ? it2 : it2.prototype, TO_STRING_TAG)) {
            defineProperty(it2, TO_STRING_TAG, { configurable: true, value: TAG });
          }
        };
      },
      "d784": function(module2, exports2, __webpack_require__) {
        __webpack_require__("ac1f");
        var redefine = __webpack_require__("6eeb");
        var regexpExec = __webpack_require__("9263");
        var fails = __webpack_require__("d039");
        var wellKnownSymbol = __webpack_require__("b622");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var SPECIES = wellKnownSymbol("species");
        var RegExpPrototype = RegExp.prototype;
        var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
          var re2 = /./;
          re2.exec = function() {
            var result2 = [];
            result2.groups = { a: "7" };
            return result2;
          };
          return "".replace(re2, "$<a>") !== "7";
        });
        var REPLACE_KEEPS_$0 = function() {
          return "a".replace(/./, "$0") === "$0";
        }();
        var REPLACE = wellKnownSymbol("replace");
        var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function() {
          if (/./[REPLACE]) {
            return /./[REPLACE]("a", "$0") === "";
          }
          return false;
        }();
        var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function() {
          var re2 = /(?:)/;
          var originalExec = re2.exec;
          re2.exec = function() {
            return originalExec.apply(this, arguments);
          };
          var result2 = "ab".split(re2);
          return result2.length !== 2 || result2[0] !== "a" || result2[1] !== "b";
        });
        module2.exports = function(KEY, length, exec, sham) {
          var SYMBOL = wellKnownSymbol(KEY);
          var DELEGATES_TO_SYMBOL = !fails(function() {
            var O = {};
            O[SYMBOL] = function() {
              return 7;
            };
            return ""[KEY](O) != 7;
          });
          var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function() {
            var execCalled = false;
            var re2 = /a/;
            if (KEY === "split") {
              re2 = {};
              re2.constructor = {};
              re2.constructor[SPECIES] = function() {
                return re2;
              };
              re2.flags = "";
              re2[SYMBOL] = /./[SYMBOL];
            }
            re2.exec = function() {
              execCalled = true;
              return null;
            };
            re2[SYMBOL]("");
            return !execCalled;
          });
          if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === "replace" && !(REPLACE_SUPPORTS_NAMED_GROUPS && REPLACE_KEEPS_$0 && !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE) || KEY === "split" && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
            var nativeRegExpMethod = /./[SYMBOL];
            var methods = exec(SYMBOL, ""[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
              var $exec = regexp.exec;
              if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
                if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                  return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
                }
                return { done: true, value: nativeMethod.call(str, regexp, arg2) };
              }
              return { done: false };
            }, {
              REPLACE_KEEPS_$0,
              REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
            });
            var stringMethod = methods[0];
            var regexMethod = methods[1];
            redefine(String.prototype, KEY, stringMethod);
            redefine(
              RegExpPrototype,
              SYMBOL,
              length == 2 ? function(string, arg) {
                return regexMethod.call(string, this, arg);
              } : function(string) {
                return regexMethod.call(string, this);
              }
            );
          }
          if (sham)
            createNonEnumerableProperty(RegExpPrototype[SYMBOL], "sham", true);
        };
      },
      "da84": function(module2, exports2, __webpack_require__) {
        (function(global2) {
          var check2 = function(it2) {
            return it2 && it2.Math == Math && it2;
          };
          module2.exports = check2(typeof globalThis == "object" && globalThis) || check2(typeof window == "object" && window) || check2(typeof self == "object" && self) || check2(typeof global2 == "object" && global2) || function() {
            return this;
          }() || Function("return this")();
        }).call(this, __webpack_require__("c8ba"));
      },
      "df75": function(module2, exports2, __webpack_require__) {
        var internalObjectKeys = __webpack_require__("ca84");
        var enumBugKeys = __webpack_require__("7839");
        module2.exports = Object.keys || function keys(O) {
          return internalObjectKeys(O, enumBugKeys);
        };
      },
      "e163": function(module2, exports2, __webpack_require__) {
        var has2 = __webpack_require__("5135");
        var toObject2 = __webpack_require__("7b0b");
        var sharedKey = __webpack_require__("f772");
        var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");
        var IE_PROTO = sharedKey("IE_PROTO");
        var ObjectPrototype = Object.prototype;
        module2.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function(O) {
          O = toObject2(O);
          if (has2(O, IE_PROTO))
            return O[IE_PROTO];
          if (typeof O.constructor == "function" && O instanceof O.constructor) {
            return O.constructor.prototype;
          }
          return O instanceof Object ? ObjectPrototype : null;
        };
      },
      "e177": function(module2, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        module2.exports = !fails(function() {
          function F() {
          }
          F.prototype.constructor = null;
          return Object.getPrototypeOf(new F()) !== F.prototype;
        });
      },
      "e893": function(module2, exports2, __webpack_require__) {
        var has2 = __webpack_require__("5135");
        var ownKeys2 = __webpack_require__("56ef");
        var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
        var definePropertyModule = __webpack_require__("9bf2");
        module2.exports = function(target2, source) {
          var keys = ownKeys2(source);
          var defineProperty = definePropertyModule.f;
          var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          for (var i = 0; i < keys.length; i++) {
            var key2 = keys[i];
            if (!has2(target2, key2))
              defineProperty(target2, key2, getOwnPropertyDescriptor(source, key2));
          }
        };
      },
      "e8b5": function(module2, exports2, __webpack_require__) {
        var classof = __webpack_require__("c6b6");
        module2.exports = Array.isArray || function isArray(arg) {
          return classof(arg) == "Array";
        };
      },
      "e95a": function(module2, exports2, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__("b622");
        var Iterators = __webpack_require__("3f8c");
        var ITERATOR = wellKnownSymbol("iterator");
        var ArrayPrototype = Array.prototype;
        module2.exports = function(it2) {
          return it2 !== void 0 && (Iterators.Array === it2 || ArrayPrototype[ITERATOR] === it2);
        };
      },
      "f5df": function(module2, exports2, __webpack_require__) {
        var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
        var classofRaw = __webpack_require__("c6b6");
        var wellKnownSymbol = __webpack_require__("b622");
        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        var CORRECT_ARGUMENTS = classofRaw(function() {
          return arguments;
        }()) == "Arguments";
        var tryGet = function(it2, key2) {
          try {
            return it2[key2];
          } catch (error2) {
          }
        };
        module2.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it2) {
          var O, tag2, result2;
          return it2 === void 0 ? "Undefined" : it2 === null ? "Null" : typeof (tag2 = tryGet(O = Object(it2), TO_STRING_TAG)) == "string" ? tag2 : CORRECT_ARGUMENTS ? classofRaw(O) : (result2 = classofRaw(O)) == "Object" && typeof O.callee == "function" ? "Arguments" : result2;
        };
      },
      "f772": function(module2, exports2, __webpack_require__) {
        var shared2 = __webpack_require__("5692");
        var uid2 = __webpack_require__("90e3");
        var keys = shared2("keys");
        module2.exports = function(key2) {
          return keys[key2] || (keys[key2] = uid2(key2));
        };
      },
      "fb15": function(module2, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__);
        if (typeof window !== "undefined") {
          var currentScript = window.document.currentScript;
          {
            var getCurrentScript = __webpack_require__("8875");
            currentScript = getCurrentScript();
            if (!("currentScript" in document)) {
              Object.defineProperty(document, "currentScript", { get: getCurrentScript });
            }
          }
          var src = currentScript && currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
          if (src) {
            __webpack_require__.p = src[1];
          }
        }
        var render50 = function() {
          var _vm = this;
          var _h = _vm.$createElement;
          var _c = _vm._self._c || _h;
          return _c(_vm.componentName, { tag: "component", attrs: { "name": _vm.name, "colors": _vm.colors, "size": _vm.size } });
        };
        var staticRenderFns = [];
        __webpack_require__("caad");
        __webpack_require__("a9e3");
        var AvatarPixelsvue_type_template_id_770b24c9_render = function() {
          var _vm = this;
          var _h = _vm.$createElement;
          var _c = _vm._self._c || _h;
          return _c("svg", { attrs: { "viewBox": "0 0 " + _vm.viewboxSize + " " + _vm.viewboxSize, "fill": "none", "xmlns": "http://www.w3.org/2000/svg", "width": _vm.size, "height": _vm.size } }, [_c("mask", { attrs: { "id": "mask0", "mask-type": "alpha", "maskUnits": "userSpaceOnUse", "x": "0", "y": "0", "width": _vm.viewboxSize, "height": _vm.viewboxSize } }, [_c("circle", { attrs: { "cx": _vm.viewboxSize / 2, "cy": _vm.viewboxSize / 2, "r": _vm.viewboxSize / 2, "fill": "white" } })]), _c("g", { attrs: { "mask": "url(#mask0)" } }, [_c("rect", { attrs: { "width": "10", "height": "10", "fill": _vm.properties[0].color } }), _c("rect", { attrs: { "x": "20", "width": "10", "height": "10", "fill": _vm.properties[1].color } }), _c("rect", { attrs: { "x": "40", "width": "10", "height": "10", "fill": _vm.properties[2].color } }), _c("rect", { attrs: { "x": "60", "width": "10", "height": "10", "fill": _vm.properties[3].color } }), _c("rect", { attrs: { "x": "10", "width": "10", "height": "10", "fill": _vm.properties[4].color } }), _c("rect", { attrs: { "x": "30", "width": "10", "height": "10", "fill": _vm.properties[5].color } }), _c("rect", { attrs: { "x": "50", "width": "10", "height": "10", "fill": _vm.properties[6].color } }), _c("rect", { attrs: { "x": "70", "width": "10", "height": "10", "fill": _vm.properties[7].color } }), _c("rect", { attrs: { "y": "10", "width": "10", "height": "10", "fill": _vm.properties[8].color } }), _c("rect", { attrs: { "y": "20", "width": "10", "height": "10", "fill": _vm.properties[9].color } }), _c("rect", { attrs: { "y": "30", "width": "10", "height": "10", "fill": _vm.properties[10].color } }), _c("rect", { attrs: { "y": "40", "width": "10", "height": "10", "fill": _vm.properties[11].color } }), _c("rect", { attrs: { "y": "50", "width": "10", "height": "10", "fill": _vm.properties[12].color } }), _c("rect", { attrs: { "y": "60", "width": "10", "height": "10", "fill": _vm.properties[13].color } }), _c("rect", { attrs: { "y": "70", "width": "10", "height": "10", "fill": _vm.properties[14].color } }), _c("rect", { attrs: { "x": "20", "y": "10", "width": "10", "height": "10", "fill": _vm.properties[15].color } }), _c("rect", { attrs: { "x": "20", "y": "20", "width": "10", "height": "10", "fill": _vm.properties[16].color } }), _c("rect", { attrs: { "x": "20", "y": "30", "width": "10", "height": "10", "fill": _vm.properties[17].color } }), _c("rect", { attrs: { "x": "20", "y": "40", "width": "10", "height": "10", "fill": _vm.properties[18].color } }), _c("rect", { attrs: { "x": "20", "y": "50", "width": "10", "height": "10", "fill": _vm.properties[19].color } }), _c("rect", { attrs: { "x": "20", "y": "60", "width": "10", "height": "10", "fill": _vm.properties[20].color } }), _c("rect", { attrs: { "x": "20", "y": "70", "width": "10", "height": "10", "fill": _vm.properties[21].color } }), _c("rect", { attrs: { "x": "40", "y": "10", "width": "10", "height": "10", "fill": _vm.properties[22].color } }), _c("rect", { attrs: { "x": "40", "y": "20", "width": "10", "height": "10", "fill": _vm.properties[23].color } }), _c("rect", { attrs: { "x": "40", "y": "30", "width": "10", "height": "10", "fill": _vm.properties[24].color } }), _c("rect", { attrs: { "x": "40", "y": "40", "width": "10", "height": "10", "fill": _vm.properties[25].color } }), _c("rect", { attrs: { "x": "40", "y": "50", "width": "10", "height": "10", "fill": _vm.properties[26].color } }), _c("rect", { attrs: { "x": "40", "y": "60", "width": "10", "height": "10", "fill": _vm.properties[27].color } }), _c("rect", { attrs: { "x": "40", "y": "70", "width": "10", "height": "10", "fill": _vm.properties[28].color } }), _c("rect", { attrs: { "x": "60", "y": "10", "width": "10", "height": "10", "fill": _vm.properties[29].color } }), _c("rect", { attrs: { "x": "60", "y": "20", "width": "10", "height": "10", "fill": _vm.properties[30].color } }), _c("rect", { attrs: { "x": "60", "y": "30", "width": "10", "height": "10", "fill": _vm.properties[31].color } }), _c("rect", { attrs: { "x": "60", "y": "40", "width": "10", "height": "10", "fill": _vm.properties[32].color } }), _c("rect", { attrs: { "x": "60", "y": "50", "width": "10", "height": "10", "fill": _vm.properties[33].color } }), _c("rect", { attrs: { "x": "60", "y": "60", "width": "10", "height": "10", "fill": _vm.properties[34].color } }), _c("rect", { attrs: { "x": "60", "y": "70", "width": "10", "height": "10", "fill": _vm.properties[35].color } }), _c("rect", { attrs: { "x": "10", "y": "10", "width": "10", "height": "10", "fill": _vm.properties[36].color } }), _c("rect", { attrs: { "x": "10", "y": "20", "width": "10", "height": "10", "fill": _vm.properties[37].color } }), _c("rect", { attrs: { "x": "10", "y": "30", "width": "10", "height": "10", "fill": _vm.properties[38].color } }), _c("rect", { attrs: { "x": "10", "y": "{40}", "width": "10", "height": "10", "fill": _vm.properties[39].color } }), _c("rect", { attrs: { "x": "10", "y": "50", "width": "10", "height": "10", "fill": _vm.properties[40].color } }), _c("rect", { attrs: { "x": "10", "y": "60", "width": "10", "height": "10", "fill": _vm.properties[41].color } }), _c("rect", { attrs: { "x": "10", "y": "70", "width": "10", "height": "10", "fill": _vm.properties[42].color } }), _c("rect", { attrs: { "x": "30", "y": "10", "width": "10", "height": "10", "fill": _vm.properties[43].color } }), _c("rect", { attrs: { "x": "30", "y": "20", "width": "10", "height": "10", "fill": _vm.properties[44].color } }), _c("rect", { attrs: { "x": "30", "y": "30", "width": "10", "height": "10", "fill": _vm.properties[45].color } }), _c("rect", { attrs: { "x": "30", "y": "{40}", "width": "10", "height": "10", "fill": _vm.properties[46].color } }), _c("rect", { attrs: { "x": "30", "y": "50", "width": "10", "height": "10", "fill": _vm.properties[47].color } }), _c("rect", { attrs: { "x": "30", "y": "60", "width": "10", "height": "10", "fill": _vm.properties[48].color } }), _c("rect", { attrs: { "x": "30", "y": "70", "width": "10", "height": "10", "fill": _vm.properties[49].color } }), _c("rect", { attrs: { "x": "50", "y": "10", "width": "10", "height": "10", "fill": _vm.properties[50].color } }), _c("rect", { attrs: { "x": "50", "y": "20", "width": "10", "height": "10", "fill": _vm.properties[51].color } }), _c("rect", { attrs: { "x": "50", "y": "30", "width": "10", "height": "10", "fill": _vm.properties[52].color } }), _c("rect", { attrs: { "x": "50", "y": "{40}", "width": "10", "height": "10", "fill": _vm.properties[53].color } }), _c("rect", { attrs: { "x": "50", "y": "50", "width": "10", "height": "10", "fill": _vm.properties[54].color } }), _c("rect", { attrs: { "x": "50", "y": "60", "width": "10", "height": "10", "fill": _vm.properties[55].color } }), _c("rect", { attrs: { "x": "50", "y": "70", "width": "10", "height": "10", "fill": _vm.properties[56].color } }), _c("rect", { attrs: { "x": "70", "y": "10", "width": "10", "height": "10", "fill": _vm.properties[57].color } }), _c("rect", { attrs: { "x": "70", "y": "20", "width": "10", "height": "10", "fill": _vm.properties[58].color } }), _c("rect", { attrs: { "x": "70", "y": "30", "width": "10", "height": "10", "fill": _vm.properties[59].color } }), _c("rect", { attrs: { "x": "70", "y": "{40}", "width": "10", "height": "10", "fill": _vm.properties[60].color } }), _c("rect", { attrs: { "x": "70", "y": "50", "width": "10", "height": "10", "fill": _vm.properties[61].color } }), _c("rect", { attrs: { "x": "70", "y": "60", "width": "10", "height": "10", "fill": _vm.properties[62].color } }), _c("rect", { attrs: { "x": "70", "y": "70", "width": "10", "height": "10", "fill": _vm.properties[63].color } })])]);
        };
        var AvatarPixelsvue_type_template_id_770b24c9_staticRenderFns = [];
        __webpack_require__("b0c0");
        __webpack_require__("a630");
        __webpack_require__("3ca3");
        __webpack_require__("fb6a");
        var getNumber = function getNumber2(name) {
          var charactersArray = Array.from(name);
          return charactersArray.reduce(function(accu, curr) {
            return accu + curr.charCodeAt(0);
          }, 0);
        };
        var getDigit = function getDigit2(num2, ntn) {
          return Math.floor(num2 / Math.pow(10, ntn) % 10);
        };
        var getBoolean = function getBoolean2(num2, ntn) {
          return !(getDigit(num2, ntn) % 2);
        };
        var getUnit = function getUnit2(num2, range3, index2) {
          var value = num2 % range3;
          if (index2 && getDigit(num2, index2) % 2 === 0) {
            return -value;
          }
          return value;
        };
        var getRandomColor = function getRandomColor2(num2, colors, range3) {
          return colors[num2 % range3];
        };
        var getContrast = function getContrast2(hexColor) {
          if (hexColor.slice(0, 1) === "#") {
            hexColor = hexColor.slice(1);
          }
          var r = parseInt(hexColor.substr(0, 2), 16);
          var g = parseInt(hexColor.substr(2, 2), 16);
          var b2 = parseInt(hexColor.substr(4, 2), 16);
          var yiq = (r * 299 + g * 587 + b2 * 144) / 1e3;
          return yiq >= 128 ? "black" : "white";
        };
        var ELEMENTS = 64;
        var SIZE = 80;
        var AvatarPixelsvue_type_script_lang_js_ = {
          props: {
            name: {
              type: String,
              required: true
            },
            colors: {
              type: Array,
              required: true
            },
            size: {
              type: Number,
              required: true
            }
          },
          data: function data3() {
            return {
              viewboxSize: SIZE
            };
          },
          computed: {
            properties: function properties() {
              return this.generateColors();
            }
          },
          methods: {
            generateColors: function generateColors() {
              var _this = this;
              var numFromName = getNumber(this.name);
              var range3 = this.colors && this.colors.length;
              var elementProperties = Array.from({
                length: ELEMENTS
              }, function(_2, i) {
                return {
                  color: getRandomColor(numFromName % (i + 13), _this.colors, range3)
                };
              });
              return elementProperties;
            }
          }
        };
        var components_AvatarPixelsvue_type_script_lang_js_ = AvatarPixelsvue_type_script_lang_js_;
        function normalizeComponent2(scriptExports, render51, staticRenderFns2, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
          var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
          if (render51) {
            options2.render = render51;
            options2.staticRenderFns = staticRenderFns2;
            options2._compiled = true;
          }
          if (functionalTemplate) {
            options2.functional = true;
          }
          if (scopeId) {
            options2._scopeId = "data-v-" + scopeId;
          }
          var hook2;
          if (moduleIdentifier) {
            hook2 = function(context) {
              context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
              if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                context = __VUE_SSR_CONTEXT__;
              }
              if (injectStyles) {
                injectStyles.call(this, context);
              }
              if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
              }
            };
            options2._ssrRegister = hook2;
          } else if (injectStyles) {
            hook2 = shadowMode ? function() {
              injectStyles.call(
                this,
                (options2.functional ? this.parent : this).$root.$options.shadowRoot
              );
            } : injectStyles;
          }
          if (hook2) {
            if (options2.functional) {
              options2._injectStyles = hook2;
              var originalRender = options2.render;
              options2.render = function renderWithStyleInjection(h, context) {
                hook2.call(context);
                return originalRender(h, context);
              };
            } else {
              var existing = options2.beforeCreate;
              options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
            }
          }
          return {
            exports: scriptExports,
            options: options2
          };
        }
        var component = normalizeComponent2(
          components_AvatarPixelsvue_type_script_lang_js_,
          AvatarPixelsvue_type_template_id_770b24c9_render,
          AvatarPixelsvue_type_template_id_770b24c9_staticRenderFns,
          false,
          null,
          null,
          null
        );
        var AvatarPixels = component.exports;
        var AvatarBauhausvue_type_template_id_1ceeb1a0_render = function() {
          var _vm = this;
          var _h = _vm.$createElement;
          var _c = _vm._self._c || _h;
          return _c("svg", { attrs: { "viewBox": "0 0 " + _vm.viewboxSize + " " + _vm.viewboxSize, "fill": "none", "xmlns": "http://www.w3.org/2000/svg", "width": _vm.size, "height": _vm.size } }, [_c("mask", { attrs: { "id": "mask__bauhaus", "maskUnits": "userSpaceOnUse", "x": "0", "y": "0", "width": _vm.viewboxSize, "height": _vm.viewboxSize } }, [_c("rect", { attrs: { "width": _vm.viewboxSize, "height": _vm.viewboxSize, "rx": _vm.viewboxSize / 2, "fill": "#fff" } })]), _c("g", { attrs: { "mask": "url(#mask__bauhaus)" } }, [_c("rect", { attrs: { "width": _vm.viewboxSize, "height": _vm.viewboxSize, "rx": _vm.viewboxSize / 2, "fill": _vm.properties[0].color } }), _c("rect", { attrs: { "x": (_vm.viewboxSize - 60) / 2, "y": (_vm.viewboxSize - 20) / 2, "width": _vm.viewboxSize, "height": _vm.properties[1].isSquare ? _vm.viewboxSize : _vm.viewboxSize / 8, "fill": _vm.properties[1].color, "transform": "translate(" + _vm.properties[1].translateX + " " + _vm.properties[1].translateY + ") rotate(" + _vm.properties[1].rotate + " " + _vm.viewboxSize / 2 + " " + _vm.viewboxSize / 2 + ")" } }), _c("circle", { attrs: { "cx": _vm.viewboxSize / 2, "cy": _vm.viewboxSize / 2, "fill": _vm.properties[2].color, "r": _vm.viewboxSize / 5, "transform": "translate(" + _vm.properties[2].translateX + " " + _vm.properties[2].translateY + ")" } }), _c("line", { attrs: { "x1": "0", "y1": _vm.viewboxSize / 2, "x2": _vm.viewboxSize, "y2": _vm.viewboxSize / 2, "strokeWidth": "2", "stroke": _vm.properties[3].color, "transform": "translate(" + _vm.properties[3].translateX + " " + _vm.properties[3].translateY + ") rotate(" + _vm.properties[3].rotate + " " + _vm.viewboxSize / 2 + " " + _vm.viewboxSize / 2 + ")" } })])]);
        };
        var AvatarBauhausvue_type_template_id_1ceeb1a0_staticRenderFns = [];
        var AvatarBauhausvue_type_script_lang_js_ELEMENTS = 4;
        var AvatarBauhausvue_type_script_lang_js_SIZE = 80;
        var AvatarBauhausvue_type_script_lang_js_ = {
          props: {
            name: {
              type: String,
              required: true
            },
            colors: {
              type: Array,
              required: true
            },
            size: {
              type: Number,
              required: true
            }
          },
          data: function data3() {
            return {
              viewboxSize: AvatarBauhausvue_type_script_lang_js_SIZE
            };
          },
          computed: {
            properties: function properties() {
              var _this = this;
              var numFromName = getNumber(this.name);
              var range3 = this.colors && this.colors.length;
              var elementProperties = Array.from({
                length: AvatarBauhausvue_type_script_lang_js_ELEMENTS
              }, function(_2, i) {
                return {
                  color: getRandomColor(numFromName + i, _this.colors, range3),
                  translateX: getUnit(numFromName * (i + 1), AvatarBauhausvue_type_script_lang_js_SIZE / 2 - (i + 17), 1),
                  translateY: getUnit(numFromName * (i + 1), AvatarBauhausvue_type_script_lang_js_SIZE / 2 - (i + 17), 2),
                  rotate: getUnit(numFromName * (i + 1), 360),
                  isSqure: getBoolean(numFromName, 2)
                };
              });
              return elementProperties;
            }
          }
        };
        var components_AvatarBauhausvue_type_script_lang_js_ = AvatarBauhausvue_type_script_lang_js_;
        var AvatarBauhaus_component = normalizeComponent2(
          components_AvatarBauhausvue_type_script_lang_js_,
          AvatarBauhausvue_type_template_id_1ceeb1a0_render,
          AvatarBauhausvue_type_template_id_1ceeb1a0_staticRenderFns,
          false,
          null,
          null,
          null
        );
        var AvatarBauhaus = AvatarBauhaus_component.exports;
        var AvatarMarblevue_type_template_id_48abe78b_render = function() {
          var _vm = this;
          var _h = _vm.$createElement;
          var _c = _vm._self._c || _h;
          return _c("svg", { attrs: { "viewBox": "0 0 " + _vm.viewboxSize + " " + _vm.viewboxSize, "fill": "none", "xmlns": "http://www.w3.org/2000/svg", "width": _vm.size, "height": _vm.size } }, [_c("mask", { attrs: { "id": "mask__marble", "maskUnits": "userSpaceOnUse", "x": "0", "y": "0", "width": _vm.viewboxSize, "height": _vm.viewboxSize } }, [_c("path", { attrs: { "d": "M80 40C80 17.909 62.091 0 40 0S0 17.909 0 40s17.909 40 40 40 40-17.909 40-40z", "fill": "#fff" } })]), _c("g", { attrs: { "mask": "url(#mask__marble)" } }, [_c("path", { attrs: { "d": "M80 40C80 17.909 62.091 0 40 0S0 17.909 0 40s17.909 40 40 40 40-17.909 40-40z", "fill": _vm.properties[0].color } }), _c("path", { attrs: { "filter": "url(#prefix__filter0_f)", "d": "M32.414 59.35L50.376 70.5H72.5v-71H33.728L26.5 13.381l19.057 27.08L32.414 59.35z", "fill": _vm.properties[1].color, "transform": "translate(" + _vm.properties[1].translateX + " " + _vm.properties[1].translateY + ") rotate(" + _vm.properties[1].rotate + " " + _vm.viewboxSize / 2 + " " + _vm.viewboxSize / 2 + ") scale(" + _vm.properties[2].scale + ")" } }), _c("path", { style: { mixBlendMode: "overlay" }, attrs: { "filter": "url(#prefix__filter0_f)", "d": "M22.216 24L0 46.75l14.108 38.129L78 86l-3.081-59.276-22.378 4.005\n    12.972 20.186-23.35 27.395L22.215 24z", "fill": _vm.properties[2].color, "transform": "translate(" + _vm.properties[2].translateX + " \n    " + _vm.properties[2].translateY + ") rotate(" + _vm.properties[2].rotate + " " + _vm.viewboxSize / 2 + " " + _vm.viewboxSize / 2 + ") scale(" + _vm.properties[2].scale + ")" } })]), _c("defs", [_c("filter", { attrs: { "id": "prefix__filter0_f", "filterUnits": "userSpaceOnUse", "color-interpolation-filters": "sRGB" } }, [_c("feFlood", { attrs: { "flood-opacity": "0", "result": "BackgroundImageFix" } }), _c("feBlend", { attrs: { "in": "SourceGraphic", "in2": "BackgroundImageFix", "result": "shape" } }), _c("feGaussianBlur", { attrs: { "stdDeviation": "7", "result": "effect1_foregroundBlur" } })], 1)])]);
        };
        var AvatarMarblevue_type_template_id_48abe78b_staticRenderFns = [];
        var AvatarMarblevue_type_script_lang_js_ELEMENTS = 3;
        var AvatarMarblevue_type_script_lang_js_SIZE = 80;
        var AvatarMarblevue_type_script_lang_js_ = {
          props: {
            name: {
              type: String,
              required: true
            },
            colors: {
              type: Array,
              required: true
            },
            size: {
              type: Number,
              required: true
            }
          },
          data: function data3() {
            return {
              viewboxSize: AvatarMarblevue_type_script_lang_js_SIZE
            };
          },
          computed: {
            properties: function properties() {
              var _this = this;
              var numFromName = getNumber(this.name);
              var range3 = this.colors && this.colors.length;
              var elementsProperties = Array.from({
                length: AvatarMarblevue_type_script_lang_js_ELEMENTS
              }, function(_2, i) {
                return {
                  color: getRandomColor(numFromName + i, _this.colors, range3),
                  translateX: getUnit(numFromName * (i + 1), AvatarMarblevue_type_script_lang_js_SIZE / 10, 1),
                  translateY: getUnit(numFromName * (i + 1), AvatarMarblevue_type_script_lang_js_SIZE / 10, 2),
                  scale: 1.2 + getUnit(numFromName * (i + 1), AvatarMarblevue_type_script_lang_js_SIZE / 20) / 10,
                  rotate: getUnit(numFromName * (i + 1), 360, 1)
                };
              });
              return elementsProperties;
            }
          }
        };
        var components_AvatarMarblevue_type_script_lang_js_ = AvatarMarblevue_type_script_lang_js_;
        var AvatarMarble_component = normalizeComponent2(
          components_AvatarMarblevue_type_script_lang_js_,
          AvatarMarblevue_type_template_id_48abe78b_render,
          AvatarMarblevue_type_template_id_48abe78b_staticRenderFns,
          false,
          null,
          null,
          null
        );
        var AvatarMarble = AvatarMarble_component.exports;
        var AvatarRingvue_type_template_id_23505e29_render = function() {
          var _vm = this;
          var _h = _vm.$createElement;
          var _c = _vm._self._c || _h;
          return _c("svg", { attrs: { "viewBox": "0 0 " + _vm.viewboxSize + " " + _vm.viewboxSize, "fill": "none", "xmlns": "http://www.w3.org/2000/svg", "width": _vm.size, "height": _vm.size } }, [_c("path", { attrs: { "d": "M90 45a45.001 45.001 0 00-76.82-31.82A45 45 0 000 45h90z", "fill": _vm.cellColors[0] } }), _c("path", { attrs: { "d": "M90 45a45.001 45.001 0 01-76.82 31.82A45 45 0 010 45h90z", "fill": _vm.cellColors[1] } }), _c("path", { attrs: { "d": "M83 45a38 38 0 00-76 0h76z", "fill": _vm.cellColors[2] } }), _c("path", { attrs: { "d": "M83 45a38 38 0 01-76 0h76z", "fill": _vm.cellColors[3] } }), _c("path", { attrs: { "d": "M77 45a32 32 0 10-64 0h64z", "fill": _vm.cellColors[4] } }), _c("path", { attrs: { "d": "M77 45a32 32 0 11-64 0h64z", "fill": _vm.cellColors[5] } }), _c("path", { attrs: { "d": "M71 45a26 26 0 00-52 0h52z", "fill": _vm.cellColors[6] } }), _c("path", { attrs: { "d": "M71 45a26 26 0 01-52 0h52z", "fill": _vm.cellColors[7] } }), _c("circle", { attrs: { "cx": "45", "cy": "45", "r": "23", "fill": _vm.cellColors[8] } })]);
        };
        var AvatarRingvue_type_template_id_23505e29_staticRenderFns = [];
        var AvatarRingvue_type_script_lang_js_SIZE = 90;
        var COLORS = 5;
        var AvatarRingvue_type_script_lang_js_ = {
          props: {
            name: {
              type: String,
              required: true
            },
            colors: {
              type: Array,
              required: true
            },
            size: {
              type: Number,
              required: true
            }
          },
          data: function data3() {
            return {
              viewboxSize: AvatarRingvue_type_script_lang_js_SIZE
            };
          },
          computed: {
            cellColors: function cellColors() {
              var _this = this;
              var numFromName = getNumber(this.name);
              var range3 = this.colors && this.colors.length;
              var colorsShuffle = Array.from({
                length: COLORS
              }, function(_2, i) {
                return getRandomColor(numFromName + (i + 1), _this.colors, range3);
              });
              var iconColors = [];
              iconColors[0] = colorsShuffle[0];
              iconColors[1] = colorsShuffle[1];
              iconColors[2] = colorsShuffle[1];
              iconColors[3] = colorsShuffle[2];
              iconColors[4] = colorsShuffle[2];
              iconColors[5] = colorsShuffle[3];
              iconColors[6] = colorsShuffle[3];
              iconColors[7] = colorsShuffle[0];
              iconColors[8] = colorsShuffle[4];
              return iconColors;
            }
          }
        };
        var components_AvatarRingvue_type_script_lang_js_ = AvatarRingvue_type_script_lang_js_;
        var AvatarRing_component = normalizeComponent2(
          components_AvatarRingvue_type_script_lang_js_,
          AvatarRingvue_type_template_id_23505e29_render,
          AvatarRingvue_type_template_id_23505e29_staticRenderFns,
          false,
          null,
          null,
          null
        );
        var AvatarRing = AvatarRing_component.exports;
        var AvatarSunsetvue_type_template_id_31afec8a_render = function() {
          var _vm = this;
          var _h = _vm.$createElement;
          var _c = _vm._self._c || _h;
          return _c("svg", { attrs: { "viewBox": "0 0 " + _vm.viewboxSize + " " + _vm.viewboxSize, "fill": "none", "xmlns": "http://www.w3.org/2000/svg", "width": _vm.size, "height": _vm.size } }, [_c("mask", { attrs: { "id": "mask__sunset", "maskUnits": "userSpaceOnUse", "x": "0", "y": "0", "width": _vm.viewboxSize, "height": _vm.viewboxSize } }, [_c("circle", { attrs: { "cx": _vm.viewboxSize / 2, "cy": _vm.viewboxSize / 2, "r": _vm.viewboxSize / 2, "fill": "white" } })]), _c("g", { attrs: { "mask": "url(#mask__sunset)" } }, [_c("path", { attrs: { "fill": "url(#gradient_paint0_linear_" + _vm.shortName + ")", "d": "M0 0h80v40H0z" } }), _c("path", { attrs: { "fill": "url(#gradient_paint1_linear_" + _vm.shortName + ")", "d": "M0 40h80v40H0z" } })]), _c("defs", [_c("linearGradient", { attrs: { "id": "gradient_paint0_linear_" + _vm.shortName, "x1": _vm.viewboxSize / 2, "y1": "0", "x2": _vm.viewboxSize / 2, "y2": _vm.viewboxSize / 2, "gradientUnits": "userSpaceOnUse" } }, [_c("stop", { attrs: { "stop-color": _vm.properties[0].color } }), _c("stop", { attrs: { "offset": "1", "stop-color": _vm.properties[1].color } })], 1), _c("linearGradient", { attrs: { "id": "gradient_paint1_linear_" + _vm.shortName, "x1": _vm.viewboxSize / 2, "y1": _vm.viewboxSize / 2, "x2": _vm.viewboxSize / 2, "y2": _vm.viewboxSize, "gradientUnits": "userSpaceOnUse" } }, [_c("stop", { attrs: { "stop-color": _vm.properties[2].color } }), _c("stop", { attrs: { "offset": "1", "stop-color": _vm.properties[3].color } })], 1)], 1)]);
        };
        var AvatarSunsetvue_type_template_id_31afec8a_staticRenderFns = [];
        __webpack_require__("ac1f");
        __webpack_require__("5319");
        var AvatarSunsetvue_type_script_lang_js_ELEMENTS = 4;
        var AvatarSunsetvue_type_script_lang_js_SIZE = 80;
        var AvatarSunsetvue_type_script_lang_js_ = {
          props: {
            name: {
              type: String,
              required: true
            },
            colors: {
              type: Array,
              required: true
            },
            size: {
              type: Number,
              required: true
            }
          },
          data: function data3() {
            return {
              viewboxSize: AvatarSunsetvue_type_script_lang_js_SIZE
            };
          },
          computed: {
            shortName: function shortName() {
              return this.name.replace(/\s/g, "");
            },
            properties: function properties() {
              var _this = this;
              var numFromName = getNumber(this.name);
              var range3 = this.colors && this.colors.length;
              var elementsProperties = Array.from({
                length: AvatarSunsetvue_type_script_lang_js_ELEMENTS
              }, function(_2, i) {
                return {
                  color: getRandomColor(numFromName + i, _this.colors, range3)
                };
              });
              return elementsProperties;
            }
          },
          filters: {
            short: function short(value) {
              return value.replace(/\s/g, "");
            }
          }
        };
        var components_AvatarSunsetvue_type_script_lang_js_ = AvatarSunsetvue_type_script_lang_js_;
        var AvatarSunset_component = normalizeComponent2(
          components_AvatarSunsetvue_type_script_lang_js_,
          AvatarSunsetvue_type_template_id_31afec8a_render,
          AvatarSunsetvue_type_template_id_31afec8a_staticRenderFns,
          false,
          null,
          null,
          null
        );
        var AvatarSunset = AvatarSunset_component.exports;
        var AvatarBeamvue_type_template_id_4c715b3c_render = function() {
          var _vm = this;
          var _h = _vm.$createElement;
          var _c = _vm._self._c || _h;
          return _c("svg", { attrs: { "viewBox": "0 0 " + _vm.viewboxSize + " " + _vm.viewboxSize, "fill": "none", "xmlns": "http://www.w3.org/2000/svg", "width": _vm.size, "height": _vm.size } }, [_c("mask", { attrs: { "id": "mask__beam", "maskUnits": "userSpaceOnUse", "x": "0", "y": "0", "width": _vm.viewboxSize, "height": _vm.viewboxSize } }, [_c("rect", { attrs: { "width": _vm.viewboxSize, "height": _vm.viewboxSize, "rx": "20", "fill": "white" } })]), _c("g", { attrs: { "mask": "url(#mask__beam)", "fill": "transparent" } }, [_c("rect", { attrs: { "width": _vm.viewboxSize, "height": _vm.viewboxSize, "rx": "20", "fill": _vm.data.backgroundColor } }), _c("rect", { attrs: { "x": "0", "y": "0", "width": _vm.viewboxSize, "height": _vm.viewboxSize, "transform": "translate(" + _vm.data.wrapperTranslateX + " " + _vm.data.wrapperTranslateY + ") rotate(" + _vm.data.wrapperRotate + " " + _vm.viewboxSize / 2 + " " + _vm.viewboxSize / 2 + ") scale(" + _vm.data.wrapperScale + ")", "fill": _vm.data.wrapperColor, "rx": _vm.data.isCircle ? _vm.viewboxSize : _vm.viewboxSize / 6 } }), _c("g", { attrs: { "transform": "translate(" + _vm.data.faceTranslateX + " " + _vm.data.faceTranslateY + ") rotate(" + _vm.data.faceRotate + " " + _vm.viewboxSize / 2 + " " + _vm.viewboxSize / 2 + ")" } }, [_vm.data.isMonthOpen ? _c("path", { attrs: { "d": "M15 " + (19 + _vm.data.mouthSpread) + " c2 1\n      4 1 6 0", "stroke": _vm.data.faceColor, "fill": "none", "strokeLinecap": "round" } }) : _c("path", { attrs: { "d": "M13, " + (19 + _vm.data.mouthSpread) + " a1,0.75 0 0,0 10,0", "fill": _vm.data.faceColor } }), _c("rect", { attrs: { "x": 14 + _vm.data.eyeSpread, "y": "14", "width": "1.5", "height": "2", "rx": "1", "stroke": "none", "fill": _vm.data.faceColor } }), _c("rect", { attrs: { "x": 20 + _vm.data.eyeSpread, "y": "14", "width": "1.5", "height": "2", "rx": "1", "stroke": "none", "fill": _vm.data.faceColor } })])])]);
        };
        var AvatarBeamvue_type_template_id_4c715b3c_staticRenderFns = [];
        var AvatarBeamvue_type_script_lang_js_SIZE = 36;
        var AvatarBeamvue_type_script_lang_js_ = {
          props: {
            name: {
              type: String,
              required: true
            },
            colors: {
              type: Array,
              required: true
            },
            size: {
              type: Number,
              required: true
            }
          },
          data: function data3() {
            return {
              viewboxSize: AvatarBeamvue_type_script_lang_js_SIZE
            };
          },
          computed: {
            data: function data3() {
              var numFromName = getNumber(this.name);
              var range3 = this.colors && this.colors.length;
              var wrapperColor = getRandomColor(numFromName, this.colors, range3);
              var preTranslateX = getUnit(numFromName, 10, 1);
              var wrapperTranslateX = preTranslateX < 5 ? preTranslateX + AvatarBeamvue_type_script_lang_js_SIZE / 9 : preTranslateX;
              var preTranslateY = getUnit(numFromName, 10, 2);
              var wrapperTranslateY = preTranslateY < 5 ? preTranslateY + AvatarBeamvue_type_script_lang_js_SIZE / 9 : preTranslateY;
              var data4 = {
                wrapperColor,
                faceColor: getContrast(wrapperColor),
                backgroundColor: getRandomColor(numFromName + 13, this.colors, range3),
                wrapperTranslateX,
                wrapperTranslateY,
                wrapperRotate: getUnit(numFromName, 360),
                wrapperScale: 1 + getUnit(numFromName, AvatarBeamvue_type_script_lang_js_SIZE / 12) / 10,
                isMouthOpen: getBoolean(numFromName, 2),
                isCircle: getBoolean(numFromName, 1),
                eyeSpread: getUnit(numFromName, 5),
                mouthSpread: getUnit(numFromName, 3),
                faceRotate: getUnit(numFromName, 10, 3),
                faceTranslateX: wrapperTranslateX > AvatarBeamvue_type_script_lang_js_SIZE / 6 ? wrapperTranslateX / 2 : getUnit(numFromName, 8, 1),
                faceTranslateY: wrapperTranslateY > AvatarBeamvue_type_script_lang_js_SIZE / 6 ? wrapperTranslateY / 2 : getUnit(numFromName, 7, 2)
              };
              return data4;
            }
          }
        };
        var components_AvatarBeamvue_type_script_lang_js_ = AvatarBeamvue_type_script_lang_js_;
        var AvatarBeam_component = normalizeComponent2(
          components_AvatarBeamvue_type_script_lang_js_,
          AvatarBeamvue_type_template_id_4c715b3c_render,
          AvatarBeamvue_type_template_id_4c715b3c_staticRenderFns,
          false,
          null,
          null,
          null
        );
        var AvatarBeam = AvatarBeam_component.exports;
        var VARIANTS = ["pixels", "bauhaus", "ring", "beam", "sunset", "marble"];
        var Avatarvue_type_script_lang_js_ = {
          components: {
            AvatarPixels,
            AvatarBauhaus,
            AvatarMarble,
            AvatarSunset,
            AvatarRing,
            AvatarBeam
          },
          props: {
            variant: {
              type: String,
              default: "pixels",
              validator: function validator5(value) {
                return VARIANTS.includes(value);
              }
            },
            name: {
              type: String,
              default: "Mary Baker"
            },
            colors: {
              type: Array,
              default: function _default3() {
                return ["#92A1C6", "#146A7C", "#F0AB3D", "#C271B4", "#C20D90"];
              }
            },
            size: {
              type: Number,
              default: 80
            }
          },
          computed: {
            componentName: function componentName() {
              if (!VARIANTS.includes(this.variant)) {
                return "avatar-pixels";
              }
              return "avatar-" + this.variant;
            }
          }
        };
        var components_Avatarvue_type_script_lang_js_ = Avatarvue_type_script_lang_js_;
        var Avatar_component = normalizeComponent2(
          components_Avatarvue_type_script_lang_js_,
          render50,
          staticRenderFns,
          false,
          null,
          null,
          null
        );
        var Avatar2 = Avatar_component.exports;
        var src_0 = Avatar2;
        __webpack_exports__["default"] = src_0;
      },
      "fb6a": function(module2, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var isObject2 = __webpack_require__("861d");
        var isArray = __webpack_require__("e8b5");
        var toAbsoluteIndex = __webpack_require__("23cb");
        var toLength = __webpack_require__("50c4");
        var toIndexedObject = __webpack_require__("fc6a");
        var createProperty = __webpack_require__("8418");
        var wellKnownSymbol = __webpack_require__("b622");
        var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
        var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
        var SPECIES = wellKnownSymbol("species");
        var nativeSlice = [].slice;
        var max = Math.max;
        $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
          slice: function slice(start, end2) {
            var O = toIndexedObject(this);
            var length = toLength(O.length);
            var k = toAbsoluteIndex(start, length);
            var fin = toAbsoluteIndex(end2 === void 0 ? length : end2, length);
            var Constructor, result2, n;
            if (isArray(O)) {
              Constructor = O.constructor;
              if (typeof Constructor == "function" && (Constructor === Array || isArray(Constructor.prototype))) {
                Constructor = void 0;
              } else if (isObject2(Constructor)) {
                Constructor = Constructor[SPECIES];
                if (Constructor === null)
                  Constructor = void 0;
              }
              if (Constructor === Array || Constructor === void 0) {
                return nativeSlice.call(O, k, fin);
              }
            }
            result2 = new (Constructor === void 0 ? Array : Constructor)(max(fin - k, 0));
            for (n = 0; k < fin; k++, n++)
              if (k in O)
                createProperty(result2, n, O[k]);
            result2.length = n;
            return result2;
          }
        });
      },
      "fc6a": function(module2, exports2, __webpack_require__) {
        var IndexedObject = __webpack_require__("44ad");
        var requireObjectCoercible = __webpack_require__("1d80");
        module2.exports = function(it2) {
          return IndexedObject(requireObjectCoercible(it2));
        };
      },
      "fdbf": function(module2, exports2, __webpack_require__) {
        var NATIVE_SYMBOL = __webpack_require__("4930");
        module2.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
      }
    });
  });
})(vue2BoringAvatars_umd);
var Avatar = /* @__PURE__ */ getDefaultExportFromCjs(vue2BoringAvatars_umd.exports);
const sizes = {
  small: 28,
  large: 48,
  medium: 40
};
var _sfc_main$A = Vue.extend({
  name: "n8n-avatar",
  props: {
    firstName: {
      type: String
    },
    lastName: {
      type: String
    },
    size: {
      type: String,
      default: "medium"
    },
    colors: {
      default: () => ["--color-primary", "--color-secondary", "--color-avatar-accent-1", "--color-avatar-accent-2", "--color-primary-tint-1"]
    }
  },
  components: {
    Avatar
  },
  computed: {
    initials() {
      return (this.firstName ? this.firstName.charAt(0) : "") + (this.lastName ? this.lastName.charAt(0) : "");
    }
  },
  methods: {
    getColors(colors) {
      const style = getComputedStyle(document.body);
      return colors.map((color) => style.getPropertyValue(color));
    },
    getSize(size) {
      return sizes[size];
    }
  }
});
const container$a = "_container_1gia6_1";
const empty$2 = "_empty_1gia6_8";
const initials = "_initials_1gia6_14";
const small$2 = "_small_1gia6_22";
const medium$2 = "_medium_1gia6_27";
const large = "_large_1gia6_32";
var style0$w = {
  container: container$a,
  empty: empty$2,
  initials,
  small: small$2,
  medium: medium$2,
  large
};
var _sfc_render$D = function render11() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("span", _vm._g({ class: ["n8n-avatar", _vm.$style.container] }, _vm.$listeners), [_vm.firstName ? _c("avatar", { attrs: { "size": _vm.getSize(_vm.size), "name": _vm.firstName + " " + _vm.lastName, "variant": "marble", "colors": _vm.getColors(_vm.colors) } }) : _c("div", { class: [_vm.$style.empty, _vm.$style[_vm.size]] }), _vm.firstName ? _c("span", { class: _vm.$style.initials }, [_vm._v(_vm._s(_vm.initials))]) : _vm._e()], 1);
};
var _sfc_staticRenderFns$D = [];
const __cssModules$w = {
  "$style": style0$w
};
function _sfc_injectStyles$w(ctx2) {
  for (var key2 in __cssModules$w) {
    this[key2] = __cssModules$w[key2];
  }
}
var __component__$D = /* @__PURE__ */ normalizeComponent(
  _sfc_main$A,
  _sfc_render$D,
  _sfc_staticRenderFns$D,
  false,
  _sfc_injectStyles$w,
  null,
  null,
  null
);
var N8nAvatar = __component__$D.exports;
var _sfc_main$z = Vue.extend({
  props: {
    theme: {
      type: String,
      default: "default",
      validator: (value) => ["default", "primary", "secondary", "tertiary"].includes(value)
    },
    size: {
      type: String,
      default: "small"
    },
    bold: {
      type: Boolean,
      default: false
    }
  },
  components: {
    N8nText
  }
});
const badge$1 = "_badge_1xljn_1";
const primary$1 = "_primary_1xljn_16 _badge_1xljn_1";
const secondary$1 = "_secondary_1xljn_25 _badge_1xljn_1";
const tertiary = "_tertiary_1xljn_32 _badge_1xljn_1";
var style0$v = {
  badge: badge$1,
  "default": "_default_1xljn_9 _badge_1xljn_1",
  primary: primary$1,
  secondary: secondary$1,
  tertiary
};
var _sfc_render$C = function render12() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("span", { class: ["n8n-badge", _vm.$style[_vm.theme]] }, [_c("n8n-text", { attrs: { "size": _vm.size, "bold": _vm.bold, "compact": true } }, [_vm._t("default")], 2)], 1);
};
var _sfc_staticRenderFns$C = [];
const __cssModules$v = {
  "$style": style0$v
};
function _sfc_injectStyles$v(ctx2) {
  for (var key2 in __cssModules$v) {
    this[key2] = __cssModules$v[key2];
  }
}
var __component__$C = /* @__PURE__ */ normalizeComponent(
  _sfc_main$z,
  _sfc_render$C,
  _sfc_staticRenderFns$C,
  false,
  _sfc_injectStyles$v,
  null,
  null,
  null
);
var N8nBadge = __component__$C.exports;
var _sfc_main$y = /* @__PURE__ */ defineComponent({
  __name: "BlockUi",
  props: {
    show: { type: Boolean, default: false }
  },
  setup(__props) {
    const props = __props;
    return { __sfc: true, props };
  }
});
const uiBlocker = "_uiBlocker_1ux9a_1";
var style0$u = {
  uiBlocker
};
var BlockUi_vue_vue_type_style_index_1_scoped_669e5f25_lang = "";
var _sfc_render$B = function render13() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("transition", { attrs: { "name": "fade", "mode": "out-in" } }, [_c("div", { directives: [{ name: "show", rawName: "v-show", value: _vm.show, expression: "show" }], class: ["n8n-block-ui", _vm.$style.uiBlocker], attrs: { "role": "dialog", "aria-hidden": true } })]);
};
var _sfc_staticRenderFns$B = [];
const __cssModules$u = {
  "$style": style0$u
};
function _sfc_injectStyles$u(ctx2) {
  for (var key2 in __cssModules$u) {
    this[key2] = __cssModules$u[key2];
  }
}
var __component__$B = /* @__PURE__ */ normalizeComponent(
  _sfc_main$y,
  _sfc_render$B,
  _sfc_staticRenderFns$B,
  false,
  _sfc_injectStyles$u,
  "669e5f25",
  null,
  null
);
var N8nBlockUi = __component__$B.exports;
const classToTypeMap = {
  "btn--cancel": "secondary"
};
var _sfc_main$x = Vue.extend({
  components: {
    N8nButton
  },
  computed: {
    attrs() {
      let type = "primary";
      Object.entries(classToTypeMap).forEach(([className, mappedType]) => {
        if (this.$refs.button && this.$refs.button.$el.classList.contains(className)) {
          type = mappedType;
        }
      });
      return {
        type,
        ...this.$attrs
      };
    }
  }
});
var _sfc_render$A = function render14() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("n8n-button", _vm._g(_vm._b({ ref: "button" }, "n8n-button", _vm.attrs, false), _vm.$listeners), [_vm._t("default")], 2);
};
var _sfc_staticRenderFns$A = [];
var __component__$A = /* @__PURE__ */ normalizeComponent(
  _sfc_main$x,
  _sfc_render$A,
  _sfc_staticRenderFns$A,
  false,
  null,
  null,
  null,
  null
);
var N8nElButton = __component__$A.exports;
var _sfc_main$w = Vue.extend({
  name: "n8n-card",
  inheritAttrs: true,
  props: {
    hoverable: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    classes() {
      return {
        card: true,
        [this.$style.card]: true,
        [this.$style.hoverable]: this.hoverable
      };
    }
  }
});
const card$1 = "_card_10dnp_1";
const header$1 = "_header_10dnp_12";
const footer$1 = "_footer_10dnp_13";
const content = "_content_10dnp_20";
const body = "_body_10dnp_28";
const icon$2 = "_icon_10dnp_36";
const hoverable$1 = "_hoverable_10dnp_45";
var style0$t = {
  card: card$1,
  header: header$1,
  footer: footer$1,
  content,
  body,
  icon: icon$2,
  hoverable: hoverable$1
};
var _sfc_render$z = function render15() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", _vm._g({ class: _vm.classes }, _vm.$listeners), [_vm.$slots.prepend ? _c("div", { class: _vm.$style.icon }, [_vm._t("prepend")], 2) : _vm._e(), _c("div", { class: _vm.$style.content }, [_vm.$slots.header ? _c("div", { class: _vm.$style.header }, [_vm._t("header")], 2) : _vm._e(), _vm.$slots.default ? _c("div", { class: _vm.$style.body }, [_vm._t("default")], 2) : _vm._e(), _vm.$slots.footer ? _c("div", { class: _vm.$style.footer }, [_vm._t("footer")], 2) : _vm._e()]), _vm.$slots.append ? _c("div", { class: _vm.$style.actions }, [_vm._t("append")], 2) : _vm._e()]);
};
var _sfc_staticRenderFns$z = [];
const __cssModules$t = {
  "$style": style0$t
};
function _sfc_injectStyles$t(ctx2) {
  for (var key2 in __cssModules$t) {
    this[key2] = __cssModules$t[key2];
  }
}
var __component__$z = /* @__PURE__ */ normalizeComponent(
  _sfc_main$w,
  _sfc_render$z,
  _sfc_staticRenderFns$z,
  false,
  _sfc_injectStyles$t,
  null,
  null,
  null
);
var N8nCard = __component__$z.exports;
var input$2 = { exports: {} };
var shared = {};
shared.__esModule = true;
shared.isDef = isDef;
shared.isKorean = isKorean;
function isDef(val) {
  return val !== void 0 && val !== null;
}
function isKorean(text3) {
  var reg2 = /([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi;
  return reg2.test(text3);
}
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 74);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    11: function(module2, exports) {
      module2.exports = migrating;
    },
    21: function(module2, exports) {
      module2.exports = shared;
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    74: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            class: [
              _vm.type === "textarea" ? "el-textarea" : "el-input",
              _vm.inputSize ? "el-input--" + _vm.inputSize : "",
              {
                "is-disabled": _vm.inputDisabled,
                "is-exceed": _vm.inputExceed,
                "el-input-group": _vm.$slots.prepend || _vm.$slots.append,
                "el-input-group--append": _vm.$slots.append,
                "el-input-group--prepend": _vm.$slots.prepend,
                "el-input--prefix": _vm.$slots.prefix || _vm.prefixIcon,
                "el-input--suffix": _vm.$slots.suffix || _vm.suffixIcon || _vm.clearable || _vm.showPassword
              }
            ],
            on: {
              mouseenter: function($event) {
                _vm.hovering = true;
              },
              mouseleave: function($event) {
                _vm.hovering = false;
              }
            }
          },
          [
            _vm.type !== "textarea" ? [
              _vm.$slots.prepend ? _c(
                "div",
                { staticClass: "el-input-group__prepend" },
                [_vm._t("prepend")],
                2
              ) : _vm._e(),
              _vm.type !== "textarea" ? _c(
                "input",
                _vm._b(
                  {
                    ref: "input",
                    staticClass: "el-input__inner",
                    attrs: {
                      tabindex: _vm.tabindex,
                      type: _vm.showPassword ? _vm.passwordVisible ? "text" : "password" : _vm.type,
                      disabled: _vm.inputDisabled,
                      readonly: _vm.readonly,
                      autocomplete: _vm.autoComplete || _vm.autocomplete,
                      "aria-label": _vm.label
                    },
                    on: {
                      compositionstart: _vm.handleCompositionStart,
                      compositionupdate: _vm.handleCompositionUpdate,
                      compositionend: _vm.handleCompositionEnd,
                      input: _vm.handleInput,
                      focus: _vm.handleFocus,
                      blur: _vm.handleBlur,
                      change: _vm.handleChange
                    }
                  },
                  "input",
                  _vm.$attrs,
                  false
                )
              ) : _vm._e(),
              _vm.$slots.prefix || _vm.prefixIcon ? _c(
                "span",
                { staticClass: "el-input__prefix" },
                [
                  _vm._t("prefix"),
                  _vm.prefixIcon ? _c("i", {
                    staticClass: "el-input__icon",
                    class: _vm.prefixIcon
                  }) : _vm._e()
                ],
                2
              ) : _vm._e(),
              _vm.getSuffixVisible() ? _c("span", { staticClass: "el-input__suffix" }, [
                _c(
                  "span",
                  { staticClass: "el-input__suffix-inner" },
                  [
                    !_vm.showClear || !_vm.showPwdVisible || !_vm.isWordLimitVisible ? [
                      _vm._t("suffix"),
                      _vm.suffixIcon ? _c("i", {
                        staticClass: "el-input__icon",
                        class: _vm.suffixIcon
                      }) : _vm._e()
                    ] : _vm._e(),
                    _vm.showClear ? _c("i", {
                      staticClass: "el-input__icon el-icon-circle-close el-input__clear",
                      on: {
                        mousedown: function($event) {
                          $event.preventDefault();
                        },
                        click: _vm.clear
                      }
                    }) : _vm._e(),
                    _vm.showPwdVisible ? _c("i", {
                      staticClass: "el-input__icon el-icon-view el-input__clear",
                      on: { click: _vm.handlePasswordVisible }
                    }) : _vm._e(),
                    _vm.isWordLimitVisible ? _c("span", { staticClass: "el-input__count" }, [
                      _c(
                        "span",
                        { staticClass: "el-input__count-inner" },
                        [
                          _vm._v(
                            "\n            " + _vm._s(_vm.textLength) + "/" + _vm._s(_vm.upperLimit) + "\n          "
                          )
                        ]
                      )
                    ]) : _vm._e()
                  ],
                  2
                ),
                _vm.validateState ? _c("i", {
                  staticClass: "el-input__icon",
                  class: ["el-input__validateIcon", _vm.validateIcon]
                }) : _vm._e()
              ]) : _vm._e(),
              _vm.$slots.append ? _c(
                "div",
                { staticClass: "el-input-group__append" },
                [_vm._t("append")],
                2
              ) : _vm._e()
            ] : _c(
              "textarea",
              _vm._b(
                {
                  ref: "textarea",
                  staticClass: "el-textarea__inner",
                  style: _vm.textareaStyle,
                  attrs: {
                    tabindex: _vm.tabindex,
                    disabled: _vm.inputDisabled,
                    readonly: _vm.readonly,
                    autocomplete: _vm.autoComplete || _vm.autocomplete,
                    "aria-label": _vm.label
                  },
                  on: {
                    compositionstart: _vm.handleCompositionStart,
                    compositionupdate: _vm.handleCompositionUpdate,
                    compositionend: _vm.handleCompositionEnd,
                    input: _vm.handleInput,
                    focus: _vm.handleFocus,
                    blur: _vm.handleBlur,
                    change: _vm.handleChange
                  }
                },
                "textarea",
                _vm.$attrs,
                false
              )
            ),
            _vm.isWordLimitVisible && _vm.type === "textarea" ? _c("span", { staticClass: "el-input__count" }, [
              _vm._v(_vm._s(_vm.textLength) + "/" + _vm._s(_vm.upperLimit))
            ]) : _vm._e()
          ],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var migrating_ = __webpack_require__(11);
      var migrating_default = /* @__PURE__ */ __webpack_require__.n(migrating_);
      var hiddenTextarea = void 0;
      var HIDDEN_STYLE = "\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
      var CONTEXT_STYLE = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];
      function calculateNodeStyling(targetElement) {
        var style = window.getComputedStyle(targetElement);
        var boxSizing = style.getPropertyValue("box-sizing");
        var paddingSize = parseFloat(style.getPropertyValue("padding-bottom")) + parseFloat(style.getPropertyValue("padding-top"));
        var borderSize = parseFloat(style.getPropertyValue("border-bottom-width")) + parseFloat(style.getPropertyValue("border-top-width"));
        var contextStyle = CONTEXT_STYLE.map(function(name) {
          return name + ":" + style.getPropertyValue(name);
        }).join(";");
        return { contextStyle, paddingSize, borderSize, boxSizing };
      }
      function calcTextareaHeight(targetElement) {
        var minRows = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        var maxRows = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!hiddenTextarea) {
          hiddenTextarea = document.createElement("textarea");
          document.body.appendChild(hiddenTextarea);
        }
        var _calculateNodeStyling = calculateNodeStyling(targetElement), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, contextStyle = _calculateNodeStyling.contextStyle;
        hiddenTextarea.setAttribute("style", contextStyle + ";" + HIDDEN_STYLE);
        hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
        var height = hiddenTextarea.scrollHeight;
        var result2 = {};
        if (boxSizing === "border-box") {
          height = height + borderSize;
        } else if (boxSizing === "content-box") {
          height = height - paddingSize;
        }
        hiddenTextarea.value = "";
        var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
        if (minRows !== null) {
          var minHeight = singleRowHeight * minRows;
          if (boxSizing === "border-box") {
            minHeight = minHeight + paddingSize + borderSize;
          }
          height = Math.max(minHeight, height);
          result2.minHeight = minHeight + "px";
        }
        if (maxRows !== null) {
          var maxHeight = singleRowHeight * maxRows;
          if (boxSizing === "border-box") {
            maxHeight = maxHeight + paddingSize + borderSize;
          }
          height = Math.min(maxHeight, height);
        }
        result2.height = height + "px";
        hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
        hiddenTextarea = null;
        return result2;
      }
      var merge_ = __webpack_require__(9);
      var merge_default = /* @__PURE__ */ __webpack_require__.n(merge_);
      var shared_ = __webpack_require__(21);
      var inputvue_type_script_lang_js_ = {
        name: "ElInput",
        componentName: "ElInput",
        mixins: [emitter_default.a, migrating_default.a],
        inheritAttrs: false,
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        data: function data3() {
          return {
            textareaCalcStyle: {},
            hovering: false,
            focused: false,
            isComposing: false,
            passwordVisible: false
          };
        },
        props: {
          value: [String, Number],
          size: String,
          resize: String,
          form: String,
          disabled: Boolean,
          readonly: Boolean,
          type: {
            type: String,
            default: "text"
          },
          autosize: {
            type: [Boolean, Object],
            default: false
          },
          autocomplete: {
            type: String,
            default: "off"
          },
          autoComplete: {
            type: String,
            validator: function validator5(val) {
              return true;
            }
          },
          validateEvent: {
            type: Boolean,
            default: true
          },
          suffixIcon: String,
          prefixIcon: String,
          label: String,
          clearable: {
            type: Boolean,
            default: false
          },
          showPassword: {
            type: Boolean,
            default: false
          },
          showWordLimit: {
            type: Boolean,
            default: false
          },
          tabindex: String
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          validateState: function validateState() {
            return this.elFormItem ? this.elFormItem.validateState : "";
          },
          needStatusIcon: function needStatusIcon() {
            return this.elForm ? this.elForm.statusIcon : false;
          },
          validateIcon: function validateIcon() {
            return {
              validating: "el-icon-loading",
              success: "el-icon-circle-check",
              error: "el-icon-circle-close"
            }[this.validateState];
          },
          textareaStyle: function textareaStyle() {
            return merge_default()({}, this.textareaCalcStyle, { resize: this.resize });
          },
          inputSize: function inputSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          inputDisabled: function inputDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          nativeInputValue: function nativeInputValue() {
            return this.value === null || this.value === void 0 ? "" : String(this.value);
          },
          showClear: function showClear() {
            return this.clearable && !this.inputDisabled && !this.readonly && this.nativeInputValue && (this.focused || this.hovering);
          },
          showPwdVisible: function showPwdVisible() {
            return this.showPassword && !this.inputDisabled && !this.readonly && (!!this.nativeInputValue || this.focused);
          },
          isWordLimitVisible: function isWordLimitVisible() {
            return this.showWordLimit && this.$attrs.maxlength && (this.type === "text" || this.type === "textarea") && !this.inputDisabled && !this.readonly && !this.showPassword;
          },
          upperLimit: function upperLimit() {
            return this.$attrs.maxlength;
          },
          textLength: function textLength() {
            if (typeof this.value === "number") {
              return String(this.value).length;
            }
            return (this.value || "").length;
          },
          inputExceed: function inputExceed() {
            return this.isWordLimitVisible && this.textLength > this.upperLimit;
          }
        },
        watch: {
          value: function value(val) {
            this.$nextTick(this.resizeTextarea);
            if (this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.change", [val]);
            }
          },
          nativeInputValue: function nativeInputValue() {
            this.setNativeInputValue();
          },
          type: function type() {
            var _this = this;
            this.$nextTick(function() {
              _this.setNativeInputValue();
              _this.resizeTextarea();
              _this.updateIconOffset();
            });
          }
        },
        methods: {
          focus: function focus2() {
            this.getInput().focus();
          },
          blur: function blur() {
            this.getInput().blur();
          },
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "icon": "icon is removed, use suffix-icon / prefix-icon instead.",
                "on-icon-click": "on-icon-click is removed."
              },
              events: {
                "click": "click is removed."
              }
            };
          },
          handleBlur: function handleBlur(event) {
            this.focused = false;
            this.$emit("blur", event);
            if (this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.blur", [this.value]);
            }
          },
          select: function select2() {
            this.getInput().select();
          },
          resizeTextarea: function resizeTextarea() {
            if (this.$isServer)
              return;
            var autosize = this.autosize, type = this.type;
            if (type !== "textarea")
              return;
            if (!autosize) {
              this.textareaCalcStyle = {
                minHeight: calcTextareaHeight(this.$refs.textarea).minHeight
              };
              return;
            }
            var minRows = autosize.minRows;
            var maxRows = autosize.maxRows;
            this.textareaCalcStyle = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);
          },
          setNativeInputValue: function setNativeInputValue() {
            var input3 = this.getInput();
            if (!input3)
              return;
            if (input3.value === this.nativeInputValue)
              return;
            input3.value = this.nativeInputValue;
          },
          handleFocus: function handleFocus(event) {
            this.focused = true;
            this.$emit("focus", event);
          },
          handleCompositionStart: function handleCompositionStart(event) {
            this.$emit("compositionstart", event);
            this.isComposing = true;
          },
          handleCompositionUpdate: function handleCompositionUpdate(event) {
            this.$emit("compositionupdate", event);
            var text3 = event.target.value;
            var lastCharacter = text3[text3.length - 1] || "";
            this.isComposing = !Object(shared_["isKorean"])(lastCharacter);
          },
          handleCompositionEnd: function handleCompositionEnd(event) {
            this.$emit("compositionend", event);
            if (this.isComposing) {
              this.isComposing = false;
              this.handleInput(event);
            }
          },
          handleInput: function handleInput(event) {
            if (this.isComposing)
              return;
            if (event.target.value === this.nativeInputValue)
              return;
            this.$emit("input", event.target.value);
            this.$nextTick(this.setNativeInputValue);
          },
          handleChange: function handleChange(event) {
            this.$emit("change", event.target.value);
          },
          calcIconOffset: function calcIconOffset(place) {
            var elList = [].slice.call(this.$el.querySelectorAll(".el-input__" + place) || []);
            if (!elList.length)
              return;
            var el2 = null;
            for (var i = 0; i < elList.length; i++) {
              if (elList[i].parentNode === this.$el) {
                el2 = elList[i];
                break;
              }
            }
            if (!el2)
              return;
            var pendantMap = {
              suffix: "append",
              prefix: "prepend"
            };
            var pendant = pendantMap[place];
            if (this.$slots[pendant]) {
              el2.style.transform = "translateX(" + (place === "suffix" ? "-" : "") + this.$el.querySelector(".el-input-group__" + pendant).offsetWidth + "px)";
            } else {
              el2.removeAttribute("style");
            }
          },
          updateIconOffset: function updateIconOffset() {
            this.calcIconOffset("prefix");
            this.calcIconOffset("suffix");
          },
          clear: function clear() {
            this.$emit("input", "");
            this.$emit("change", "");
            this.$emit("clear");
          },
          handlePasswordVisible: function handlePasswordVisible() {
            var _this2 = this;
            this.passwordVisible = !this.passwordVisible;
            this.$nextTick(function() {
              _this2.focus();
            });
          },
          getInput: function getInput() {
            return this.$refs.input || this.$refs.textarea;
          },
          getSuffixVisible: function getSuffixVisible() {
            return this.$slots.suffix || this.suffixIcon || this.showClear || this.showPassword || this.isWordLimitVisible || this.validateState && this.needStatusIcon;
          }
        },
        created: function created() {
          this.$on("inputSelect", this.select);
        },
        mounted: function mounted2() {
          this.setNativeInputValue();
          this.resizeTextarea();
          this.updateIconOffset();
        },
        updated: function updated() {
          this.$nextTick(this.updateIconOffset);
        }
      };
      var src_inputvue_type_script_lang_js_ = inputvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_inputvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/input/src/input.vue";
      var input2 = component.exports;
      input2.install = function(Vue2) {
        Vue2.component(input2.name, input2);
      };
      __webpack_exports__["default"] = input2;
    },
    9: function(module2, exports) {
      module2.exports = merge;
    }
  });
})(input$2);
var ElInput = /* @__PURE__ */ getDefaultExportFromCjs(input$2.exports);
var _sfc_main$v = Vue.extend({
  name: "n8n-input",
  components: {
    ElInput
  },
  props: {
    value: {},
    type: {
      type: String,
      validator: (value) => ["text", "textarea", "number", "password", "email"].includes(value)
    },
    size: {
      type: String,
      default: "large",
      validator: (value) => ["mini", "small", "medium", "large", "xlarge"].includes(value)
    },
    placeholder: {
      type: String
    },
    disabled: {
      type: Boolean
    },
    readonly: {
      type: Boolean
    },
    clearable: {
      type: Boolean
    },
    rows: {
      type: Number
    },
    maxlength: {
      type: Number
    },
    title: {
      type: String
    },
    name: {
      type: String
    },
    autocomplete: {
      type: String,
      default: "off"
    }
  },
  computed: {
    computedSize() {
      if (this.size === "xlarge") {
        return void 0;
      }
      return this.size;
    },
    classes() {
      if (this.size === "xlarge") {
        return ["xlarge"];
      }
      return [];
    }
  },
  methods: {
    focus() {
      const innerInput = this.$refs.innerInput;
      if (!innerInput)
        return;
      const inputElement = innerInput.$el.querySelector(
        this.type === "textarea" ? "textarea" : "input"
      );
      if (!inputElement)
        return;
      inputElement.focus();
    },
    blur() {
      const innerInput = this.$refs.innerInput;
      if (!innerInput)
        return;
      const inputElement = innerInput.$el.querySelector(
        this.type === "textarea" ? "textarea" : "input"
      );
      if (!inputElement)
        return;
      inputElement.blur();
    },
    select() {
      const innerInput = this.$refs.innerInput;
      if (!innerInput)
        return;
      const inputElement = innerInput.$el.querySelector(
        this.type === "textarea" ? "textarea" : "input"
      );
      if (!inputElement)
        return;
      inputElement.select();
    }
  }
});
const xlarge$1 = "_xlarge_ddtui_1";
var style0$s = {
  xlarge: xlarge$1
};
var _sfc_render$y = function render16() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("el-input", _vm._g(_vm._b({ ref: "innerInput", class: ["n8n-input", ..._vm.classes], attrs: { "size": _vm.computedSize, "autoComplete": _vm.autocomplete, "name": _vm.name }, scopedSlots: _vm._u([{ key: "prepend", fn: function() {
    return [_vm._t("prepend")];
  }, proxy: true }, { key: "append", fn: function() {
    return [_vm._t("append")];
  }, proxy: true }, { key: "prefix", fn: function() {
    return [_vm._t("prefix")];
  }, proxy: true }, { key: "suffix", fn: function() {
    return [_vm._t("suffix")];
  }, proxy: true }], null, true) }, "el-input", _vm.$props, false), _vm.$listeners));
};
var _sfc_staticRenderFns$y = [];
const __cssModules$s = {
  "$style": style0$s
};
function _sfc_injectStyles$s(ctx2) {
  for (var key2 in __cssModules$s) {
    this[key2] = __cssModules$s[key2];
  }
}
var __component__$y = /* @__PURE__ */ normalizeComponent(
  _sfc_main$v,
  _sfc_render$y,
  _sfc_staticRenderFns$y,
  false,
  _sfc_injectStyles$s,
  null,
  null,
  null
);
var N8nInput = __component__$y.exports;
var select = { exports: {} };
var scrollbar = { exports: {} };
var resizeEvent = {};
var MapShim = function() {
  if (typeof Map !== "undefined") {
    return Map;
  }
  function getIndex(arr, key2) {
    var result2 = -1;
    arr.some(function(entry, index2) {
      if (entry[0] === key2) {
        result2 = index2;
        return true;
      }
      return false;
    });
    return result2;
  }
  return function() {
    function class_1() {
      this.__entries__ = [];
    }
    Object.defineProperty(class_1.prototype, "size", {
      get: function() {
        return this.__entries__.length;
      },
      enumerable: true,
      configurable: true
    });
    class_1.prototype.get = function(key2) {
      var index2 = getIndex(this.__entries__, key2);
      var entry = this.__entries__[index2];
      return entry && entry[1];
    };
    class_1.prototype.set = function(key2, value) {
      var index2 = getIndex(this.__entries__, key2);
      if (~index2) {
        this.__entries__[index2][1] = value;
      } else {
        this.__entries__.push([key2, value]);
      }
    };
    class_1.prototype.delete = function(key2) {
      var entries = this.__entries__;
      var index2 = getIndex(entries, key2);
      if (~index2) {
        entries.splice(index2, 1);
      }
    };
    class_1.prototype.has = function(key2) {
      return !!~getIndex(this.__entries__, key2);
    };
    class_1.prototype.clear = function() {
      this.__entries__.splice(0);
    };
    class_1.prototype.forEach = function(callback, ctx2) {
      if (ctx2 === void 0) {
        ctx2 = null;
      }
      for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
        var entry = _a[_i];
        callback.call(ctx2, entry[1], entry[0]);
      }
    };
    return class_1;
  }();
}();
var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
var global$1 = function() {
  if (typeof global !== "undefined" && global.Math === Math) {
    return global;
  }
  if (typeof self !== "undefined" && self.Math === Math) {
    return self;
  }
  if (typeof window !== "undefined" && window.Math === Math) {
    return window;
  }
  return Function("return this")();
}();
var requestAnimationFrame$1 = function() {
  if (typeof requestAnimationFrame === "function") {
    return requestAnimationFrame.bind(global$1);
  }
  return function(callback) {
    return setTimeout(function() {
      return callback(Date.now());
    }, 1e3 / 60);
  };
}();
var trailingTimeout = 2;
function throttle$3(callback, delay) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
}
var REFRESH_DELAY = 20;
var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
var mutationObserverSupported = typeof MutationObserver !== "undefined";
var ResizeObserverController = function() {
  function ResizeObserverController2() {
    this.connected_ = false;
    this.mutationEventsAdded_ = false;
    this.mutationsObserver_ = null;
    this.observers_ = [];
    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
    this.refresh = throttle$3(this.refresh.bind(this), REFRESH_DELAY);
  }
  ResizeObserverController2.prototype.addObserver = function(observer) {
    if (!~this.observers_.indexOf(observer)) {
      this.observers_.push(observer);
    }
    if (!this.connected_) {
      this.connect_();
    }
  };
  ResizeObserverController2.prototype.removeObserver = function(observer) {
    var observers2 = this.observers_;
    var index2 = observers2.indexOf(observer);
    if (~index2) {
      observers2.splice(index2, 1);
    }
    if (!observers2.length && this.connected_) {
      this.disconnect_();
    }
  };
  ResizeObserverController2.prototype.refresh = function() {
    var changesDetected = this.updateObservers_();
    if (changesDetected) {
      this.refresh();
    }
  };
  ResizeObserverController2.prototype.updateObservers_ = function() {
    var activeObservers = this.observers_.filter(function(observer) {
      return observer.gatherActive(), observer.hasActive();
    });
    activeObservers.forEach(function(observer) {
      return observer.broadcastActive();
    });
    return activeObservers.length > 0;
  };
  ResizeObserverController2.prototype.connect_ = function() {
    if (!isBrowser || this.connected_) {
      return;
    }
    document.addEventListener("transitionend", this.onTransitionEnd_);
    window.addEventListener("resize", this.refresh);
    if (mutationObserverSupported) {
      this.mutationsObserver_ = new MutationObserver(this.refresh);
      this.mutationsObserver_.observe(document, {
        attributes: true,
        childList: true,
        characterData: true,
        subtree: true
      });
    } else {
      document.addEventListener("DOMSubtreeModified", this.refresh);
      this.mutationEventsAdded_ = true;
    }
    this.connected_ = true;
  };
  ResizeObserverController2.prototype.disconnect_ = function() {
    if (!isBrowser || !this.connected_) {
      return;
    }
    document.removeEventListener("transitionend", this.onTransitionEnd_);
    window.removeEventListener("resize", this.refresh);
    if (this.mutationsObserver_) {
      this.mutationsObserver_.disconnect();
    }
    if (this.mutationEventsAdded_) {
      document.removeEventListener("DOMSubtreeModified", this.refresh);
    }
    this.mutationsObserver_ = null;
    this.mutationEventsAdded_ = false;
    this.connected_ = false;
  };
  ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
    var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
    var isReflowProperty = transitionKeys.some(function(key2) {
      return !!~propertyName.indexOf(key2);
    });
    if (isReflowProperty) {
      this.refresh();
    }
  };
  ResizeObserverController2.getInstance = function() {
    if (!this.instance_) {
      this.instance_ = new ResizeObserverController2();
    }
    return this.instance_;
  };
  ResizeObserverController2.instance_ = null;
  return ResizeObserverController2;
}();
var defineConfigurable = function(target2, props) {
  for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
    var key2 = _a[_i];
    Object.defineProperty(target2, key2, {
      value: props[key2],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  return target2;
};
var getWindowOf = function(target2) {
  var ownerGlobal = target2 && target2.ownerDocument && target2.ownerDocument.defaultView;
  return ownerGlobal || global$1;
};
var emptyRect = createRectInit(0, 0, 0, 0);
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles2) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function(size, position) {
    var value = styles2["border-" + position + "-width"];
    return size + toFloat(value);
  }, 0);
}
function getPaddings(styles2) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value = styles2["padding-" + position];
    paddings[position] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target2) {
  var bbox = target2.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target2) {
  var clientWidth = target2.clientWidth, clientHeight = target2.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles2 = getWindowOf(target2).getComputedStyle(target2);
  var paddings = getPaddings(styles2);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles2.width), height = toFloat(styles2.height);
  if (styles2.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles2, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles2, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target2)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
var isSVGGraphicsElement = function() {
  if (typeof SVGGraphicsElement !== "undefined") {
    return function(target2) {
      return target2 instanceof getWindowOf(target2).SVGGraphicsElement;
    };
  }
  return function(target2) {
    return target2 instanceof getWindowOf(target2).SVGElement && typeof target2.getBBox === "function";
  };
}();
function isDocumentElement(target2) {
  return target2 === getWindowOf(target2).document.documentElement;
}
function getContentRect(target2) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target2)) {
    return getSVGContentRect(target2);
  }
  return getHTMLElementContentRect(target2);
}
function createReadOnlyRect(_a) {
  var x2 = _a.x, y = _a.y, width = _a.width, height = _a.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect2 = Object.create(Constr.prototype);
  defineConfigurable(rect2, {
    x: x2,
    y,
    width,
    height,
    top: y,
    right: x2 + width,
    bottom: height + y,
    left: x2
  });
  return rect2;
}
function createRectInit(x2, y, width, height) {
  return { x: x2, y, width, height };
}
var ResizeObservation = function() {
  function ResizeObservation2(target2) {
    this.broadcastWidth = 0;
    this.broadcastHeight = 0;
    this.contentRect_ = createRectInit(0, 0, 0, 0);
    this.target = target2;
  }
  ResizeObservation2.prototype.isActive = function() {
    var rect2 = getContentRect(this.target);
    this.contentRect_ = rect2;
    return rect2.width !== this.broadcastWidth || rect2.height !== this.broadcastHeight;
  };
  ResizeObservation2.prototype.broadcastRect = function() {
    var rect2 = this.contentRect_;
    this.broadcastWidth = rect2.width;
    this.broadcastHeight = rect2.height;
    return rect2;
  };
  return ResizeObservation2;
}();
var ResizeObserverEntry = function() {
  function ResizeObserverEntry2(target2, rectInit) {
    var contentRect = createReadOnlyRect(rectInit);
    defineConfigurable(this, { target: target2, contentRect });
  }
  return ResizeObserverEntry2;
}();
var ResizeObserverSPI = function() {
  function ResizeObserverSPI2(callback, controller, callbackCtx) {
    this.activeObservations_ = [];
    this.observations_ = new MapShim();
    if (typeof callback !== "function") {
      throw new TypeError("The callback provided as parameter 1 is not a function.");
    }
    this.callback_ = callback;
    this.controller_ = controller;
    this.callbackCtx_ = callbackCtx;
  }
  ResizeObserverSPI2.prototype.observe = function(target2) {
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    if (typeof Element === "undefined" || !(Element instanceof Object)) {
      return;
    }
    if (!(target2 instanceof getWindowOf(target2).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (observations.has(target2)) {
      return;
    }
    observations.set(target2, new ResizeObservation(target2));
    this.controller_.addObserver(this);
    this.controller_.refresh();
  };
  ResizeObserverSPI2.prototype.unobserve = function(target2) {
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    if (typeof Element === "undefined" || !(Element instanceof Object)) {
      return;
    }
    if (!(target2 instanceof getWindowOf(target2).Element)) {
      throw new TypeError('parameter 1 is not of type "Element".');
    }
    var observations = this.observations_;
    if (!observations.has(target2)) {
      return;
    }
    observations.delete(target2);
    if (!observations.size) {
      this.controller_.removeObserver(this);
    }
  };
  ResizeObserverSPI2.prototype.disconnect = function() {
    this.clearActive();
    this.observations_.clear();
    this.controller_.removeObserver(this);
  };
  ResizeObserverSPI2.prototype.gatherActive = function() {
    var _this = this;
    this.clearActive();
    this.observations_.forEach(function(observation) {
      if (observation.isActive()) {
        _this.activeObservations_.push(observation);
      }
    });
  };
  ResizeObserverSPI2.prototype.broadcastActive = function() {
    if (!this.hasActive()) {
      return;
    }
    var ctx2 = this.callbackCtx_;
    var entries = this.activeObservations_.map(function(observation) {
      return new ResizeObserverEntry(observation.target, observation.broadcastRect());
    });
    this.callback_.call(ctx2, entries, ctx2);
    this.clearActive();
  };
  ResizeObserverSPI2.prototype.clearActive = function() {
    this.activeObservations_.splice(0);
  };
  ResizeObserverSPI2.prototype.hasActive = function() {
    return this.activeObservations_.length > 0;
  };
  return ResizeObserverSPI2;
}();
var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
var ResizeObserver$2 = function() {
  function ResizeObserver2(callback) {
    if (!(this instanceof ResizeObserver2)) {
      throw new TypeError("Cannot call a class as a function.");
    }
    if (!arguments.length) {
      throw new TypeError("1 argument required, but only 0 present.");
    }
    var controller = ResizeObserverController.getInstance();
    var observer = new ResizeObserverSPI(callback, controller, this);
    observers.set(this, observer);
  }
  return ResizeObserver2;
}();
[
  "observe",
  "unobserve",
  "disconnect"
].forEach(function(method) {
  ResizeObserver$2.prototype[method] = function() {
    var _a;
    return (_a = observers.get(this))[method].apply(_a, arguments);
  };
});
var index = function() {
  if (typeof global$1.ResizeObserver !== "undefined") {
    return global$1.ResizeObserver;
  }
  return ResizeObserver$2;
}();
var ResizeObserver_es = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  "default": index
}, Symbol.toStringTag, { value: "Module" }));
var require$$0$4 = /* @__PURE__ */ getAugmentedNamespace(ResizeObserver_es);
var throttle$2 = function(delay, noTrailing, callback, debounceMode) {
  var timeoutID;
  var lastExec = 0;
  if (typeof noTrailing !== "boolean") {
    debounceMode = callback;
    callback = noTrailing;
    noTrailing = void 0;
  }
  function wrapper2() {
    var self2 = this;
    var elapsed = Number(new Date()) - lastExec;
    var args = arguments;
    function exec() {
      lastExec = Number(new Date());
      callback.apply(self2, args);
    }
    function clear() {
      timeoutID = void 0;
    }
    if (debounceMode && !timeoutID) {
      exec();
    }
    if (timeoutID) {
      clearTimeout(timeoutID);
    }
    if (debounceMode === void 0 && elapsed > delay) {
      exec();
    } else if (noTrailing !== true) {
      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === void 0 ? delay - elapsed : delay);
    }
  }
  return wrapper2;
};
var throttle$1 = throttle$2;
var debounce$1 = function(delay, atBegin, callback) {
  return callback === void 0 ? throttle$1(delay, atBegin, false) : throttle$1(delay, callback, atBegin !== false);
};
var throttle = throttle$2;
var debounce = debounce$1;
var throttleDebounce = {
  throttle,
  debounce
};
resizeEvent.__esModule = true;
resizeEvent.removeResizeListener = resizeEvent.addResizeListener = void 0;
var _resizeObserverPolyfill = require$$0$4;
var _resizeObserverPolyfill2 = _interopRequireDefault$3(_resizeObserverPolyfill);
var _throttleDebounce = throttleDebounce;
function _interopRequireDefault$3(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var isServer = typeof window === "undefined";
var resizeHandler = function resizeHandler2(entries) {
  for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
    var _ref2;
    if (_isArray) {
      if (_i >= _iterator.length)
        break;
      _ref2 = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done)
        break;
      _ref2 = _i.value;
    }
    var entry = _ref2;
    var listeners = entry.target.__resizeListeners__ || [];
    if (listeners.length) {
      listeners.forEach(function(fn) {
        fn();
      });
    }
  }
};
resizeEvent.addResizeListener = function addResizeListener(element, fn) {
  if (isServer)
    return;
  if (!element.__resizeListeners__) {
    element.__resizeListeners__ = [];
    element.__ro__ = new _resizeObserverPolyfill2.default((0, _throttleDebounce.debounce)(16, resizeHandler));
    element.__ro__.observe(element);
  }
  element.__resizeListeners__.push(fn);
};
resizeEvent.removeResizeListener = function removeResizeListener(element, fn) {
  if (!element || !element.__resizeListeners__)
    return;
  element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
  if (!element.__resizeListeners__.length) {
    element.__ro__.disconnect();
  }
};
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 131);
  }({
    131: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var resize_event_ = __webpack_require__(16);
      var scrollbar_width_ = __webpack_require__(38);
      var scrollbar_width_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_width_);
      var util_ = __webpack_require__(3);
      var dom_ = __webpack_require__(2);
      var BAR_MAP = {
        vertical: {
          offset: "offsetHeight",
          scroll: "scrollTop",
          scrollSize: "scrollHeight",
          size: "height",
          key: "vertical",
          axis: "Y",
          client: "clientY",
          direction: "top"
        },
        horizontal: {
          offset: "offsetWidth",
          scroll: "scrollLeft",
          scrollSize: "scrollWidth",
          size: "width",
          key: "horizontal",
          axis: "X",
          client: "clientX",
          direction: "left"
        }
      };
      function renderThumbStyle(_ref2) {
        var move = _ref2.move, size = _ref2.size, bar = _ref2.bar;
        var style = {};
        var translate = "translate" + bar.axis + "(" + move + "%)";
        style[bar.size] = size;
        style.transform = translate;
        style.msTransform = translate;
        style.webkitTransform = translate;
        return style;
      }
      var src_bar = {
        name: "Bar",
        props: {
          vertical: Boolean,
          size: String,
          move: Number
        },
        computed: {
          bar: function bar() {
            return BAR_MAP[this.vertical ? "vertical" : "horizontal"];
          },
          wrap: function wrap() {
            return this.$parent.wrap;
          }
        },
        render: function render50(h) {
          var size = this.size, move = this.move, bar = this.bar;
          return h(
            "div",
            {
              "class": ["el-scrollbar__bar", "is-" + bar.key],
              on: {
                "mousedown": this.clickTrackHandler
              }
            },
            [h("div", {
              ref: "thumb",
              "class": "el-scrollbar__thumb",
              on: {
                "mousedown": this.clickThumbHandler
              },
              style: renderThumbStyle({ size, move, bar })
            })]
          );
        },
        methods: {
          clickThumbHandler: function clickThumbHandler(e) {
            if (e.ctrlKey || e.button === 2) {
              return;
            }
            this.startDrag(e);
            this[this.bar.axis] = e.currentTarget[this.bar.offset] - (e[this.bar.client] - e.currentTarget.getBoundingClientRect()[this.bar.direction]);
          },
          clickTrackHandler: function clickTrackHandler(e) {
            var offset = Math.abs(e.target.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]);
            var thumbHalf = this.$refs.thumb[this.bar.offset] / 2;
            var thumbPositionPercentage = (offset - thumbHalf) * 100 / this.$el[this.bar.offset];
            this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
          },
          startDrag: function startDrag(e) {
            e.stopImmediatePropagation();
            this.cursorDown = true;
            Object(dom_["on"])(document, "mousemove", this.mouseMoveDocumentHandler);
            Object(dom_["on"])(document, "mouseup", this.mouseUpDocumentHandler);
            document.onselectstart = function() {
              return false;
            };
          },
          mouseMoveDocumentHandler: function mouseMoveDocumentHandler(e) {
            if (this.cursorDown === false)
              return;
            var prevPage = this[this.bar.axis];
            if (!prevPage)
              return;
            var offset = (this.$el.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]) * -1;
            var thumbClickPosition = this.$refs.thumb[this.bar.offset] - prevPage;
            var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / this.$el[this.bar.offset];
            this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
          },
          mouseUpDocumentHandler: function mouseUpDocumentHandler(e) {
            this.cursorDown = false;
            this[this.bar.axis] = 0;
            Object(dom_["off"])(document, "mousemove", this.mouseMoveDocumentHandler);
            document.onselectstart = null;
          }
        },
        destroyed: function destroyed() {
          Object(dom_["off"])(document, "mouseup", this.mouseUpDocumentHandler);
        }
      };
      var main = {
        name: "ElScrollbar",
        components: { Bar: src_bar },
        props: {
          native: Boolean,
          wrapStyle: {},
          wrapClass: {},
          viewClass: {},
          viewStyle: {},
          noresize: Boolean,
          tag: {
            type: String,
            default: "div"
          }
        },
        data: function data3() {
          return {
            sizeWidth: "0",
            sizeHeight: "0",
            moveX: 0,
            moveY: 0
          };
        },
        computed: {
          wrap: function wrap() {
            return this.$refs.wrap;
          }
        },
        render: function render50(h) {
          var gutter = scrollbar_width_default()();
          var style = this.wrapStyle;
          if (gutter) {
            var gutterWith = "-" + gutter + "px";
            var gutterStyle = "margin-bottom: " + gutterWith + "; margin-right: " + gutterWith + ";";
            if (Array.isArray(this.wrapStyle)) {
              style = Object(util_["toObject"])(this.wrapStyle);
              style.marginRight = style.marginBottom = gutterWith;
            } else if (typeof this.wrapStyle === "string") {
              style += gutterStyle;
            } else {
              style = gutterStyle;
            }
          }
          var view = h(this.tag, {
            class: ["el-scrollbar__view", this.viewClass],
            style: this.viewStyle,
            ref: "resize"
          }, this.$slots.default);
          var wrap = h(
            "div",
            {
              ref: "wrap",
              style,
              on: {
                "scroll": this.handleScroll
              },
              "class": [this.wrapClass, "el-scrollbar__wrap", gutter ? "" : "el-scrollbar__wrap--hidden-default"]
            },
            [[view]]
          );
          var nodes = void 0;
          if (!this.native) {
            nodes = [wrap, h(src_bar, {
              attrs: {
                move: this.moveX,
                size: this.sizeWidth
              }
            }), h(src_bar, {
              attrs: {
                vertical: true,
                move: this.moveY,
                size: this.sizeHeight
              }
            })];
          } else {
            nodes = [h(
              "div",
              {
                ref: "wrap",
                "class": [this.wrapClass, "el-scrollbar__wrap"],
                style
              },
              [[view]]
            )];
          }
          return h("div", { class: "el-scrollbar" }, nodes);
        },
        methods: {
          handleScroll: function handleScroll() {
            var wrap = this.wrap;
            this.moveY = wrap.scrollTop * 100 / wrap.clientHeight;
            this.moveX = wrap.scrollLeft * 100 / wrap.clientWidth;
          },
          update: function update2() {
            var heightPercentage = void 0, widthPercentage = void 0;
            var wrap = this.wrap;
            if (!wrap)
              return;
            heightPercentage = wrap.clientHeight * 100 / wrap.scrollHeight;
            widthPercentage = wrap.clientWidth * 100 / wrap.scrollWidth;
            this.sizeHeight = heightPercentage < 100 ? heightPercentage + "%" : "";
            this.sizeWidth = widthPercentage < 100 ? widthPercentage + "%" : "";
          }
        },
        mounted: function mounted2() {
          if (this.native)
            return;
          this.$nextTick(this.update);
          !this.noresize && Object(resize_event_["addResizeListener"])(this.$refs.resize, this.update);
        },
        beforeDestroy: function beforeDestroy3() {
          if (this.native)
            return;
          !this.noresize && Object(resize_event_["removeResizeListener"])(this.$refs.resize, this.update);
        }
      };
      main.install = function(Vue2) {
        Vue2.component(main.name, main);
      };
      __webpack_exports__["default"] = main;
    },
    16: function(module2, exports) {
      module2.exports = resizeEvent;
    },
    2: function(module2, exports) {
      module2.exports = dom;
    },
    3: function(module2, exports) {
      module2.exports = util$2;
    },
    38: function(module2, exports) {
      module2.exports = scrollbarWidth;
    }
  });
})(scrollbar);
var focus = {};
focus.__esModule = true;
focus.default = function(ref2) {
  return {
    methods: {
      focus: function focus2() {
        this.$refs[ref2].focus();
      }
    }
  };
};
var scrollIntoView$1 = {};
scrollIntoView$1.__esModule = true;
scrollIntoView$1.default = scrollIntoView;
var _vue = Vue;
var _vue2 = _interopRequireDefault$2(_vue);
function _interopRequireDefault$2(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
function scrollIntoView(container2, selected) {
  if (_vue2.default.prototype.$isServer)
    return;
  if (!selected) {
    container2.scrollTop = 0;
    return;
  }
  var offsetParents = [];
  var pointer = selected.offsetParent;
  while (pointer && container2 !== pointer && container2.contains(pointer)) {
    offsetParents.push(pointer);
    pointer = pointer.offsetParent;
  }
  var top2 = selected.offsetTop + offsetParents.reduce(function(prev, curr) {
    return prev + curr.offsetTop;
  }, 0);
  var bottom2 = top2 + selected.offsetHeight;
  var viewRectTop = container2.scrollTop;
  var viewRectBottom = viewRectTop + container2.clientHeight;
  if (top2 < viewRectTop) {
    container2.scrollTop = top2;
  } else if (bottom2 > viewRectBottom) {
    container2.scrollTop = bottom2 - container2.clientHeight;
  }
}
var tag$1 = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 130);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    130: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var tagvue_type_script_lang_js_ = {
        name: "ElTag",
        props: {
          text: String,
          closable: Boolean,
          type: String,
          hit: Boolean,
          disableTransitions: Boolean,
          color: String,
          size: String,
          effect: {
            type: String,
            default: "light",
            validator: function validator5(val) {
              return ["dark", "light", "plain"].indexOf(val) !== -1;
            }
          }
        },
        methods: {
          handleClose: function handleClose(event) {
            event.stopPropagation();
            this.$emit("close", event);
          },
          handleClick: function handleClick(event) {
            this.$emit("click", event);
          }
        },
        computed: {
          tagSize: function tagSize() {
            return this.size || (this.$ELEMENT || {}).size;
          }
        },
        render: function render51(h) {
          var type = this.type, tagSize = this.tagSize, hit = this.hit, effect = this.effect;
          var classes = ["el-tag", type ? "el-tag--" + type : "", tagSize ? "el-tag--" + tagSize : "", effect ? "el-tag--" + effect : "", hit && "is-hit"];
          var tagEl = h(
            "span",
            {
              "class": classes,
              style: { backgroundColor: this.color },
              on: {
                "click": this.handleClick
              }
            },
            [this.$slots.default, this.closable && h("i", {
              "class": "el-tag__close el-icon-close",
              on: {
                "click": this.handleClose
              }
            })]
          );
          return this.disableTransitions ? tagEl : h(
            "transition",
            {
              attrs: { name: "el-zoom-in-center" }
            },
            [tagEl]
          );
        }
      };
      var src_tagvue_type_script_lang_js_ = tagvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var render50, staticRenderFns;
      var component = Object(componentNormalizer["a"])(
        src_tagvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/tag/src/tag.vue";
      var tag2 = component.exports;
      tag2.install = function(Vue2) {
        Vue2.component(tag2.name, tag2);
      };
      __webpack_exports__["default"] = tag2;
    }
  });
})(tag$1);
var Tag$1 = /* @__PURE__ */ getDefaultExportFromCjs(tag$1.exports);
var locale = {};
locale.__esModule = true;
var _locale$1 = locale$1;
locale.default = {
  methods: {
    t: function t3() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _locale$1.t.apply(this, args);
    }
  }
};
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 61);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    10: function(module2, exports) {
      module2.exports = input$2.exports;
    },
    12: function(module2, exports) {
      module2.exports = clickoutside;
    },
    15: function(module2, exports) {
      module2.exports = scrollbar.exports;
    },
    16: function(module2, exports) {
      module2.exports = resizeEvent;
    },
    19: function(module2, exports) {
      module2.exports = debounce$1;
    },
    21: function(module2, exports) {
      module2.exports = shared;
    },
    22: function(module2, exports) {
      module2.exports = focus;
    },
    3: function(module2, exports) {
      module2.exports = util$2;
    },
    31: function(module2, exports) {
      module2.exports = scrollIntoView$1;
    },
    33: function(module2, __webpack_exports__, __webpack_require__) {
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "li",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-select-dropdown__item",
            class: {
              selected: _vm.itemSelected,
              "is-disabled": _vm.disabled || _vm.groupDisabled || _vm.limitReached,
              hover: _vm.hover
            },
            on: {
              mouseenter: _vm.hoverItem,
              click: function($event) {
                $event.stopPropagation();
                return _vm.selectOptionClick($event);
              }
            }
          },
          [_vm._t("default", [_c("span", [_vm._v(_vm._s(_vm.currentLabel))])])],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var util_ = __webpack_require__(3);
      var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var optionvue_type_script_lang_js_ = {
        mixins: [emitter_default.a],
        name: "ElOption",
        componentName: "ElOption",
        inject: ["select"],
        props: {
          value: {
            required: true
          },
          label: [String, Number],
          created: Boolean,
          disabled: {
            type: Boolean,
            default: false
          }
        },
        data: function data3() {
          return {
            index: -1,
            groupDisabled: false,
            visible: true,
            hitState: false,
            hover: false
          };
        },
        computed: {
          isObject: function isObject2() {
            return Object.prototype.toString.call(this.value).toLowerCase() === "[object object]";
          },
          currentLabel: function currentLabel() {
            return this.label || (this.isObject ? "" : this.value);
          },
          currentValue: function currentValue() {
            return this.value || this.label || "";
          },
          itemSelected: function itemSelected() {
            if (!this.select.multiple) {
              return this.isEqual(this.value, this.select.value);
            } else {
              return this.contains(this.select.value, this.value);
            }
          },
          limitReached: function limitReached() {
            if (this.select.multiple) {
              return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;
            } else {
              return false;
            }
          }
        },
        watch: {
          currentLabel: function currentLabel() {
            if (!this.created && !this.select.remote)
              this.dispatch("ElSelect", "setSelected");
          },
          value: function value(val, oldVal) {
            var _select = this.select, remote = _select.remote, valueKey = _select.valueKey;
            if (!this.created && !remote) {
              if (valueKey && (typeof val === "undefined" ? "undefined" : _typeof2(val)) === "object" && (typeof oldVal === "undefined" ? "undefined" : _typeof2(oldVal)) === "object" && val[valueKey] === oldVal[valueKey]) {
                return;
              }
              this.dispatch("ElSelect", "setSelected");
            }
          }
        },
        methods: {
          isEqual: function isEqual2(a2, b2) {
            if (!this.isObject) {
              return a2 === b2;
            } else {
              var valueKey = this.select.valueKey;
              return Object(util_["getValueByPath"])(a2, valueKey) === Object(util_["getValueByPath"])(b2, valueKey);
            }
          },
          contains: function contains() {
            var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var target2 = arguments[1];
            if (!this.isObject) {
              return arr && arr.indexOf(target2) > -1;
            } else {
              var valueKey = this.select.valueKey;
              return arr && arr.some(function(item2) {
                return Object(util_["getValueByPath"])(item2, valueKey) === Object(util_["getValueByPath"])(target2, valueKey);
              });
            }
          },
          handleGroupDisabled: function handleGroupDisabled(val) {
            this.groupDisabled = val;
          },
          hoverItem: function hoverItem() {
            if (!this.disabled && !this.groupDisabled) {
              this.select.hoverIndex = this.select.options.indexOf(this);
            }
          },
          selectOptionClick: function selectOptionClick() {
            if (this.disabled !== true && this.groupDisabled !== true) {
              this.dispatch("ElSelect", "handleOptionClick", [this, true]);
            }
          },
          queryChange: function queryChange(query) {
            this.visible = new RegExp(Object(util_["escapeRegexpString"])(query), "i").test(this.currentLabel) || this.created;
            if (!this.visible) {
              this.select.filteredOptionsCount--;
            }
          }
        },
        created: function created() {
          this.select.options.push(this);
          this.select.cachedOptions.push(this);
          this.select.optionsCount++;
          this.select.filteredOptionsCount++;
          this.$on("queryChange", this.queryChange);
          this.$on("handleGroupDisabled", this.handleGroupDisabled);
        },
        beforeDestroy: function beforeDestroy3() {
          var _select2 = this.select, selected = _select2.selected, multiple = _select2.multiple;
          var selectedOptions = multiple ? selected : [selected];
          var index2 = this.select.cachedOptions.indexOf(this);
          var selectedIndex = selectedOptions.indexOf(this);
          if (index2 > -1 && selectedIndex < 0) {
            this.select.cachedOptions.splice(index2, 1);
          }
          this.select.onOptionDestroy(this.select.options.indexOf(this));
        }
      };
      var src_optionvue_type_script_lang_js_ = optionvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_optionvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/select/src/option.vue";
      __webpack_exports__["a"] = component.exports;
    },
    37: function(module2, exports) {
      module2.exports = tag$1.exports;
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    5: function(module2, exports) {
      module2.exports = vuePopper;
    },
    6: function(module2, exports) {
      module2.exports = locale;
    },
    61: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            directives: [
              {
                name: "clickoutside",
                rawName: "v-clickoutside",
                value: _vm.handleClose,
                expression: "handleClose"
              }
            ],
            staticClass: "el-select",
            class: [_vm.selectSize ? "el-select--" + _vm.selectSize : ""],
            on: {
              click: function($event) {
                $event.stopPropagation();
                return _vm.toggleMenu($event);
              }
            }
          },
          [
            _vm.multiple ? _c(
              "div",
              {
                ref: "tags",
                staticClass: "el-select__tags",
                style: { "max-width": _vm.inputWidth - 32 + "px", width: "100%" }
              },
              [
                _vm.collapseTags && _vm.selected.length ? _c(
                  "span",
                  [
                    _c(
                      "el-tag",
                      {
                        attrs: {
                          closable: !_vm.selectDisabled,
                          size: _vm.collapseTagSize,
                          hit: _vm.selected[0].hitState,
                          type: "info",
                          "disable-transitions": ""
                        },
                        on: {
                          close: function($event) {
                            _vm.deleteTag($event, _vm.selected[0]);
                          }
                        }
                      },
                      [
                        _c("span", { staticClass: "el-select__tags-text" }, [
                          _vm._v(_vm._s(_vm.selected[0].currentLabel))
                        ])
                      ]
                    ),
                    _vm.selected.length > 1 ? _c(
                      "el-tag",
                      {
                        attrs: {
                          closable: false,
                          size: _vm.collapseTagSize,
                          type: "info",
                          "disable-transitions": ""
                        }
                      },
                      [
                        _c(
                          "span",
                          { staticClass: "el-select__tags-text" },
                          [_vm._v("+ " + _vm._s(_vm.selected.length - 1))]
                        )
                      ]
                    ) : _vm._e()
                  ],
                  1
                ) : _vm._e(),
                !_vm.collapseTags ? _c(
                  "transition-group",
                  { on: { "after-leave": _vm.resetInputHeight } },
                  _vm._l(_vm.selected, function(item2) {
                    return _c(
                      "el-tag",
                      {
                        key: _vm.getValueKey(item2),
                        attrs: {
                          closable: !_vm.selectDisabled,
                          size: _vm.collapseTagSize,
                          hit: item2.hitState,
                          type: "info",
                          "disable-transitions": ""
                        },
                        on: {
                          close: function($event) {
                            _vm.deleteTag($event, item2);
                          }
                        }
                      },
                      [
                        _c("span", { staticClass: "el-select__tags-text" }, [
                          _vm._v(_vm._s(item2.currentLabel))
                        ])
                      ]
                    );
                  }),
                  1
                ) : _vm._e(),
                _vm.filterable ? _c("input", {
                  directives: [
                    {
                      name: "model",
                      rawName: "v-model",
                      value: _vm.query,
                      expression: "query"
                    }
                  ],
                  ref: "input",
                  staticClass: "el-select__input",
                  class: [_vm.selectSize ? "is-" + _vm.selectSize : ""],
                  style: {
                    "flex-grow": "1",
                    width: _vm.inputLength / (_vm.inputWidth - 32) + "%",
                    "max-width": _vm.inputWidth - 42 + "px"
                  },
                  attrs: {
                    type: "text",
                    disabled: _vm.selectDisabled,
                    autocomplete: _vm.autoComplete || _vm.autocomplete
                  },
                  domProps: { value: _vm.query },
                  on: {
                    focus: _vm.handleFocus,
                    blur: function($event) {
                      _vm.softFocus = false;
                    },
                    keyup: _vm.managePlaceholder,
                    keydown: [
                      _vm.resetInputState,
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                          "Down",
                          "ArrowDown"
                        ])) {
                          return null;
                        }
                        $event.preventDefault();
                        _vm.handleNavigate("next");
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, [
                          "Up",
                          "ArrowUp"
                        ])) {
                          return null;
                        }
                        $event.preventDefault();
                        _vm.handleNavigate("prev");
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k(
                          $event.keyCode,
                          "enter",
                          13,
                          $event.key,
                          "Enter"
                        )) {
                          return null;
                        }
                        $event.preventDefault();
                        return _vm.selectOption($event);
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "esc", 27, $event.key, [
                          "Esc",
                          "Escape"
                        ])) {
                          return null;
                        }
                        $event.stopPropagation();
                        $event.preventDefault();
                        _vm.visible = false;
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k(
                          $event.keyCode,
                          "delete",
                          [8, 46],
                          $event.key,
                          ["Backspace", "Delete", "Del"]
                        )) {
                          return null;
                        }
                        return _vm.deletePrevTag($event);
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")) {
                          return null;
                        }
                        _vm.visible = false;
                      }
                    ],
                    compositionstart: _vm.handleComposition,
                    compositionupdate: _vm.handleComposition,
                    compositionend: _vm.handleComposition,
                    input: [
                      function($event) {
                        if ($event.target.composing) {
                          return;
                        }
                        _vm.query = $event.target.value;
                      },
                      _vm.debouncedQueryChange
                    ]
                  }
                }) : _vm._e()
              ],
              1
            ) : _vm._e(),
            _c(
              "el-input",
              {
                ref: "reference",
                class: { "is-focus": _vm.visible },
                attrs: {
                  type: "text",
                  placeholder: _vm.currentPlaceholder,
                  name: _vm.name,
                  id: _vm.id,
                  autocomplete: _vm.autoComplete || _vm.autocomplete,
                  size: _vm.selectSize,
                  disabled: _vm.selectDisabled,
                  readonly: _vm.readonly,
                  "validate-event": false,
                  tabindex: _vm.multiple && _vm.filterable ? "-1" : null
                },
                on: {
                  focus: _vm.handleFocus,
                  blur: _vm.handleBlur,
                  input: _vm.debouncedOnInputChange,
                  compositionstart: _vm.handleComposition,
                  compositionupdate: _vm.handleComposition,
                  compositionend: _vm.handleComposition
                },
                nativeOn: {
                  keydown: [
                    function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                        "Down",
                        "ArrowDown"
                      ])) {
                        return null;
                      }
                      $event.stopPropagation();
                      $event.preventDefault();
                      _vm.handleNavigate("next");
                    },
                    function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, [
                        "Up",
                        "ArrowUp"
                      ])) {
                        return null;
                      }
                      $event.stopPropagation();
                      $event.preventDefault();
                      _vm.handleNavigate("prev");
                    },
                    function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                        return null;
                      }
                      $event.preventDefault();
                      return _vm.selectOption($event);
                    },
                    function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "esc", 27, $event.key, [
                        "Esc",
                        "Escape"
                      ])) {
                        return null;
                      }
                      $event.stopPropagation();
                      $event.preventDefault();
                      _vm.visible = false;
                    },
                    function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")) {
                        return null;
                      }
                      _vm.visible = false;
                    }
                  ],
                  mouseenter: function($event) {
                    _vm.inputHovering = true;
                  },
                  mouseleave: function($event) {
                    _vm.inputHovering = false;
                  }
                },
                model: {
                  value: _vm.selectedLabel,
                  callback: function($$v) {
                    _vm.selectedLabel = $$v;
                  },
                  expression: "selectedLabel"
                }
              },
              [
                _vm.$slots.prefix ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2) : _vm._e(),
                _c("template", { slot: "suffix" }, [
                  _c("i", {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: !_vm.showClose,
                        expression: "!showClose"
                      }
                    ],
                    class: [
                      "el-select__caret",
                      "el-input__icon",
                      "el-icon-" + _vm.iconClass
                    ]
                  }),
                  _vm.showClose ? _c("i", {
                    staticClass: "el-select__caret el-input__icon el-icon-circle-close",
                    on: { click: _vm.handleClearClick }
                  }) : _vm._e()
                ])
              ],
              2
            ),
            _c(
              "transition",
              {
                attrs: { name: "el-zoom-in-top" },
                on: {
                  "before-enter": _vm.handleMenuEnter,
                  "after-leave": _vm.doDestroy
                }
              },
              [
                _c(
                  "el-select-menu",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.visible && _vm.emptyText !== false,
                        expression: "visible && emptyText !== false"
                      }
                    ],
                    ref: "popper",
                    attrs: { "append-to-body": _vm.popperAppendToBody }
                  },
                  [
                    _c(
                      "el-scrollbar",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.options.length > 0 && !_vm.loading,
                            expression: "options.length > 0 && !loading"
                          }
                        ],
                        ref: "scrollbar",
                        class: {
                          "is-empty": !_vm.allowCreate && _vm.query && _vm.filteredOptionsCount === 0
                        },
                        attrs: {
                          tag: "ul",
                          "wrap-class": "el-select-dropdown__wrap",
                          "view-class": "el-select-dropdown__list"
                        }
                      },
                      [
                        _vm.showNewOption ? _c("el-option", {
                          attrs: { value: _vm.query, created: "" }
                        }) : _vm._e(),
                        _vm._t("default")
                      ],
                      2
                    ),
                    _vm.emptyText && (!_vm.allowCreate || _vm.loading || _vm.allowCreate && _vm.options.length === 0) ? [
                      _vm.$slots.empty ? _vm._t("empty") : _c("p", { staticClass: "el-select-dropdown__empty" }, [
                        _vm._v(
                          "\n          " + _vm._s(_vm.emptyText) + "\n        "
                        )
                      ])
                    ] : _vm._e()
                  ],
                  2
                )
              ],
              1
            )
          ],
          1
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var focus_ = __webpack_require__(22);
      var focus_default = /* @__PURE__ */ __webpack_require__.n(focus_);
      var locale_ = __webpack_require__(6);
      var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
      var input_ = __webpack_require__(10);
      var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
      var select_dropdownvue_type_template_id_06828748_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-select-dropdown el-popper",
            class: [{ "is-multiple": _vm.$parent.multiple }, _vm.popperClass],
            style: { minWidth: _vm.minWidth }
          },
          [_vm._t("default")],
          2
        );
      };
      var select_dropdownvue_type_template_id_06828748_staticRenderFns = [];
      select_dropdownvue_type_template_id_06828748_render._withStripped = true;
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var select_dropdownvue_type_script_lang_js_ = {
        name: "ElSelectDropdown",
        componentName: "ElSelectDropdown",
        mixins: [vue_popper_default.a],
        props: {
          placement: {
            default: "bottom-start"
          },
          boundariesPadding: {
            default: 0
          },
          popperOptions: {
            default: function _default3() {
              return {
                gpuAcceleration: false
              };
            }
          },
          visibleArrow: {
            default: true
          },
          appendToBody: {
            type: Boolean,
            default: true
          }
        },
        data: function data3() {
          return {
            minWidth: ""
          };
        },
        computed: {
          popperClass: function popperClass() {
            return this.$parent.popperClass;
          }
        },
        watch: {
          "$parent.inputWidth": function $parentInputWidth() {
            this.minWidth = this.$parent.$el.getBoundingClientRect().width + "px";
          }
        },
        mounted: function mounted2() {
          var _this = this;
          this.referenceElm = this.$parent.$refs.reference.$el;
          this.$parent.popperElm = this.popperElm = this.$el;
          this.$on("updatePopper", function() {
            if (_this.$parent.visible)
              _this.updatePopper();
          });
          this.$on("destroyPopper", this.destroyPopper);
        }
      };
      var src_select_dropdownvue_type_script_lang_js_ = select_dropdownvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_select_dropdownvue_type_script_lang_js_,
        select_dropdownvue_type_template_id_06828748_render,
        select_dropdownvue_type_template_id_06828748_staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/select/src/select-dropdown.vue";
      var select_dropdown = component.exports;
      var src_option = __webpack_require__(33);
      var tag_ = __webpack_require__(37);
      var tag_default = /* @__PURE__ */ __webpack_require__.n(tag_);
      var scrollbar_ = __webpack_require__(15);
      var scrollbar_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_);
      var debounce_ = __webpack_require__(19);
      var debounce_default = /* @__PURE__ */ __webpack_require__.n(debounce_);
      var clickoutside_ = __webpack_require__(12);
      var clickoutside_default = /* @__PURE__ */ __webpack_require__.n(clickoutside_);
      var resize_event_ = __webpack_require__(16);
      var scroll_into_view_ = __webpack_require__(31);
      var scroll_into_view_default = /* @__PURE__ */ __webpack_require__.n(scroll_into_view_);
      var util_ = __webpack_require__(3);
      var navigation_mixin = {
        data: function data3() {
          return {
            hoverOption: -1
          };
        },
        computed: {
          optionsAllDisabled: function optionsAllDisabled() {
            return this.options.filter(function(option2) {
              return option2.visible;
            }).every(function(option2) {
              return option2.disabled;
            });
          }
        },
        watch: {
          hoverIndex: function hoverIndex(val) {
            var _this = this;
            if (typeof val === "number" && val > -1) {
              this.hoverOption = this.options[val] || {};
            }
            this.options.forEach(function(option2) {
              option2.hover = _this.hoverOption === option2;
            });
          }
        },
        methods: {
          navigateOptions: function navigateOptions(direction) {
            var _this2 = this;
            if (!this.visible) {
              this.visible = true;
              return;
            }
            if (this.options.length === 0 || this.filteredOptionsCount === 0)
              return;
            if (!this.optionsAllDisabled) {
              if (direction === "next") {
                this.hoverIndex++;
                if (this.hoverIndex === this.options.length) {
                  this.hoverIndex = 0;
                }
              } else if (direction === "prev") {
                this.hoverIndex--;
                if (this.hoverIndex < 0) {
                  this.hoverIndex = this.options.length - 1;
                }
              }
              var option2 = this.options[this.hoverIndex];
              if (option2.disabled === true || option2.groupDisabled === true || !option2.visible) {
                this.navigateOptions(direction);
              }
              this.$nextTick(function() {
                return _this2.scrollToOption(_this2.hoverOption);
              });
            }
          }
        }
      };
      var shared_ = __webpack_require__(21);
      var selectvue_type_script_lang_js_ = {
        mixins: [emitter_default.a, locale_default.a, focus_default()("reference"), navigation_mixin],
        name: "ElSelect",
        componentName: "ElSelect",
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        provide: function provide() {
          return {
            "select": this
          };
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          readonly: function readonly() {
            return !this.filterable || this.multiple || !Object(util_["isIE"])() && !Object(util_["isEdge"])() && !this.visible;
          },
          showClose: function showClose() {
            var hasValue = this.multiple ? Array.isArray(this.value) && this.value.length > 0 : this.value !== void 0 && this.value !== null && this.value !== "";
            var criteria = this.clearable && !this.selectDisabled && this.inputHovering && hasValue;
            return criteria;
          },
          iconClass: function iconClass() {
            return this.remote && this.filterable ? "" : this.visible ? "arrow-up is-reverse" : "arrow-up";
          },
          debounce: function debounce2() {
            return this.remote ? 300 : 0;
          },
          emptyText: function emptyText() {
            if (this.loading) {
              return this.loadingText || this.t("el.select.loading");
            } else {
              if (this.remote && this.query === "" && this.options.length === 0)
                return false;
              if (this.filterable && this.query && this.options.length > 0 && this.filteredOptionsCount === 0) {
                return this.noMatchText || this.t("el.select.noMatch");
              }
              if (this.options.length === 0) {
                return this.noDataText || this.t("el.select.noData");
              }
            }
            return null;
          },
          showNewOption: function showNewOption() {
            var _this = this;
            var hasExistingOption = this.options.filter(function(option2) {
              return !option2.created;
            }).some(function(option2) {
              return option2.currentLabel === _this.query;
            });
            return this.filterable && this.allowCreate && this.query !== "" && !hasExistingOption;
          },
          selectSize: function selectSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          selectDisabled: function selectDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          collapseTagSize: function collapseTagSize() {
            return ["small", "mini"].indexOf(this.selectSize) > -1 ? "mini" : "small";
          },
          propPlaceholder: function propPlaceholder() {
            return typeof this.placeholder !== "undefined" ? this.placeholder : this.t("el.select.placeholder");
          }
        },
        components: {
          ElInput: input_default.a,
          ElSelectMenu: select_dropdown,
          ElOption: src_option["a"],
          ElTag: tag_default.a,
          ElScrollbar: scrollbar_default.a
        },
        directives: { Clickoutside: clickoutside_default.a },
        props: {
          name: String,
          id: String,
          value: {
            required: true
          },
          autocomplete: {
            type: String,
            default: "off"
          },
          autoComplete: {
            type: String,
            validator: function validator5(val) {
              return true;
            }
          },
          automaticDropdown: Boolean,
          size: String,
          disabled: Boolean,
          clearable: Boolean,
          filterable: Boolean,
          allowCreate: Boolean,
          loading: Boolean,
          popperClass: String,
          remote: Boolean,
          loadingText: String,
          noMatchText: String,
          noDataText: String,
          remoteMethod: Function,
          filterMethod: Function,
          multiple: Boolean,
          multipleLimit: {
            type: Number,
            default: 0
          },
          placeholder: {
            type: String,
            required: false
          },
          defaultFirstOption: Boolean,
          reserveKeyword: Boolean,
          valueKey: {
            type: String,
            default: "value"
          },
          collapseTags: Boolean,
          popperAppendToBody: {
            type: Boolean,
            default: true
          }
        },
        data: function data3() {
          return {
            options: [],
            cachedOptions: [],
            createdLabel: null,
            createdSelected: false,
            selected: this.multiple ? [] : {},
            inputLength: 20,
            inputWidth: 0,
            initialInputHeight: 0,
            cachedPlaceHolder: "",
            optionsCount: 0,
            filteredOptionsCount: 0,
            visible: false,
            softFocus: false,
            selectedLabel: "",
            hoverIndex: -1,
            query: "",
            previousQuery: null,
            inputHovering: false,
            currentPlaceholder: "",
            menuVisibleOnFocus: false,
            isOnComposition: false,
            isSilentBlur: false
          };
        },
        watch: {
          selectDisabled: function selectDisabled() {
            var _this2 = this;
            this.$nextTick(function() {
              _this2.resetInputHeight();
            });
          },
          propPlaceholder: function propPlaceholder(val) {
            this.cachedPlaceHolder = this.currentPlaceholder = val;
          },
          value: function value(val, oldVal) {
            if (this.multiple) {
              this.resetInputHeight();
              if (val && val.length > 0 || this.$refs.input && this.query !== "") {
                this.currentPlaceholder = "";
              } else {
                this.currentPlaceholder = this.cachedPlaceHolder;
              }
              if (this.filterable && !this.reserveKeyword) {
                this.query = "";
                this.handleQueryChange(this.query);
              }
            }
            this.setSelected();
            if (this.filterable && !this.multiple) {
              this.inputLength = 20;
            }
            if (!Object(util_["valueEquals"])(val, oldVal)) {
              this.dispatch("ElFormItem", "el.form.change", val);
            }
          },
          visible: function visible3(val) {
            var _this3 = this;
            if (!val) {
              this.broadcast("ElSelectDropdown", "destroyPopper");
              if (this.$refs.input) {
                this.$refs.input.blur();
              }
              this.query = "";
              this.previousQuery = null;
              this.selectedLabel = "";
              this.inputLength = 20;
              this.menuVisibleOnFocus = false;
              this.resetHoverIndex();
              this.$nextTick(function() {
                if (_this3.$refs.input && _this3.$refs.input.value === "" && _this3.selected.length === 0) {
                  _this3.currentPlaceholder = _this3.cachedPlaceHolder;
                }
              });
              if (!this.multiple) {
                if (this.selected) {
                  if (this.filterable && this.allowCreate && this.createdSelected && this.createdLabel) {
                    this.selectedLabel = this.createdLabel;
                  } else {
                    this.selectedLabel = this.selected.currentLabel;
                  }
                  if (this.filterable)
                    this.query = this.selectedLabel;
                }
                if (this.filterable) {
                  this.currentPlaceholder = this.cachedPlaceHolder;
                }
              }
            } else {
              this.broadcast("ElSelectDropdown", "updatePopper");
              if (this.filterable) {
                this.query = this.remote ? "" : this.selectedLabel;
                this.handleQueryChange(this.query);
                if (this.multiple) {
                  this.$refs.input.focus();
                } else {
                  if (!this.remote) {
                    this.broadcast("ElOption", "queryChange", "");
                    this.broadcast("ElOptionGroup", "queryChange");
                  }
                  if (this.selectedLabel) {
                    this.currentPlaceholder = this.selectedLabel;
                    this.selectedLabel = "";
                  }
                }
              }
            }
            this.$emit("visible-change", val);
          },
          options: function options2() {
            var _this4 = this;
            if (this.$isServer)
              return;
            this.$nextTick(function() {
              _this4.broadcast("ElSelectDropdown", "updatePopper");
            });
            if (this.multiple) {
              this.resetInputHeight();
            }
            var inputs = this.$el.querySelectorAll("input");
            if ([].indexOf.call(inputs, document.activeElement) === -1) {
              this.setSelected();
            }
            if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
              this.checkDefaultFirstOption();
            }
          }
        },
        methods: {
          handleNavigate: function handleNavigate(direction) {
            if (this.isOnComposition)
              return;
            this.navigateOptions(direction);
          },
          handleComposition: function handleComposition(event) {
            var _this5 = this;
            var text3 = event.target.value;
            if (event.type === "compositionend") {
              this.isOnComposition = false;
              this.$nextTick(function(_2) {
                return _this5.handleQueryChange(text3);
              });
            } else {
              var lastCharacter = text3[text3.length - 1] || "";
              this.isOnComposition = !Object(shared_["isKorean"])(lastCharacter);
            }
          },
          handleQueryChange: function handleQueryChange(val) {
            var _this6 = this;
            if (this.previousQuery === val || this.isOnComposition)
              return;
            if (this.previousQuery === null && (typeof this.filterMethod === "function" || typeof this.remoteMethod === "function")) {
              this.previousQuery = val;
              return;
            }
            this.previousQuery = val;
            this.$nextTick(function() {
              if (_this6.visible)
                _this6.broadcast("ElSelectDropdown", "updatePopper");
            });
            this.hoverIndex = -1;
            if (this.multiple && this.filterable) {
              this.$nextTick(function() {
                var length = _this6.$refs.input.value.length * 15 + 20;
                _this6.inputLength = _this6.collapseTags ? Math.min(50, length) : length;
                _this6.managePlaceholder();
                _this6.resetInputHeight();
              });
            }
            if (this.remote && typeof this.remoteMethod === "function") {
              this.hoverIndex = -1;
              this.remoteMethod(val);
            } else if (typeof this.filterMethod === "function") {
              this.filterMethod(val);
              this.broadcast("ElOptionGroup", "queryChange");
            } else {
              this.filteredOptionsCount = this.optionsCount;
              this.broadcast("ElOption", "queryChange", val);
              this.broadcast("ElOptionGroup", "queryChange");
            }
            if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
              this.checkDefaultFirstOption();
            }
          },
          scrollToOption: function scrollToOption(option2) {
            var target2 = Array.isArray(option2) && option2[0] ? option2[0].$el : option2.$el;
            if (this.$refs.popper && target2) {
              var menu2 = this.$refs.popper.$el.querySelector(".el-select-dropdown__wrap");
              scroll_into_view_default()(menu2, target2);
            }
            this.$refs.scrollbar && this.$refs.scrollbar.handleScroll();
          },
          handleMenuEnter: function handleMenuEnter() {
            var _this7 = this;
            this.$nextTick(function() {
              return _this7.scrollToOption(_this7.selected);
            });
          },
          emitChange: function emitChange(val) {
            if (!Object(util_["valueEquals"])(this.value, val)) {
              this.$emit("change", val);
            }
          },
          getOption: function getOption(value) {
            var option2 = void 0;
            var isObject2 = Object.prototype.toString.call(value).toLowerCase() === "[object object]";
            var isNull2 = Object.prototype.toString.call(value).toLowerCase() === "[object null]";
            var isUndefined2 = Object.prototype.toString.call(value).toLowerCase() === "[object undefined]";
            for (var i = this.cachedOptions.length - 1; i >= 0; i--) {
              var cachedOption = this.cachedOptions[i];
              var isEqual2 = isObject2 ? Object(util_["getValueByPath"])(cachedOption.value, this.valueKey) === Object(util_["getValueByPath"])(value, this.valueKey) : cachedOption.value === value;
              if (isEqual2) {
                option2 = cachedOption;
                break;
              }
            }
            if (option2)
              return option2;
            var label2 = !isObject2 && !isNull2 && !isUndefined2 ? String(value) : "";
            var newOption = {
              value,
              currentLabel: label2
            };
            if (this.multiple) {
              newOption.hitState = false;
            }
            return newOption;
          },
          setSelected: function setSelected() {
            var _this8 = this;
            if (!this.multiple) {
              var option2 = this.getOption(this.value);
              if (option2.created) {
                this.createdLabel = option2.currentLabel;
                this.createdSelected = true;
              } else {
                this.createdSelected = false;
              }
              this.selectedLabel = option2.currentLabel;
              this.selected = option2;
              if (this.filterable)
                this.query = this.selectedLabel;
              return;
            }
            var result2 = [];
            if (Array.isArray(this.value)) {
              this.value.forEach(function(value) {
                result2.push(_this8.getOption(value));
              });
            }
            this.selected = result2;
            this.$nextTick(function() {
              _this8.resetInputHeight();
            });
          },
          handleFocus: function handleFocus(event) {
            if (!this.softFocus) {
              if (this.automaticDropdown || this.filterable) {
                if (this.filterable && !this.visible) {
                  this.menuVisibleOnFocus = true;
                }
                this.visible = true;
              }
              this.$emit("focus", event);
            } else {
              this.softFocus = false;
            }
          },
          blur: function blur() {
            this.visible = false;
            this.$refs.reference.blur();
          },
          handleBlur: function handleBlur(event) {
            var _this9 = this;
            setTimeout(function() {
              if (_this9.isSilentBlur) {
                _this9.isSilentBlur = false;
              } else {
                _this9.$emit("blur", event);
              }
            }, 50);
            this.softFocus = false;
          },
          handleClearClick: function handleClearClick(event) {
            this.deleteSelected(event);
          },
          doDestroy: function doDestroy2() {
            this.$refs.popper && this.$refs.popper.doDestroy();
          },
          handleClose: function handleClose() {
            this.visible = false;
          },
          toggleLastOptionHitState: function toggleLastOptionHitState(hit) {
            if (!Array.isArray(this.selected))
              return;
            var option2 = this.selected[this.selected.length - 1];
            if (!option2)
              return;
            if (hit === true || hit === false) {
              option2.hitState = hit;
              return hit;
            }
            option2.hitState = !option2.hitState;
            return option2.hitState;
          },
          deletePrevTag: function deletePrevTag(e) {
            if (e.target.value.length <= 0 && !this.toggleLastOptionHitState()) {
              var value = this.value.slice();
              value.pop();
              this.$emit("input", value);
              this.emitChange(value);
            }
          },
          managePlaceholder: function managePlaceholder() {
            if (this.currentPlaceholder !== "") {
              this.currentPlaceholder = this.$refs.input.value ? "" : this.cachedPlaceHolder;
            }
          },
          resetInputState: function resetInputState(e) {
            if (e.keyCode !== 8)
              this.toggleLastOptionHitState(false);
            this.inputLength = this.$refs.input.value.length * 15 + 20;
            this.resetInputHeight();
          },
          resetInputHeight: function resetInputHeight() {
            var _this10 = this;
            if (this.collapseTags && !this.filterable)
              return;
            this.$nextTick(function() {
              if (!_this10.$refs.reference)
                return;
              var inputChildNodes = _this10.$refs.reference.$el.childNodes;
              var input2 = [].filter.call(inputChildNodes, function(item2) {
                return item2.tagName === "INPUT";
              })[0];
              var tags2 = _this10.$refs.tags;
              var tagsHeight = tags2 ? Math.round(tags2.getBoundingClientRect().height) : 0;
              var sizeInMap = _this10.initialInputHeight || 40;
              input2.style.height = _this10.selected.length === 0 ? sizeInMap + "px" : Math.max(tags2 ? tagsHeight + (tagsHeight > sizeInMap ? 6 : 0) : 0, sizeInMap) + "px";
              if (_this10.visible && _this10.emptyText !== false) {
                _this10.broadcast("ElSelectDropdown", "updatePopper");
              }
            });
          },
          resetHoverIndex: function resetHoverIndex() {
            var _this11 = this;
            setTimeout(function() {
              if (!_this11.multiple) {
                _this11.hoverIndex = _this11.options.indexOf(_this11.selected);
              } else {
                if (_this11.selected.length > 0) {
                  _this11.hoverIndex = Math.min.apply(null, _this11.selected.map(function(item2) {
                    return _this11.options.indexOf(item2);
                  }));
                } else {
                  _this11.hoverIndex = -1;
                }
              }
            }, 300);
          },
          handleOptionSelect: function handleOptionSelect(option2, byClick) {
            var _this12 = this;
            if (this.multiple) {
              var value = (this.value || []).slice();
              var optionIndex = this.getValueIndex(value, option2.value);
              if (optionIndex > -1) {
                value.splice(optionIndex, 1);
              } else if (this.multipleLimit <= 0 || value.length < this.multipleLimit) {
                value.push(option2.value);
              }
              this.$emit("input", value);
              this.emitChange(value);
              if (option2.created) {
                this.query = "";
                this.handleQueryChange("");
                this.inputLength = 20;
              }
              if (this.filterable)
                this.$refs.input.focus();
            } else {
              this.$emit("input", option2.value);
              this.emitChange(option2.value);
              this.visible = false;
            }
            this.isSilentBlur = byClick;
            this.setSoftFocus();
            if (this.visible)
              return;
            this.$nextTick(function() {
              _this12.scrollToOption(option2);
            });
          },
          setSoftFocus: function setSoftFocus() {
            this.softFocus = true;
            var input2 = this.$refs.input || this.$refs.reference;
            if (input2) {
              input2.focus();
            }
          },
          getValueIndex: function getValueIndex() {
            var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var value = arguments[1];
            var isObject2 = Object.prototype.toString.call(value).toLowerCase() === "[object object]";
            if (!isObject2) {
              return arr.indexOf(value);
            } else {
              var valueKey = this.valueKey;
              var index2 = -1;
              arr.some(function(item2, i) {
                if (Object(util_["getValueByPath"])(item2, valueKey) === Object(util_["getValueByPath"])(value, valueKey)) {
                  index2 = i;
                  return true;
                }
                return false;
              });
              return index2;
            }
          },
          toggleMenu: function toggleMenu() {
            if (!this.selectDisabled) {
              if (this.menuVisibleOnFocus) {
                this.menuVisibleOnFocus = false;
              } else {
                this.visible = !this.visible;
              }
              if (this.visible) {
                (this.$refs.input || this.$refs.reference).focus();
              }
            }
          },
          selectOption: function selectOption() {
            if (!this.visible) {
              this.toggleMenu();
            } else {
              if (this.options[this.hoverIndex]) {
                this.handleOptionSelect(this.options[this.hoverIndex]);
              }
            }
          },
          deleteSelected: function deleteSelected(event) {
            event.stopPropagation();
            var value = this.multiple ? [] : "";
            this.$emit("input", value);
            this.emitChange(value);
            this.visible = false;
            this.$emit("clear");
          },
          deleteTag: function deleteTag(event, tag2) {
            var index2 = this.selected.indexOf(tag2);
            if (index2 > -1 && !this.selectDisabled) {
              var value = this.value.slice();
              value.splice(index2, 1);
              this.$emit("input", value);
              this.emitChange(value);
              this.$emit("remove-tag", tag2.value);
            }
            event.stopPropagation();
          },
          onInputChange: function onInputChange() {
            if (this.filterable && this.query !== this.selectedLabel) {
              this.query = this.selectedLabel;
              this.handleQueryChange(this.query);
            }
          },
          onOptionDestroy: function onOptionDestroy(index2) {
            if (index2 > -1) {
              this.optionsCount--;
              this.filteredOptionsCount--;
              this.options.splice(index2, 1);
            }
          },
          resetInputWidth: function resetInputWidth() {
            this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;
          },
          handleResize: function handleResize() {
            this.resetInputWidth();
            if (this.multiple)
              this.resetInputHeight();
          },
          checkDefaultFirstOption: function checkDefaultFirstOption() {
            this.hoverIndex = -1;
            var hasCreated = false;
            for (var i = this.options.length - 1; i >= 0; i--) {
              if (this.options[i].created) {
                hasCreated = true;
                this.hoverIndex = i;
                break;
              }
            }
            if (hasCreated)
              return;
            for (var _i = 0; _i !== this.options.length; ++_i) {
              var option2 = this.options[_i];
              if (this.query) {
                if (!option2.disabled && !option2.groupDisabled && option2.visible) {
                  this.hoverIndex = _i;
                  break;
                }
              } else {
                if (option2.itemSelected) {
                  this.hoverIndex = _i;
                  break;
                }
              }
            }
          },
          getValueKey: function getValueKey(item2) {
            if (Object.prototype.toString.call(item2.value).toLowerCase() !== "[object object]") {
              return item2.value;
            } else {
              return Object(util_["getValueByPath"])(item2.value, this.valueKey);
            }
          }
        },
        created: function created() {
          var _this13 = this;
          this.cachedPlaceHolder = this.currentPlaceholder = this.propPlaceholder;
          if (this.multiple && !Array.isArray(this.value)) {
            this.$emit("input", []);
          }
          if (!this.multiple && Array.isArray(this.value)) {
            this.$emit("input", "");
          }
          this.debouncedOnInputChange = debounce_default()(this.debounce, function() {
            _this13.onInputChange();
          });
          this.debouncedQueryChange = debounce_default()(this.debounce, function(e) {
            _this13.handleQueryChange(e.target.value);
          });
          this.$on("handleOptionClick", this.handleOptionSelect);
          this.$on("setSelected", this.setSelected);
        },
        mounted: function mounted2() {
          var _this14 = this;
          if (this.multiple && Array.isArray(this.value) && this.value.length > 0) {
            this.currentPlaceholder = "";
          }
          Object(resize_event_["addResizeListener"])(this.$el, this.handleResize);
          var reference3 = this.$refs.reference;
          if (reference3 && reference3.$el) {
            var sizeMap = {
              medium: 36,
              small: 32,
              mini: 28
            };
            var input2 = reference3.$el.querySelector("input");
            this.initialInputHeight = input2.getBoundingClientRect().height || sizeMap[this.selectSize];
          }
          if (this.remote && this.multiple) {
            this.resetInputHeight();
          }
          this.$nextTick(function() {
            if (reference3 && reference3.$el) {
              _this14.inputWidth = reference3.$el.getBoundingClientRect().width;
            }
          });
          this.setSelected();
        },
        beforeDestroy: function beforeDestroy3() {
          if (this.$el && this.handleResize)
            Object(resize_event_["removeResizeListener"])(this.$el, this.handleResize);
        }
      };
      var src_selectvue_type_script_lang_js_ = selectvue_type_script_lang_js_;
      var select_component = Object(componentNormalizer["a"])(
        src_selectvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      select_component.options.__file = "packages/select/src/select.vue";
      var src_select = select_component.exports;
      src_select.install = function(Vue2) {
        Vue2.component(src_select.name, src_select);
      };
      __webpack_exports__["default"] = src_select;
    }
  });
})(select);
var Select = /* @__PURE__ */ getDefaultExportFromCjs(select.exports);
var _sfc_main$u = Vue.extend({
  name: "n8n-select",
  components: {
    ElSelect: Select
  },
  props: {
    value: {},
    size: {
      type: String,
      default: "large",
      validator: (value) => ["mini", "small", "medium", "large", "xlarge"].includes(value)
    },
    placeholder: {
      type: String
    },
    disabled: {
      type: Boolean
    },
    filterable: {
      type: Boolean
    },
    defaultFirstOption: {
      type: Boolean
    },
    multiple: {
      type: Boolean
    },
    filterMethod: {
      type: Function
    },
    loading: {
      type: Boolean
    },
    loadingText: {
      type: String
    },
    popperClass: {
      type: String
    },
    popperAppendToBody: {
      type: Boolean
    },
    limitPopperWidth: {
      type: Boolean
    },
    noDataText: {
      type: String
    }
  },
  computed: {
    computedSize() {
      if (this.size === "xlarge") {
        return void 0;
      }
      return this.size;
    },
    classes() {
      if (this.size === "xlarge") {
        return "xlarge";
      }
      return "";
    },
    popperClasses() {
      let classes = this.popperClass || "";
      if (this.limitPopperWidth) {
        classes = `${classes} ${this.$style.limitPopperWidth}`;
      }
      return classes;
    }
  },
  methods: {
    focus() {
      const select2 = this.$refs.innerSelect;
      if (select2) {
        select2.focus();
      }
    },
    blur() {
      const select2 = this.$refs.innerSelect;
      if (select2) {
        select2.blur();
      }
    },
    focusOnInput() {
      const select2 = this.$refs.innerSelect;
      if (select2) {
        const input2 = select2.$refs.input;
        if (input2) {
          input2.focus();
        }
      }
    }
  }
});
const xlarge = "_xlarge_l5iac_1";
const limitPopperWidth$1 = "_limitPopperWidth_l5iac_8";
const container$9 = "_container_l5iac_16";
const withPrepend = "_withPrepend_l5iac_21";
const prepend$1 = "_prepend_l5iac_26";
var style0$r = {
  xlarge,
  limitPopperWidth: limitPopperWidth$1,
  container: container$9,
  withPrepend,
  prepend: prepend$1
};
var _sfc_render$x = function render17() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: { "n8n-select": true, [_vm.$style.container]: true, [_vm.$style.withPrepend]: !!_vm.$slots.prepend } }, [_vm.$slots.prepend ? _c("div", { class: _vm.$style.prepend }, [_vm._t("prepend")], 2) : _vm._e(), _c("el-select", _vm._g(_vm._b({ ref: "innerSelect", class: _vm.$style[_vm.classes], attrs: { "value": _vm.value, "size": _vm.computedSize, "popper-class": _vm.popperClass }, scopedSlots: _vm._u([{ key: "prefix", fn: function() {
    return [_vm._t("prefix")];
  }, proxy: true }, { key: "suffix", fn: function() {
    return [_vm._t("suffix")];
  }, proxy: true }, { key: "default", fn: function() {
    return [_vm._t("default")];
  }, proxy: true }], null, true) }, "el-select", _vm.$props, false), _vm.$listeners))], 1);
};
var _sfc_staticRenderFns$x = [];
const __cssModules$r = {
  "$style": style0$r
};
function _sfc_injectStyles$r(ctx2) {
  for (var key2 in __cssModules$r) {
    this[key2] = __cssModules$r[key2];
  }
}
var __component__$x = /* @__PURE__ */ normalizeComponent(
  _sfc_main$u,
  _sfc_render$x,
  _sfc_staticRenderFns$x,
  false,
  _sfc_injectStyles$r,
  null,
  null,
  null
);
var N8nSelect = __component__$x.exports;
var option = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 53);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    3: function(module2, exports) {
      module2.exports = util$2;
    },
    33: function(module2, __webpack_exports__, __webpack_require__) {
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "li",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-select-dropdown__item",
            class: {
              selected: _vm.itemSelected,
              "is-disabled": _vm.disabled || _vm.groupDisabled || _vm.limitReached,
              hover: _vm.hover
            },
            on: {
              mouseenter: _vm.hoverItem,
              click: function($event) {
                $event.stopPropagation();
                return _vm.selectOptionClick($event);
              }
            }
          },
          [_vm._t("default", [_c("span", [_vm._v(_vm._s(_vm.currentLabel))])])],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var util_ = __webpack_require__(3);
      var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var optionvue_type_script_lang_js_ = {
        mixins: [emitter_default.a],
        name: "ElOption",
        componentName: "ElOption",
        inject: ["select"],
        props: {
          value: {
            required: true
          },
          label: [String, Number],
          created: Boolean,
          disabled: {
            type: Boolean,
            default: false
          }
        },
        data: function data3() {
          return {
            index: -1,
            groupDisabled: false,
            visible: true,
            hitState: false,
            hover: false
          };
        },
        computed: {
          isObject: function isObject2() {
            return Object.prototype.toString.call(this.value).toLowerCase() === "[object object]";
          },
          currentLabel: function currentLabel() {
            return this.label || (this.isObject ? "" : this.value);
          },
          currentValue: function currentValue() {
            return this.value || this.label || "";
          },
          itemSelected: function itemSelected() {
            if (!this.select.multiple) {
              return this.isEqual(this.value, this.select.value);
            } else {
              return this.contains(this.select.value, this.value);
            }
          },
          limitReached: function limitReached() {
            if (this.select.multiple) {
              return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;
            } else {
              return false;
            }
          }
        },
        watch: {
          currentLabel: function currentLabel() {
            if (!this.created && !this.select.remote)
              this.dispatch("ElSelect", "setSelected");
          },
          value: function value(val, oldVal) {
            var _select = this.select, remote = _select.remote, valueKey = _select.valueKey;
            if (!this.created && !remote) {
              if (valueKey && (typeof val === "undefined" ? "undefined" : _typeof2(val)) === "object" && (typeof oldVal === "undefined" ? "undefined" : _typeof2(oldVal)) === "object" && val[valueKey] === oldVal[valueKey]) {
                return;
              }
              this.dispatch("ElSelect", "setSelected");
            }
          }
        },
        methods: {
          isEqual: function isEqual2(a2, b2) {
            if (!this.isObject) {
              return a2 === b2;
            } else {
              var valueKey = this.select.valueKey;
              return Object(util_["getValueByPath"])(a2, valueKey) === Object(util_["getValueByPath"])(b2, valueKey);
            }
          },
          contains: function contains() {
            var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var target2 = arguments[1];
            if (!this.isObject) {
              return arr && arr.indexOf(target2) > -1;
            } else {
              var valueKey = this.select.valueKey;
              return arr && arr.some(function(item2) {
                return Object(util_["getValueByPath"])(item2, valueKey) === Object(util_["getValueByPath"])(target2, valueKey);
              });
            }
          },
          handleGroupDisabled: function handleGroupDisabled(val) {
            this.groupDisabled = val;
          },
          hoverItem: function hoverItem() {
            if (!this.disabled && !this.groupDisabled) {
              this.select.hoverIndex = this.select.options.indexOf(this);
            }
          },
          selectOptionClick: function selectOptionClick() {
            if (this.disabled !== true && this.groupDisabled !== true) {
              this.dispatch("ElSelect", "handleOptionClick", [this, true]);
            }
          },
          queryChange: function queryChange(query) {
            this.visible = new RegExp(Object(util_["escapeRegexpString"])(query), "i").test(this.currentLabel) || this.created;
            if (!this.visible) {
              this.select.filteredOptionsCount--;
            }
          }
        },
        created: function created() {
          this.select.options.push(this);
          this.select.cachedOptions.push(this);
          this.select.optionsCount++;
          this.select.filteredOptionsCount++;
          this.$on("queryChange", this.queryChange);
          this.$on("handleGroupDisabled", this.handleGroupDisabled);
        },
        beforeDestroy: function beforeDestroy3() {
          var _select2 = this.select, selected = _select2.selected, multiple = _select2.multiple;
          var selectedOptions = multiple ? selected : [selected];
          var index2 = this.select.cachedOptions.indexOf(this);
          var selectedIndex = selectedOptions.indexOf(this);
          if (index2 > -1 && selectedIndex < 0) {
            this.select.cachedOptions.splice(index2, 1);
          }
          this.select.onOptionDestroy(this.select.options.indexOf(this));
        }
      };
      var src_optionvue_type_script_lang_js_ = optionvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_optionvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/select/src/option.vue";
      __webpack_exports__["a"] = component.exports;
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    53: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var _select_src_option__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(33);
      _select_src_option__WEBPACK_IMPORTED_MODULE_0__["a"].install = function(Vue2) {
        Vue2.component(_select_src_option__WEBPACK_IMPORTED_MODULE_0__["a"].name, _select_src_option__WEBPACK_IMPORTED_MODULE_0__["a"]);
      };
      __webpack_exports__["default"] = _select_src_option__WEBPACK_IMPORTED_MODULE_0__["a"];
    }
  });
})(option);
var Option = /* @__PURE__ */ getDefaultExportFromCjs(option.exports);
Option.name = "n8n-option";
const _sfc_render$w = null;
const _sfc_staticRenderFns$w = null;
var __component__$w = /* @__PURE__ */ normalizeComponent(
  Option,
  _sfc_render$w,
  _sfc_staticRenderFns$w,
  false,
  null,
  null,
  null,
  null
);
var N8nOption = __component__$w.exports;
var tooltip$1 = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 136);
  }({
    136: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var debounce_ = __webpack_require__(19);
      var debounce_default = /* @__PURE__ */ __webpack_require__.n(debounce_);
      var dom_ = __webpack_require__(2);
      var util_ = __webpack_require__(3);
      var external_vue_ = __webpack_require__(7);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      var main = {
        name: "ElTooltip",
        mixins: [vue_popper_default.a],
        props: {
          openDelay: {
            type: Number,
            default: 0
          },
          disabled: Boolean,
          manual: Boolean,
          effect: {
            type: String,
            default: "dark"
          },
          arrowOffset: {
            type: Number,
            default: 0
          },
          popperClass: String,
          content: String,
          visibleArrow: {
            default: true
          },
          transition: {
            type: String,
            default: "el-fade-in-linear"
          },
          popperOptions: {
            default: function _default3() {
              return {
                boundariesPadding: 10,
                gpuAcceleration: false
              };
            }
          },
          enterable: {
            type: Boolean,
            default: true
          },
          hideAfter: {
            type: Number,
            default: 0
          },
          tabindex: {
            type: Number,
            default: 0
          }
        },
        data: function data3() {
          return {
            tooltipId: "el-tooltip-" + Object(util_["generateId"])(),
            timeoutPending: null,
            focusing: false
          };
        },
        beforeCreate: function beforeCreate() {
          var _this = this;
          if (this.$isServer)
            return;
          this.popperVM = new external_vue_default.a({
            data: { node: "" },
            render: function render50(h) {
              return this.node;
            }
          }).$mount();
          this.debounceClose = debounce_default()(200, function() {
            return _this.handleClosePopper();
          });
        },
        render: function render50(h) {
          var _this2 = this;
          if (this.popperVM) {
            this.popperVM.node = h(
              "transition",
              {
                attrs: {
                  name: this.transition
                },
                on: {
                  "afterLeave": this.doDestroy
                }
              },
              [h(
                "div",
                {
                  on: {
                    "mouseleave": function mouseleave() {
                      _this2.setExpectedState(false);
                      _this2.debounceClose();
                    },
                    "mouseenter": function mouseenter() {
                      _this2.setExpectedState(true);
                    }
                  },
                  ref: "popper",
                  attrs: {
                    role: "tooltip",
                    id: this.tooltipId,
                    "aria-hidden": this.disabled || !this.showPopper ? "true" : "false"
                  },
                  directives: [{
                    name: "show",
                    value: !this.disabled && this.showPopper
                  }],
                  "class": ["el-tooltip__popper", "is-" + this.effect, this.popperClass]
                },
                [this.$slots.content || this.content]
              )]
            );
          }
          var firstElement = this.getFirstElement();
          if (!firstElement)
            return null;
          var data3 = firstElement.data = firstElement.data || {};
          data3.staticClass = this.addTooltipClass(data3.staticClass);
          return firstElement;
        },
        mounted: function mounted2() {
          var _this3 = this;
          this.referenceElm = this.$el;
          if (this.$el.nodeType === 1) {
            this.$el.setAttribute("aria-describedby", this.tooltipId);
            this.$el.setAttribute("tabindex", this.tabindex);
            Object(dom_["on"])(this.referenceElm, "mouseenter", this.show);
            Object(dom_["on"])(this.referenceElm, "mouseleave", this.hide);
            Object(dom_["on"])(this.referenceElm, "focus", function() {
              if (!_this3.$slots.default || !_this3.$slots.default.length) {
                _this3.handleFocus();
                return;
              }
              var instance = _this3.$slots.default[0].componentInstance;
              if (instance && instance.focus) {
                instance.focus();
              } else {
                _this3.handleFocus();
              }
            });
            Object(dom_["on"])(this.referenceElm, "blur", this.handleBlur);
            Object(dom_["on"])(this.referenceElm, "click", this.removeFocusing);
          }
          if (this.value && this.popperVM) {
            this.popperVM.$nextTick(function() {
              if (_this3.value) {
                _this3.updatePopper();
              }
            });
          }
        },
        watch: {
          focusing: function focusing(val) {
            if (val) {
              Object(dom_["addClass"])(this.referenceElm, "focusing");
            } else {
              Object(dom_["removeClass"])(this.referenceElm, "focusing");
            }
          }
        },
        methods: {
          show: function show() {
            this.setExpectedState(true);
            this.handleShowPopper();
          },
          hide: function hide() {
            this.setExpectedState(false);
            this.debounceClose();
          },
          handleFocus: function handleFocus() {
            this.focusing = true;
            this.show();
          },
          handleBlur: function handleBlur() {
            this.focusing = false;
            this.hide();
          },
          removeFocusing: function removeFocusing() {
            this.focusing = false;
          },
          addTooltipClass: function addTooltipClass(prev) {
            if (!prev) {
              return "el-tooltip";
            } else {
              return "el-tooltip " + prev.replace("el-tooltip", "");
            }
          },
          handleShowPopper: function handleShowPopper() {
            var _this4 = this;
            if (!this.expectedState || this.manual)
              return;
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this4.showPopper = true;
            }, this.openDelay);
            if (this.hideAfter > 0) {
              this.timeoutPending = setTimeout(function() {
                _this4.showPopper = false;
              }, this.hideAfter);
            }
          },
          handleClosePopper: function handleClosePopper() {
            if (this.enterable && this.expectedState || this.manual)
              return;
            clearTimeout(this.timeout);
            if (this.timeoutPending) {
              clearTimeout(this.timeoutPending);
            }
            this.showPopper = false;
            if (this.disabled) {
              this.doDestroy();
            }
          },
          setExpectedState: function setExpectedState(expectedState) {
            if (expectedState === false) {
              clearTimeout(this.timeoutPending);
            }
            this.expectedState = expectedState;
          },
          getFirstElement: function getFirstElement() {
            var slots = this.$slots.default;
            if (!Array.isArray(slots))
              return null;
            var element = null;
            for (var index2 = 0; index2 < slots.length; index2++) {
              if (slots[index2] && slots[index2].tag) {
                element = slots[index2];
                break;
              }
            }
            return element;
          }
        },
        beforeDestroy: function beforeDestroy3() {
          this.popperVM && this.popperVM.$destroy();
        },
        destroyed: function destroyed() {
          var reference3 = this.referenceElm;
          if (reference3.nodeType === 1) {
            Object(dom_["off"])(reference3, "mouseenter", this.show);
            Object(dom_["off"])(reference3, "mouseleave", this.hide);
            Object(dom_["off"])(reference3, "focus", this.handleFocus);
            Object(dom_["off"])(reference3, "blur", this.handleBlur);
            Object(dom_["off"])(reference3, "click", this.removeFocusing);
          }
        }
      };
      main.install = function(Vue2) {
        Vue2.component(main.name, main);
      };
      __webpack_exports__["default"] = main;
    },
    19: function(module2, exports) {
      module2.exports = debounce$1;
    },
    2: function(module2, exports) {
      module2.exports = dom;
    },
    3: function(module2, exports) {
      module2.exports = util$2;
    },
    5: function(module2, exports) {
      module2.exports = vuePopper;
    },
    7: function(module2, exports) {
      module2.exports = Vue;
    }
  });
})(tooltip$1);
var ElTooltip = /* @__PURE__ */ getDefaultExportFromCjs(tooltip$1.exports);
var _sfc_main$t = Vue.extend({
  name: "n8n-tooltip",
  inheritAttrs: false,
  components: {
    ElTooltip,
    N8nButton
  },
  props: {
    justifyButtons: {
      type: String,
      default: "flex-end",
      validator: (value) => ["flex-start", "flex-end", "start", "end", "left", "right", "center", "space-between", "space-around", "space-evenly"].includes(value)
    },
    buttons: {
      type: Array,
      default: () => []
    }
  }
});
const buttons = "_buttons_1nc1d_1";
var style0$q = {
  buttons
};
var _sfc_render$v = function render18() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("el-tooltip", _vm._b({ scopedSlots: _vm._u([_vm._l(_vm.$slots, function(_2, slotName) {
    return { key: slotName, fn: function() {
      return [_vm._t(slotName), slotName === "content" && _vm.buttons.length ? _c("div", { key: slotName, class: _vm.$style.buttons, style: { justifyContent: _vm.justifyButtons } }, _vm._l(_vm.buttons, function(button2) {
        return _c("n8n-button", _vm._g(_vm._b({ key: button2.attrs.label }, "n8n-button", button2.attrs, false), button2.listeners));
      }), 1) : _vm._e()];
    }, proxy: true };
  })], null, true) }, "el-tooltip", _vm.$attrs, false));
};
var _sfc_staticRenderFns$v = [];
const __cssModules$q = {
  "$style": style0$q
};
function _sfc_injectStyles$q(ctx2) {
  for (var key2 in __cssModules$q) {
    this[key2] = __cssModules$q[key2];
  }
}
var __component__$v = /* @__PURE__ */ normalizeComponent(
  _sfc_main$t,
  _sfc_render$v,
  _sfc_staticRenderFns$v,
  false,
  _sfc_injectStyles$q,
  null,
  null,
  null
);
var N8nTooltip = __component__$v.exports;
function addTargetBlank(html) {
  return html && html.includes("href=") ? html.replace(/href=/g, 'target="_blank" href=') : html;
}
var _sfc_main$s = Vue.extend({
  name: "n8n-input-label",
  components: {
    N8nText,
    N8nIcon,
    N8nTooltip
  },
  props: {
    color: {
      type: String
    },
    label: {
      type: String
    },
    tooltipText: {
      type: String
    },
    inputName: {
      type: String
    },
    required: {
      type: Boolean
    },
    bold: {
      type: Boolean,
      default: true
    },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["small", "medium"].includes(value)
    },
    underline: {
      type: Boolean
    },
    showTooltip: {
      type: Boolean
    },
    showOptions: {
      type: Boolean
    }
  },
  methods: {
    addTargetBlank
  }
});
const container$8 = "_container_1qj3w_1";
const inputLabel = "_inputLabel_1qj3w_6";
const infoIcon = "_infoIcon_1qj3w_10";
const options = "_options_1qj3w_13";
const overlay = "_overlay_1qj3w_17";
const title = "_title_1qj3w_22";
const hidden = "_hidden_1qj3w_65";
const visible2 = "_visible_1qj3w_69";
const heading$2 = "_heading_1qj3w_73";
const overflow = "_overflow_1qj3w_77";
const small$1 = "_small_1qj3w_82";
const medium$1 = "_medium_1qj3w_86";
const underline = "_underline_1qj3w_90";
const tooltipPopper = "_tooltipPopper_1qj3w_94";
var style0$p = {
  container: container$8,
  inputLabel,
  infoIcon,
  options,
  overlay,
  title,
  hidden,
  visible: visible2,
  heading: heading$2,
  overflow,
  small: small$1,
  medium: medium$1,
  underline,
  tooltipPopper
};
var _sfc_render$u = function render19() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: _vm.$style.container }, [_vm.label || _vm.$slots.options ? _c("label", { class: {
    [_vm.$style.inputLabel]: true,
    [_vm.$style.heading]: !!_vm.label,
    [_vm.$style.underline]: _vm.underline,
    [_vm.$style[_vm.size]]: true,
    [_vm.$style.overflow]: !!_vm.$slots.options
  }, attrs: { "for": _vm.inputName } }, [_vm.label ? _c("div", { class: _vm.$style.title }, [_c("n8n-text", { attrs: { "bold": _vm.bold, "size": _vm.size, "compact": !_vm.underline && !_vm.$slots.options, "color": _vm.color } }, [_vm._v(" " + _vm._s(_vm.label) + " "), _vm.required ? _c("n8n-text", { attrs: { "color": "primary", "bold": _vm.bold, "size": _vm.size } }, [_vm._v("*")]) : _vm._e()], 1)], 1) : _vm._e(), _vm.tooltipText && _vm.label ? _c("span", { class: [_vm.$style.infoIcon, _vm.showTooltip ? _vm.$style.visible : _vm.$style.hidden] }, [_c("n8n-tooltip", { attrs: { "placement": "top", "popper-class": _vm.$style.tooltipPopper } }, [_c("n8n-icon", { attrs: { "icon": "question-circle", "size": "small" } }), _c("div", { attrs: { "slot": "content" }, domProps: { "innerHTML": _vm._s(_vm.addTargetBlank(_vm.tooltipText)) }, slot: "content" })], 1)], 1) : _vm._e(), _vm.$slots.options && _vm.label ? _c("div", { class: { [_vm.$style.overlay]: true, [_vm.$style.visible]: _vm.showOptions } }) : _vm._e(), _vm.$slots.options ? _c("div", { class: { [_vm.$style.options]: true, [_vm.$style.visible]: _vm.showOptions } }, [_vm._t("options")], 2) : _vm._e()]) : _vm._e(), _vm._t("default")], 2);
};
var _sfc_staticRenderFns$u = [];
const __cssModules$p = {
  "$style": style0$p
};
function _sfc_injectStyles$p(ctx2) {
  for (var key2 in __cssModules$p) {
    this[key2] = __cssModules$p[key2];
  }
}
var __component__$u = /* @__PURE__ */ normalizeComponent(
  _sfc_main$s,
  _sfc_render$u,
  _sfc_staticRenderFns$u,
  false,
  _sfc_injectStyles$p,
  null,
  null,
  null
);
var N8nInputLabel = __component__$u.exports;
var checkbox = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 90);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    90: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "label",
          {
            staticClass: "el-checkbox",
            class: [
              _vm.border && _vm.checkboxSize ? "el-checkbox--" + _vm.checkboxSize : "",
              { "is-disabled": _vm.isDisabled },
              { "is-bordered": _vm.border },
              { "is-checked": _vm.isChecked }
            ],
            attrs: { id: _vm.id }
          },
          [
            _c(
              "span",
              {
                staticClass: "el-checkbox__input",
                class: {
                  "is-disabled": _vm.isDisabled,
                  "is-checked": _vm.isChecked,
                  "is-indeterminate": _vm.indeterminate,
                  "is-focus": _vm.focus
                },
                attrs: {
                  tabindex: _vm.indeterminate ? 0 : false,
                  role: _vm.indeterminate ? "checkbox" : false,
                  "aria-checked": _vm.indeterminate ? "mixed" : false
                }
              },
              [
                _c("span", { staticClass: "el-checkbox__inner" }),
                _vm.trueLabel || _vm.falseLabel ? _c("input", {
                  directives: [
                    {
                      name: "model",
                      rawName: "v-model",
                      value: _vm.model,
                      expression: "model"
                    }
                  ],
                  staticClass: "el-checkbox__original",
                  attrs: {
                    type: "checkbox",
                    "aria-hidden": _vm.indeterminate ? "true" : "false",
                    name: _vm.name,
                    disabled: _vm.isDisabled,
                    "true-value": _vm.trueLabel,
                    "false-value": _vm.falseLabel
                  },
                  domProps: {
                    checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, null) > -1 : _vm._q(_vm.model, _vm.trueLabel)
                  },
                  on: {
                    change: [
                      function($event) {
                        var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? _vm.trueLabel : _vm.falseLabel;
                        if (Array.isArray($$a)) {
                          var $$v = null, $$i = _vm._i($$a, $$v);
                          if ($$el.checked) {
                            $$i < 0 && (_vm.model = $$a.concat([$$v]));
                          } else {
                            $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                          }
                        } else {
                          _vm.model = $$c;
                        }
                      },
                      _vm.handleChange
                    ],
                    focus: function($event) {
                      _vm.focus = true;
                    },
                    blur: function($event) {
                      _vm.focus = false;
                    }
                  }
                }) : _c("input", {
                  directives: [
                    {
                      name: "model",
                      rawName: "v-model",
                      value: _vm.model,
                      expression: "model"
                    }
                  ],
                  staticClass: "el-checkbox__original",
                  attrs: {
                    type: "checkbox",
                    "aria-hidden": _vm.indeterminate ? "true" : "false",
                    disabled: _vm.isDisabled,
                    name: _vm.name
                  },
                  domProps: {
                    value: _vm.label,
                    checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, _vm.label) > -1 : _vm.model
                  },
                  on: {
                    change: [
                      function($event) {
                        var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? true : false;
                        if (Array.isArray($$a)) {
                          var $$v = _vm.label, $$i = _vm._i($$a, $$v);
                          if ($$el.checked) {
                            $$i < 0 && (_vm.model = $$a.concat([$$v]));
                          } else {
                            $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                          }
                        } else {
                          _vm.model = $$c;
                        }
                      },
                      _vm.handleChange
                    ],
                    focus: function($event) {
                      _vm.focus = true;
                    },
                    blur: function($event) {
                      _vm.focus = false;
                    }
                  }
                })
              ]
            ),
            _vm.$slots.default || _vm.label ? _c(
              "span",
              { staticClass: "el-checkbox__label" },
              [
                _vm._t("default"),
                !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
              ],
              2
            ) : _vm._e()
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var checkboxvue_type_script_lang_js_ = {
        name: "ElCheckbox",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        componentName: "ElCheckbox",
        data: function data3() {
          return {
            selfModel: false,
            focus: false,
            isLimitExceeded: false
          };
        },
        computed: {
          model: {
            get: function get2() {
              return this.isGroup ? this.store : this.value !== void 0 ? this.value : this.selfModel;
            },
            set: function set3(val) {
              if (this.isGroup) {
                this.isLimitExceeded = false;
                this._checkboxGroup.min !== void 0 && val.length < this._checkboxGroup.min && (this.isLimitExceeded = true);
                this._checkboxGroup.max !== void 0 && val.length > this._checkboxGroup.max && (this.isLimitExceeded = true);
                this.isLimitExceeded === false && this.dispatch("ElCheckboxGroup", "input", [val]);
              } else {
                this.$emit("input", val);
                this.selfModel = val;
              }
            }
          },
          isChecked: function isChecked() {
            if ({}.toString.call(this.model) === "[object Boolean]") {
              return this.model;
            } else if (Array.isArray(this.model)) {
              return this.model.indexOf(this.label) > -1;
            } else if (this.model !== null && this.model !== void 0) {
              return this.model === this.trueLabel;
            }
          },
          isGroup: function isGroup() {
            var parent = this.$parent;
            while (parent) {
              if (parent.$options.componentName !== "ElCheckboxGroup") {
                parent = parent.$parent;
              } else {
                this._checkboxGroup = parent;
                return true;
              }
            }
            return false;
          },
          store: function store() {
            return this._checkboxGroup ? this._checkboxGroup.value : this.value;
          },
          isLimitDisabled: function isLimitDisabled() {
            var _checkboxGroup = this._checkboxGroup, max = _checkboxGroup.max, min = _checkboxGroup.min;
            return !!(max || min) && this.model.length >= max && !this.isChecked || this.model.length <= min && this.isChecked;
          },
          isDisabled: function isDisabled() {
            return this.isGroup ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled : this.disabled || (this.elForm || {}).disabled;
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          checkboxSize: function checkboxSize() {
            var temCheckboxSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
            return this.isGroup ? this._checkboxGroup.checkboxGroupSize || temCheckboxSize : temCheckboxSize;
          }
        },
        props: {
          value: {},
          label: {},
          indeterminate: Boolean,
          disabled: Boolean,
          checked: Boolean,
          name: String,
          trueLabel: [String, Number],
          falseLabel: [String, Number],
          id: String,
          controls: String,
          border: Boolean,
          size: String
        },
        methods: {
          addToStore: function addToStore() {
            if (Array.isArray(this.model) && this.model.indexOf(this.label) === -1) {
              this.model.push(this.label);
            } else {
              this.model = this.trueLabel || true;
            }
          },
          handleChange: function handleChange(ev) {
            var _this = this;
            if (this.isLimitExceeded)
              return;
            var value = void 0;
            if (ev.target.checked) {
              value = this.trueLabel === void 0 ? true : this.trueLabel;
            } else {
              value = this.falseLabel === void 0 ? false : this.falseLabel;
            }
            this.$emit("change", value, ev);
            this.$nextTick(function() {
              if (_this.isGroup) {
                _this.dispatch("ElCheckboxGroup", "change", [_this._checkboxGroup.value]);
              }
            });
          }
        },
        created: function created() {
          this.checked && this.addToStore();
        },
        mounted: function mounted2() {
          if (this.indeterminate) {
            this.$el.setAttribute("aria-controls", this.controls);
          }
        },
        watch: {
          value: function value(_value) {
            this.dispatch("ElFormItem", "el.form.change", _value);
          }
        }
      };
      var src_checkboxvue_type_script_lang_js_ = checkboxvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_checkboxvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/checkbox/src/checkbox.vue";
      var src_checkbox = component.exports;
      src_checkbox.install = function(Vue2) {
        Vue2.component(src_checkbox.name, src_checkbox);
      };
      __webpack_exports__["default"] = src_checkbox;
    }
  });
})(checkbox);
var Checkbox = /* @__PURE__ */ getDefaultExportFromCjs(checkbox.exports);
var _sfc_main$r = Vue.extend({
  name: "n8n-checkbox",
  components: {
    ElCheckbox: Checkbox,
    N8nInputLabel
  },
  props: {
    label: {
      type: String,
      required: true
    },
    disabled: {
      type: Boolean,
      default: false
    },
    tooltipText: {
      type: String,
      required: false
    },
    indeterminate: {
      type: Boolean,
      default: false
    },
    value: {
      type: Boolean,
      default: false
    },
    labelSize: {
      type: String,
      default: "medium",
      validator: (value) => ["small", "medium"].includes(value)
    }
  },
  methods: {
    onChange(event) {
      this.$emit("input", event);
    }
  }
});
const n8nCheckbox = "_n8nCheckbox_11s1i_1";
var style0$o = {
  n8nCheckbox
};
var _sfc_render$t = function render20() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("el-checkbox", _vm._b({ class: ["n8n-checkbox", _vm.$style.n8nCheckbox], attrs: { "disabled": _vm.disabled, "indeterminate": _vm.indeterminate, "value": _vm.value }, on: { "change": _vm.onChange } }, "el-checkbox", _vm.$props, false), [_c("n8n-input-label", { attrs: { "label": _vm.label, "tooltipText": _vm.tooltipText, "bold": false, "size": _vm.labelSize } })], 1);
};
var _sfc_staticRenderFns$t = [];
const __cssModules$o = {
  "$style": style0$o
};
function _sfc_injectStyles$o(ctx2) {
  for (var key2 in __cssModules$o) {
    this[key2] = __cssModules$o[key2];
  }
}
var __component__$t = /* @__PURE__ */ normalizeComponent(
  _sfc_main$r,
  _sfc_render$t,
  _sfc_staticRenderFns$t,
  false,
  _sfc_injectStyles$o,
  null,
  null,
  null
);
var N8nCheckbox = __component__$t.exports;
const emailRegex = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
const VALIDATORS = {
  REQUIRED: {
    validate: (value) => {
      if (typeof value === "string" && !!value.trim()) {
        return false;
      }
      if (typeof value === "number" || typeof value === "boolean") {
        return false;
      }
      return {
        messageKey: "formInput.validator.fieldRequired"
      };
    }
  },
  MIN_LENGTH: {
    validate: (value, config2) => {
      if (typeof value === "string" && value.length < config2.minimum) {
        return {
          messageKey: "formInput.validator.minCharactersRequired",
          options: config2
        };
      }
      return false;
    }
  },
  MAX_LENGTH: {
    validate: (value, config2) => {
      if (typeof value === "string" && value.length > config2.maximum) {
        return {
          messageKey: "formInput.validator.maxCharactersRequired",
          options: config2
        };
      }
      return false;
    }
  },
  CONTAINS_NUMBER: {
    validate: (value, config2) => {
      if (typeof value !== "string") {
        return false;
      }
      const numberCount = (value.match(/\d/g) || []).length;
      if (numberCount < config2.minimum) {
        return {
          messageKey: "formInput.validator.numbersRequired",
          options: config2
        };
      }
      return false;
    }
  },
  VALID_EMAIL: {
    validate: (value) => {
      if (!emailRegex.test(String(value).trim().toLowerCase())) {
        return {
          messageKey: "formInput.validator.validEmailRequired"
        };
      }
      return false;
    }
  },
  CONTAINS_UPPERCASE: {
    validate: (value, config2) => {
      if (typeof value !== "string") {
        return false;
      }
      const uppercaseCount = (value.match(/[A-Z]/g) || []).length;
      if (uppercaseCount < config2.minimum) {
        return {
          messageKey: "formInput.validator.uppercaseCharsRequired",
          options: config2
        };
      }
      return false;
    }
  },
  DEFAULT_PASSWORD_RULES: {
    rules: [
      {
        rules: [
          { name: "MIN_LENGTH", config: { minimum: 8 } },
          { name: "CONTAINS_NUMBER", config: { minimum: 1 } },
          { name: "CONTAINS_UPPERCASE", config: { minimum: 1 } }
        ],
        defaultError: {
          messageKey: "formInput.validator.defaultPasswordRequirements"
        }
      },
      { name: "MAX_LENGTH", config: { maximum: 64 } }
    ]
  }
};
const getValidationError = (value, validators, validator5, config2) => {
  if (validator5.hasOwnProperty("rules")) {
    const rules = validator5.rules;
    for (let i = 0; i < rules.length; i++) {
      if (rules[i].hasOwnProperty("rules")) {
        const error2 = getValidationError(
          value,
          validators,
          rules[i],
          config2
        );
        if (error2) {
          return error2;
        }
      }
      if (rules[i].hasOwnProperty("name")) {
        const rule2 = rules[i];
        if (!validators[rule2.name]) {
          continue;
        }
        const error2 = getValidationError(
          value,
          validators,
          validators[rule2.name],
          rule2.config
        );
        if (error2 && validator5.defaultError !== void 0) {
          return validator5.defaultError;
        } else if (error2) {
          return error2;
        }
      }
    }
  } else if (validator5.hasOwnProperty("validate")) {
    return validator5.validate(value, config2);
  }
  return false;
};
var _sfc_main$q = /* @__PURE__ */ defineComponent({
  __name: "FormInput",
  props: {
    value: null,
    label: null,
    infoText: null,
    required: { type: Boolean },
    showRequiredAsterisk: { type: Boolean, default: true },
    type: { default: "text" },
    placeholder: null,
    tooltipText: null,
    showValidationWarnings: { type: Boolean },
    validateOnBlur: { type: Boolean, default: true },
    documentationUrl: null,
    documentationText: { default: "Open docs" },
    validationRules: null,
    validators: null,
    maxlength: null,
    options: null,
    autocomplete: null,
    name: null,
    focusInitially: { type: Boolean },
    labelSize: { default: "medium" }
  },
  emits: ["validate", "input", "focus", "blur", "enter"],
  setup(__props, { expose, emit }) {
    const props = __props;
    const state = reactive({
      hasBlurred: false,
      isTyping: false
    });
    const slots = useSlots();
    const inputRef = ref(null);
    function getInputValidationError() {
      const rules = props.validationRules || [];
      const validators = {
        ...VALIDATORS,
        ...props.validators || {}
      };
      if (props.required) {
        const error2 = getValidationError(props.value, validators, validators.REQUIRED);
        if (error2)
          return error2;
      }
      for (let i = 0; i < rules.length; i++) {
        if (rules[i].hasOwnProperty("name")) {
          const rule2 = rules[i];
          if (validators[rule2.name]) {
            const error2 = getValidationError(
              props.value,
              validators,
              validators[rule2.name],
              rule2.config
            );
            if (error2)
              return error2;
          }
        }
        if (rules[i].hasOwnProperty("rules")) {
          const rule2 = rules[i];
          const error2 = getValidationError(
            props.value,
            validators,
            rule2
          );
          if (error2)
            return error2;
        }
      }
      return null;
    }
    function onBlur() {
      state.hasBlurred = true;
      state.isTyping = false;
      emit("blur");
    }
    function onInput(value) {
      state.isTyping = true;
      emit("input", value);
    }
    function onFocus() {
      emit("focus");
    }
    function onEnter(event) {
      event.stopPropagation();
      event.preventDefault();
      emit("enter");
    }
    const validationError = computed(() => {
      const error2 = getInputValidationError();
      return error2 ? t2(error2.messageKey, error2.options) : null;
    });
    const hasDefaultSlot = computed(() => !!slots.default);
    const showErrors = computed(() => !!validationError.value && (props.validateOnBlur && state.hasBlurred && !state.isTyping || props.showValidationWarnings));
    onMounted(() => {
      emit("validate", !validationError.value);
      if (props.focusInitially && inputRef.value)
        inputRef.value.focus();
    });
    watch$1(() => validationError.value, (error2) => emit("validate", !error2));
    expose({ inputRef });
    return { __sfc: true, props, emit, state, slots, inputRef, getInputValidationError, onBlur, onInput, onFocus, onEnter, validationError, hasDefaultSlot, showErrors, N8nInput, N8nSelect, N8nOption, N8nInputLabel, N8nCheckbox };
  }
});
const infoText = "_infoText_1hs2d_1";
const errors$1 = "_errors_1hs2d_8 _infoText_1hs2d_1";
const errorInput = "_errorInput_1hs2d_13";
var style0$n = {
  infoText,
  errors: errors$1,
  errorInput
};
var _sfc_render$s = function render21() {
  var _vm = this, _c = _vm._self._c, _setup = _vm._self._setupProxy;
  return _vm.type === "checkbox" ? _c(_setup.N8nCheckbox, _vm._b({ ref: "inputRef", on: { "input": _setup.onInput, "focus": _setup.onFocus } }, "n8n-checkbox", _vm.$props, false)) : _c(_setup.N8nInputLabel, { attrs: { "inputName": _vm.name, "label": _vm.label, "tooltipText": _vm.tooltipText, "required": _vm.required && _vm.showRequiredAsterisk } }, [_c("div", { class: _setup.showErrors ? _vm.$style.errorInput : "", on: { "keydown": [function($event) {
    $event.stopPropagation();
  }, function($event) {
    if (!$event.type.indexOf("key") && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter"))
      return null;
    return _setup.onEnter.apply(null, arguments);
  }] } }, [_setup.hasDefaultSlot ? _vm._t("default") : _vm.type === "select" || _vm.type === "multi-select" ? _c(_setup.N8nSelect, { ref: "inputRef", attrs: { "value": _vm.value, "placeholder": _vm.placeholder, "multiple": _vm.type === "multi-select", "name": _vm.name }, on: { "change": _setup.onInput, "focus": _setup.onFocus, "blur": _setup.onBlur } }, _vm._l(_vm.options || [], function(option2) {
    return _c(_setup.N8nOption, { key: option2.value, attrs: { "value": option2.value, "label": option2.label } });
  }), 1) : _c(_setup.N8nInput, { ref: "inputRef", attrs: { "name": _vm.name, "type": _vm.type, "placeholder": _vm.placeholder, "value": _vm.value, "maxlength": _vm.maxlength, "autocomplete": _vm.autocomplete }, on: { "input": _setup.onInput, "blur": _setup.onBlur, "focus": _setup.onFocus } })], 2), _setup.showErrors ? _c("div", { class: _vm.$style.errors }, [_c("span", { domProps: { "textContent": _vm._s(_setup.validationError) } }), _vm.documentationUrl && _vm.documentationText ? _c("n8n-link", { attrs: { "to": _vm.documentationUrl, "newWindow": true, "size": "small", "theme": "danger" } }, [_vm._v(" " + _vm._s(_vm.documentationText) + " ")]) : _vm._e()], 1) : _vm.infoText ? _c("div", { class: _vm.$style.infoText }, [_c("span", { attrs: { "size": "small" }, domProps: { "textContent": _vm._s(_vm.infoText) } })]) : _vm._e()]);
};
var _sfc_staticRenderFns$s = [];
const __cssModules$n = {
  "$style": style0$n
};
function _sfc_injectStyles$n(ctx2) {
  for (var key2 in __cssModules$n) {
    this[key2] = __cssModules$n[key2];
  }
}
var __component__$s = /* @__PURE__ */ normalizeComponent(
  _sfc_main$q,
  _sfc_render$s,
  _sfc_staticRenderFns$s,
  false,
  _sfc_injectStyles$n,
  null,
  null,
  null
);
var N8nFormInput = __component__$s.exports;
var _sfc_main$p = Vue.extend({
  name: "ResizeObserver",
  props: {
    enabled: {
      type: Boolean,
      default: true
    },
    breakpoints: {
      type: Array,
      validator: (bps) => {
        return Array.isArray(bps) && bps.reduce(
          (accu, { width, bp }) => accu && typeof width === "number" && typeof bp === "string",
          true
        );
      }
    }
  },
  data() {
    return {
      observer: null,
      bp: ""
    };
  },
  mounted() {
    if (!this.$props.enabled) {
      return;
    }
    const unsortedBreakpoints = [...this.breakpoints || []];
    const bps = unsortedBreakpoints.sort((a2, b2) => a2.width - b2.width);
    const observer = new ResizeObserver((entries) => {
      entries.forEach((entry) => {
        requestAnimationFrame(() => {
          const newWidth = entry.contentRect.width;
          let newBP = "default";
          for (let i = 0; i < bps.length; i++) {
            if (newWidth < bps[i].width) {
              newBP = bps[i].bp;
              break;
            }
          }
          this.bp = newBP;
        });
      });
    });
    this.$data.observer = observer;
    if (this.$refs.root) {
      observer.observe(this.$refs.root);
    }
  },
  beforeDestroy() {
    if (this.$props.enabled) {
      this.$data.observer.disconnect();
    }
  }
});
var _sfc_render$r = function render22() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { ref: "root" }, [_vm._t("default", null, { "bp": _vm.bp })], 2);
};
var _sfc_staticRenderFns$r = [];
var __component__$r = /* @__PURE__ */ normalizeComponent(
  _sfc_main$p,
  _sfc_render$r,
  _sfc_staticRenderFns$r,
  false,
  null,
  null,
  null,
  null
);
var ResizeObserver$1 = __component__$r.exports;
var _sfc_main$o = Vue.extend({
  name: "n8n-form-inputs",
  components: {
    N8nFormInput,
    ResizeObserver: ResizeObserver$1
  },
  props: {
    inputs: {
      type: Array,
      default() {
        return [[]];
      }
    },
    eventBus: {
      type: Vue
    },
    columnView: {
      type: Boolean
    }
  },
  data() {
    return {
      showValidationWarnings: false,
      values: {},
      validity: {}
    };
  },
  mounted() {
    this.inputs.forEach((input2) => {
      if (input2.hasOwnProperty("initialValue")) {
        Vue.set(this.values, input2.name, input2.initialValue);
      }
    });
    if (this.eventBus) {
      this.eventBus.$on("submit", this.onSubmit);
    }
  },
  computed: {
    filteredInputs() {
      return this.inputs.filter(
        (input2) => typeof input2.shouldDisplay === "function" ? input2.shouldDisplay(this.values) : true
      );
    },
    isReadyToSubmit() {
      for (const key2 in this.validity) {
        if (!this.validity[key2]) {
          return false;
        }
      }
      return true;
    }
  },
  methods: {
    onInput(name, value) {
      this.values = {
        ...this.values,
        [name]: value
      };
      this.$emit("input", { name, value });
    },
    onValidate(name, valid) {
      Vue.set(this.validity, name, valid);
    },
    onSubmit() {
      this.showValidationWarnings = true;
      if (this.isReadyToSubmit) {
        const toSubmit = this.filteredInputs.reduce((accu, input2) => {
          if (this.values[input2.name]) {
            accu[input2.name] = this.values[input2.name];
          }
          return accu;
        }, {});
        this.$emit("submit", toSubmit);
      }
    }
  },
  watch: {
    isReadyToSubmit(ready) {
      this.$emit("ready", ready);
    }
  }
});
const grid = "_grid_16oq8_1";
const gridMulti = "_gridMulti_16oq8_7 _grid_16oq8_1";
var style0$m = {
  grid,
  gridMulti
};
var _sfc_render$q = function render23() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("ResizeObserver", { attrs: { "breakpoints": [{ bp: "md", width: 500 }] }, scopedSlots: _vm._u([{ key: "default", fn: function({ bp }) {
    return [_c("div", { class: bp === "md" || _vm.columnView ? _vm.$style.grid : _vm.$style.gridMulti }, _vm._l(_vm.filteredInputs, function(input2) {
      return _c("div", { key: input2.name }, [input2.properties.type === "info" ? _c("n8n-text", { attrs: { "color": "text-base", "tag": "div", "align": "center" } }, [_vm._v(" " + _vm._s(input2.properties.label) + " ")]) : _c("n8n-form-input", _vm._b({ attrs: { "name": input2.name, "value": _vm.values[input2.name], "showValidationWarnings": _vm.showValidationWarnings }, on: { "input": (value) => _vm.onInput(input2.name, value), "validate": (value) => _vm.onValidate(input2.name, value), "enter": _vm.onSubmit } }, "n8n-form-input", input2.properties, false))], 1);
    }), 0)];
  } }]) });
};
var _sfc_staticRenderFns$q = [];
const __cssModules$m = {
  "$style": style0$m
};
function _sfc_injectStyles$m(ctx2) {
  for (var key2 in __cssModules$m) {
    this[key2] = __cssModules$m[key2];
  }
}
var __component__$q = /* @__PURE__ */ normalizeComponent(
  _sfc_main$o,
  _sfc_render$q,
  _sfc_staticRenderFns$q,
  false,
  _sfc_injectStyles$m,
  null,
  null,
  null
);
var N8nFormInputs = __component__$q.exports;
var _sfc_main$n = Vue.extend({
  name: "n8n-route",
  props: {
    to: {
      type: String || Object
    },
    newWindow: {
      type: Boolean || void 0,
      default: void 0
    }
  },
  computed: {
    useRouterLink() {
      if (this.newWindow === true) {
        return false;
      }
      if (typeof this.to === "string") {
        return this.to.startsWith("/");
      }
      return this.to !== void 0;
    },
    openNewWindow() {
      if (this.newWindow !== void 0) {
        return this.newWindow;
      }
      if (typeof this.to === "string") {
        return !this.to.startsWith("/");
      }
      return true;
    }
  }
});
var _sfc_render$p = function render24() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("span", [_vm.useRouterLink ? _c("router-link", _vm._g({ attrs: { "to": _vm.to } }, _vm.$listeners), [_vm._t("default")], 2) : _c("a", _vm._g({ attrs: { "href": _vm.to, "target": _vm.openNewWindow ? "_blank" : "_self" } }, _vm.$listeners), [_vm._t("default")], 2)], 1);
};
var _sfc_staticRenderFns$p = [];
var __component__$p = /* @__PURE__ */ normalizeComponent(
  _sfc_main$n,
  _sfc_render$p,
  _sfc_staticRenderFns$p,
  false,
  null,
  null,
  null,
  null
);
var N8nRoute = __component__$p.exports;
var _sfc_main$m = Vue.extend({
  name: "n8n-link",
  props: {
    size: {
      type: String
    },
    to: {
      type: String || Object
    },
    newWindow: {
      type: Boolean || void 0,
      default: void 0
    },
    bold: {
      type: Boolean,
      default: false
    },
    underline: {
      type: Boolean,
      default: false
    },
    theme: {
      type: String,
      default: "primary",
      validator: (value) => ["primary", "danger", "text", "secondary"].includes(value)
    }
  },
  components: {
    N8nText,
    N8nRoute
  }
});
const primary = "_primary_1emdu_1";
const text$1 = "_text_1emdu_8";
const danger$2 = "_danger_1emdu_18";
const secondary = "_secondary_1emdu_25";
var style0$l = {
  primary,
  text: text$1,
  danger: danger$2,
  secondary,
  "primary-underline": "_primary-underline_1emdu_37 _primary_1emdu_1",
  "text-underline": "_text-underline_1emdu_42 _text_1emdu_8",
  "danger-underline": "_danger-underline_1emdu_47 _danger_1emdu_18",
  "secondary-underline": "_secondary-underline_1emdu_52 _secondary_1emdu_25"
};
var _sfc_render$o = function render25() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("n8n-route", _vm._g({ staticClass: "n8n-link", attrs: { "to": _vm.to, "newWindow": _vm.newWindow } }, _vm.$listeners), [_c("span", { class: _vm.$style[`${_vm.underline ? `${_vm.theme}-underline` : _vm.theme}`] }, [_c("n8n-text", { attrs: { "size": _vm.size, "bold": _vm.bold } }, [_vm._t("default")], 2)], 1)]);
};
var _sfc_staticRenderFns$o = [];
const __cssModules$l = {
  "$style": style0$l
};
function _sfc_injectStyles$l(ctx2) {
  for (var key2 in __cssModules$l) {
    this[key2] = __cssModules$l[key2];
  }
}
var __component__$o = /* @__PURE__ */ normalizeComponent(
  _sfc_main$m,
  _sfc_render$o,
  _sfc_staticRenderFns$o,
  false,
  _sfc_injectStyles$l,
  null,
  null,
  null
);
var N8nLink = __component__$o.exports;
var _sfc_main$l = Vue.extend({
  name: "n8n-form-box",
  components: {
    N8nHeading,
    N8nFormInputs,
    N8nLink,
    N8nButton
  },
  props: {
    title: {
      type: String
    },
    inputs: {
      type: Array,
      default() {
        return [];
      }
    },
    buttonText: {
      type: String
    },
    buttonLoading: {
      type: Boolean,
      default: false
    },
    secondaryButtonText: {
      type: String
    },
    redirectText: {
      type: String
    },
    redirectLink: {
      type: String
    }
  },
  data() {
    return {
      formBus: new Vue()
    };
  },
  methods: {
    onInput(e) {
      this.$emit("input", e);
    },
    onSubmit(e) {
      this.$emit("submit", e);
    },
    onButtonClick() {
      this.formBus.$emit("submit");
    },
    onSecondaryButtonClick(event) {
      this.$emit("secondaryClick", event);
    }
  }
});
const heading$1 = "_heading_1frs5_1";
const container$7 = "_container_1frs5_7";
const inputsContainer = "_inputsContainer_1frs5_15";
const actionContainer = "_actionContainer_1frs5_19";
const buttonsContainer = "_buttonsContainer_1frs5_24 _actionContainer_1frs5_19";
const secondaryButtonContainer = "_secondaryButtonContainer_1frs5_29";
const withLabel = "_withLabel_1frs5_35";
var style0$k = {
  heading: heading$1,
  container: container$7,
  inputsContainer,
  actionContainer,
  buttonsContainer,
  secondaryButtonContainer,
  withLabel
};
var _sfc_render$n = function render26() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: ["n8n-form-box", _vm.$style.container] }, [_vm.title ? _c("div", { class: _vm.$style.heading }, [_c("n8n-heading", { attrs: { "size": "xlarge" } }, [_vm._v(" " + _vm._s(_vm.title) + " ")])], 1) : _vm._e(), _c("div", { class: _vm.$style.inputsContainer }, [_c("n8n-form-inputs", { attrs: { "inputs": _vm.inputs, "eventBus": _vm.formBus, "columnView": true }, on: { "input": _vm.onInput, "submit": _vm.onSubmit } })], 1), _vm.secondaryButtonText || _vm.buttonText ? _c("div", { class: _vm.$style.buttonsContainer }, [_vm.secondaryButtonText ? _c("span", { class: _vm.$style.secondaryButtonContainer }, [_c("n8n-link", { attrs: { "size": "medium", "theme": "text" }, on: { "click": _vm.onSecondaryButtonClick } }, [_vm._v(" " + _vm._s(_vm.secondaryButtonText) + " ")])], 1) : _vm._e(), _vm.buttonText ? _c("n8n-button", { attrs: { "label": _vm.buttonText, "loading": _vm.buttonLoading, "size": "large" }, on: { "click": _vm.onButtonClick } }) : _vm._e()], 1) : _vm._e(), _c("div", { class: _vm.$style.actionContainer }, [_vm.redirectText && _vm.redirectLink ? _c("n8n-link", { attrs: { "to": _vm.redirectLink } }, [_vm._v(" " + _vm._s(_vm.redirectText) + " ")]) : _vm._e()], 1)]);
};
var _sfc_staticRenderFns$n = [];
const __cssModules$k = {
  "$style": style0$k
};
function _sfc_injectStyles$k(ctx2) {
  for (var key2 in __cssModules$k) {
    this[key2] = __cssModules$k[key2];
  }
}
var __component__$n = /* @__PURE__ */ normalizeComponent(
  _sfc_main$l,
  _sfc_render$n,
  _sfc_staticRenderFns$n,
  false,
  _sfc_injectStyles$k,
  null,
  null,
  null
);
var N8nFormBox = __component__$n.exports;
var _sfc_main$k = Vue.extend({
  name: "n8n-icon-button",
  components: {
    N8nButton
  },
  props: {
    type: {
      type: String,
      default: "primary"
    },
    size: {
      type: String,
      default: "medium"
    },
    loading: {
      type: Boolean,
      default: false
    },
    outline: {
      type: Boolean,
      default: false
    },
    text: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    active: {
      type: Boolean,
      default: false
    },
    icon: {
      type: [String, Array],
      required: true
    },
    float: {
      type: String,
      validator: (value) => ["left", "right"].includes(value)
    }
  }
});
var _sfc_render$m = function render27() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("n8n-button", _vm._g(_vm._b({ attrs: { "square": "" } }, "n8n-button", _vm.$props, false), _vm.$listeners));
};
var _sfc_staticRenderFns$m = [];
var __component__$m = /* @__PURE__ */ normalizeComponent(
  _sfc_main$k,
  _sfc_render$m,
  _sfc_staticRenderFns$m,
  false,
  null,
  null,
  null,
  null
);
var IconButton = __component__$m.exports;
var _sfc_main$j = Vue.extend({
  name: "n8n-info-accordion",
  components: {
    N8nText,
    N8nIcon
  },
  props: {
    title: {
      type: String
    },
    description: {
      type: String
    },
    items: {
      type: Array,
      default() {
        return [];
      }
    },
    initiallyExpanded: {
      type: Boolean,
      default: false
    },
    headerIcon: {
      type: Object,
      required: false
    }
  },
  mounted() {
    this.$on("expand", () => {
      this.expanded = true;
    });
    this.expanded = this.initiallyExpanded;
  },
  data() {
    return {
      expanded: false
    };
  },
  methods: {
    toggle() {
      this.expanded = !this.expanded;
    },
    onClick(e) {
      this.$emit("click", e);
    },
    onTooltipClick(item2, event) {
      this.$emit("tooltipClick", item2, event);
    }
  }
});
const container$6 = "_container_19so9_1";
const header = "_header_19so9_5";
const headerText = "_headerText_19so9_11";
const expanded$1 = "_expanded_19so9_15";
const accordionItems = "_accordionItems_19so9_19";
const accordionItem = "_accordionItem_19so9_19";
const description = "_description_19so9_31";
var style0$j = {
  container: container$6,
  header,
  headerText,
  expanded: expanded$1,
  accordionItems,
  accordionItem,
  description
};
var _sfc_render$l = function render28() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: ["accordion", _vm.$style.container] }, [_c("div", { class: { [_vm.$style.header]: true, [_vm.$style.expanded]: _vm.expanded }, on: { "click": _vm.toggle } }, [_vm.headerIcon ? _c("n8n-icon", { staticClass: "mr-2xs", attrs: { "icon": _vm.headerIcon.icon, "color": _vm.headerIcon.color, "size": "small" } }) : _vm._e(), _c("n8n-text", { class: _vm.$style.headerText, attrs: { "color": "text-base", "size": "small", "align": "left", "bold": "" } }, [_vm._v(_vm._s(_vm.title))]), _c("n8n-icon", { attrs: { "icon": _vm.expanded ? "chevron-up" : "chevron-down", "bold": "" } })], 1), _vm.expanded ? _c("div", { class: { [_vm.$style.description]: true, [_vm.$style.collapsed]: !_vm.expanded }, on: { "click": _vm.onClick } }, [_vm.items.length > 0 ? _c("div", { class: _vm.$style.accordionItems }, _vm._l(_vm.items, function(item2) {
    return _c("div", { key: item2.id, class: _vm.$style.accordionItem }, [_c("n8n-tooltip", { attrs: { "disabled": !item2.tooltip } }, [_c("div", { attrs: { "slot": "content" }, domProps: { "innerHTML": _vm._s(item2.tooltip) }, on: { "click": function($event) {
      return _vm.onTooltipClick(item2.id, $event);
    } }, slot: "content" }), _c("n8n-icon", { staticClass: "mr-2xs", attrs: { "icon": item2.icon, "color": item2.iconColor, "size": "small" } })], 1), _c("n8n-text", { attrs: { "size": "small", "color": "text-base" } }, [_vm._v(_vm._s(item2.label))])], 1);
  }), 0) : _vm._e(), _c("n8n-text", { attrs: { "color": "text-base", "size": "small", "align": "left" } }, [_c("span", { domProps: { "innerHTML": _vm._s(_vm.description) } })]), _vm._t("customContent")], 2) : _vm._e()]);
};
var _sfc_staticRenderFns$l = [];
const __cssModules$j = {
  "$style": style0$j
};
function _sfc_injectStyles$j(ctx2) {
  for (var key2 in __cssModules$j) {
    this[key2] = __cssModules$j[key2];
  }
}
var __component__$l = /* @__PURE__ */ normalizeComponent(
  _sfc_main$j,
  _sfc_render$l,
  _sfc_staticRenderFns$l,
  false,
  _sfc_injectStyles$j,
  null,
  null,
  null
);
var N8nInfoAccordion = __component__$l.exports;
var _sfc_main$i = Vue.extend({
  name: "n8n-info-tip",
  components: {
    N8nIcon,
    N8nTooltip
  },
  props: {
    theme: {
      type: String,
      default: "info",
      validator: (value) => ["info", "info-light", "warning", "danger"].includes(value)
    },
    type: {
      type: String,
      default: "note",
      validator: (value) => ["note", "tooltip"].includes(value)
    },
    bold: {
      type: Boolean,
      default: true
    },
    tooltipPlacement: {
      type: String,
      default: "top"
    }
  }
});
const base$1 = "_base_3egb8_1";
const bold = "_bold_3egb8_12";
const note = "_note_3egb8_16 _base_3egb8_1";
const tooltip = "_tooltip_3egb8_23 _base_3egb8_1";
const iconText = "_iconText_3egb8_28";
const info$1 = "_info_3egb8_33";
const warning$3 = "_warning_3egb8_41";
const danger$1 = "_danger_3egb8_45";
var style0$i = {
  base: base$1,
  bold,
  note,
  tooltip,
  iconText,
  "info-light": "_info-light_3egb8_33",
  info: info$1,
  warning: warning$3,
  danger: danger$1
};
var _sfc_render$k = function render29() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: { "n8n-info-tip": true, [_vm.$style[_vm.theme]]: true, [_vm.$style[_vm.type]]: true, [_vm.$style.bold]: _vm.bold } }, [_vm.type === "tooltip" ? _c("n8n-tooltip", { attrs: { "placement": _vm.tooltipPlacement, "popper-class": _vm.$style.tooltipPopper, "disabled": _vm.type !== "tooltip" } }, [_c("span", { class: _vm.$style.iconText }, [_c("n8n-icon", { attrs: { "icon": _vm.theme.startsWith("info") ? "info-circle" : "exclamation-triangle" } })], 1), _c("span", { attrs: { "slot": "content" }, slot: "content" }, [_vm._t("default")], 2)]) : _c("span", { class: _vm.$style.iconText }, [_c("n8n-icon", { attrs: { "icon": _vm.theme.startsWith("info") ? "info-circle" : "exclamation-triangle" } }), _c("span", [_vm._t("default")], 2)], 1)], 1);
};
var _sfc_staticRenderFns$k = [];
const __cssModules$i = {
  "$style": style0$i
};
function _sfc_injectStyles$i(ctx2) {
  for (var key2 in __cssModules$i) {
    this[key2] = __cssModules$i[key2];
  }
}
var __component__$k = /* @__PURE__ */ normalizeComponent(
  _sfc_main$i,
  _sfc_render$k,
  _sfc_staticRenderFns$k,
  false,
  _sfc_injectStyles$i,
  null,
  null,
  null
);
var InfoTip = __component__$k.exports;
var inputNumber = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 86);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    10: function(module2, exports) {
      module2.exports = input$2.exports;
    },
    2: function(module2, exports) {
      module2.exports = dom;
    },
    22: function(module2, exports) {
      module2.exports = focus;
    },
    30: function(module2, __webpack_exports__, __webpack_require__) {
      var element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
      __webpack_exports__["a"] = {
        bind: function bind2(el2, binding, vnode) {
          var interval = null;
          var startTime = void 0;
          var handler2 = function handler3() {
            return vnode.context[binding.expression].apply();
          };
          var clear = function clear2() {
            if (Date.now() - startTime < 100) {
              handler2();
            }
            clearInterval(interval);
            interval = null;
          };
          Object(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__["on"])(el2, "mousedown", function(e) {
            if (e.button !== 0)
              return;
            startTime = Date.now();
            Object(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__["once"])(document, "mouseup", clear);
            clearInterval(interval);
            interval = setInterval(handler2, 100);
          });
        }
      };
    },
    86: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            class: [
              "el-input-number",
              _vm.inputNumberSize ? "el-input-number--" + _vm.inputNumberSize : "",
              { "is-disabled": _vm.inputNumberDisabled },
              { "is-without-controls": !_vm.controls },
              { "is-controls-right": _vm.controlsAtRight }
            ],
            on: {
              dragstart: function($event) {
                $event.preventDefault();
              }
            }
          },
          [
            _vm.controls ? _c(
              "span",
              {
                directives: [
                  {
                    name: "repeat-click",
                    rawName: "v-repeat-click",
                    value: _vm.decrease,
                    expression: "decrease"
                  }
                ],
                staticClass: "el-input-number__decrease",
                class: { "is-disabled": _vm.minDisabled },
                attrs: { role: "button" },
                on: {
                  keydown: function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                      return null;
                    }
                    return _vm.decrease($event);
                  }
                }
              },
              [
                _c("i", {
                  class: "el-icon-" + (_vm.controlsAtRight ? "arrow-down" : "minus")
                })
              ]
            ) : _vm._e(),
            _vm.controls ? _c(
              "span",
              {
                directives: [
                  {
                    name: "repeat-click",
                    rawName: "v-repeat-click",
                    value: _vm.increase,
                    expression: "increase"
                  }
                ],
                staticClass: "el-input-number__increase",
                class: { "is-disabled": _vm.maxDisabled },
                attrs: { role: "button" },
                on: {
                  keydown: function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                      return null;
                    }
                    return _vm.increase($event);
                  }
                }
              },
              [
                _c("i", {
                  class: "el-icon-" + (_vm.controlsAtRight ? "arrow-up" : "plus")
                })
              ]
            ) : _vm._e(),
            _c("el-input", {
              ref: "input",
              attrs: {
                value: _vm.displayValue,
                placeholder: _vm.placeholder,
                disabled: _vm.inputNumberDisabled,
                size: _vm.inputNumberSize,
                max: _vm.max,
                min: _vm.min,
                name: _vm.name,
                label: _vm.label
              },
              on: {
                blur: _vm.handleBlur,
                focus: _vm.handleFocus,
                input: _vm.handleInput,
                change: _vm.handleInputChange
              },
              nativeOn: {
                keydown: [
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])) {
                      return null;
                    }
                    $event.preventDefault();
                    return _vm.increase($event);
                  },
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                      "Down",
                      "ArrowDown"
                    ])) {
                      return null;
                    }
                    $event.preventDefault();
                    return _vm.decrease($event);
                  }
                ]
              }
            })
          ],
          1
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var input_ = __webpack_require__(10);
      var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
      var focus_ = __webpack_require__(22);
      var focus_default = /* @__PURE__ */ __webpack_require__.n(focus_);
      var repeat_click = __webpack_require__(30);
      var input_numbervue_type_script_lang_js_ = {
        name: "ElInputNumber",
        mixins: [focus_default()("input")],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        directives: {
          repeatClick: repeat_click["a"]
        },
        components: {
          ElInput: input_default.a
        },
        props: {
          step: {
            type: Number,
            default: 1
          },
          stepStrictly: {
            type: Boolean,
            default: false
          },
          max: {
            type: Number,
            default: Infinity
          },
          min: {
            type: Number,
            default: -Infinity
          },
          value: {},
          disabled: Boolean,
          size: String,
          controls: {
            type: Boolean,
            default: true
          },
          controlsPosition: {
            type: String,
            default: ""
          },
          name: String,
          label: String,
          placeholder: String,
          precision: {
            type: Number,
            validator: function validator5(val) {
              return val >= 0 && val === parseInt(val, 10);
            }
          }
        },
        data: function data3() {
          return {
            currentValue: 0,
            userInput: null
          };
        },
        watch: {
          value: {
            immediate: true,
            handler: function handler2(value) {
              var newVal = value === void 0 ? value : Number(value);
              if (newVal !== void 0) {
                if (isNaN(newVal)) {
                  return;
                }
                if (this.stepStrictly) {
                  var stepPrecision = this.getPrecision(this.step);
                  var precisionFactor = Math.pow(10, stepPrecision);
                  newVal = Math.round(newVal / this.step) * precisionFactor * this.step / precisionFactor;
                }
                if (this.precision !== void 0) {
                  newVal = this.toPrecision(newVal, this.precision);
                }
              }
              if (newVal >= this.max)
                newVal = this.max;
              if (newVal <= this.min)
                newVal = this.min;
              this.currentValue = newVal;
              this.userInput = null;
              this.$emit("input", newVal);
            }
          }
        },
        computed: {
          minDisabled: function minDisabled() {
            return this._decrease(this.value, this.step) < this.min;
          },
          maxDisabled: function maxDisabled() {
            return this._increase(this.value, this.step) > this.max;
          },
          numPrecision: function numPrecision() {
            var value = this.value, step = this.step, getPrecision = this.getPrecision, precision = this.precision;
            var stepPrecision = getPrecision(step);
            if (precision !== void 0) {
              if (stepPrecision > precision) {
                console.warn("[Element Warn][InputNumber]precision should not be less than the decimal places of step");
              }
              return precision;
            } else {
              return Math.max(getPrecision(value), stepPrecision);
            }
          },
          controlsAtRight: function controlsAtRight() {
            return this.controls && this.controlsPosition === "right";
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          inputNumberSize: function inputNumberSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          inputNumberDisabled: function inputNumberDisabled() {
            return this.disabled || !!(this.elForm || {}).disabled;
          },
          displayValue: function displayValue() {
            if (this.userInput !== null) {
              return this.userInput;
            }
            var currentValue = this.currentValue;
            if (typeof currentValue === "number") {
              if (this.stepStrictly) {
                var stepPrecision = this.getPrecision(this.step);
                var precisionFactor = Math.pow(10, stepPrecision);
                currentValue = Math.round(currentValue / this.step) * precisionFactor * this.step / precisionFactor;
              }
              if (this.precision !== void 0) {
                currentValue = currentValue.toFixed(this.precision);
              }
            }
            return currentValue;
          }
        },
        methods: {
          toPrecision: function toPrecision(num2, precision) {
            if (precision === void 0)
              precision = this.numPrecision;
            return parseFloat(Math.round(num2 * Math.pow(10, precision)) / Math.pow(10, precision));
          },
          getPrecision: function getPrecision(value) {
            if (value === void 0)
              return 0;
            var valueString = value.toString();
            var dotPosition = valueString.indexOf(".");
            var precision = 0;
            if (dotPosition !== -1) {
              precision = valueString.length - dotPosition - 1;
            }
            return precision;
          },
          _increase: function _increase(val, step) {
            if (typeof val !== "number" && val !== void 0)
              return this.currentValue;
            var precisionFactor = Math.pow(10, this.numPrecision);
            return this.toPrecision((precisionFactor * val + precisionFactor * step) / precisionFactor);
          },
          _decrease: function _decrease(val, step) {
            if (typeof val !== "number" && val !== void 0)
              return this.currentValue;
            var precisionFactor = Math.pow(10, this.numPrecision);
            return this.toPrecision((precisionFactor * val - precisionFactor * step) / precisionFactor);
          },
          increase: function increase() {
            if (this.inputNumberDisabled || this.maxDisabled)
              return;
            var value = this.value || 0;
            var newVal = this._increase(value, this.step);
            this.setCurrentValue(newVal);
          },
          decrease: function decrease() {
            if (this.inputNumberDisabled || this.minDisabled)
              return;
            var value = this.value || 0;
            var newVal = this._decrease(value, this.step);
            this.setCurrentValue(newVal);
          },
          handleBlur: function handleBlur(event) {
            this.$emit("blur", event);
          },
          handleFocus: function handleFocus(event) {
            this.$emit("focus", event);
          },
          setCurrentValue: function setCurrentValue(newVal) {
            var oldVal = this.currentValue;
            if (typeof newVal === "number" && this.precision !== void 0) {
              newVal = this.toPrecision(newVal, this.precision);
            }
            if (newVal >= this.max)
              newVal = this.max;
            if (newVal <= this.min)
              newVal = this.min;
            if (oldVal === newVal)
              return;
            this.userInput = null;
            this.$emit("input", newVal);
            this.$emit("change", newVal, oldVal);
            this.currentValue = newVal;
          },
          handleInput: function handleInput(value) {
            this.userInput = value;
          },
          handleInputChange: function handleInputChange(value) {
            var newVal = value === "" ? void 0 : Number(value);
            if (!isNaN(newVal) || value === "") {
              this.setCurrentValue(newVal);
            }
            this.userInput = null;
          },
          select: function select2() {
            this.$refs.input.select();
          }
        },
        mounted: function mounted2() {
          var innerInput = this.$refs.input.$refs.input;
          innerInput.setAttribute("role", "spinbutton");
          innerInput.setAttribute("aria-valuemax", this.max);
          innerInput.setAttribute("aria-valuemin", this.min);
          innerInput.setAttribute("aria-valuenow", this.currentValue);
          innerInput.setAttribute("aria-disabled", this.inputNumberDisabled);
        },
        updated: function updated() {
          if (!this.$refs || !this.$refs.input)
            return;
          var innerInput = this.$refs.input.$refs.input;
          innerInput.setAttribute("aria-valuenow", this.currentValue);
        }
      };
      var src_input_numbervue_type_script_lang_js_ = input_numbervue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_input_numbervue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/input-number/src/input-number.vue";
      var input_number = component.exports;
      input_number.install = function(Vue2) {
        Vue2.component(input_number.name, input_number);
      };
      __webpack_exports__["default"] = input_number;
    }
  });
})(inputNumber);
var N8nInputNumber$1 = /* @__PURE__ */ getDefaultExportFromCjs(inputNumber.exports);
N8nInputNumber$1.name = "n8n-input-number";
const _sfc_render$j = null;
const _sfc_staticRenderFns$j = null;
var __component__$j = /* @__PURE__ */ normalizeComponent(
  N8nInputNumber$1,
  _sfc_render$j,
  _sfc_staticRenderFns$j,
  false,
  null,
  null,
  null,
  null
);
var N8nInputNumber = __component__$j.exports;
var skeleton = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 127);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    127: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          [
            _vm.uiLoading ? [
              _c(
                "div",
                _vm._b(
                  { class: ["el-skeleton", _vm.animated ? "is-animated" : ""] },
                  "div",
                  _vm.$attrs,
                  false
                ),
                [
                  _vm._l(_vm.count, function(i) {
                    return [
                      _vm.loading ? _vm._t(
                        "template",
                        _vm._l(_vm.rows, function(item2) {
                          return _c("el-skeleton-item", {
                            key: i + "-" + item2,
                            class: {
                              "el-skeleton__paragraph": item2 !== 1,
                              "is-first": item2 === 1,
                              "is-last": item2 === _vm.rows && _vm.rows > 1
                            },
                            attrs: { variant: "p" }
                          });
                        })
                      ) : _vm._e()
                    ];
                  })
                ],
                2
              )
            ] : [_vm._t("default", null, null, _vm.$attrs)]
          ],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var srcvue_type_script_lang_js_ = {
        name: "ElSkeleton",
        props: {
          animated: {
            type: Boolean,
            default: false
          },
          count: {
            type: Number,
            default: 1
          },
          rows: {
            type: Number,
            default: 4
          },
          loading: {
            type: Boolean,
            default: true
          },
          throttle: {
            type: Number,
            default: 0
          }
        },
        watch: {
          loading: {
            handler: function handler2(loading2) {
              var _this = this;
              if (this.throttle <= 0) {
                this.uiLoading = loading2;
                return;
              }
              if (loading2) {
                clearTimeout(this.timeoutHandle);
                this.timeoutHandle = setTimeout(function() {
                  _this.uiLoading = _this.loading;
                }, this.throttle);
              } else {
                this.uiLoading = loading2;
              }
            },
            immediate: true
          }
        },
        data: function data3() {
          return {
            uiLoading: this.throttle <= 0 ? this.loading : false
          };
        }
      };
      var skeleton_srcvue_type_script_lang_js_ = srcvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        skeleton_srcvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/skeleton/src/index.vue";
      var src = component.exports;
      src.install = function(Vue2) {
        Vue2.component(src.name, src);
      };
      __webpack_exports__["default"] = src;
    }
  });
})(skeleton);
var ElSkeleton = /* @__PURE__ */ getDefaultExportFromCjs(skeleton.exports);
var skeletonItem = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 67);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    67: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          { class: ["el-skeleton__item", "el-skeleton__" + _vm.variant] },
          [_vm.variant === "image" ? _c("img-placeholder") : _vm._e()],
          1
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var img_placeholdervue_type_template_id_1b2cb5c0_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "svg",
          {
            attrs: { viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg" }
          },
          [
            _c("path", {
              attrs: {
                d: "M64 896V128h896v768H64z m64-128l192-192 116.352 116.352L640 448l256 307.2V192H128v576z m224-480a96 96 0 1 1-0.064 192.064A96 96 0 0 1 352 288z"
              }
            })
          ]
        );
      };
      var img_placeholdervue_type_template_id_1b2cb5c0_staticRenderFns = [];
      img_placeholdervue_type_template_id_1b2cb5c0_render._withStripped = true;
      var img_placeholdervue_type_script_lang_js_ = {
        name: "ImgPlaceholder"
      };
      var src_img_placeholdervue_type_script_lang_js_ = img_placeholdervue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_img_placeholdervue_type_script_lang_js_,
        img_placeholdervue_type_template_id_1b2cb5c0_render,
        img_placeholdervue_type_template_id_1b2cb5c0_staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/skeleton/src/img-placeholder.vue";
      var img_placeholder = component.exports;
      var _components;
      var itemvue_type_script_lang_js_ = {
        name: "ElSkeletonItem",
        props: {
          variant: {
            type: String,
            default: "text"
          }
        },
        components: (_components = {}, _components[img_placeholder.name] = img_placeholder, _components)
      };
      var src_itemvue_type_script_lang_js_ = itemvue_type_script_lang_js_;
      var item_component = Object(componentNormalizer["a"])(
        src_itemvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      item_component.options.__file = "packages/skeleton/src/item.vue";
      var item2 = item_component.exports;
      item2.install = function(Vue2) {
        Vue2.component(item2.name, item2);
      };
      __webpack_exports__["default"] = item2;
    }
  });
})(skeletonItem);
var ElSkeletonItem = /* @__PURE__ */ getDefaultExportFromCjs(skeletonItem.exports);
var _sfc_main$h = Vue.extend({
  name: "n8n-loading",
  components: {
    ElSkeleton,
    ElSkeletonItem
  },
  props: {
    animated: {
      type: Boolean,
      default: true
    },
    loading: {
      type: Boolean,
      default: true
    },
    rows: {
      type: Number,
      default: 1
    },
    shrinkLast: {
      type: Boolean,
      default: true
    },
    variant: {
      type: String,
      default: "p",
      validator: (value) => ["custom", "p", "text", "h1", "h3", "text", "caption", "button", "image", "circle", "rect"].includes(value)
    }
  }
});
const h1Last = "_h1Last_1sdbr_1";
const pLast = "_pLast_1sdbr_5";
const custom = "_custom_1sdbr_9";
var style0$h = {
  h1Last,
  pLast,
  custom
};
var Loading_vue_vue_type_style_index_1_lang = "";
var _sfc_render$i = function render30() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("el-skeleton", { class: ["n8n-loading", `n8n-loading-${_vm.variant}`], attrs: { "loading": _vm.loading, "animated": _vm.animated } }, [_c("template", { slot: "template" }, [_vm.variant === "h1" ? _c("div", _vm._l(_vm.rows, function(item2, index2) {
    return _c("div", { key: index2, class: {
      [_vm.$style.h1Last]: item2 === _vm.rows && _vm.rows > 1 && _vm.shrinkLast
    } }, [_c("el-skeleton-item", { attrs: { "variant": _vm.variant } })], 1);
  }), 0) : _vm.variant === "p" ? _c("div", _vm._l(_vm.rows, function(item2, index2) {
    return _c("div", { key: index2, class: {
      [_vm.$style.pLast]: item2 === _vm.rows && _vm.rows > 1 && _vm.shrinkLast
    } }, [_c("el-skeleton-item", { attrs: { "variant": _vm.variant } })], 1);
  }), 0) : _vm.variant === "custom" ? _c("div", { class: _vm.$style.custom }, [_c("el-skeleton-item", { attrs: { "variant": _vm.variant } })], 1) : _c("el-skeleton-item", { attrs: { "variant": _vm.variant } })], 1)], 2);
};
var _sfc_staticRenderFns$i = [];
const __cssModules$h = {
  "$style": style0$h
};
function _sfc_injectStyles$h(ctx2) {
  for (var key2 in __cssModules$h) {
    this[key2] = __cssModules$h[key2];
  }
}
var __component__$i = /* @__PURE__ */ normalizeComponent(
  _sfc_main$h,
  _sfc_render$i,
  _sfc_staticRenderFns$i,
  false,
  _sfc_injectStyles$h,
  null,
  null,
  null
);
var N8nLoading = __component__$i.exports;
var utils$1 = {};
const Aacute$2 = "\xC1";
const aacute$2 = "\xE1";
const Abreve$1 = "\u0102";
const abreve$1 = "\u0103";
const ac$1 = "\u223E";
const acd$1 = "\u223F";
const acE$1 = "\u223E\u0333";
const Acirc$2 = "\xC2";
const acirc$2 = "\xE2";
const acute$2 = "\xB4";
const Acy$1 = "\u0410";
const acy$1 = "\u0430";
const AElig$2 = "\xC6";
const aelig$2 = "\xE6";
const af$1 = "\u2061";
const Afr$1 = "\u{1D504}";
const afr$1 = "\u{1D51E}";
const Agrave$2 = "\xC0";
const agrave$2 = "\xE0";
const alefsym$1 = "\u2135";
const aleph$1 = "\u2135";
const Alpha$1 = "\u0391";
const alpha$1 = "\u03B1";
const Amacr$1 = "\u0100";
const amacr$1 = "\u0101";
const amalg$1 = "\u2A3F";
const amp$3 = "&";
const AMP$2 = "&";
const andand$1 = "\u2A55";
const And$1 = "\u2A53";
const and$1 = "\u2227";
const andd$1 = "\u2A5C";
const andslope$1 = "\u2A58";
const andv$1 = "\u2A5A";
const ang$1 = "\u2220";
const ange$1 = "\u29A4";
const angle$1 = "\u2220";
const angmsdaa$1 = "\u29A8";
const angmsdab$1 = "\u29A9";
const angmsdac$1 = "\u29AA";
const angmsdad$1 = "\u29AB";
const angmsdae$1 = "\u29AC";
const angmsdaf$1 = "\u29AD";
const angmsdag$1 = "\u29AE";
const angmsdah$1 = "\u29AF";
const angmsd$1 = "\u2221";
const angrt$1 = "\u221F";
const angrtvb$1 = "\u22BE";
const angrtvbd$1 = "\u299D";
const angsph$1 = "\u2222";
const angst$1 = "\xC5";
const angzarr$1 = "\u237C";
const Aogon$1 = "\u0104";
const aogon$1 = "\u0105";
const Aopf$1 = "\u{1D538}";
const aopf$1 = "\u{1D552}";
const apacir$1 = "\u2A6F";
const ap$1 = "\u2248";
const apE$1 = "\u2A70";
const ape$1 = "\u224A";
const apid$1 = "\u224B";
const apos$2 = "'";
const ApplyFunction$1 = "\u2061";
const approx$1 = "\u2248";
const approxeq$1 = "\u224A";
const Aring$2 = "\xC5";
const aring$2 = "\xE5";
const Ascr$1 = "\u{1D49C}";
const ascr$1 = "\u{1D4B6}";
const Assign$1 = "\u2254";
const ast$1 = "*";
const asymp$1 = "\u2248";
const asympeq$1 = "\u224D";
const Atilde$2 = "\xC3";
const atilde$2 = "\xE3";
const Auml$2 = "\xC4";
const auml$2 = "\xE4";
const awconint$1 = "\u2233";
const awint$1 = "\u2A11";
const backcong$1 = "\u224C";
const backepsilon$1 = "\u03F6";
const backprime$1 = "\u2035";
const backsim$1 = "\u223D";
const backsimeq$1 = "\u22CD";
const Backslash$1 = "\u2216";
const Barv$1 = "\u2AE7";
const barvee$1 = "\u22BD";
const barwed$1 = "\u2305";
const Barwed$1 = "\u2306";
const barwedge$1 = "\u2305";
const bbrk$1 = "\u23B5";
const bbrktbrk$1 = "\u23B6";
const bcong$1 = "\u224C";
const Bcy$1 = "\u0411";
const bcy$1 = "\u0431";
const bdquo$1 = "\u201E";
const becaus$1 = "\u2235";
const because$1 = "\u2235";
const Because$1 = "\u2235";
const bemptyv$1 = "\u29B0";
const bepsi$1 = "\u03F6";
const bernou$1 = "\u212C";
const Bernoullis$1 = "\u212C";
const Beta$1 = "\u0392";
const beta$1 = "\u03B2";
const beth$1 = "\u2136";
const between$1 = "\u226C";
const Bfr$1 = "\u{1D505}";
const bfr$1 = "\u{1D51F}";
const bigcap$1 = "\u22C2";
const bigcirc$1 = "\u25EF";
const bigcup$1 = "\u22C3";
const bigodot$1 = "\u2A00";
const bigoplus$1 = "\u2A01";
const bigotimes$1 = "\u2A02";
const bigsqcup$1 = "\u2A06";
const bigstar$1 = "\u2605";
const bigtriangledown$1 = "\u25BD";
const bigtriangleup$1 = "\u25B3";
const biguplus$1 = "\u2A04";
const bigvee$1 = "\u22C1";
const bigwedge$1 = "\u22C0";
const bkarow$1 = "\u290D";
const blacklozenge$1 = "\u29EB";
const blacksquare$1 = "\u25AA";
const blacktriangle$1 = "\u25B4";
const blacktriangledown$1 = "\u25BE";
const blacktriangleleft$1 = "\u25C2";
const blacktriangleright$1 = "\u25B8";
const blank$1 = "\u2423";
const blk12$1 = "\u2592";
const blk14$1 = "\u2591";
const blk34$1 = "\u2593";
const block$2 = "\u2588";
const bne$1 = "=\u20E5";
const bnequiv$1 = "\u2261\u20E5";
const bNot$1 = "\u2AED";
const bnot$1 = "\u2310";
const Bopf$1 = "\u{1D539}";
const bopf$1 = "\u{1D553}";
const bot$1 = "\u22A5";
const bottom$2 = "\u22A5";
const bowtie$1 = "\u22C8";
const boxbox$1 = "\u29C9";
const boxdl$1 = "\u2510";
const boxdL$1 = "\u2555";
const boxDl$1 = "\u2556";
const boxDL$1 = "\u2557";
const boxdr$1 = "\u250C";
const boxdR$1 = "\u2552";
const boxDr$1 = "\u2553";
const boxDR$1 = "\u2554";
const boxh$1 = "\u2500";
const boxH$1 = "\u2550";
const boxhd$1 = "\u252C";
const boxHd$1 = "\u2564";
const boxhD$1 = "\u2565";
const boxHD$1 = "\u2566";
const boxhu$1 = "\u2534";
const boxHu$1 = "\u2567";
const boxhU$1 = "\u2568";
const boxHU$1 = "\u2569";
const boxminus$1 = "\u229F";
const boxplus$1 = "\u229E";
const boxtimes$1 = "\u22A0";
const boxul$1 = "\u2518";
const boxuL$1 = "\u255B";
const boxUl$1 = "\u255C";
const boxUL$1 = "\u255D";
const boxur$1 = "\u2514";
const boxuR$1 = "\u2558";
const boxUr$1 = "\u2559";
const boxUR$1 = "\u255A";
const boxv$1 = "\u2502";
const boxV$1 = "\u2551";
const boxvh$1 = "\u253C";
const boxvH$1 = "\u256A";
const boxVh$1 = "\u256B";
const boxVH$1 = "\u256C";
const boxvl$1 = "\u2524";
const boxvL$1 = "\u2561";
const boxVl$1 = "\u2562";
const boxVL$1 = "\u2563";
const boxvr$1 = "\u251C";
const boxvR$1 = "\u255E";
const boxVr$1 = "\u255F";
const boxVR$1 = "\u2560";
const bprime$1 = "\u2035";
const breve$1 = "\u02D8";
const Breve$1 = "\u02D8";
const brvbar$2 = "\xA6";
const bscr$1 = "\u{1D4B7}";
const Bscr$1 = "\u212C";
const bsemi$1 = "\u204F";
const bsim$1 = "\u223D";
const bsime$1 = "\u22CD";
const bsolb$1 = "\u29C5";
const bsol$1 = "\\";
const bsolhsub$1 = "\u27C8";
const bull$1 = "\u2022";
const bullet$1 = "\u2022";
const bump$1 = "\u224E";
const bumpE$1 = "\u2AAE";
const bumpe$1 = "\u224F";
const Bumpeq$1 = "\u224E";
const bumpeq$1 = "\u224F";
const Cacute$1 = "\u0106";
const cacute$1 = "\u0107";
const capand$1 = "\u2A44";
const capbrcup$1 = "\u2A49";
const capcap$1 = "\u2A4B";
const cap$1 = "\u2229";
const Cap$1 = "\u22D2";
const capcup$1 = "\u2A47";
const capdot$1 = "\u2A40";
const CapitalDifferentialD$1 = "\u2145";
const caps$1 = "\u2229\uFE00";
const caret$1 = "\u2041";
const caron$1 = "\u02C7";
const Cayleys$1 = "\u212D";
const ccaps$1 = "\u2A4D";
const Ccaron$1 = "\u010C";
const ccaron$1 = "\u010D";
const Ccedil$2 = "\xC7";
const ccedil$2 = "\xE7";
const Ccirc$1 = "\u0108";
const ccirc$1 = "\u0109";
const Cconint$1 = "\u2230";
const ccups$1 = "\u2A4C";
const ccupssm$1 = "\u2A50";
const Cdot$1 = "\u010A";
const cdot$1 = "\u010B";
const cedil$2 = "\xB8";
const Cedilla$1 = "\xB8";
const cemptyv$1 = "\u29B2";
const cent$2 = "\xA2";
const centerdot$1 = "\xB7";
const CenterDot$1 = "\xB7";
const cfr$1 = "\u{1D520}";
const Cfr$1 = "\u212D";
const CHcy$1 = "\u0427";
const chcy$1 = "\u0447";
const check$1 = "\u2713";
const checkmark$1 = "\u2713";
const Chi$1 = "\u03A7";
const chi$1 = "\u03C7";
const circ$1 = "\u02C6";
const circeq$1 = "\u2257";
const circlearrowleft$1 = "\u21BA";
const circlearrowright$1 = "\u21BB";
const circledast$1 = "\u229B";
const circledcirc$1 = "\u229A";
const circleddash$1 = "\u229D";
const CircleDot$1 = "\u2299";
const circledR$1 = "\xAE";
const circledS$1 = "\u24C8";
const CircleMinus$1 = "\u2296";
const CirclePlus$1 = "\u2295";
const CircleTimes$1 = "\u2297";
const cir$1 = "\u25CB";
const cirE$1 = "\u29C3";
const cire$1 = "\u2257";
const cirfnint$1 = "\u2A10";
const cirmid$1 = "\u2AEF";
const cirscir$1 = "\u29C2";
const ClockwiseContourIntegral$1 = "\u2232";
const CloseCurlyDoubleQuote$1 = "\u201D";
const CloseCurlyQuote$1 = "\u2019";
const clubs$2 = "\u2663";
const clubsuit$1 = "\u2663";
const colon$1 = ":";
const Colon$1 = "\u2237";
const Colone$1 = "\u2A74";
const colone$1 = "\u2254";
const coloneq$1 = "\u2254";
const comma$1 = ",";
const commat$1 = "@";
const comp$1 = "\u2201";
const compfn$1 = "\u2218";
const complement$1 = "\u2201";
const complexes$1 = "\u2102";
const cong$1 = "\u2245";
const congdot$1 = "\u2A6D";
const Congruent$1 = "\u2261";
const conint$1 = "\u222E";
const Conint$1 = "\u222F";
const ContourIntegral$1 = "\u222E";
const copf$1 = "\u{1D554}";
const Copf$1 = "\u2102";
const coprod$1 = "\u2210";
const Coproduct$1 = "\u2210";
const copy$2 = "\xA9";
const COPY$2 = "\xA9";
const copysr$1 = "\u2117";
const CounterClockwiseContourIntegral$1 = "\u2233";
const crarr$1 = "\u21B5";
const cross$1 = "\u2717";
const Cross$1 = "\u2A2F";
const Cscr$1 = "\u{1D49E}";
const cscr$1 = "\u{1D4B8}";
const csub$1 = "\u2ACF";
const csube$1 = "\u2AD1";
const csup$1 = "\u2AD0";
const csupe$1 = "\u2AD2";
const ctdot$1 = "\u22EF";
const cudarrl$1 = "\u2938";
const cudarrr$1 = "\u2935";
const cuepr$1 = "\u22DE";
const cuesc$1 = "\u22DF";
const cularr$1 = "\u21B6";
const cularrp$1 = "\u293D";
const cupbrcap$1 = "\u2A48";
const cupcap$1 = "\u2A46";
const CupCap$1 = "\u224D";
const cup$1 = "\u222A";
const Cup$1 = "\u22D3";
const cupcup$1 = "\u2A4A";
const cupdot$1 = "\u228D";
const cupor$1 = "\u2A45";
const cups$1 = "\u222A\uFE00";
const curarr$1 = "\u21B7";
const curarrm$1 = "\u293C";
const curlyeqprec$1 = "\u22DE";
const curlyeqsucc$1 = "\u22DF";
const curlyvee$1 = "\u22CE";
const curlywedge$1 = "\u22CF";
const curren$2 = "\xA4";
const curvearrowleft$1 = "\u21B6";
const curvearrowright$1 = "\u21B7";
const cuvee$1 = "\u22CE";
const cuwed$1 = "\u22CF";
const cwconint$1 = "\u2232";
const cwint$1 = "\u2231";
const cylcty$1 = "\u232D";
const dagger$2 = "\u2020";
const Dagger$1 = "\u2021";
const daleth$1 = "\u2138";
const darr$1 = "\u2193";
const Darr$1 = "\u21A1";
const dArr$1 = "\u21D3";
const dash$2 = "\u2010";
const Dashv$1 = "\u2AE4";
const dashv$1 = "\u22A3";
const dbkarow$1 = "\u290F";
const dblac$1 = "\u02DD";
const Dcaron$1 = "\u010E";
const dcaron$1 = "\u010F";
const Dcy$1 = "\u0414";
const dcy$1 = "\u0434";
const ddagger$1 = "\u2021";
const ddarr$1 = "\u21CA";
const DD$1 = "\u2145";
const dd$1 = "\u2146";
const DDotrahd$1 = "\u2911";
const ddotseq$1 = "\u2A77";
const deg$2 = "\xB0";
const Del$1 = "\u2207";
const Delta$1 = "\u0394";
const delta$1 = "\u03B4";
const demptyv$1 = "\u29B1";
const dfisht$1 = "\u297F";
const Dfr$1 = "\u{1D507}";
const dfr$1 = "\u{1D521}";
const dHar$1 = "\u2965";
const dharl$1 = "\u21C3";
const dharr$1 = "\u21C2";
const DiacriticalAcute$1 = "\xB4";
const DiacriticalDot$1 = "\u02D9";
const DiacriticalDoubleAcute$1 = "\u02DD";
const DiacriticalGrave$1 = "`";
const DiacriticalTilde$1 = "\u02DC";
const diam$1 = "\u22C4";
const diamond$1 = "\u22C4";
const Diamond$1 = "\u22C4";
const diamondsuit$1 = "\u2666";
const diams$1 = "\u2666";
const die$1 = "\xA8";
const DifferentialD$1 = "\u2146";
const digamma$1 = "\u03DD";
const disin$1 = "\u22F2";
const div$1 = "\xF7";
const divide$2 = "\xF7";
const divideontimes$1 = "\u22C7";
const divonx$1 = "\u22C7";
const DJcy$1 = "\u0402";
const djcy$1 = "\u0452";
const dlcorn$1 = "\u231E";
const dlcrop$1 = "\u230D";
const dollar$2 = "$";
const Dopf$1 = "\u{1D53B}";
const dopf$1 = "\u{1D555}";
const Dot$1 = "\xA8";
const dot$1 = "\u02D9";
const DotDot$1 = "\u20DC";
const doteq$1 = "\u2250";
const doteqdot$1 = "\u2251";
const DotEqual$1 = "\u2250";
const dotminus$1 = "\u2238";
const dotplus$1 = "\u2214";
const dotsquare$1 = "\u22A1";
const doublebarwedge$1 = "\u2306";
const DoubleContourIntegral$1 = "\u222F";
const DoubleDot$1 = "\xA8";
const DoubleDownArrow$1 = "\u21D3";
const DoubleLeftArrow$1 = "\u21D0";
const DoubleLeftRightArrow$1 = "\u21D4";
const DoubleLeftTee$1 = "\u2AE4";
const DoubleLongLeftArrow$1 = "\u27F8";
const DoubleLongLeftRightArrow$1 = "\u27FA";
const DoubleLongRightArrow$1 = "\u27F9";
const DoubleRightArrow$1 = "\u21D2";
const DoubleRightTee$1 = "\u22A8";
const DoubleUpArrow$1 = "\u21D1";
const DoubleUpDownArrow$1 = "\u21D5";
const DoubleVerticalBar$1 = "\u2225";
const DownArrowBar$1 = "\u2913";
const downarrow$1 = "\u2193";
const DownArrow$1 = "\u2193";
const Downarrow$1 = "\u21D3";
const DownArrowUpArrow$1 = "\u21F5";
const DownBreve$1 = "\u0311";
const downdownarrows$1 = "\u21CA";
const downharpoonleft$1 = "\u21C3";
const downharpoonright$1 = "\u21C2";
const DownLeftRightVector$1 = "\u2950";
const DownLeftTeeVector$1 = "\u295E";
const DownLeftVectorBar$1 = "\u2956";
const DownLeftVector$1 = "\u21BD";
const DownRightTeeVector$1 = "\u295F";
const DownRightVectorBar$1 = "\u2957";
const DownRightVector$1 = "\u21C1";
const DownTeeArrow$1 = "\u21A7";
const DownTee$1 = "\u22A4";
const drbkarow$1 = "\u2910";
const drcorn$1 = "\u231F";
const drcrop$1 = "\u230C";
const Dscr$1 = "\u{1D49F}";
const dscr$1 = "\u{1D4B9}";
const DScy$1 = "\u0405";
const dscy$1 = "\u0455";
const dsol$1 = "\u29F6";
const Dstrok$1 = "\u0110";
const dstrok$1 = "\u0111";
const dtdot$1 = "\u22F1";
const dtri$1 = "\u25BF";
const dtrif$1 = "\u25BE";
const duarr$1 = "\u21F5";
const duhar$1 = "\u296F";
const dwangle$1 = "\u29A6";
const DZcy$1 = "\u040F";
const dzcy$1 = "\u045F";
const dzigrarr$1 = "\u27FF";
const Eacute$2 = "\xC9";
const eacute$2 = "\xE9";
const easter$1 = "\u2A6E";
const Ecaron$1 = "\u011A";
const ecaron$1 = "\u011B";
const Ecirc$2 = "\xCA";
const ecirc$2 = "\xEA";
const ecir$1 = "\u2256";
const ecolon$1 = "\u2255";
const Ecy$1 = "\u042D";
const ecy$1 = "\u044D";
const eDDot$1 = "\u2A77";
const Edot$1 = "\u0116";
const edot$1 = "\u0117";
const eDot$1 = "\u2251";
const ee$1 = "\u2147";
const efDot$1 = "\u2252";
const Efr$1 = "\u{1D508}";
const efr$1 = "\u{1D522}";
const eg$1 = "\u2A9A";
const Egrave$2 = "\xC8";
const egrave$2 = "\xE8";
const egs$1 = "\u2A96";
const egsdot$1 = "\u2A98";
const el$1 = "\u2A99";
const Element$3 = "\u2208";
const elinters$1 = "\u23E7";
const ell$1 = "\u2113";
const els$1 = "\u2A95";
const elsdot$1 = "\u2A97";
const Emacr$1 = "\u0112";
const emacr$1 = "\u0113";
const empty$1 = "\u2205";
const emptyset$1 = "\u2205";
const EmptySmallSquare$1 = "\u25FB";
const emptyv$1 = "\u2205";
const EmptyVerySmallSquare$1 = "\u25AB";
const emsp13$1 = "\u2004";
const emsp14$1 = "\u2005";
const emsp$1 = "\u2003";
const ENG$1 = "\u014A";
const eng$1 = "\u014B";
const ensp$1 = "\u2002";
const Eogon$1 = "\u0118";
const eogon$1 = "\u0119";
const Eopf$1 = "\u{1D53C}";
const eopf$1 = "\u{1D556}";
const epar$1 = "\u22D5";
const eparsl$1 = "\u29E3";
const eplus$1 = "\u2A71";
const epsi$1 = "\u03B5";
const Epsilon$1 = "\u0395";
const epsilon$1 = "\u03B5";
const epsiv$1 = "\u03F5";
const eqcirc$1 = "\u2256";
const eqcolon$1 = "\u2255";
const eqsim$1 = "\u2242";
const eqslantgtr$1 = "\u2A96";
const eqslantless$1 = "\u2A95";
const Equal$1 = "\u2A75";
const equals$1 = "=";
const EqualTilde$1 = "\u2242";
const equest$1 = "\u225F";
const Equilibrium$1 = "\u21CC";
const equiv$1 = "\u2261";
const equivDD$1 = "\u2A78";
const eqvparsl$1 = "\u29E5";
const erarr$1 = "\u2971";
const erDot$1 = "\u2253";
const escr$1 = "\u212F";
const Escr$1 = "\u2130";
const esdot$1 = "\u2250";
const Esim$1 = "\u2A73";
const esim$1 = "\u2242";
const Eta$1 = "\u0397";
const eta$1 = "\u03B7";
const ETH$2 = "\xD0";
const eth$2 = "\xF0";
const Euml$2 = "\xCB";
const euml$2 = "\xEB";
const euro$2 = "\u20AC";
const excl$1 = "!";
const exist$1 = "\u2203";
const Exists$1 = "\u2203";
const expectation$1 = "\u2130";
const exponentiale$1 = "\u2147";
const ExponentialE$1 = "\u2147";
const fallingdotseq$1 = "\u2252";
const Fcy$1 = "\u0424";
const fcy$1 = "\u0444";
const female$1 = "\u2640";
const ffilig$1 = "\uFB03";
const fflig$1 = "\uFB00";
const ffllig$1 = "\uFB04";
const Ffr$1 = "\u{1D509}";
const ffr$1 = "\u{1D523}";
const filig$1 = "\uFB01";
const FilledSmallSquare$1 = "\u25FC";
const FilledVerySmallSquare$1 = "\u25AA";
const fjlig$1 = "fj";
const flat$1 = "\u266D";
const fllig$1 = "\uFB02";
const fltns$1 = "\u25B1";
const fnof$1 = "\u0192";
const Fopf$1 = "\u{1D53D}";
const fopf$1 = "\u{1D557}";
const forall$1 = "\u2200";
const ForAll$1 = "\u2200";
const fork$1 = "\u22D4";
const forkv$1 = "\u2AD9";
const Fouriertrf$1 = "\u2131";
const fpartint$1 = "\u2A0D";
const frac12$2 = "\xBD";
const frac13$1 = "\u2153";
const frac14$2 = "\xBC";
const frac15$1 = "\u2155";
const frac16$1 = "\u2159";
const frac18$1 = "\u215B";
const frac23$1 = "\u2154";
const frac25$1 = "\u2156";
const frac34$2 = "\xBE";
const frac35$1 = "\u2157";
const frac38$1 = "\u215C";
const frac45$1 = "\u2158";
const frac56$1 = "\u215A";
const frac58$1 = "\u215D";
const frac78$1 = "\u215E";
const frasl$1 = "\u2044";
const frown$1 = "\u2322";
const fscr$1 = "\u{1D4BB}";
const Fscr$1 = "\u2131";
const gacute$1 = "\u01F5";
const Gamma$1 = "\u0393";
const gamma$1 = "\u03B3";
const Gammad$1 = "\u03DC";
const gammad$1 = "\u03DD";
const gap$1 = "\u2A86";
const Gbreve$1 = "\u011E";
const gbreve$1 = "\u011F";
const Gcedil$1 = "\u0122";
const Gcirc$1 = "\u011C";
const gcirc$1 = "\u011D";
const Gcy$1 = "\u0413";
const gcy$1 = "\u0433";
const Gdot$1 = "\u0120";
const gdot$1 = "\u0121";
const ge$1 = "\u2265";
const gE$1 = "\u2267";
const gEl$1 = "\u2A8C";
const gel$1 = "\u22DB";
const geq$1 = "\u2265";
const geqq$1 = "\u2267";
const geqslant$1 = "\u2A7E";
const gescc$1 = "\u2AA9";
const ges$1 = "\u2A7E";
const gesdot$1 = "\u2A80";
const gesdoto$1 = "\u2A82";
const gesdotol$1 = "\u2A84";
const gesl$1 = "\u22DB\uFE00";
const gesles$1 = "\u2A94";
const Gfr$1 = "\u{1D50A}";
const gfr$1 = "\u{1D524}";
const gg$1 = "\u226B";
const Gg$1 = "\u22D9";
const ggg$1 = "\u22D9";
const gimel$1 = "\u2137";
const GJcy$1 = "\u0403";
const gjcy$1 = "\u0453";
const gla$1 = "\u2AA5";
const gl$1 = "\u2277";
const glE$1 = "\u2A92";
const glj$1 = "\u2AA4";
const gnap$1 = "\u2A8A";
const gnapprox$1 = "\u2A8A";
const gne$1 = "\u2A88";
const gnE$1 = "\u2269";
const gneq$1 = "\u2A88";
const gneqq$1 = "\u2269";
const gnsim$1 = "\u22E7";
const Gopf$1 = "\u{1D53E}";
const gopf$1 = "\u{1D558}";
const grave$1 = "`";
const GreaterEqual$1 = "\u2265";
const GreaterEqualLess$1 = "\u22DB";
const GreaterFullEqual$1 = "\u2267";
const GreaterGreater$1 = "\u2AA2";
const GreaterLess$1 = "\u2277";
const GreaterSlantEqual$1 = "\u2A7E";
const GreaterTilde$1 = "\u2273";
const Gscr$1 = "\u{1D4A2}";
const gscr$1 = "\u210A";
const gsim$1 = "\u2273";
const gsime$1 = "\u2A8E";
const gsiml$1 = "\u2A90";
const gtcc$1 = "\u2AA7";
const gtcir$1 = "\u2A7A";
const gt$3 = ">";
const GT$2 = ">";
const Gt$1 = "\u226B";
const gtdot$1 = "\u22D7";
const gtlPar$1 = "\u2995";
const gtquest$1 = "\u2A7C";
const gtrapprox$1 = "\u2A86";
const gtrarr$1 = "\u2978";
const gtrdot$1 = "\u22D7";
const gtreqless$1 = "\u22DB";
const gtreqqless$1 = "\u2A8C";
const gtrless$1 = "\u2277";
const gtrsim$1 = "\u2273";
const gvertneqq$1 = "\u2269\uFE00";
const gvnE$1 = "\u2269\uFE00";
const Hacek$1 = "\u02C7";
const hairsp$1 = "\u200A";
const half$1 = "\xBD";
const hamilt$1 = "\u210B";
const HARDcy$1 = "\u042A";
const hardcy$1 = "\u044A";
const harrcir$1 = "\u2948";
const harr$1 = "\u2194";
const hArr$1 = "\u21D4";
const harrw$1 = "\u21AD";
const Hat$1 = "^";
const hbar$1 = "\u210F";
const Hcirc$1 = "\u0124";
const hcirc$1 = "\u0125";
const hearts$2 = "\u2665";
const heartsuit$1 = "\u2665";
const hellip$1 = "\u2026";
const hercon$1 = "\u22B9";
const hfr$1 = "\u{1D525}";
const Hfr$1 = "\u210C";
const HilbertSpace$1 = "\u210B";
const hksearow$1 = "\u2925";
const hkswarow$1 = "\u2926";
const hoarr$1 = "\u21FF";
const homtht$1 = "\u223B";
const hookleftarrow$1 = "\u21A9";
const hookrightarrow$1 = "\u21AA";
const hopf$1 = "\u{1D559}";
const Hopf$1 = "\u210D";
const horbar$1 = "\u2015";
const HorizontalLine$1 = "\u2500";
const hscr$1 = "\u{1D4BD}";
const Hscr$1 = "\u210B";
const hslash$1 = "\u210F";
const Hstrok$1 = "\u0126";
const hstrok$1 = "\u0127";
const HumpDownHump$1 = "\u224E";
const HumpEqual$1 = "\u224F";
const hybull$1 = "\u2043";
const hyphen$1 = "\u2010";
const Iacute$2 = "\xCD";
const iacute$2 = "\xED";
const ic$1 = "\u2063";
const Icirc$2 = "\xCE";
const icirc$2 = "\xEE";
const Icy$1 = "\u0418";
const icy$1 = "\u0438";
const Idot$1 = "\u0130";
const IEcy$1 = "\u0415";
const iecy$1 = "\u0435";
const iexcl$2 = "\xA1";
const iff$1 = "\u21D4";
const ifr$1 = "\u{1D526}";
const Ifr$1 = "\u2111";
const Igrave$2 = "\xCC";
const igrave$2 = "\xEC";
const ii$1 = "\u2148";
const iiiint$1 = "\u2A0C";
const iiint$1 = "\u222D";
const iinfin$1 = "\u29DC";
const iiota$1 = "\u2129";
const IJlig$1 = "\u0132";
const ijlig$1 = "\u0133";
const Imacr$1 = "\u012A";
const imacr$1 = "\u012B";
const image$2 = "\u2111";
const ImaginaryI$1 = "\u2148";
const imagline$1 = "\u2110";
const imagpart$1 = "\u2111";
const imath$1 = "\u0131";
const Im$1 = "\u2111";
const imof$1 = "\u22B7";
const imped$1 = "\u01B5";
const Implies$1 = "\u21D2";
const incare$1 = "\u2105";
const infin$1 = "\u221E";
const infintie$1 = "\u29DD";
const inodot$1 = "\u0131";
const intcal$1 = "\u22BA";
const int$1 = "\u222B";
const Int$1 = "\u222C";
const integers$1 = "\u2124";
const Integral$1 = "\u222B";
const intercal$1 = "\u22BA";
const Intersection$1 = "\u22C2";
const intlarhk$1 = "\u2A17";
const intprod$1 = "\u2A3C";
const InvisibleComma$1 = "\u2063";
const InvisibleTimes$1 = "\u2062";
const IOcy$1 = "\u0401";
const iocy$1 = "\u0451";
const Iogon$1 = "\u012E";
const iogon$1 = "\u012F";
const Iopf$1 = "\u{1D540}";
const iopf$1 = "\u{1D55A}";
const Iota$1 = "\u0399";
const iota$1 = "\u03B9";
const iprod$1 = "\u2A3C";
const iquest$2 = "\xBF";
const iscr$1 = "\u{1D4BE}";
const Iscr$1 = "\u2110";
const isin$1 = "\u2208";
const isindot$1 = "\u22F5";
const isinE$1 = "\u22F9";
const isins$1 = "\u22F4";
const isinsv$1 = "\u22F3";
const isinv$1 = "\u2208";
const it$2 = "\u2062";
const Itilde$1 = "\u0128";
const itilde$1 = "\u0129";
const Iukcy$1 = "\u0406";
const iukcy$1 = "\u0456";
const Iuml$2 = "\xCF";
const iuml$2 = "\xEF";
const Jcirc$1 = "\u0134";
const jcirc$1 = "\u0135";
const Jcy$1 = "\u0419";
const jcy$1 = "\u0439";
const Jfr$1 = "\u{1D50D}";
const jfr$1 = "\u{1D527}";
const jmath$1 = "\u0237";
const Jopf$1 = "\u{1D541}";
const jopf$1 = "\u{1D55B}";
const Jscr$1 = "\u{1D4A5}";
const jscr$1 = "\u{1D4BF}";
const Jsercy$1 = "\u0408";
const jsercy$1 = "\u0458";
const Jukcy$1 = "\u0404";
const jukcy$1 = "\u0454";
const Kappa$1 = "\u039A";
const kappa$1 = "\u03BA";
const kappav$1 = "\u03F0";
const Kcedil$1 = "\u0136";
const kcedil$1 = "\u0137";
const Kcy$1 = "\u041A";
const kcy$1 = "\u043A";
const Kfr$1 = "\u{1D50E}";
const kfr$1 = "\u{1D528}";
const kgreen$1 = "\u0138";
const KHcy$1 = "\u0425";
const khcy$1 = "\u0445";
const KJcy$1 = "\u040C";
const kjcy$1 = "\u045C";
const Kopf$1 = "\u{1D542}";
const kopf$1 = "\u{1D55C}";
const Kscr$1 = "\u{1D4A6}";
const kscr$1 = "\u{1D4C0}";
const lAarr$1 = "\u21DA";
const Lacute$1 = "\u0139";
const lacute$1 = "\u013A";
const laemptyv$1 = "\u29B4";
const lagran$1 = "\u2112";
const Lambda$1 = "\u039B";
const lambda$1 = "\u03BB";
const lang$1 = "\u27E8";
const Lang$1 = "\u27EA";
const langd$1 = "\u2991";
const langle$1 = "\u27E8";
const lap$1 = "\u2A85";
const Laplacetrf$1 = "\u2112";
const laquo$2 = "\xAB";
const larrb$1 = "\u21E4";
const larrbfs$1 = "\u291F";
const larr$1 = "\u2190";
const Larr$1 = "\u219E";
const lArr$1 = "\u21D0";
const larrfs$1 = "\u291D";
const larrhk$1 = "\u21A9";
const larrlp$1 = "\u21AB";
const larrpl$1 = "\u2939";
const larrsim$1 = "\u2973";
const larrtl$1 = "\u21A2";
const latail$1 = "\u2919";
const lAtail$1 = "\u291B";
const lat$1 = "\u2AAB";
const late$1 = "\u2AAD";
const lates$1 = "\u2AAD\uFE00";
const lbarr$1 = "\u290C";
const lBarr$1 = "\u290E";
const lbbrk$1 = "\u2772";
const lbrace$1 = "{";
const lbrack$1 = "[";
const lbrke$1 = "\u298B";
const lbrksld$1 = "\u298F";
const lbrkslu$1 = "\u298D";
const Lcaron$1 = "\u013D";
const lcaron$1 = "\u013E";
const Lcedil$1 = "\u013B";
const lcedil$1 = "\u013C";
const lceil$1 = "\u2308";
const lcub$1 = "{";
const Lcy$1 = "\u041B";
const lcy$1 = "\u043B";
const ldca$1 = "\u2936";
const ldquo$1 = "\u201C";
const ldquor$1 = "\u201E";
const ldrdhar$1 = "\u2967";
const ldrushar$1 = "\u294B";
const ldsh$1 = "\u21B2";
const le$1 = "\u2264";
const lE$1 = "\u2266";
const LeftAngleBracket$1 = "\u27E8";
const LeftArrowBar$1 = "\u21E4";
const leftarrow$1 = "\u2190";
const LeftArrow$1 = "\u2190";
const Leftarrow$1 = "\u21D0";
const LeftArrowRightArrow$1 = "\u21C6";
const leftarrowtail$1 = "\u21A2";
const LeftCeiling$1 = "\u2308";
const LeftDoubleBracket$1 = "\u27E6";
const LeftDownTeeVector$1 = "\u2961";
const LeftDownVectorBar$1 = "\u2959";
const LeftDownVector$1 = "\u21C3";
const LeftFloor$1 = "\u230A";
const leftharpoondown$1 = "\u21BD";
const leftharpoonup$1 = "\u21BC";
const leftleftarrows$1 = "\u21C7";
const leftrightarrow$1 = "\u2194";
const LeftRightArrow$1 = "\u2194";
const Leftrightarrow$1 = "\u21D4";
const leftrightarrows$1 = "\u21C6";
const leftrightharpoons$1 = "\u21CB";
const leftrightsquigarrow$1 = "\u21AD";
const LeftRightVector$1 = "\u294E";
const LeftTeeArrow$1 = "\u21A4";
const LeftTee$1 = "\u22A3";
const LeftTeeVector$1 = "\u295A";
const leftthreetimes$1 = "\u22CB";
const LeftTriangleBar$1 = "\u29CF";
const LeftTriangle$1 = "\u22B2";
const LeftTriangleEqual$1 = "\u22B4";
const LeftUpDownVector$1 = "\u2951";
const LeftUpTeeVector$1 = "\u2960";
const LeftUpVectorBar$1 = "\u2958";
const LeftUpVector$1 = "\u21BF";
const LeftVectorBar$1 = "\u2952";
const LeftVector$1 = "\u21BC";
const lEg$1 = "\u2A8B";
const leg$2 = "\u22DA";
const leq$1 = "\u2264";
const leqq$1 = "\u2266";
const leqslant$1 = "\u2A7D";
const lescc$1 = "\u2AA8";
const les$1 = "\u2A7D";
const lesdot$1 = "\u2A7F";
const lesdoto$1 = "\u2A81";
const lesdotor$1 = "\u2A83";
const lesg$1 = "\u22DA\uFE00";
const lesges$1 = "\u2A93";
const lessapprox$1 = "\u2A85";
const lessdot$1 = "\u22D6";
const lesseqgtr$1 = "\u22DA";
const lesseqqgtr$1 = "\u2A8B";
const LessEqualGreater$1 = "\u22DA";
const LessFullEqual$1 = "\u2266";
const LessGreater$1 = "\u2276";
const lessgtr$1 = "\u2276";
const LessLess$1 = "\u2AA1";
const lesssim$1 = "\u2272";
const LessSlantEqual$1 = "\u2A7D";
const LessTilde$1 = "\u2272";
const lfisht$1 = "\u297C";
const lfloor$1 = "\u230A";
const Lfr$1 = "\u{1D50F}";
const lfr$1 = "\u{1D529}";
const lg$1 = "\u2276";
const lgE$1 = "\u2A91";
const lHar$1 = "\u2962";
const lhard$1 = "\u21BD";
const lharu$1 = "\u21BC";
const lharul$1 = "\u296A";
const lhblk$1 = "\u2584";
const LJcy$1 = "\u0409";
const ljcy$1 = "\u0459";
const llarr$1 = "\u21C7";
const ll$1 = "\u226A";
const Ll$1 = "\u22D8";
const llcorner$1 = "\u231E";
const Lleftarrow$1 = "\u21DA";
const llhard$1 = "\u296B";
const lltri$1 = "\u25FA";
const Lmidot$1 = "\u013F";
const lmidot$1 = "\u0140";
const lmoustache$1 = "\u23B0";
const lmoust$1 = "\u23B0";
const lnap$1 = "\u2A89";
const lnapprox$1 = "\u2A89";
const lne$1 = "\u2A87";
const lnE$1 = "\u2268";
const lneq$1 = "\u2A87";
const lneqq$1 = "\u2268";
const lnsim$1 = "\u22E6";
const loang$1 = "\u27EC";
const loarr$1 = "\u21FD";
const lobrk$1 = "\u27E6";
const longleftarrow$1 = "\u27F5";
const LongLeftArrow$1 = "\u27F5";
const Longleftarrow$1 = "\u27F8";
const longleftrightarrow$1 = "\u27F7";
const LongLeftRightArrow$1 = "\u27F7";
const Longleftrightarrow$1 = "\u27FA";
const longmapsto$1 = "\u27FC";
const longrightarrow$1 = "\u27F6";
const LongRightArrow$1 = "\u27F6";
const Longrightarrow$1 = "\u27F9";
const looparrowleft$1 = "\u21AB";
const looparrowright$1 = "\u21AC";
const lopar$1 = "\u2985";
const Lopf$1 = "\u{1D543}";
const lopf$1 = "\u{1D55D}";
const loplus$1 = "\u2A2D";
const lotimes$1 = "\u2A34";
const lowast$1 = "\u2217";
const lowbar$1 = "_";
const LowerLeftArrow$1 = "\u2199";
const LowerRightArrow$1 = "\u2198";
const loz$1 = "\u25CA";
const lozenge$1 = "\u25CA";
const lozf$1 = "\u29EB";
const lpar$1 = "(";
const lparlt$1 = "\u2993";
const lrarr$1 = "\u21C6";
const lrcorner$1 = "\u231F";
const lrhar$1 = "\u21CB";
const lrhard$1 = "\u296D";
const lrm$1 = "\u200E";
const lrtri$1 = "\u22BF";
const lsaquo$1 = "\u2039";
const lscr$1 = "\u{1D4C1}";
const Lscr$1 = "\u2112";
const lsh$1 = "\u21B0";
const Lsh$1 = "\u21B0";
const lsim$1 = "\u2272";
const lsime$1 = "\u2A8D";
const lsimg$1 = "\u2A8F";
const lsqb$1 = "[";
const lsquo$1 = "\u2018";
const lsquor$1 = "\u201A";
const Lstrok$1 = "\u0141";
const lstrok$1 = "\u0142";
const ltcc$1 = "\u2AA6";
const ltcir$1 = "\u2A79";
const lt$3 = "<";
const LT$2 = "<";
const Lt$1 = "\u226A";
const ltdot$1 = "\u22D6";
const lthree$1 = "\u22CB";
const ltimes$1 = "\u22C9";
const ltlarr$1 = "\u2976";
const ltquest$1 = "\u2A7B";
const ltri$1 = "\u25C3";
const ltrie$1 = "\u22B4";
const ltrif$1 = "\u25C2";
const ltrPar$1 = "\u2996";
const lurdshar$1 = "\u294A";
const luruhar$1 = "\u2966";
const lvertneqq$1 = "\u2268\uFE00";
const lvnE$1 = "\u2268\uFE00";
const macr$2 = "\xAF";
const male$1 = "\u2642";
const malt$1 = "\u2720";
const maltese$1 = "\u2720";
const map$2 = "\u21A6";
const mapsto$1 = "\u21A6";
const mapstodown$1 = "\u21A7";
const mapstoleft$1 = "\u21A4";
const mapstoup$1 = "\u21A5";
const marker$1 = "\u25AE";
const mcomma$1 = "\u2A29";
const Mcy$1 = "\u041C";
const mcy$1 = "\u043C";
const mdash$1 = "\u2014";
const mDDot$1 = "\u223A";
const measuredangle$1 = "\u2221";
const MediumSpace$1 = "\u205F";
const Mellintrf$1 = "\u2133";
const Mfr$1 = "\u{1D510}";
const mfr$1 = "\u{1D52A}";
const mho$1 = "\u2127";
const micro$2 = "\xB5";
const midast$1 = "*";
const midcir$1 = "\u2AF0";
const mid$1 = "\u2223";
const middot$2 = "\xB7";
const minusb$1 = "\u229F";
const minus$1 = "\u2212";
const minusd$1 = "\u2238";
const minusdu$1 = "\u2A2A";
const MinusPlus$1 = "\u2213";
const mlcp$1 = "\u2ADB";
const mldr$1 = "\u2026";
const mnplus$1 = "\u2213";
const models$1 = "\u22A7";
const Mopf$1 = "\u{1D544}";
const mopf$1 = "\u{1D55E}";
const mp$1 = "\u2213";
const mscr$1 = "\u{1D4C2}";
const Mscr$1 = "\u2133";
const mstpos$1 = "\u223E";
const Mu$1 = "\u039C";
const mu$1 = "\u03BC";
const multimap$1 = "\u22B8";
const mumap$1 = "\u22B8";
const nabla$1 = "\u2207";
const Nacute$1 = "\u0143";
const nacute$1 = "\u0144";
const nang$1 = "\u2220\u20D2";
const nap$1 = "\u2249";
const napE$1 = "\u2A70\u0338";
const napid$1 = "\u224B\u0338";
const napos$1 = "\u0149";
const napprox$1 = "\u2249";
const natural$1 = "\u266E";
const naturals$1 = "\u2115";
const natur$1 = "\u266E";
const nbsp$2 = "\xA0";
const nbump$1 = "\u224E\u0338";
const nbumpe$1 = "\u224F\u0338";
const ncap$1 = "\u2A43";
const Ncaron$1 = "\u0147";
const ncaron$1 = "\u0148";
const Ncedil$1 = "\u0145";
const ncedil$1 = "\u0146";
const ncong$1 = "\u2247";
const ncongdot$1 = "\u2A6D\u0338";
const ncup$1 = "\u2A42";
const Ncy$1 = "\u041D";
const ncy$1 = "\u043D";
const ndash$1 = "\u2013";
const nearhk$1 = "\u2924";
const nearr$1 = "\u2197";
const neArr$1 = "\u21D7";
const nearrow$1 = "\u2197";
const ne$1 = "\u2260";
const nedot$1 = "\u2250\u0338";
const NegativeMediumSpace$1 = "\u200B";
const NegativeThickSpace$1 = "\u200B";
const NegativeThinSpace$1 = "\u200B";
const NegativeVeryThinSpace$1 = "\u200B";
const nequiv$1 = "\u2262";
const nesear$1 = "\u2928";
const nesim$1 = "\u2242\u0338";
const NestedGreaterGreater$1 = "\u226B";
const NestedLessLess$1 = "\u226A";
const NewLine$1 = "\n";
const nexist$1 = "\u2204";
const nexists$1 = "\u2204";
const Nfr$1 = "\u{1D511}";
const nfr$1 = "\u{1D52B}";
const ngE$1 = "\u2267\u0338";
const nge$1 = "\u2271";
const ngeq$1 = "\u2271";
const ngeqq$1 = "\u2267\u0338";
const ngeqslant$1 = "\u2A7E\u0338";
const nges$1 = "\u2A7E\u0338";
const nGg$1 = "\u22D9\u0338";
const ngsim$1 = "\u2275";
const nGt$1 = "\u226B\u20D2";
const ngt$1 = "\u226F";
const ngtr$1 = "\u226F";
const nGtv$1 = "\u226B\u0338";
const nharr$1 = "\u21AE";
const nhArr$1 = "\u21CE";
const nhpar$1 = "\u2AF2";
const ni$1 = "\u220B";
const nis$1 = "\u22FC";
const nisd$1 = "\u22FA";
const niv$1 = "\u220B";
const NJcy$1 = "\u040A";
const njcy$1 = "\u045A";
const nlarr$1 = "\u219A";
const nlArr$1 = "\u21CD";
const nldr$1 = "\u2025";
const nlE$1 = "\u2266\u0338";
const nle$1 = "\u2270";
const nleftarrow$1 = "\u219A";
const nLeftarrow$1 = "\u21CD";
const nleftrightarrow$1 = "\u21AE";
const nLeftrightarrow$1 = "\u21CE";
const nleq$1 = "\u2270";
const nleqq$1 = "\u2266\u0338";
const nleqslant$1 = "\u2A7D\u0338";
const nles$1 = "\u2A7D\u0338";
const nless$1 = "\u226E";
const nLl$1 = "\u22D8\u0338";
const nlsim$1 = "\u2274";
const nLt$1 = "\u226A\u20D2";
const nlt$1 = "\u226E";
const nltri$1 = "\u22EA";
const nltrie$1 = "\u22EC";
const nLtv$1 = "\u226A\u0338";
const nmid$1 = "\u2224";
const NoBreak$1 = "\u2060";
const NonBreakingSpace$1 = "\xA0";
const nopf$1 = "\u{1D55F}";
const Nopf$1 = "\u2115";
const Not$1 = "\u2AEC";
const not$2 = "\xAC";
const NotCongruent$1 = "\u2262";
const NotCupCap$1 = "\u226D";
const NotDoubleVerticalBar$1 = "\u2226";
const NotElement$1 = "\u2209";
const NotEqual$1 = "\u2260";
const NotEqualTilde$1 = "\u2242\u0338";
const NotExists$1 = "\u2204";
const NotGreater$1 = "\u226F";
const NotGreaterEqual$1 = "\u2271";
const NotGreaterFullEqual$1 = "\u2267\u0338";
const NotGreaterGreater$1 = "\u226B\u0338";
const NotGreaterLess$1 = "\u2279";
const NotGreaterSlantEqual$1 = "\u2A7E\u0338";
const NotGreaterTilde$1 = "\u2275";
const NotHumpDownHump$1 = "\u224E\u0338";
const NotHumpEqual$1 = "\u224F\u0338";
const notin$1 = "\u2209";
const notindot$1 = "\u22F5\u0338";
const notinE$1 = "\u22F9\u0338";
const notinva$1 = "\u2209";
const notinvb$1 = "\u22F7";
const notinvc$1 = "\u22F6";
const NotLeftTriangleBar$1 = "\u29CF\u0338";
const NotLeftTriangle$1 = "\u22EA";
const NotLeftTriangleEqual$1 = "\u22EC";
const NotLess$1 = "\u226E";
const NotLessEqual$1 = "\u2270";
const NotLessGreater$1 = "\u2278";
const NotLessLess$1 = "\u226A\u0338";
const NotLessSlantEqual$1 = "\u2A7D\u0338";
const NotLessTilde$1 = "\u2274";
const NotNestedGreaterGreater$1 = "\u2AA2\u0338";
const NotNestedLessLess$1 = "\u2AA1\u0338";
const notni$1 = "\u220C";
const notniva$1 = "\u220C";
const notnivb$1 = "\u22FE";
const notnivc$1 = "\u22FD";
const NotPrecedes$1 = "\u2280";
const NotPrecedesEqual$1 = "\u2AAF\u0338";
const NotPrecedesSlantEqual$1 = "\u22E0";
const NotReverseElement$1 = "\u220C";
const NotRightTriangleBar$1 = "\u29D0\u0338";
const NotRightTriangle$1 = "\u22EB";
const NotRightTriangleEqual$1 = "\u22ED";
const NotSquareSubset$1 = "\u228F\u0338";
const NotSquareSubsetEqual$1 = "\u22E2";
const NotSquareSuperset$1 = "\u2290\u0338";
const NotSquareSupersetEqual$1 = "\u22E3";
const NotSubset$1 = "\u2282\u20D2";
const NotSubsetEqual$1 = "\u2288";
const NotSucceeds$1 = "\u2281";
const NotSucceedsEqual$1 = "\u2AB0\u0338";
const NotSucceedsSlantEqual$1 = "\u22E1";
const NotSucceedsTilde$1 = "\u227F\u0338";
const NotSuperset$1 = "\u2283\u20D2";
const NotSupersetEqual$1 = "\u2289";
const NotTilde$1 = "\u2241";
const NotTildeEqual$1 = "\u2244";
const NotTildeFullEqual$1 = "\u2247";
const NotTildeTilde$1 = "\u2249";
const NotVerticalBar$1 = "\u2224";
const nparallel$1 = "\u2226";
const npar$1 = "\u2226";
const nparsl$1 = "\u2AFD\u20E5";
const npart$1 = "\u2202\u0338";
const npolint$1 = "\u2A14";
const npr$1 = "\u2280";
const nprcue$1 = "\u22E0";
const nprec$1 = "\u2280";
const npreceq$1 = "\u2AAF\u0338";
const npre$1 = "\u2AAF\u0338";
const nrarrc$1 = "\u2933\u0338";
const nrarr$1 = "\u219B";
const nrArr$1 = "\u21CF";
const nrarrw$1 = "\u219D\u0338";
const nrightarrow$1 = "\u219B";
const nRightarrow$1 = "\u21CF";
const nrtri$1 = "\u22EB";
const nrtrie$1 = "\u22ED";
const nsc$1 = "\u2281";
const nsccue$1 = "\u22E1";
const nsce$1 = "\u2AB0\u0338";
const Nscr$1 = "\u{1D4A9}";
const nscr$1 = "\u{1D4C3}";
const nshortmid$1 = "\u2224";
const nshortparallel$1 = "\u2226";
const nsim$1 = "\u2241";
const nsime$1 = "\u2244";
const nsimeq$1 = "\u2244";
const nsmid$1 = "\u2224";
const nspar$1 = "\u2226";
const nsqsube$1 = "\u22E2";
const nsqsupe$1 = "\u22E3";
const nsub$1 = "\u2284";
const nsubE$1 = "\u2AC5\u0338";
const nsube$1 = "\u2288";
const nsubset$1 = "\u2282\u20D2";
const nsubseteq$1 = "\u2288";
const nsubseteqq$1 = "\u2AC5\u0338";
const nsucc$1 = "\u2281";
const nsucceq$1 = "\u2AB0\u0338";
const nsup$1 = "\u2285";
const nsupE$1 = "\u2AC6\u0338";
const nsupe$1 = "\u2289";
const nsupset$1 = "\u2283\u20D2";
const nsupseteq$1 = "\u2289";
const nsupseteqq$1 = "\u2AC6\u0338";
const ntgl$1 = "\u2279";
const Ntilde$2 = "\xD1";
const ntilde$2 = "\xF1";
const ntlg$1 = "\u2278";
const ntriangleleft$1 = "\u22EA";
const ntrianglelefteq$1 = "\u22EC";
const ntriangleright$1 = "\u22EB";
const ntrianglerighteq$1 = "\u22ED";
const Nu$1 = "\u039D";
const nu$1 = "\u03BD";
const num$1 = "#";
const numero$1 = "\u2116";
const numsp$1 = "\u2007";
const nvap$1 = "\u224D\u20D2";
const nvdash$1 = "\u22AC";
const nvDash$1 = "\u22AD";
const nVdash$1 = "\u22AE";
const nVDash$1 = "\u22AF";
const nvge$1 = "\u2265\u20D2";
const nvgt$1 = ">\u20D2";
const nvHarr$1 = "\u2904";
const nvinfin$1 = "\u29DE";
const nvlArr$1 = "\u2902";
const nvle$1 = "\u2264\u20D2";
const nvlt$1 = "<\u20D2";
const nvltrie$1 = "\u22B4\u20D2";
const nvrArr$1 = "\u2903";
const nvrtrie$1 = "\u22B5\u20D2";
const nvsim$1 = "\u223C\u20D2";
const nwarhk$1 = "\u2923";
const nwarr$1 = "\u2196";
const nwArr$1 = "\u21D6";
const nwarrow$1 = "\u2196";
const nwnear$1 = "\u2927";
const Oacute$2 = "\xD3";
const oacute$2 = "\xF3";
const oast$1 = "\u229B";
const Ocirc$2 = "\xD4";
const ocirc$2 = "\xF4";
const ocir$1 = "\u229A";
const Ocy$1 = "\u041E";
const ocy$1 = "\u043E";
const odash$1 = "\u229D";
const Odblac$1 = "\u0150";
const odblac$1 = "\u0151";
const odiv$1 = "\u2A38";
const odot$1 = "\u2299";
const odsold$1 = "\u29BC";
const OElig$1 = "\u0152";
const oelig$1 = "\u0153";
const ofcir$1 = "\u29BF";
const Ofr$1 = "\u{1D512}";
const ofr$1 = "\u{1D52C}";
const ogon$1 = "\u02DB";
const Ograve$2 = "\xD2";
const ograve$2 = "\xF2";
const ogt$1 = "\u29C1";
const ohbar$1 = "\u29B5";
const ohm$1 = "\u03A9";
const oint$1 = "\u222E";
const olarr$1 = "\u21BA";
const olcir$1 = "\u29BE";
const olcross$1 = "\u29BB";
const oline$1 = "\u203E";
const olt$1 = "\u29C0";
const Omacr$1 = "\u014C";
const omacr$1 = "\u014D";
const Omega$1 = "\u03A9";
const omega$1 = "\u03C9";
const Omicron$1 = "\u039F";
const omicron$1 = "\u03BF";
const omid$1 = "\u29B6";
const ominus$1 = "\u2296";
const Oopf$1 = "\u{1D546}";
const oopf$1 = "\u{1D560}";
const opar$1 = "\u29B7";
const OpenCurlyDoubleQuote$1 = "\u201C";
const OpenCurlyQuote$1 = "\u2018";
const operp$1 = "\u29B9";
const oplus$1 = "\u2295";
const orarr$1 = "\u21BB";
const Or$1 = "\u2A54";
const or$1 = "\u2228";
const ord$1 = "\u2A5D";
const order$1 = "\u2134";
const orderof$1 = "\u2134";
const ordf$2 = "\xAA";
const ordm$2 = "\xBA";
const origof$1 = "\u22B6";
const oror$1 = "\u2A56";
const orslope$1 = "\u2A57";
const orv$1 = "\u2A5B";
const oS$1 = "\u24C8";
const Oscr$1 = "\u{1D4AA}";
const oscr$1 = "\u2134";
const Oslash$2 = "\xD8";
const oslash$2 = "\xF8";
const osol$1 = "\u2298";
const Otilde$2 = "\xD5";
const otilde$2 = "\xF5";
const otimesas$1 = "\u2A36";
const Otimes$1 = "\u2A37";
const otimes$1 = "\u2297";
const Ouml$2 = "\xD6";
const ouml$2 = "\xF6";
const ovbar$1 = "\u233D";
const OverBar$1 = "\u203E";
const OverBrace$1 = "\u23DE";
const OverBracket$1 = "\u23B4";
const OverParenthesis$1 = "\u23DC";
const para$2 = "\xB6";
const parallel$1 = "\u2225";
const par$1 = "\u2225";
const parsim$1 = "\u2AF3";
const parsl$1 = "\u2AFD";
const part$1 = "\u2202";
const PartialD$1 = "\u2202";
const Pcy$1 = "\u041F";
const pcy$1 = "\u043F";
const percnt$1 = "%";
const period$1 = ".";
const permil$1 = "\u2030";
const perp$1 = "\u22A5";
const pertenk$1 = "\u2031";
const Pfr$1 = "\u{1D513}";
const pfr$1 = "\u{1D52D}";
const Phi$1 = "\u03A6";
const phi$1 = "\u03C6";
const phiv$1 = "\u03D5";
const phmmat$1 = "\u2133";
const phone$2 = "\u260E";
const Pi$1 = "\u03A0";
const pi$1 = "\u03C0";
const pitchfork$1 = "\u22D4";
const piv$1 = "\u03D6";
const planck$1 = "\u210F";
const planckh$1 = "\u210E";
const plankv$1 = "\u210F";
const plusacir$1 = "\u2A23";
const plusb$1 = "\u229E";
const pluscir$1 = "\u2A22";
const plus$1 = "+";
const plusdo$1 = "\u2214";
const plusdu$1 = "\u2A25";
const pluse$1 = "\u2A72";
const PlusMinus$1 = "\xB1";
const plusmn$2 = "\xB1";
const plussim$1 = "\u2A26";
const plustwo$1 = "\u2A27";
const pm$1 = "\xB1";
const Poincareplane$1 = "\u210C";
const pointint$1 = "\u2A15";
const popf$1 = "\u{1D561}";
const Popf$1 = "\u2119";
const pound$3 = "\xA3";
const prap$1 = "\u2AB7";
const Pr$1 = "\u2ABB";
const pr$1 = "\u227A";
const prcue$1 = "\u227C";
const precapprox$1 = "\u2AB7";
const prec$1 = "\u227A";
const preccurlyeq$1 = "\u227C";
const Precedes$1 = "\u227A";
const PrecedesEqual$1 = "\u2AAF";
const PrecedesSlantEqual$1 = "\u227C";
const PrecedesTilde$1 = "\u227E";
const preceq$1 = "\u2AAF";
const precnapprox$1 = "\u2AB9";
const precneqq$1 = "\u2AB5";
const precnsim$1 = "\u22E8";
const pre$1 = "\u2AAF";
const prE$1 = "\u2AB3";
const precsim$1 = "\u227E";
const prime$1 = "\u2032";
const Prime$1 = "\u2033";
const primes$1 = "\u2119";
const prnap$1 = "\u2AB9";
const prnE$1 = "\u2AB5";
const prnsim$1 = "\u22E8";
const prod$1 = "\u220F";
const Product$1 = "\u220F";
const profalar$1 = "\u232E";
const profline$1 = "\u2312";
const profsurf$1 = "\u2313";
const prop$1 = "\u221D";
const Proportional$1 = "\u221D";
const Proportion$1 = "\u2237";
const propto$1 = "\u221D";
const prsim$1 = "\u227E";
const prurel$1 = "\u22B0";
const Pscr$1 = "\u{1D4AB}";
const pscr$1 = "\u{1D4C5}";
const Psi$1 = "\u03A8";
const psi$1 = "\u03C8";
const puncsp$1 = "\u2008";
const Qfr$1 = "\u{1D514}";
const qfr$1 = "\u{1D52E}";
const qint$1 = "\u2A0C";
const qopf$1 = "\u{1D562}";
const Qopf$1 = "\u211A";
const qprime$1 = "\u2057";
const Qscr$1 = "\u{1D4AC}";
const qscr$1 = "\u{1D4C6}";
const quaternions$1 = "\u210D";
const quatint$1 = "\u2A16";
const quest$1 = "?";
const questeq$1 = "\u225F";
const quot$3 = '"';
const QUOT$2 = '"';
const rAarr$1 = "\u21DB";
const race$1 = "\u223D\u0331";
const Racute$1 = "\u0154";
const racute$1 = "\u0155";
const radic$1 = "\u221A";
const raemptyv$1 = "\u29B3";
const rang$1 = "\u27E9";
const Rang$1 = "\u27EB";
const rangd$1 = "\u2992";
const range$2 = "\u29A5";
const rangle$1 = "\u27E9";
const raquo$2 = "\xBB";
const rarrap$1 = "\u2975";
const rarrb$1 = "\u21E5";
const rarrbfs$1 = "\u2920";
const rarrc$1 = "\u2933";
const rarr$1 = "\u2192";
const Rarr$1 = "\u21A0";
const rArr$1 = "\u21D2";
const rarrfs$1 = "\u291E";
const rarrhk$1 = "\u21AA";
const rarrlp$1 = "\u21AC";
const rarrpl$1 = "\u2945";
const rarrsim$1 = "\u2974";
const Rarrtl$1 = "\u2916";
const rarrtl$1 = "\u21A3";
const rarrw$1 = "\u219D";
const ratail$1 = "\u291A";
const rAtail$1 = "\u291C";
const ratio$1 = "\u2236";
const rationals$1 = "\u211A";
const rbarr$1 = "\u290D";
const rBarr$1 = "\u290F";
const RBarr$1 = "\u2910";
const rbbrk$1 = "\u2773";
const rbrace$1 = "}";
const rbrack$1 = "]";
const rbrke$1 = "\u298C";
const rbrksld$1 = "\u298E";
const rbrkslu$1 = "\u2990";
const Rcaron$1 = "\u0158";
const rcaron$1 = "\u0159";
const Rcedil$1 = "\u0156";
const rcedil$1 = "\u0157";
const rceil$1 = "\u2309";
const rcub$1 = "}";
const Rcy$1 = "\u0420";
const rcy$1 = "\u0440";
const rdca$1 = "\u2937";
const rdldhar$1 = "\u2969";
const rdquo$1 = "\u201D";
const rdquor$1 = "\u201D";
const rdsh$1 = "\u21B3";
const real$1 = "\u211C";
const realine$1 = "\u211B";
const realpart$1 = "\u211C";
const reals$1 = "\u211D";
const Re$1 = "\u211C";
const rect$1 = "\u25AD";
const reg$2 = "\xAE";
const REG$2 = "\xAE";
const ReverseElement$1 = "\u220B";
const ReverseEquilibrium$1 = "\u21CB";
const ReverseUpEquilibrium$1 = "\u296F";
const rfisht$1 = "\u297D";
const rfloor$1 = "\u230B";
const rfr$1 = "\u{1D52F}";
const Rfr$1 = "\u211C";
const rHar$1 = "\u2964";
const rhard$1 = "\u21C1";
const rharu$1 = "\u21C0";
const rharul$1 = "\u296C";
const Rho$1 = "\u03A1";
const rho$1 = "\u03C1";
const rhov$1 = "\u03F1";
const RightAngleBracket$1 = "\u27E9";
const RightArrowBar$1 = "\u21E5";
const rightarrow$1 = "\u2192";
const RightArrow$1 = "\u2192";
const Rightarrow$1 = "\u21D2";
const RightArrowLeftArrow$1 = "\u21C4";
const rightarrowtail$1 = "\u21A3";
const RightCeiling$1 = "\u2309";
const RightDoubleBracket$1 = "\u27E7";
const RightDownTeeVector$1 = "\u295D";
const RightDownVectorBar$1 = "\u2955";
const RightDownVector$1 = "\u21C2";
const RightFloor$1 = "\u230B";
const rightharpoondown$1 = "\u21C1";
const rightharpoonup$1 = "\u21C0";
const rightleftarrows$1 = "\u21C4";
const rightleftharpoons$1 = "\u21CC";
const rightrightarrows$1 = "\u21C9";
const rightsquigarrow$1 = "\u219D";
const RightTeeArrow$1 = "\u21A6";
const RightTee$1 = "\u22A2";
const RightTeeVector$1 = "\u295B";
const rightthreetimes$1 = "\u22CC";
const RightTriangleBar$1 = "\u29D0";
const RightTriangle$1 = "\u22B3";
const RightTriangleEqual$1 = "\u22B5";
const RightUpDownVector$1 = "\u294F";
const RightUpTeeVector$1 = "\u295C";
const RightUpVectorBar$1 = "\u2954";
const RightUpVector$1 = "\u21BE";
const RightVectorBar$1 = "\u2953";
const RightVector$1 = "\u21C0";
const ring$2 = "\u02DA";
const risingdotseq$1 = "\u2253";
const rlarr$1 = "\u21C4";
const rlhar$1 = "\u21CC";
const rlm$1 = "\u200F";
const rmoustache$1 = "\u23B1";
const rmoust$1 = "\u23B1";
const rnmid$1 = "\u2AEE";
const roang$1 = "\u27ED";
const roarr$1 = "\u21FE";
const robrk$1 = "\u27E7";
const ropar$1 = "\u2986";
const ropf$1 = "\u{1D563}";
const Ropf$1 = "\u211D";
const roplus$1 = "\u2A2E";
const rotimes$1 = "\u2A35";
const RoundImplies$1 = "\u2970";
const rpar$1 = ")";
const rpargt$1 = "\u2994";
const rppolint$1 = "\u2A12";
const rrarr$1 = "\u21C9";
const Rrightarrow$1 = "\u21DB";
const rsaquo$1 = "\u203A";
const rscr$1 = "\u{1D4C7}";
const Rscr$1 = "\u211B";
const rsh$1 = "\u21B1";
const Rsh$1 = "\u21B1";
const rsqb$1 = "]";
const rsquo$1 = "\u2019";
const rsquor$1 = "\u2019";
const rthree$1 = "\u22CC";
const rtimes$1 = "\u22CA";
const rtri$1 = "\u25B9";
const rtrie$1 = "\u22B5";
const rtrif$1 = "\u25B8";
const rtriltri$1 = "\u29CE";
const RuleDelayed$1 = "\u29F4";
const ruluhar$1 = "\u2968";
const rx$1 = "\u211E";
const Sacute$1 = "\u015A";
const sacute$1 = "\u015B";
const sbquo$1 = "\u201A";
const scap$1 = "\u2AB8";
const Scaron$1 = "\u0160";
const scaron$1 = "\u0161";
const Sc$1 = "\u2ABC";
const sc$1 = "\u227B";
const sccue$1 = "\u227D";
const sce$1 = "\u2AB0";
const scE$1 = "\u2AB4";
const Scedil$1 = "\u015E";
const scedil$1 = "\u015F";
const Scirc$1 = "\u015C";
const scirc$1 = "\u015D";
const scnap$1 = "\u2ABA";
const scnE$1 = "\u2AB6";
const scnsim$1 = "\u22E9";
const scpolint$1 = "\u2A13";
const scsim$1 = "\u227F";
const Scy$1 = "\u0421";
const scy$1 = "\u0441";
const sdotb$1 = "\u22A1";
const sdot$1 = "\u22C5";
const sdote$1 = "\u2A66";
const searhk$1 = "\u2925";
const searr$1 = "\u2198";
const seArr$1 = "\u21D8";
const searrow$1 = "\u2198";
const sect$2 = "\xA7";
const semi$1 = ";";
const seswar$1 = "\u2929";
const setminus$1 = "\u2216";
const setmn$1 = "\u2216";
const sext$1 = "\u2736";
const Sfr$1 = "\u{1D516}";
const sfr$1 = "\u{1D530}";
const sfrown$1 = "\u2322";
const sharp$1 = "\u266F";
const SHCHcy$1 = "\u0429";
const shchcy$1 = "\u0449";
const SHcy$1 = "\u0428";
const shcy$1 = "\u0448";
const ShortDownArrow$1 = "\u2193";
const ShortLeftArrow$1 = "\u2190";
const shortmid$1 = "\u2223";
const shortparallel$1 = "\u2225";
const ShortRightArrow$1 = "\u2192";
const ShortUpArrow$1 = "\u2191";
const shy$2 = "\xAD";
const Sigma$1 = "\u03A3";
const sigma$1 = "\u03C3";
const sigmaf$1 = "\u03C2";
const sigmav$1 = "\u03C2";
const sim$1 = "\u223C";
const simdot$1 = "\u2A6A";
const sime$1 = "\u2243";
const simeq$1 = "\u2243";
const simg$1 = "\u2A9E";
const simgE$1 = "\u2AA0";
const siml$1 = "\u2A9D";
const simlE$1 = "\u2A9F";
const simne$1 = "\u2246";
const simplus$1 = "\u2A24";
const simrarr$1 = "\u2972";
const slarr$1 = "\u2190";
const SmallCircle$1 = "\u2218";
const smallsetminus$1 = "\u2216";
const smashp$1 = "\u2A33";
const smeparsl$1 = "\u29E4";
const smid$1 = "\u2223";
const smile$2 = "\u2323";
const smt$1 = "\u2AAA";
const smte$1 = "\u2AAC";
const smtes$1 = "\u2AAC\uFE00";
const SOFTcy$1 = "\u042C";
const softcy$1 = "\u044C";
const solbar$1 = "\u233F";
const solb$1 = "\u29C4";
const sol$1 = "/";
const Sopf$1 = "\u{1D54A}";
const sopf$1 = "\u{1D564}";
const spades$2 = "\u2660";
const spadesuit$1 = "\u2660";
const spar$1 = "\u2225";
const sqcap$1 = "\u2293";
const sqcaps$1 = "\u2293\uFE00";
const sqcup$1 = "\u2294";
const sqcups$1 = "\u2294\uFE00";
const Sqrt$1 = "\u221A";
const sqsub$1 = "\u228F";
const sqsube$1 = "\u2291";
const sqsubset$1 = "\u228F";
const sqsubseteq$1 = "\u2291";
const sqsup$1 = "\u2290";
const sqsupe$1 = "\u2292";
const sqsupset$1 = "\u2290";
const sqsupseteq$1 = "\u2292";
const square$1 = "\u25A1";
const Square$1 = "\u25A1";
const SquareIntersection$1 = "\u2293";
const SquareSubset$1 = "\u228F";
const SquareSubsetEqual$1 = "\u2291";
const SquareSuperset$1 = "\u2290";
const SquareSupersetEqual$1 = "\u2292";
const SquareUnion$1 = "\u2294";
const squarf$1 = "\u25AA";
const squ$1 = "\u25A1";
const squf$1 = "\u25AA";
const srarr$1 = "\u2192";
const Sscr$1 = "\u{1D4AE}";
const sscr$1 = "\u{1D4C8}";
const ssetmn$1 = "\u2216";
const ssmile$1 = "\u2323";
const sstarf$1 = "\u22C6";
const Star$1 = "\u22C6";
const star$2 = "\u2606";
const starf$1 = "\u2605";
const straightepsilon$1 = "\u03F5";
const straightphi$1 = "\u03D5";
const strns$1 = "\xAF";
const sub$1 = "\u2282";
const Sub$1 = "\u22D0";
const subdot$1 = "\u2ABD";
const subE$1 = "\u2AC5";
const sube$1 = "\u2286";
const subedot$1 = "\u2AC3";
const submult$1 = "\u2AC1";
const subnE$1 = "\u2ACB";
const subne$1 = "\u228A";
const subplus$1 = "\u2ABF";
const subrarr$1 = "\u2979";
const subset$1 = "\u2282";
const Subset$1 = "\u22D0";
const subseteq$1 = "\u2286";
const subseteqq$1 = "\u2AC5";
const SubsetEqual$1 = "\u2286";
const subsetneq$1 = "\u228A";
const subsetneqq$1 = "\u2ACB";
const subsim$1 = "\u2AC7";
const subsub$1 = "\u2AD5";
const subsup$1 = "\u2AD3";
const succapprox$1 = "\u2AB8";
const succ$1 = "\u227B";
const succcurlyeq$1 = "\u227D";
const Succeeds$1 = "\u227B";
const SucceedsEqual$1 = "\u2AB0";
const SucceedsSlantEqual$1 = "\u227D";
const SucceedsTilde$1 = "\u227F";
const succeq$1 = "\u2AB0";
const succnapprox$1 = "\u2ABA";
const succneqq$1 = "\u2AB6";
const succnsim$1 = "\u22E9";
const succsim$1 = "\u227F";
const SuchThat$1 = "\u220B";
const sum$1 = "\u2211";
const Sum$1 = "\u2211";
const sung$1 = "\u266A";
const sup1$2 = "\xB9";
const sup2$2 = "\xB2";
const sup3$2 = "\xB3";
const sup$1 = "\u2283";
const Sup$1 = "\u22D1";
const supdot$1 = "\u2ABE";
const supdsub$1 = "\u2AD8";
const supE$1 = "\u2AC6";
const supe$1 = "\u2287";
const supedot$1 = "\u2AC4";
const Superset$1 = "\u2283";
const SupersetEqual$1 = "\u2287";
const suphsol$1 = "\u27C9";
const suphsub$1 = "\u2AD7";
const suplarr$1 = "\u297B";
const supmult$1 = "\u2AC2";
const supnE$1 = "\u2ACC";
const supne$1 = "\u228B";
const supplus$1 = "\u2AC0";
const supset$1 = "\u2283";
const Supset$1 = "\u22D1";
const supseteq$1 = "\u2287";
const supseteqq$1 = "\u2AC6";
const supsetneq$1 = "\u228B";
const supsetneqq$1 = "\u2ACC";
const supsim$1 = "\u2AC8";
const supsub$1 = "\u2AD4";
const supsup$1 = "\u2AD6";
const swarhk$1 = "\u2926";
const swarr$1 = "\u2199";
const swArr$1 = "\u21D9";
const swarrow$1 = "\u2199";
const swnwar$1 = "\u292A";
const szlig$2 = "\xDF";
const Tab$1 = "	";
const target$1 = "\u2316";
const Tau$1 = "\u03A4";
const tau$1 = "\u03C4";
const tbrk$1 = "\u23B4";
const Tcaron$1 = "\u0164";
const tcaron$1 = "\u0165";
const Tcedil$1 = "\u0162";
const tcedil$1 = "\u0163";
const Tcy$1 = "\u0422";
const tcy$1 = "\u0442";
const tdot$1 = "\u20DB";
const telrec$1 = "\u2315";
const Tfr$1 = "\u{1D517}";
const tfr$1 = "\u{1D531}";
const there4$1 = "\u2234";
const therefore$1 = "\u2234";
const Therefore$1 = "\u2234";
const Theta$1 = "\u0398";
const theta$1 = "\u03B8";
const thetasym$1 = "\u03D1";
const thetav$1 = "\u03D1";
const thickapprox$1 = "\u2248";
const thicksim$1 = "\u223C";
const ThickSpace$1 = "\u205F\u200A";
const ThinSpace$1 = "\u2009";
const thinsp$1 = "\u2009";
const thkap$1 = "\u2248";
const thksim$1 = "\u223C";
const THORN$2 = "\xDE";
const thorn$2 = "\xFE";
const tilde$1 = "\u02DC";
const Tilde$1 = "\u223C";
const TildeEqual$1 = "\u2243";
const TildeFullEqual$1 = "\u2245";
const TildeTilde$1 = "\u2248";
const timesbar$1 = "\u2A31";
const timesb$1 = "\u22A0";
const times$2 = "\xD7";
const timesd$1 = "\u2A30";
const tint$1 = "\u222D";
const toea$1 = "\u2928";
const topbot$1 = "\u2336";
const topcir$1 = "\u2AF1";
const top$3 = "\u22A4";
const Topf$1 = "\u{1D54B}";
const topf$1 = "\u{1D565}";
const topfork$1 = "\u2ADA";
const tosa$1 = "\u2929";
const tprime$1 = "\u2034";
const trade$1 = "\u2122";
const TRADE$1 = "\u2122";
const triangle$1 = "\u25B5";
const triangledown$1 = "\u25BF";
const triangleleft$1 = "\u25C3";
const trianglelefteq$1 = "\u22B4";
const triangleq$1 = "\u225C";
const triangleright$1 = "\u25B9";
const trianglerighteq$1 = "\u22B5";
const tridot$1 = "\u25EC";
const trie$1 = "\u225C";
const triminus$1 = "\u2A3A";
const TripleDot$1 = "\u20DB";
const triplus$1 = "\u2A39";
const trisb$1 = "\u29CD";
const tritime$1 = "\u2A3B";
const trpezium$1 = "\u23E2";
const Tscr$1 = "\u{1D4AF}";
const tscr$1 = "\u{1D4C9}";
const TScy$1 = "\u0426";
const tscy$1 = "\u0446";
const TSHcy$1 = "\u040B";
const tshcy$1 = "\u045B";
const Tstrok$1 = "\u0166";
const tstrok$1 = "\u0167";
const twixt$1 = "\u226C";
const twoheadleftarrow$1 = "\u219E";
const twoheadrightarrow$1 = "\u21A0";
const Uacute$2 = "\xDA";
const uacute$2 = "\xFA";
const uarr$1 = "\u2191";
const Uarr$1 = "\u219F";
const uArr$1 = "\u21D1";
const Uarrocir$1 = "\u2949";
const Ubrcy$1 = "\u040E";
const ubrcy$1 = "\u045E";
const Ubreve$1 = "\u016C";
const ubreve$1 = "\u016D";
const Ucirc$2 = "\xDB";
const ucirc$2 = "\xFB";
const Ucy$1 = "\u0423";
const ucy$1 = "\u0443";
const udarr$1 = "\u21C5";
const Udblac$1 = "\u0170";
const udblac$1 = "\u0171";
const udhar$1 = "\u296E";
const ufisht$1 = "\u297E";
const Ufr$1 = "\u{1D518}";
const ufr$1 = "\u{1D532}";
const Ugrave$2 = "\xD9";
const ugrave$2 = "\xF9";
const uHar$1 = "\u2963";
const uharl$1 = "\u21BF";
const uharr$1 = "\u21BE";
const uhblk$1 = "\u2580";
const ulcorn$1 = "\u231C";
const ulcorner$1 = "\u231C";
const ulcrop$1 = "\u230F";
const ultri$1 = "\u25F8";
const Umacr$1 = "\u016A";
const umacr$1 = "\u016B";
const uml$2 = "\xA8";
const UnderBar$1 = "_";
const UnderBrace$1 = "\u23DF";
const UnderBracket$1 = "\u23B5";
const UnderParenthesis$1 = "\u23DD";
const Union$1 = "\u22C3";
const UnionPlus$1 = "\u228E";
const Uogon$1 = "\u0172";
const uogon$1 = "\u0173";
const Uopf$1 = "\u{1D54C}";
const uopf$1 = "\u{1D566}";
const UpArrowBar$1 = "\u2912";
const uparrow$1 = "\u2191";
const UpArrow$1 = "\u2191";
const Uparrow$1 = "\u21D1";
const UpArrowDownArrow$1 = "\u21C5";
const updownarrow$1 = "\u2195";
const UpDownArrow$1 = "\u2195";
const Updownarrow$1 = "\u21D5";
const UpEquilibrium$1 = "\u296E";
const upharpoonleft$1 = "\u21BF";
const upharpoonright$1 = "\u21BE";
const uplus$1 = "\u228E";
const UpperLeftArrow$1 = "\u2196";
const UpperRightArrow$1 = "\u2197";
const upsi$1 = "\u03C5";
const Upsi$1 = "\u03D2";
const upsih$1 = "\u03D2";
const Upsilon$1 = "\u03A5";
const upsilon$1 = "\u03C5";
const UpTeeArrow$1 = "\u21A5";
const UpTee$1 = "\u22A5";
const upuparrows$1 = "\u21C8";
const urcorn$1 = "\u231D";
const urcorner$1 = "\u231D";
const urcrop$1 = "\u230E";
const Uring$1 = "\u016E";
const uring$1 = "\u016F";
const urtri$1 = "\u25F9";
const Uscr$1 = "\u{1D4B0}";
const uscr$1 = "\u{1D4CA}";
const utdot$1 = "\u22F0";
const Utilde$1 = "\u0168";
const utilde$1 = "\u0169";
const utri$1 = "\u25B5";
const utrif$1 = "\u25B4";
const uuarr$1 = "\u21C8";
const Uuml$2 = "\xDC";
const uuml$2 = "\xFC";
const uwangle$1 = "\u29A7";
const vangrt$1 = "\u299C";
const varepsilon$1 = "\u03F5";
const varkappa$1 = "\u03F0";
const varnothing$1 = "\u2205";
const varphi$1 = "\u03D5";
const varpi$1 = "\u03D6";
const varpropto$1 = "\u221D";
const varr$1 = "\u2195";
const vArr$1 = "\u21D5";
const varrho$1 = "\u03F1";
const varsigma$1 = "\u03C2";
const varsubsetneq$1 = "\u228A\uFE00";
const varsubsetneqq$1 = "\u2ACB\uFE00";
const varsupsetneq$1 = "\u228B\uFE00";
const varsupsetneqq$1 = "\u2ACC\uFE00";
const vartheta$1 = "\u03D1";
const vartriangleleft$1 = "\u22B2";
const vartriangleright$1 = "\u22B3";
const vBar$1 = "\u2AE8";
const Vbar$1 = "\u2AEB";
const vBarv$1 = "\u2AE9";
const Vcy$1 = "\u0412";
const vcy$1 = "\u0432";
const vdash$1 = "\u22A2";
const vDash$1 = "\u22A8";
const Vdash$1 = "\u22A9";
const VDash$1 = "\u22AB";
const Vdashl$1 = "\u2AE6";
const veebar$1 = "\u22BB";
const vee$1 = "\u2228";
const Vee$1 = "\u22C1";
const veeeq$1 = "\u225A";
const vellip$1 = "\u22EE";
const verbar$1 = "|";
const Verbar$1 = "\u2016";
const vert$1 = "|";
const Vert$1 = "\u2016";
const VerticalBar$1 = "\u2223";
const VerticalLine$1 = "|";
const VerticalSeparator$1 = "\u2758";
const VerticalTilde$1 = "\u2240";
const VeryThinSpace$1 = "\u200A";
const Vfr$1 = "\u{1D519}";
const vfr$1 = "\u{1D533}";
const vltri$1 = "\u22B2";
const vnsub$1 = "\u2282\u20D2";
const vnsup$1 = "\u2283\u20D2";
const Vopf$1 = "\u{1D54D}";
const vopf$1 = "\u{1D567}";
const vprop$1 = "\u221D";
const vrtri$1 = "\u22B3";
const Vscr$1 = "\u{1D4B1}";
const vscr$1 = "\u{1D4CB}";
const vsubnE$1 = "\u2ACB\uFE00";
const vsubne$1 = "\u228A\uFE00";
const vsupnE$1 = "\u2ACC\uFE00";
const vsupne$1 = "\u228B\uFE00";
const Vvdash$1 = "\u22AA";
const vzigzag$1 = "\u299A";
const Wcirc$1 = "\u0174";
const wcirc$1 = "\u0175";
const wedbar$1 = "\u2A5F";
const wedge$1 = "\u2227";
const Wedge$1 = "\u22C0";
const wedgeq$1 = "\u2259";
const weierp$1 = "\u2118";
const Wfr$1 = "\u{1D51A}";
const wfr$1 = "\u{1D534}";
const Wopf$1 = "\u{1D54E}";
const wopf$1 = "\u{1D568}";
const wp$1 = "\u2118";
const wr$1 = "\u2240";
const wreath$1 = "\u2240";
const Wscr$1 = "\u{1D4B2}";
const wscr$1 = "\u{1D4CC}";
const xcap$1 = "\u22C2";
const xcirc$1 = "\u25EF";
const xcup$1 = "\u22C3";
const xdtri$1 = "\u25BD";
const Xfr$1 = "\u{1D51B}";
const xfr$1 = "\u{1D535}";
const xharr$1 = "\u27F7";
const xhArr$1 = "\u27FA";
const Xi$1 = "\u039E";
const xi$1 = "\u03BE";
const xlarr$1 = "\u27F5";
const xlArr$1 = "\u27F8";
const xmap$1 = "\u27FC";
const xnis$1 = "\u22FB";
const xodot$1 = "\u2A00";
const Xopf$1 = "\u{1D54F}";
const xopf$1 = "\u{1D569}";
const xoplus$1 = "\u2A01";
const xotime$1 = "\u2A02";
const xrarr$1 = "\u27F6";
const xrArr$1 = "\u27F9";
const Xscr$1 = "\u{1D4B3}";
const xscr$1 = "\u{1D4CD}";
const xsqcup$1 = "\u2A06";
const xuplus$1 = "\u2A04";
const xutri$1 = "\u25B3";
const xvee$1 = "\u22C1";
const xwedge$1 = "\u22C0";
const Yacute$2 = "\xDD";
const yacute$2 = "\xFD";
const YAcy$1 = "\u042F";
const yacy$1 = "\u044F";
const Ycirc$1 = "\u0176";
const ycirc$1 = "\u0177";
const Ycy$1 = "\u042B";
const ycy$1 = "\u044B";
const yen$3 = "\xA5";
const Yfr$1 = "\u{1D51C}";
const yfr$1 = "\u{1D536}";
const YIcy$1 = "\u0407";
const yicy$1 = "\u0457";
const Yopf$1 = "\u{1D550}";
const yopf$1 = "\u{1D56A}";
const Yscr$1 = "\u{1D4B4}";
const yscr$1 = "\u{1D4CE}";
const YUcy$1 = "\u042E";
const yucy$1 = "\u044E";
const yuml$2 = "\xFF";
const Yuml$1 = "\u0178";
const Zacute$1 = "\u0179";
const zacute$1 = "\u017A";
const Zcaron$1 = "\u017D";
const zcaron$1 = "\u017E";
const Zcy$1 = "\u0417";
const zcy$1 = "\u0437";
const Zdot$1 = "\u017B";
const zdot$1 = "\u017C";
const zeetrf$1 = "\u2128";
const ZeroWidthSpace$1 = "\u200B";
const Zeta$1 = "\u0396";
const zeta$1 = "\u03B6";
const zfr$1 = "\u{1D537}";
const Zfr$1 = "\u2128";
const ZHcy$1 = "\u0416";
const zhcy$1 = "\u0436";
const zigrarr$1 = "\u21DD";
const zopf$1 = "\u{1D56B}";
const Zopf$1 = "\u2124";
const Zscr$1 = "\u{1D4B5}";
const zscr$1 = "\u{1D4CF}";
const zwj$1 = "\u200D";
const zwnj$1 = "\u200C";
var require$$0$3 = {
  Aacute: Aacute$2,
  aacute: aacute$2,
  Abreve: Abreve$1,
  abreve: abreve$1,
  ac: ac$1,
  acd: acd$1,
  acE: acE$1,
  Acirc: Acirc$2,
  acirc: acirc$2,
  acute: acute$2,
  Acy: Acy$1,
  acy: acy$1,
  AElig: AElig$2,
  aelig: aelig$2,
  af: af$1,
  Afr: Afr$1,
  afr: afr$1,
  Agrave: Agrave$2,
  agrave: agrave$2,
  alefsym: alefsym$1,
  aleph: aleph$1,
  Alpha: Alpha$1,
  alpha: alpha$1,
  Amacr: Amacr$1,
  amacr: amacr$1,
  amalg: amalg$1,
  amp: amp$3,
  AMP: AMP$2,
  andand: andand$1,
  And: And$1,
  and: and$1,
  andd: andd$1,
  andslope: andslope$1,
  andv: andv$1,
  ang: ang$1,
  ange: ange$1,
  angle: angle$1,
  angmsdaa: angmsdaa$1,
  angmsdab: angmsdab$1,
  angmsdac: angmsdac$1,
  angmsdad: angmsdad$1,
  angmsdae: angmsdae$1,
  angmsdaf: angmsdaf$1,
  angmsdag: angmsdag$1,
  angmsdah: angmsdah$1,
  angmsd: angmsd$1,
  angrt: angrt$1,
  angrtvb: angrtvb$1,
  angrtvbd: angrtvbd$1,
  angsph: angsph$1,
  angst: angst$1,
  angzarr: angzarr$1,
  Aogon: Aogon$1,
  aogon: aogon$1,
  Aopf: Aopf$1,
  aopf: aopf$1,
  apacir: apacir$1,
  ap: ap$1,
  apE: apE$1,
  ape: ape$1,
  apid: apid$1,
  apos: apos$2,
  ApplyFunction: ApplyFunction$1,
  approx: approx$1,
  approxeq: approxeq$1,
  Aring: Aring$2,
  aring: aring$2,
  Ascr: Ascr$1,
  ascr: ascr$1,
  Assign: Assign$1,
  ast: ast$1,
  asymp: asymp$1,
  asympeq: asympeq$1,
  Atilde: Atilde$2,
  atilde: atilde$2,
  Auml: Auml$2,
  auml: auml$2,
  awconint: awconint$1,
  awint: awint$1,
  backcong: backcong$1,
  backepsilon: backepsilon$1,
  backprime: backprime$1,
  backsim: backsim$1,
  backsimeq: backsimeq$1,
  Backslash: Backslash$1,
  Barv: Barv$1,
  barvee: barvee$1,
  barwed: barwed$1,
  Barwed: Barwed$1,
  barwedge: barwedge$1,
  bbrk: bbrk$1,
  bbrktbrk: bbrktbrk$1,
  bcong: bcong$1,
  Bcy: Bcy$1,
  bcy: bcy$1,
  bdquo: bdquo$1,
  becaus: becaus$1,
  because: because$1,
  Because: Because$1,
  bemptyv: bemptyv$1,
  bepsi: bepsi$1,
  bernou: bernou$1,
  Bernoullis: Bernoullis$1,
  Beta: Beta$1,
  beta: beta$1,
  beth: beth$1,
  between: between$1,
  Bfr: Bfr$1,
  bfr: bfr$1,
  bigcap: bigcap$1,
  bigcirc: bigcirc$1,
  bigcup: bigcup$1,
  bigodot: bigodot$1,
  bigoplus: bigoplus$1,
  bigotimes: bigotimes$1,
  bigsqcup: bigsqcup$1,
  bigstar: bigstar$1,
  bigtriangledown: bigtriangledown$1,
  bigtriangleup: bigtriangleup$1,
  biguplus: biguplus$1,
  bigvee: bigvee$1,
  bigwedge: bigwedge$1,
  bkarow: bkarow$1,
  blacklozenge: blacklozenge$1,
  blacksquare: blacksquare$1,
  blacktriangle: blacktriangle$1,
  blacktriangledown: blacktriangledown$1,
  blacktriangleleft: blacktriangleleft$1,
  blacktriangleright: blacktriangleright$1,
  blank: blank$1,
  blk12: blk12$1,
  blk14: blk14$1,
  blk34: blk34$1,
  block: block$2,
  bne: bne$1,
  bnequiv: bnequiv$1,
  bNot: bNot$1,
  bnot: bnot$1,
  Bopf: Bopf$1,
  bopf: bopf$1,
  bot: bot$1,
  bottom: bottom$2,
  bowtie: bowtie$1,
  boxbox: boxbox$1,
  boxdl: boxdl$1,
  boxdL: boxdL$1,
  boxDl: boxDl$1,
  boxDL: boxDL$1,
  boxdr: boxdr$1,
  boxdR: boxdR$1,
  boxDr: boxDr$1,
  boxDR: boxDR$1,
  boxh: boxh$1,
  boxH: boxH$1,
  boxhd: boxhd$1,
  boxHd: boxHd$1,
  boxhD: boxhD$1,
  boxHD: boxHD$1,
  boxhu: boxhu$1,
  boxHu: boxHu$1,
  boxhU: boxhU$1,
  boxHU: boxHU$1,
  boxminus: boxminus$1,
  boxplus: boxplus$1,
  boxtimes: boxtimes$1,
  boxul: boxul$1,
  boxuL: boxuL$1,
  boxUl: boxUl$1,
  boxUL: boxUL$1,
  boxur: boxur$1,
  boxuR: boxuR$1,
  boxUr: boxUr$1,
  boxUR: boxUR$1,
  boxv: boxv$1,
  boxV: boxV$1,
  boxvh: boxvh$1,
  boxvH: boxvH$1,
  boxVh: boxVh$1,
  boxVH: boxVH$1,
  boxvl: boxvl$1,
  boxvL: boxvL$1,
  boxVl: boxVl$1,
  boxVL: boxVL$1,
  boxvr: boxvr$1,
  boxvR: boxvR$1,
  boxVr: boxVr$1,
  boxVR: boxVR$1,
  bprime: bprime$1,
  breve: breve$1,
  Breve: Breve$1,
  brvbar: brvbar$2,
  bscr: bscr$1,
  Bscr: Bscr$1,
  bsemi: bsemi$1,
  bsim: bsim$1,
  bsime: bsime$1,
  bsolb: bsolb$1,
  bsol: bsol$1,
  bsolhsub: bsolhsub$1,
  bull: bull$1,
  bullet: bullet$1,
  bump: bump$1,
  bumpE: bumpE$1,
  bumpe: bumpe$1,
  Bumpeq: Bumpeq$1,
  bumpeq: bumpeq$1,
  Cacute: Cacute$1,
  cacute: cacute$1,
  capand: capand$1,
  capbrcup: capbrcup$1,
  capcap: capcap$1,
  cap: cap$1,
  Cap: Cap$1,
  capcup: capcup$1,
  capdot: capdot$1,
  CapitalDifferentialD: CapitalDifferentialD$1,
  caps: caps$1,
  caret: caret$1,
  caron: caron$1,
  Cayleys: Cayleys$1,
  ccaps: ccaps$1,
  Ccaron: Ccaron$1,
  ccaron: ccaron$1,
  Ccedil: Ccedil$2,
  ccedil: ccedil$2,
  Ccirc: Ccirc$1,
  ccirc: ccirc$1,
  Cconint: Cconint$1,
  ccups: ccups$1,
  ccupssm: ccupssm$1,
  Cdot: Cdot$1,
  cdot: cdot$1,
  cedil: cedil$2,
  Cedilla: Cedilla$1,
  cemptyv: cemptyv$1,
  cent: cent$2,
  centerdot: centerdot$1,
  CenterDot: CenterDot$1,
  cfr: cfr$1,
  Cfr: Cfr$1,
  CHcy: CHcy$1,
  chcy: chcy$1,
  check: check$1,
  checkmark: checkmark$1,
  Chi: Chi$1,
  chi: chi$1,
  circ: circ$1,
  circeq: circeq$1,
  circlearrowleft: circlearrowleft$1,
  circlearrowright: circlearrowright$1,
  circledast: circledast$1,
  circledcirc: circledcirc$1,
  circleddash: circleddash$1,
  CircleDot: CircleDot$1,
  circledR: circledR$1,
  circledS: circledS$1,
  CircleMinus: CircleMinus$1,
  CirclePlus: CirclePlus$1,
  CircleTimes: CircleTimes$1,
  cir: cir$1,
  cirE: cirE$1,
  cire: cire$1,
  cirfnint: cirfnint$1,
  cirmid: cirmid$1,
  cirscir: cirscir$1,
  ClockwiseContourIntegral: ClockwiseContourIntegral$1,
  CloseCurlyDoubleQuote: CloseCurlyDoubleQuote$1,
  CloseCurlyQuote: CloseCurlyQuote$1,
  clubs: clubs$2,
  clubsuit: clubsuit$1,
  colon: colon$1,
  Colon: Colon$1,
  Colone: Colone$1,
  colone: colone$1,
  coloneq: coloneq$1,
  comma: comma$1,
  commat: commat$1,
  comp: comp$1,
  compfn: compfn$1,
  complement: complement$1,
  complexes: complexes$1,
  cong: cong$1,
  congdot: congdot$1,
  Congruent: Congruent$1,
  conint: conint$1,
  Conint: Conint$1,
  ContourIntegral: ContourIntegral$1,
  copf: copf$1,
  Copf: Copf$1,
  coprod: coprod$1,
  Coproduct: Coproduct$1,
  copy: copy$2,
  COPY: COPY$2,
  copysr: copysr$1,
  CounterClockwiseContourIntegral: CounterClockwiseContourIntegral$1,
  crarr: crarr$1,
  cross: cross$1,
  Cross: Cross$1,
  Cscr: Cscr$1,
  cscr: cscr$1,
  csub: csub$1,
  csube: csube$1,
  csup: csup$1,
  csupe: csupe$1,
  ctdot: ctdot$1,
  cudarrl: cudarrl$1,
  cudarrr: cudarrr$1,
  cuepr: cuepr$1,
  cuesc: cuesc$1,
  cularr: cularr$1,
  cularrp: cularrp$1,
  cupbrcap: cupbrcap$1,
  cupcap: cupcap$1,
  CupCap: CupCap$1,
  cup: cup$1,
  Cup: Cup$1,
  cupcup: cupcup$1,
  cupdot: cupdot$1,
  cupor: cupor$1,
  cups: cups$1,
  curarr: curarr$1,
  curarrm: curarrm$1,
  curlyeqprec: curlyeqprec$1,
  curlyeqsucc: curlyeqsucc$1,
  curlyvee: curlyvee$1,
  curlywedge: curlywedge$1,
  curren: curren$2,
  curvearrowleft: curvearrowleft$1,
  curvearrowright: curvearrowright$1,
  cuvee: cuvee$1,
  cuwed: cuwed$1,
  cwconint: cwconint$1,
  cwint: cwint$1,
  cylcty: cylcty$1,
  dagger: dagger$2,
  Dagger: Dagger$1,
  daleth: daleth$1,
  darr: darr$1,
  Darr: Darr$1,
  dArr: dArr$1,
  dash: dash$2,
  Dashv: Dashv$1,
  dashv: dashv$1,
  dbkarow: dbkarow$1,
  dblac: dblac$1,
  Dcaron: Dcaron$1,
  dcaron: dcaron$1,
  Dcy: Dcy$1,
  dcy: dcy$1,
  ddagger: ddagger$1,
  ddarr: ddarr$1,
  DD: DD$1,
  dd: dd$1,
  DDotrahd: DDotrahd$1,
  ddotseq: ddotseq$1,
  deg: deg$2,
  Del: Del$1,
  Delta: Delta$1,
  delta: delta$1,
  demptyv: demptyv$1,
  dfisht: dfisht$1,
  Dfr: Dfr$1,
  dfr: dfr$1,
  dHar: dHar$1,
  dharl: dharl$1,
  dharr: dharr$1,
  DiacriticalAcute: DiacriticalAcute$1,
  DiacriticalDot: DiacriticalDot$1,
  DiacriticalDoubleAcute: DiacriticalDoubleAcute$1,
  DiacriticalGrave: DiacriticalGrave$1,
  DiacriticalTilde: DiacriticalTilde$1,
  diam: diam$1,
  diamond: diamond$1,
  Diamond: Diamond$1,
  diamondsuit: diamondsuit$1,
  diams: diams$1,
  die: die$1,
  DifferentialD: DifferentialD$1,
  digamma: digamma$1,
  disin: disin$1,
  div: div$1,
  divide: divide$2,
  divideontimes: divideontimes$1,
  divonx: divonx$1,
  DJcy: DJcy$1,
  djcy: djcy$1,
  dlcorn: dlcorn$1,
  dlcrop: dlcrop$1,
  dollar: dollar$2,
  Dopf: Dopf$1,
  dopf: dopf$1,
  Dot: Dot$1,
  dot: dot$1,
  DotDot: DotDot$1,
  doteq: doteq$1,
  doteqdot: doteqdot$1,
  DotEqual: DotEqual$1,
  dotminus: dotminus$1,
  dotplus: dotplus$1,
  dotsquare: dotsquare$1,
  doublebarwedge: doublebarwedge$1,
  DoubleContourIntegral: DoubleContourIntegral$1,
  DoubleDot: DoubleDot$1,
  DoubleDownArrow: DoubleDownArrow$1,
  DoubleLeftArrow: DoubleLeftArrow$1,
  DoubleLeftRightArrow: DoubleLeftRightArrow$1,
  DoubleLeftTee: DoubleLeftTee$1,
  DoubleLongLeftArrow: DoubleLongLeftArrow$1,
  DoubleLongLeftRightArrow: DoubleLongLeftRightArrow$1,
  DoubleLongRightArrow: DoubleLongRightArrow$1,
  DoubleRightArrow: DoubleRightArrow$1,
  DoubleRightTee: DoubleRightTee$1,
  DoubleUpArrow: DoubleUpArrow$1,
  DoubleUpDownArrow: DoubleUpDownArrow$1,
  DoubleVerticalBar: DoubleVerticalBar$1,
  DownArrowBar: DownArrowBar$1,
  downarrow: downarrow$1,
  DownArrow: DownArrow$1,
  Downarrow: Downarrow$1,
  DownArrowUpArrow: DownArrowUpArrow$1,
  DownBreve: DownBreve$1,
  downdownarrows: downdownarrows$1,
  downharpoonleft: downharpoonleft$1,
  downharpoonright: downharpoonright$1,
  DownLeftRightVector: DownLeftRightVector$1,
  DownLeftTeeVector: DownLeftTeeVector$1,
  DownLeftVectorBar: DownLeftVectorBar$1,
  DownLeftVector: DownLeftVector$1,
  DownRightTeeVector: DownRightTeeVector$1,
  DownRightVectorBar: DownRightVectorBar$1,
  DownRightVector: DownRightVector$1,
  DownTeeArrow: DownTeeArrow$1,
  DownTee: DownTee$1,
  drbkarow: drbkarow$1,
  drcorn: drcorn$1,
  drcrop: drcrop$1,
  Dscr: Dscr$1,
  dscr: dscr$1,
  DScy: DScy$1,
  dscy: dscy$1,
  dsol: dsol$1,
  Dstrok: Dstrok$1,
  dstrok: dstrok$1,
  dtdot: dtdot$1,
  dtri: dtri$1,
  dtrif: dtrif$1,
  duarr: duarr$1,
  duhar: duhar$1,
  dwangle: dwangle$1,
  DZcy: DZcy$1,
  dzcy: dzcy$1,
  dzigrarr: dzigrarr$1,
  Eacute: Eacute$2,
  eacute: eacute$2,
  easter: easter$1,
  Ecaron: Ecaron$1,
  ecaron: ecaron$1,
  Ecirc: Ecirc$2,
  ecirc: ecirc$2,
  ecir: ecir$1,
  ecolon: ecolon$1,
  Ecy: Ecy$1,
  ecy: ecy$1,
  eDDot: eDDot$1,
  Edot: Edot$1,
  edot: edot$1,
  eDot: eDot$1,
  ee: ee$1,
  efDot: efDot$1,
  Efr: Efr$1,
  efr: efr$1,
  eg: eg$1,
  Egrave: Egrave$2,
  egrave: egrave$2,
  egs: egs$1,
  egsdot: egsdot$1,
  el: el$1,
  Element: Element$3,
  elinters: elinters$1,
  ell: ell$1,
  els: els$1,
  elsdot: elsdot$1,
  Emacr: Emacr$1,
  emacr: emacr$1,
  empty: empty$1,
  emptyset: emptyset$1,
  EmptySmallSquare: EmptySmallSquare$1,
  emptyv: emptyv$1,
  EmptyVerySmallSquare: EmptyVerySmallSquare$1,
  emsp13: emsp13$1,
  emsp14: emsp14$1,
  emsp: emsp$1,
  ENG: ENG$1,
  eng: eng$1,
  ensp: ensp$1,
  Eogon: Eogon$1,
  eogon: eogon$1,
  Eopf: Eopf$1,
  eopf: eopf$1,
  epar: epar$1,
  eparsl: eparsl$1,
  eplus: eplus$1,
  epsi: epsi$1,
  Epsilon: Epsilon$1,
  epsilon: epsilon$1,
  epsiv: epsiv$1,
  eqcirc: eqcirc$1,
  eqcolon: eqcolon$1,
  eqsim: eqsim$1,
  eqslantgtr: eqslantgtr$1,
  eqslantless: eqslantless$1,
  Equal: Equal$1,
  equals: equals$1,
  EqualTilde: EqualTilde$1,
  equest: equest$1,
  Equilibrium: Equilibrium$1,
  equiv: equiv$1,
  equivDD: equivDD$1,
  eqvparsl: eqvparsl$1,
  erarr: erarr$1,
  erDot: erDot$1,
  escr: escr$1,
  Escr: Escr$1,
  esdot: esdot$1,
  Esim: Esim$1,
  esim: esim$1,
  Eta: Eta$1,
  eta: eta$1,
  ETH: ETH$2,
  eth: eth$2,
  Euml: Euml$2,
  euml: euml$2,
  euro: euro$2,
  excl: excl$1,
  exist: exist$1,
  Exists: Exists$1,
  expectation: expectation$1,
  exponentiale: exponentiale$1,
  ExponentialE: ExponentialE$1,
  fallingdotseq: fallingdotseq$1,
  Fcy: Fcy$1,
  fcy: fcy$1,
  female: female$1,
  ffilig: ffilig$1,
  fflig: fflig$1,
  ffllig: ffllig$1,
  Ffr: Ffr$1,
  ffr: ffr$1,
  filig: filig$1,
  FilledSmallSquare: FilledSmallSquare$1,
  FilledVerySmallSquare: FilledVerySmallSquare$1,
  fjlig: fjlig$1,
  flat: flat$1,
  fllig: fllig$1,
  fltns: fltns$1,
  fnof: fnof$1,
  Fopf: Fopf$1,
  fopf: fopf$1,
  forall: forall$1,
  ForAll: ForAll$1,
  fork: fork$1,
  forkv: forkv$1,
  Fouriertrf: Fouriertrf$1,
  fpartint: fpartint$1,
  frac12: frac12$2,
  frac13: frac13$1,
  frac14: frac14$2,
  frac15: frac15$1,
  frac16: frac16$1,
  frac18: frac18$1,
  frac23: frac23$1,
  frac25: frac25$1,
  frac34: frac34$2,
  frac35: frac35$1,
  frac38: frac38$1,
  frac45: frac45$1,
  frac56: frac56$1,
  frac58: frac58$1,
  frac78: frac78$1,
  frasl: frasl$1,
  frown: frown$1,
  fscr: fscr$1,
  Fscr: Fscr$1,
  gacute: gacute$1,
  Gamma: Gamma$1,
  gamma: gamma$1,
  Gammad: Gammad$1,
  gammad: gammad$1,
  gap: gap$1,
  Gbreve: Gbreve$1,
  gbreve: gbreve$1,
  Gcedil: Gcedil$1,
  Gcirc: Gcirc$1,
  gcirc: gcirc$1,
  Gcy: Gcy$1,
  gcy: gcy$1,
  Gdot: Gdot$1,
  gdot: gdot$1,
  ge: ge$1,
  gE: gE$1,
  gEl: gEl$1,
  gel: gel$1,
  geq: geq$1,
  geqq: geqq$1,
  geqslant: geqslant$1,
  gescc: gescc$1,
  ges: ges$1,
  gesdot: gesdot$1,
  gesdoto: gesdoto$1,
  gesdotol: gesdotol$1,
  gesl: gesl$1,
  gesles: gesles$1,
  Gfr: Gfr$1,
  gfr: gfr$1,
  gg: gg$1,
  Gg: Gg$1,
  ggg: ggg$1,
  gimel: gimel$1,
  GJcy: GJcy$1,
  gjcy: gjcy$1,
  gla: gla$1,
  gl: gl$1,
  glE: glE$1,
  glj: glj$1,
  gnap: gnap$1,
  gnapprox: gnapprox$1,
  gne: gne$1,
  gnE: gnE$1,
  gneq: gneq$1,
  gneqq: gneqq$1,
  gnsim: gnsim$1,
  Gopf: Gopf$1,
  gopf: gopf$1,
  grave: grave$1,
  GreaterEqual: GreaterEqual$1,
  GreaterEqualLess: GreaterEqualLess$1,
  GreaterFullEqual: GreaterFullEqual$1,
  GreaterGreater: GreaterGreater$1,
  GreaterLess: GreaterLess$1,
  GreaterSlantEqual: GreaterSlantEqual$1,
  GreaterTilde: GreaterTilde$1,
  Gscr: Gscr$1,
  gscr: gscr$1,
  gsim: gsim$1,
  gsime: gsime$1,
  gsiml: gsiml$1,
  gtcc: gtcc$1,
  gtcir: gtcir$1,
  gt: gt$3,
  GT: GT$2,
  Gt: Gt$1,
  gtdot: gtdot$1,
  gtlPar: gtlPar$1,
  gtquest: gtquest$1,
  gtrapprox: gtrapprox$1,
  gtrarr: gtrarr$1,
  gtrdot: gtrdot$1,
  gtreqless: gtreqless$1,
  gtreqqless: gtreqqless$1,
  gtrless: gtrless$1,
  gtrsim: gtrsim$1,
  gvertneqq: gvertneqq$1,
  gvnE: gvnE$1,
  Hacek: Hacek$1,
  hairsp: hairsp$1,
  half: half$1,
  hamilt: hamilt$1,
  HARDcy: HARDcy$1,
  hardcy: hardcy$1,
  harrcir: harrcir$1,
  harr: harr$1,
  hArr: hArr$1,
  harrw: harrw$1,
  Hat: Hat$1,
  hbar: hbar$1,
  Hcirc: Hcirc$1,
  hcirc: hcirc$1,
  hearts: hearts$2,
  heartsuit: heartsuit$1,
  hellip: hellip$1,
  hercon: hercon$1,
  hfr: hfr$1,
  Hfr: Hfr$1,
  HilbertSpace: HilbertSpace$1,
  hksearow: hksearow$1,
  hkswarow: hkswarow$1,
  hoarr: hoarr$1,
  homtht: homtht$1,
  hookleftarrow: hookleftarrow$1,
  hookrightarrow: hookrightarrow$1,
  hopf: hopf$1,
  Hopf: Hopf$1,
  horbar: horbar$1,
  HorizontalLine: HorizontalLine$1,
  hscr: hscr$1,
  Hscr: Hscr$1,
  hslash: hslash$1,
  Hstrok: Hstrok$1,
  hstrok: hstrok$1,
  HumpDownHump: HumpDownHump$1,
  HumpEqual: HumpEqual$1,
  hybull: hybull$1,
  hyphen: hyphen$1,
  Iacute: Iacute$2,
  iacute: iacute$2,
  ic: ic$1,
  Icirc: Icirc$2,
  icirc: icirc$2,
  Icy: Icy$1,
  icy: icy$1,
  Idot: Idot$1,
  IEcy: IEcy$1,
  iecy: iecy$1,
  iexcl: iexcl$2,
  iff: iff$1,
  ifr: ifr$1,
  Ifr: Ifr$1,
  Igrave: Igrave$2,
  igrave: igrave$2,
  ii: ii$1,
  iiiint: iiiint$1,
  iiint: iiint$1,
  iinfin: iinfin$1,
  iiota: iiota$1,
  IJlig: IJlig$1,
  ijlig: ijlig$1,
  Imacr: Imacr$1,
  imacr: imacr$1,
  image: image$2,
  ImaginaryI: ImaginaryI$1,
  imagline: imagline$1,
  imagpart: imagpart$1,
  imath: imath$1,
  Im: Im$1,
  imof: imof$1,
  imped: imped$1,
  Implies: Implies$1,
  incare: incare$1,
  "in": "\u2208",
  infin: infin$1,
  infintie: infintie$1,
  inodot: inodot$1,
  intcal: intcal$1,
  int: int$1,
  Int: Int$1,
  integers: integers$1,
  Integral: Integral$1,
  intercal: intercal$1,
  Intersection: Intersection$1,
  intlarhk: intlarhk$1,
  intprod: intprod$1,
  InvisibleComma: InvisibleComma$1,
  InvisibleTimes: InvisibleTimes$1,
  IOcy: IOcy$1,
  iocy: iocy$1,
  Iogon: Iogon$1,
  iogon: iogon$1,
  Iopf: Iopf$1,
  iopf: iopf$1,
  Iota: Iota$1,
  iota: iota$1,
  iprod: iprod$1,
  iquest: iquest$2,
  iscr: iscr$1,
  Iscr: Iscr$1,
  isin: isin$1,
  isindot: isindot$1,
  isinE: isinE$1,
  isins: isins$1,
  isinsv: isinsv$1,
  isinv: isinv$1,
  it: it$2,
  Itilde: Itilde$1,
  itilde: itilde$1,
  Iukcy: Iukcy$1,
  iukcy: iukcy$1,
  Iuml: Iuml$2,
  iuml: iuml$2,
  Jcirc: Jcirc$1,
  jcirc: jcirc$1,
  Jcy: Jcy$1,
  jcy: jcy$1,
  Jfr: Jfr$1,
  jfr: jfr$1,
  jmath: jmath$1,
  Jopf: Jopf$1,
  jopf: jopf$1,
  Jscr: Jscr$1,
  jscr: jscr$1,
  Jsercy: Jsercy$1,
  jsercy: jsercy$1,
  Jukcy: Jukcy$1,
  jukcy: jukcy$1,
  Kappa: Kappa$1,
  kappa: kappa$1,
  kappav: kappav$1,
  Kcedil: Kcedil$1,
  kcedil: kcedil$1,
  Kcy: Kcy$1,
  kcy: kcy$1,
  Kfr: Kfr$1,
  kfr: kfr$1,
  kgreen: kgreen$1,
  KHcy: KHcy$1,
  khcy: khcy$1,
  KJcy: KJcy$1,
  kjcy: kjcy$1,
  Kopf: Kopf$1,
  kopf: kopf$1,
  Kscr: Kscr$1,
  kscr: kscr$1,
  lAarr: lAarr$1,
  Lacute: Lacute$1,
  lacute: lacute$1,
  laemptyv: laemptyv$1,
  lagran: lagran$1,
  Lambda: Lambda$1,
  lambda: lambda$1,
  lang: lang$1,
  Lang: Lang$1,
  langd: langd$1,
  langle: langle$1,
  lap: lap$1,
  Laplacetrf: Laplacetrf$1,
  laquo: laquo$2,
  larrb: larrb$1,
  larrbfs: larrbfs$1,
  larr: larr$1,
  Larr: Larr$1,
  lArr: lArr$1,
  larrfs: larrfs$1,
  larrhk: larrhk$1,
  larrlp: larrlp$1,
  larrpl: larrpl$1,
  larrsim: larrsim$1,
  larrtl: larrtl$1,
  latail: latail$1,
  lAtail: lAtail$1,
  lat: lat$1,
  late: late$1,
  lates: lates$1,
  lbarr: lbarr$1,
  lBarr: lBarr$1,
  lbbrk: lbbrk$1,
  lbrace: lbrace$1,
  lbrack: lbrack$1,
  lbrke: lbrke$1,
  lbrksld: lbrksld$1,
  lbrkslu: lbrkslu$1,
  Lcaron: Lcaron$1,
  lcaron: lcaron$1,
  Lcedil: Lcedil$1,
  lcedil: lcedil$1,
  lceil: lceil$1,
  lcub: lcub$1,
  Lcy: Lcy$1,
  lcy: lcy$1,
  ldca: ldca$1,
  ldquo: ldquo$1,
  ldquor: ldquor$1,
  ldrdhar: ldrdhar$1,
  ldrushar: ldrushar$1,
  ldsh: ldsh$1,
  le: le$1,
  lE: lE$1,
  LeftAngleBracket: LeftAngleBracket$1,
  LeftArrowBar: LeftArrowBar$1,
  leftarrow: leftarrow$1,
  LeftArrow: LeftArrow$1,
  Leftarrow: Leftarrow$1,
  LeftArrowRightArrow: LeftArrowRightArrow$1,
  leftarrowtail: leftarrowtail$1,
  LeftCeiling: LeftCeiling$1,
  LeftDoubleBracket: LeftDoubleBracket$1,
  LeftDownTeeVector: LeftDownTeeVector$1,
  LeftDownVectorBar: LeftDownVectorBar$1,
  LeftDownVector: LeftDownVector$1,
  LeftFloor: LeftFloor$1,
  leftharpoondown: leftharpoondown$1,
  leftharpoonup: leftharpoonup$1,
  leftleftarrows: leftleftarrows$1,
  leftrightarrow: leftrightarrow$1,
  LeftRightArrow: LeftRightArrow$1,
  Leftrightarrow: Leftrightarrow$1,
  leftrightarrows: leftrightarrows$1,
  leftrightharpoons: leftrightharpoons$1,
  leftrightsquigarrow: leftrightsquigarrow$1,
  LeftRightVector: LeftRightVector$1,
  LeftTeeArrow: LeftTeeArrow$1,
  LeftTee: LeftTee$1,
  LeftTeeVector: LeftTeeVector$1,
  leftthreetimes: leftthreetimes$1,
  LeftTriangleBar: LeftTriangleBar$1,
  LeftTriangle: LeftTriangle$1,
  LeftTriangleEqual: LeftTriangleEqual$1,
  LeftUpDownVector: LeftUpDownVector$1,
  LeftUpTeeVector: LeftUpTeeVector$1,
  LeftUpVectorBar: LeftUpVectorBar$1,
  LeftUpVector: LeftUpVector$1,
  LeftVectorBar: LeftVectorBar$1,
  LeftVector: LeftVector$1,
  lEg: lEg$1,
  leg: leg$2,
  leq: leq$1,
  leqq: leqq$1,
  leqslant: leqslant$1,
  lescc: lescc$1,
  les: les$1,
  lesdot: lesdot$1,
  lesdoto: lesdoto$1,
  lesdotor: lesdotor$1,
  lesg: lesg$1,
  lesges: lesges$1,
  lessapprox: lessapprox$1,
  lessdot: lessdot$1,
  lesseqgtr: lesseqgtr$1,
  lesseqqgtr: lesseqqgtr$1,
  LessEqualGreater: LessEqualGreater$1,
  LessFullEqual: LessFullEqual$1,
  LessGreater: LessGreater$1,
  lessgtr: lessgtr$1,
  LessLess: LessLess$1,
  lesssim: lesssim$1,
  LessSlantEqual: LessSlantEqual$1,
  LessTilde: LessTilde$1,
  lfisht: lfisht$1,
  lfloor: lfloor$1,
  Lfr: Lfr$1,
  lfr: lfr$1,
  lg: lg$1,
  lgE: lgE$1,
  lHar: lHar$1,
  lhard: lhard$1,
  lharu: lharu$1,
  lharul: lharul$1,
  lhblk: lhblk$1,
  LJcy: LJcy$1,
  ljcy: ljcy$1,
  llarr: llarr$1,
  ll: ll$1,
  Ll: Ll$1,
  llcorner: llcorner$1,
  Lleftarrow: Lleftarrow$1,
  llhard: llhard$1,
  lltri: lltri$1,
  Lmidot: Lmidot$1,
  lmidot: lmidot$1,
  lmoustache: lmoustache$1,
  lmoust: lmoust$1,
  lnap: lnap$1,
  lnapprox: lnapprox$1,
  lne: lne$1,
  lnE: lnE$1,
  lneq: lneq$1,
  lneqq: lneqq$1,
  lnsim: lnsim$1,
  loang: loang$1,
  loarr: loarr$1,
  lobrk: lobrk$1,
  longleftarrow: longleftarrow$1,
  LongLeftArrow: LongLeftArrow$1,
  Longleftarrow: Longleftarrow$1,
  longleftrightarrow: longleftrightarrow$1,
  LongLeftRightArrow: LongLeftRightArrow$1,
  Longleftrightarrow: Longleftrightarrow$1,
  longmapsto: longmapsto$1,
  longrightarrow: longrightarrow$1,
  LongRightArrow: LongRightArrow$1,
  Longrightarrow: Longrightarrow$1,
  looparrowleft: looparrowleft$1,
  looparrowright: looparrowright$1,
  lopar: lopar$1,
  Lopf: Lopf$1,
  lopf: lopf$1,
  loplus: loplus$1,
  lotimes: lotimes$1,
  lowast: lowast$1,
  lowbar: lowbar$1,
  LowerLeftArrow: LowerLeftArrow$1,
  LowerRightArrow: LowerRightArrow$1,
  loz: loz$1,
  lozenge: lozenge$1,
  lozf: lozf$1,
  lpar: lpar$1,
  lparlt: lparlt$1,
  lrarr: lrarr$1,
  lrcorner: lrcorner$1,
  lrhar: lrhar$1,
  lrhard: lrhard$1,
  lrm: lrm$1,
  lrtri: lrtri$1,
  lsaquo: lsaquo$1,
  lscr: lscr$1,
  Lscr: Lscr$1,
  lsh: lsh$1,
  Lsh: Lsh$1,
  lsim: lsim$1,
  lsime: lsime$1,
  lsimg: lsimg$1,
  lsqb: lsqb$1,
  lsquo: lsquo$1,
  lsquor: lsquor$1,
  Lstrok: Lstrok$1,
  lstrok: lstrok$1,
  ltcc: ltcc$1,
  ltcir: ltcir$1,
  lt: lt$3,
  LT: LT$2,
  Lt: Lt$1,
  ltdot: ltdot$1,
  lthree: lthree$1,
  ltimes: ltimes$1,
  ltlarr: ltlarr$1,
  ltquest: ltquest$1,
  ltri: ltri$1,
  ltrie: ltrie$1,
  ltrif: ltrif$1,
  ltrPar: ltrPar$1,
  lurdshar: lurdshar$1,
  luruhar: luruhar$1,
  lvertneqq: lvertneqq$1,
  lvnE: lvnE$1,
  macr: macr$2,
  male: male$1,
  malt: malt$1,
  maltese: maltese$1,
  "Map": "\u2905",
  map: map$2,
  mapsto: mapsto$1,
  mapstodown: mapstodown$1,
  mapstoleft: mapstoleft$1,
  mapstoup: mapstoup$1,
  marker: marker$1,
  mcomma: mcomma$1,
  Mcy: Mcy$1,
  mcy: mcy$1,
  mdash: mdash$1,
  mDDot: mDDot$1,
  measuredangle: measuredangle$1,
  MediumSpace: MediumSpace$1,
  Mellintrf: Mellintrf$1,
  Mfr: Mfr$1,
  mfr: mfr$1,
  mho: mho$1,
  micro: micro$2,
  midast: midast$1,
  midcir: midcir$1,
  mid: mid$1,
  middot: middot$2,
  minusb: minusb$1,
  minus: minus$1,
  minusd: minusd$1,
  minusdu: minusdu$1,
  MinusPlus: MinusPlus$1,
  mlcp: mlcp$1,
  mldr: mldr$1,
  mnplus: mnplus$1,
  models: models$1,
  Mopf: Mopf$1,
  mopf: mopf$1,
  mp: mp$1,
  mscr: mscr$1,
  Mscr: Mscr$1,
  mstpos: mstpos$1,
  Mu: Mu$1,
  mu: mu$1,
  multimap: multimap$1,
  mumap: mumap$1,
  nabla: nabla$1,
  Nacute: Nacute$1,
  nacute: nacute$1,
  nang: nang$1,
  nap: nap$1,
  napE: napE$1,
  napid: napid$1,
  napos: napos$1,
  napprox: napprox$1,
  natural: natural$1,
  naturals: naturals$1,
  natur: natur$1,
  nbsp: nbsp$2,
  nbump: nbump$1,
  nbumpe: nbumpe$1,
  ncap: ncap$1,
  Ncaron: Ncaron$1,
  ncaron: ncaron$1,
  Ncedil: Ncedil$1,
  ncedil: ncedil$1,
  ncong: ncong$1,
  ncongdot: ncongdot$1,
  ncup: ncup$1,
  Ncy: Ncy$1,
  ncy: ncy$1,
  ndash: ndash$1,
  nearhk: nearhk$1,
  nearr: nearr$1,
  neArr: neArr$1,
  nearrow: nearrow$1,
  ne: ne$1,
  nedot: nedot$1,
  NegativeMediumSpace: NegativeMediumSpace$1,
  NegativeThickSpace: NegativeThickSpace$1,
  NegativeThinSpace: NegativeThinSpace$1,
  NegativeVeryThinSpace: NegativeVeryThinSpace$1,
  nequiv: nequiv$1,
  nesear: nesear$1,
  nesim: nesim$1,
  NestedGreaterGreater: NestedGreaterGreater$1,
  NestedLessLess: NestedLessLess$1,
  NewLine: NewLine$1,
  nexist: nexist$1,
  nexists: nexists$1,
  Nfr: Nfr$1,
  nfr: nfr$1,
  ngE: ngE$1,
  nge: nge$1,
  ngeq: ngeq$1,
  ngeqq: ngeqq$1,
  ngeqslant: ngeqslant$1,
  nges: nges$1,
  nGg: nGg$1,
  ngsim: ngsim$1,
  nGt: nGt$1,
  ngt: ngt$1,
  ngtr: ngtr$1,
  nGtv: nGtv$1,
  nharr: nharr$1,
  nhArr: nhArr$1,
  nhpar: nhpar$1,
  ni: ni$1,
  nis: nis$1,
  nisd: nisd$1,
  niv: niv$1,
  NJcy: NJcy$1,
  njcy: njcy$1,
  nlarr: nlarr$1,
  nlArr: nlArr$1,
  nldr: nldr$1,
  nlE: nlE$1,
  nle: nle$1,
  nleftarrow: nleftarrow$1,
  nLeftarrow: nLeftarrow$1,
  nleftrightarrow: nleftrightarrow$1,
  nLeftrightarrow: nLeftrightarrow$1,
  nleq: nleq$1,
  nleqq: nleqq$1,
  nleqslant: nleqslant$1,
  nles: nles$1,
  nless: nless$1,
  nLl: nLl$1,
  nlsim: nlsim$1,
  nLt: nLt$1,
  nlt: nlt$1,
  nltri: nltri$1,
  nltrie: nltrie$1,
  nLtv: nLtv$1,
  nmid: nmid$1,
  NoBreak: NoBreak$1,
  NonBreakingSpace: NonBreakingSpace$1,
  nopf: nopf$1,
  Nopf: Nopf$1,
  Not: Not$1,
  not: not$2,
  NotCongruent: NotCongruent$1,
  NotCupCap: NotCupCap$1,
  NotDoubleVerticalBar: NotDoubleVerticalBar$1,
  NotElement: NotElement$1,
  NotEqual: NotEqual$1,
  NotEqualTilde: NotEqualTilde$1,
  NotExists: NotExists$1,
  NotGreater: NotGreater$1,
  NotGreaterEqual: NotGreaterEqual$1,
  NotGreaterFullEqual: NotGreaterFullEqual$1,
  NotGreaterGreater: NotGreaterGreater$1,
  NotGreaterLess: NotGreaterLess$1,
  NotGreaterSlantEqual: NotGreaterSlantEqual$1,
  NotGreaterTilde: NotGreaterTilde$1,
  NotHumpDownHump: NotHumpDownHump$1,
  NotHumpEqual: NotHumpEqual$1,
  notin: notin$1,
  notindot: notindot$1,
  notinE: notinE$1,
  notinva: notinva$1,
  notinvb: notinvb$1,
  notinvc: notinvc$1,
  NotLeftTriangleBar: NotLeftTriangleBar$1,
  NotLeftTriangle: NotLeftTriangle$1,
  NotLeftTriangleEqual: NotLeftTriangleEqual$1,
  NotLess: NotLess$1,
  NotLessEqual: NotLessEqual$1,
  NotLessGreater: NotLessGreater$1,
  NotLessLess: NotLessLess$1,
  NotLessSlantEqual: NotLessSlantEqual$1,
  NotLessTilde: NotLessTilde$1,
  NotNestedGreaterGreater: NotNestedGreaterGreater$1,
  NotNestedLessLess: NotNestedLessLess$1,
  notni: notni$1,
  notniva: notniva$1,
  notnivb: notnivb$1,
  notnivc: notnivc$1,
  NotPrecedes: NotPrecedes$1,
  NotPrecedesEqual: NotPrecedesEqual$1,
  NotPrecedesSlantEqual: NotPrecedesSlantEqual$1,
  NotReverseElement: NotReverseElement$1,
  NotRightTriangleBar: NotRightTriangleBar$1,
  NotRightTriangle: NotRightTriangle$1,
  NotRightTriangleEqual: NotRightTriangleEqual$1,
  NotSquareSubset: NotSquareSubset$1,
  NotSquareSubsetEqual: NotSquareSubsetEqual$1,
  NotSquareSuperset: NotSquareSuperset$1,
  NotSquareSupersetEqual: NotSquareSupersetEqual$1,
  NotSubset: NotSubset$1,
  NotSubsetEqual: NotSubsetEqual$1,
  NotSucceeds: NotSucceeds$1,
  NotSucceedsEqual: NotSucceedsEqual$1,
  NotSucceedsSlantEqual: NotSucceedsSlantEqual$1,
  NotSucceedsTilde: NotSucceedsTilde$1,
  NotSuperset: NotSuperset$1,
  NotSupersetEqual: NotSupersetEqual$1,
  NotTilde: NotTilde$1,
  NotTildeEqual: NotTildeEqual$1,
  NotTildeFullEqual: NotTildeFullEqual$1,
  NotTildeTilde: NotTildeTilde$1,
  NotVerticalBar: NotVerticalBar$1,
  nparallel: nparallel$1,
  npar: npar$1,
  nparsl: nparsl$1,
  npart: npart$1,
  npolint: npolint$1,
  npr: npr$1,
  nprcue: nprcue$1,
  nprec: nprec$1,
  npreceq: npreceq$1,
  npre: npre$1,
  nrarrc: nrarrc$1,
  nrarr: nrarr$1,
  nrArr: nrArr$1,
  nrarrw: nrarrw$1,
  nrightarrow: nrightarrow$1,
  nRightarrow: nRightarrow$1,
  nrtri: nrtri$1,
  nrtrie: nrtrie$1,
  nsc: nsc$1,
  nsccue: nsccue$1,
  nsce: nsce$1,
  Nscr: Nscr$1,
  nscr: nscr$1,
  nshortmid: nshortmid$1,
  nshortparallel: nshortparallel$1,
  nsim: nsim$1,
  nsime: nsime$1,
  nsimeq: nsimeq$1,
  nsmid: nsmid$1,
  nspar: nspar$1,
  nsqsube: nsqsube$1,
  nsqsupe: nsqsupe$1,
  nsub: nsub$1,
  nsubE: nsubE$1,
  nsube: nsube$1,
  nsubset: nsubset$1,
  nsubseteq: nsubseteq$1,
  nsubseteqq: nsubseteqq$1,
  nsucc: nsucc$1,
  nsucceq: nsucceq$1,
  nsup: nsup$1,
  nsupE: nsupE$1,
  nsupe: nsupe$1,
  nsupset: nsupset$1,
  nsupseteq: nsupseteq$1,
  nsupseteqq: nsupseteqq$1,
  ntgl: ntgl$1,
  Ntilde: Ntilde$2,
  ntilde: ntilde$2,
  ntlg: ntlg$1,
  ntriangleleft: ntriangleleft$1,
  ntrianglelefteq: ntrianglelefteq$1,
  ntriangleright: ntriangleright$1,
  ntrianglerighteq: ntrianglerighteq$1,
  Nu: Nu$1,
  nu: nu$1,
  num: num$1,
  numero: numero$1,
  numsp: numsp$1,
  nvap: nvap$1,
  nvdash: nvdash$1,
  nvDash: nvDash$1,
  nVdash: nVdash$1,
  nVDash: nVDash$1,
  nvge: nvge$1,
  nvgt: nvgt$1,
  nvHarr: nvHarr$1,
  nvinfin: nvinfin$1,
  nvlArr: nvlArr$1,
  nvle: nvle$1,
  nvlt: nvlt$1,
  nvltrie: nvltrie$1,
  nvrArr: nvrArr$1,
  nvrtrie: nvrtrie$1,
  nvsim: nvsim$1,
  nwarhk: nwarhk$1,
  nwarr: nwarr$1,
  nwArr: nwArr$1,
  nwarrow: nwarrow$1,
  nwnear: nwnear$1,
  Oacute: Oacute$2,
  oacute: oacute$2,
  oast: oast$1,
  Ocirc: Ocirc$2,
  ocirc: ocirc$2,
  ocir: ocir$1,
  Ocy: Ocy$1,
  ocy: ocy$1,
  odash: odash$1,
  Odblac: Odblac$1,
  odblac: odblac$1,
  odiv: odiv$1,
  odot: odot$1,
  odsold: odsold$1,
  OElig: OElig$1,
  oelig: oelig$1,
  ofcir: ofcir$1,
  Ofr: Ofr$1,
  ofr: ofr$1,
  ogon: ogon$1,
  Ograve: Ograve$2,
  ograve: ograve$2,
  ogt: ogt$1,
  ohbar: ohbar$1,
  ohm: ohm$1,
  oint: oint$1,
  olarr: olarr$1,
  olcir: olcir$1,
  olcross: olcross$1,
  oline: oline$1,
  olt: olt$1,
  Omacr: Omacr$1,
  omacr: omacr$1,
  Omega: Omega$1,
  omega: omega$1,
  Omicron: Omicron$1,
  omicron: omicron$1,
  omid: omid$1,
  ominus: ominus$1,
  Oopf: Oopf$1,
  oopf: oopf$1,
  opar: opar$1,
  OpenCurlyDoubleQuote: OpenCurlyDoubleQuote$1,
  OpenCurlyQuote: OpenCurlyQuote$1,
  operp: operp$1,
  oplus: oplus$1,
  orarr: orarr$1,
  Or: Or$1,
  or: or$1,
  ord: ord$1,
  order: order$1,
  orderof: orderof$1,
  ordf: ordf$2,
  ordm: ordm$2,
  origof: origof$1,
  oror: oror$1,
  orslope: orslope$1,
  orv: orv$1,
  oS: oS$1,
  Oscr: Oscr$1,
  oscr: oscr$1,
  Oslash: Oslash$2,
  oslash: oslash$2,
  osol: osol$1,
  Otilde: Otilde$2,
  otilde: otilde$2,
  otimesas: otimesas$1,
  Otimes: Otimes$1,
  otimes: otimes$1,
  Ouml: Ouml$2,
  ouml: ouml$2,
  ovbar: ovbar$1,
  OverBar: OverBar$1,
  OverBrace: OverBrace$1,
  OverBracket: OverBracket$1,
  OverParenthesis: OverParenthesis$1,
  para: para$2,
  parallel: parallel$1,
  par: par$1,
  parsim: parsim$1,
  parsl: parsl$1,
  part: part$1,
  PartialD: PartialD$1,
  Pcy: Pcy$1,
  pcy: pcy$1,
  percnt: percnt$1,
  period: period$1,
  permil: permil$1,
  perp: perp$1,
  pertenk: pertenk$1,
  Pfr: Pfr$1,
  pfr: pfr$1,
  Phi: Phi$1,
  phi: phi$1,
  phiv: phiv$1,
  phmmat: phmmat$1,
  phone: phone$2,
  Pi: Pi$1,
  pi: pi$1,
  pitchfork: pitchfork$1,
  piv: piv$1,
  planck: planck$1,
  planckh: planckh$1,
  plankv: plankv$1,
  plusacir: plusacir$1,
  plusb: plusb$1,
  pluscir: pluscir$1,
  plus: plus$1,
  plusdo: plusdo$1,
  plusdu: plusdu$1,
  pluse: pluse$1,
  PlusMinus: PlusMinus$1,
  plusmn: plusmn$2,
  plussim: plussim$1,
  plustwo: plustwo$1,
  pm: pm$1,
  Poincareplane: Poincareplane$1,
  pointint: pointint$1,
  popf: popf$1,
  Popf: Popf$1,
  pound: pound$3,
  prap: prap$1,
  Pr: Pr$1,
  pr: pr$1,
  prcue: prcue$1,
  precapprox: precapprox$1,
  prec: prec$1,
  preccurlyeq: preccurlyeq$1,
  Precedes: Precedes$1,
  PrecedesEqual: PrecedesEqual$1,
  PrecedesSlantEqual: PrecedesSlantEqual$1,
  PrecedesTilde: PrecedesTilde$1,
  preceq: preceq$1,
  precnapprox: precnapprox$1,
  precneqq: precneqq$1,
  precnsim: precnsim$1,
  pre: pre$1,
  prE: prE$1,
  precsim: precsim$1,
  prime: prime$1,
  Prime: Prime$1,
  primes: primes$1,
  prnap: prnap$1,
  prnE: prnE$1,
  prnsim: prnsim$1,
  prod: prod$1,
  Product: Product$1,
  profalar: profalar$1,
  profline: profline$1,
  profsurf: profsurf$1,
  prop: prop$1,
  Proportional: Proportional$1,
  Proportion: Proportion$1,
  propto: propto$1,
  prsim: prsim$1,
  prurel: prurel$1,
  Pscr: Pscr$1,
  pscr: pscr$1,
  Psi: Psi$1,
  psi: psi$1,
  puncsp: puncsp$1,
  Qfr: Qfr$1,
  qfr: qfr$1,
  qint: qint$1,
  qopf: qopf$1,
  Qopf: Qopf$1,
  qprime: qprime$1,
  Qscr: Qscr$1,
  qscr: qscr$1,
  quaternions: quaternions$1,
  quatint: quatint$1,
  quest: quest$1,
  questeq: questeq$1,
  quot: quot$3,
  QUOT: QUOT$2,
  rAarr: rAarr$1,
  race: race$1,
  Racute: Racute$1,
  racute: racute$1,
  radic: radic$1,
  raemptyv: raemptyv$1,
  rang: rang$1,
  Rang: Rang$1,
  rangd: rangd$1,
  range: range$2,
  rangle: rangle$1,
  raquo: raquo$2,
  rarrap: rarrap$1,
  rarrb: rarrb$1,
  rarrbfs: rarrbfs$1,
  rarrc: rarrc$1,
  rarr: rarr$1,
  Rarr: Rarr$1,
  rArr: rArr$1,
  rarrfs: rarrfs$1,
  rarrhk: rarrhk$1,
  rarrlp: rarrlp$1,
  rarrpl: rarrpl$1,
  rarrsim: rarrsim$1,
  Rarrtl: Rarrtl$1,
  rarrtl: rarrtl$1,
  rarrw: rarrw$1,
  ratail: ratail$1,
  rAtail: rAtail$1,
  ratio: ratio$1,
  rationals: rationals$1,
  rbarr: rbarr$1,
  rBarr: rBarr$1,
  RBarr: RBarr$1,
  rbbrk: rbbrk$1,
  rbrace: rbrace$1,
  rbrack: rbrack$1,
  rbrke: rbrke$1,
  rbrksld: rbrksld$1,
  rbrkslu: rbrkslu$1,
  Rcaron: Rcaron$1,
  rcaron: rcaron$1,
  Rcedil: Rcedil$1,
  rcedil: rcedil$1,
  rceil: rceil$1,
  rcub: rcub$1,
  Rcy: Rcy$1,
  rcy: rcy$1,
  rdca: rdca$1,
  rdldhar: rdldhar$1,
  rdquo: rdquo$1,
  rdquor: rdquor$1,
  rdsh: rdsh$1,
  real: real$1,
  realine: realine$1,
  realpart: realpart$1,
  reals: reals$1,
  Re: Re$1,
  rect: rect$1,
  reg: reg$2,
  REG: REG$2,
  ReverseElement: ReverseElement$1,
  ReverseEquilibrium: ReverseEquilibrium$1,
  ReverseUpEquilibrium: ReverseUpEquilibrium$1,
  rfisht: rfisht$1,
  rfloor: rfloor$1,
  rfr: rfr$1,
  Rfr: Rfr$1,
  rHar: rHar$1,
  rhard: rhard$1,
  rharu: rharu$1,
  rharul: rharul$1,
  Rho: Rho$1,
  rho: rho$1,
  rhov: rhov$1,
  RightAngleBracket: RightAngleBracket$1,
  RightArrowBar: RightArrowBar$1,
  rightarrow: rightarrow$1,
  RightArrow: RightArrow$1,
  Rightarrow: Rightarrow$1,
  RightArrowLeftArrow: RightArrowLeftArrow$1,
  rightarrowtail: rightarrowtail$1,
  RightCeiling: RightCeiling$1,
  RightDoubleBracket: RightDoubleBracket$1,
  RightDownTeeVector: RightDownTeeVector$1,
  RightDownVectorBar: RightDownVectorBar$1,
  RightDownVector: RightDownVector$1,
  RightFloor: RightFloor$1,
  rightharpoondown: rightharpoondown$1,
  rightharpoonup: rightharpoonup$1,
  rightleftarrows: rightleftarrows$1,
  rightleftharpoons: rightleftharpoons$1,
  rightrightarrows: rightrightarrows$1,
  rightsquigarrow: rightsquigarrow$1,
  RightTeeArrow: RightTeeArrow$1,
  RightTee: RightTee$1,
  RightTeeVector: RightTeeVector$1,
  rightthreetimes: rightthreetimes$1,
  RightTriangleBar: RightTriangleBar$1,
  RightTriangle: RightTriangle$1,
  RightTriangleEqual: RightTriangleEqual$1,
  RightUpDownVector: RightUpDownVector$1,
  RightUpTeeVector: RightUpTeeVector$1,
  RightUpVectorBar: RightUpVectorBar$1,
  RightUpVector: RightUpVector$1,
  RightVectorBar: RightVectorBar$1,
  RightVector: RightVector$1,
  ring: ring$2,
  risingdotseq: risingdotseq$1,
  rlarr: rlarr$1,
  rlhar: rlhar$1,
  rlm: rlm$1,
  rmoustache: rmoustache$1,
  rmoust: rmoust$1,
  rnmid: rnmid$1,
  roang: roang$1,
  roarr: roarr$1,
  robrk: robrk$1,
  ropar: ropar$1,
  ropf: ropf$1,
  Ropf: Ropf$1,
  roplus: roplus$1,
  rotimes: rotimes$1,
  RoundImplies: RoundImplies$1,
  rpar: rpar$1,
  rpargt: rpargt$1,
  rppolint: rppolint$1,
  rrarr: rrarr$1,
  Rrightarrow: Rrightarrow$1,
  rsaquo: rsaquo$1,
  rscr: rscr$1,
  Rscr: Rscr$1,
  rsh: rsh$1,
  Rsh: Rsh$1,
  rsqb: rsqb$1,
  rsquo: rsquo$1,
  rsquor: rsquor$1,
  rthree: rthree$1,
  rtimes: rtimes$1,
  rtri: rtri$1,
  rtrie: rtrie$1,
  rtrif: rtrif$1,
  rtriltri: rtriltri$1,
  RuleDelayed: RuleDelayed$1,
  ruluhar: ruluhar$1,
  rx: rx$1,
  Sacute: Sacute$1,
  sacute: sacute$1,
  sbquo: sbquo$1,
  scap: scap$1,
  Scaron: Scaron$1,
  scaron: scaron$1,
  Sc: Sc$1,
  sc: sc$1,
  sccue: sccue$1,
  sce: sce$1,
  scE: scE$1,
  Scedil: Scedil$1,
  scedil: scedil$1,
  Scirc: Scirc$1,
  scirc: scirc$1,
  scnap: scnap$1,
  scnE: scnE$1,
  scnsim: scnsim$1,
  scpolint: scpolint$1,
  scsim: scsim$1,
  Scy: Scy$1,
  scy: scy$1,
  sdotb: sdotb$1,
  sdot: sdot$1,
  sdote: sdote$1,
  searhk: searhk$1,
  searr: searr$1,
  seArr: seArr$1,
  searrow: searrow$1,
  sect: sect$2,
  semi: semi$1,
  seswar: seswar$1,
  setminus: setminus$1,
  setmn: setmn$1,
  sext: sext$1,
  Sfr: Sfr$1,
  sfr: sfr$1,
  sfrown: sfrown$1,
  sharp: sharp$1,
  SHCHcy: SHCHcy$1,
  shchcy: shchcy$1,
  SHcy: SHcy$1,
  shcy: shcy$1,
  ShortDownArrow: ShortDownArrow$1,
  ShortLeftArrow: ShortLeftArrow$1,
  shortmid: shortmid$1,
  shortparallel: shortparallel$1,
  ShortRightArrow: ShortRightArrow$1,
  ShortUpArrow: ShortUpArrow$1,
  shy: shy$2,
  Sigma: Sigma$1,
  sigma: sigma$1,
  sigmaf: sigmaf$1,
  sigmav: sigmav$1,
  sim: sim$1,
  simdot: simdot$1,
  sime: sime$1,
  simeq: simeq$1,
  simg: simg$1,
  simgE: simgE$1,
  siml: siml$1,
  simlE: simlE$1,
  simne: simne$1,
  simplus: simplus$1,
  simrarr: simrarr$1,
  slarr: slarr$1,
  SmallCircle: SmallCircle$1,
  smallsetminus: smallsetminus$1,
  smashp: smashp$1,
  smeparsl: smeparsl$1,
  smid: smid$1,
  smile: smile$2,
  smt: smt$1,
  smte: smte$1,
  smtes: smtes$1,
  SOFTcy: SOFTcy$1,
  softcy: softcy$1,
  solbar: solbar$1,
  solb: solb$1,
  sol: sol$1,
  Sopf: Sopf$1,
  sopf: sopf$1,
  spades: spades$2,
  spadesuit: spadesuit$1,
  spar: spar$1,
  sqcap: sqcap$1,
  sqcaps: sqcaps$1,
  sqcup: sqcup$1,
  sqcups: sqcups$1,
  Sqrt: Sqrt$1,
  sqsub: sqsub$1,
  sqsube: sqsube$1,
  sqsubset: sqsubset$1,
  sqsubseteq: sqsubseteq$1,
  sqsup: sqsup$1,
  sqsupe: sqsupe$1,
  sqsupset: sqsupset$1,
  sqsupseteq: sqsupseteq$1,
  square: square$1,
  Square: Square$1,
  SquareIntersection: SquareIntersection$1,
  SquareSubset: SquareSubset$1,
  SquareSubsetEqual: SquareSubsetEqual$1,
  SquareSuperset: SquareSuperset$1,
  SquareSupersetEqual: SquareSupersetEqual$1,
  SquareUnion: SquareUnion$1,
  squarf: squarf$1,
  squ: squ$1,
  squf: squf$1,
  srarr: srarr$1,
  Sscr: Sscr$1,
  sscr: sscr$1,
  ssetmn: ssetmn$1,
  ssmile: ssmile$1,
  sstarf: sstarf$1,
  Star: Star$1,
  star: star$2,
  starf: starf$1,
  straightepsilon: straightepsilon$1,
  straightphi: straightphi$1,
  strns: strns$1,
  sub: sub$1,
  Sub: Sub$1,
  subdot: subdot$1,
  subE: subE$1,
  sube: sube$1,
  subedot: subedot$1,
  submult: submult$1,
  subnE: subnE$1,
  subne: subne$1,
  subplus: subplus$1,
  subrarr: subrarr$1,
  subset: subset$1,
  Subset: Subset$1,
  subseteq: subseteq$1,
  subseteqq: subseteqq$1,
  SubsetEqual: SubsetEqual$1,
  subsetneq: subsetneq$1,
  subsetneqq: subsetneqq$1,
  subsim: subsim$1,
  subsub: subsub$1,
  subsup: subsup$1,
  succapprox: succapprox$1,
  succ: succ$1,
  succcurlyeq: succcurlyeq$1,
  Succeeds: Succeeds$1,
  SucceedsEqual: SucceedsEqual$1,
  SucceedsSlantEqual: SucceedsSlantEqual$1,
  SucceedsTilde: SucceedsTilde$1,
  succeq: succeq$1,
  succnapprox: succnapprox$1,
  succneqq: succneqq$1,
  succnsim: succnsim$1,
  succsim: succsim$1,
  SuchThat: SuchThat$1,
  sum: sum$1,
  Sum: Sum$1,
  sung: sung$1,
  sup1: sup1$2,
  sup2: sup2$2,
  sup3: sup3$2,
  sup: sup$1,
  Sup: Sup$1,
  supdot: supdot$1,
  supdsub: supdsub$1,
  supE: supE$1,
  supe: supe$1,
  supedot: supedot$1,
  Superset: Superset$1,
  SupersetEqual: SupersetEqual$1,
  suphsol: suphsol$1,
  suphsub: suphsub$1,
  suplarr: suplarr$1,
  supmult: supmult$1,
  supnE: supnE$1,
  supne: supne$1,
  supplus: supplus$1,
  supset: supset$1,
  Supset: Supset$1,
  supseteq: supseteq$1,
  supseteqq: supseteqq$1,
  supsetneq: supsetneq$1,
  supsetneqq: supsetneqq$1,
  supsim: supsim$1,
  supsub: supsub$1,
  supsup: supsup$1,
  swarhk: swarhk$1,
  swarr: swarr$1,
  swArr: swArr$1,
  swarrow: swarrow$1,
  swnwar: swnwar$1,
  szlig: szlig$2,
  Tab: Tab$1,
  target: target$1,
  Tau: Tau$1,
  tau: tau$1,
  tbrk: tbrk$1,
  Tcaron: Tcaron$1,
  tcaron: tcaron$1,
  Tcedil: Tcedil$1,
  tcedil: tcedil$1,
  Tcy: Tcy$1,
  tcy: tcy$1,
  tdot: tdot$1,
  telrec: telrec$1,
  Tfr: Tfr$1,
  tfr: tfr$1,
  there4: there4$1,
  therefore: therefore$1,
  Therefore: Therefore$1,
  Theta: Theta$1,
  theta: theta$1,
  thetasym: thetasym$1,
  thetav: thetav$1,
  thickapprox: thickapprox$1,
  thicksim: thicksim$1,
  ThickSpace: ThickSpace$1,
  ThinSpace: ThinSpace$1,
  thinsp: thinsp$1,
  thkap: thkap$1,
  thksim: thksim$1,
  THORN: THORN$2,
  thorn: thorn$2,
  tilde: tilde$1,
  Tilde: Tilde$1,
  TildeEqual: TildeEqual$1,
  TildeFullEqual: TildeFullEqual$1,
  TildeTilde: TildeTilde$1,
  timesbar: timesbar$1,
  timesb: timesb$1,
  times: times$2,
  timesd: timesd$1,
  tint: tint$1,
  toea: toea$1,
  topbot: topbot$1,
  topcir: topcir$1,
  top: top$3,
  Topf: Topf$1,
  topf: topf$1,
  topfork: topfork$1,
  tosa: tosa$1,
  tprime: tprime$1,
  trade: trade$1,
  TRADE: TRADE$1,
  triangle: triangle$1,
  triangledown: triangledown$1,
  triangleleft: triangleleft$1,
  trianglelefteq: trianglelefteq$1,
  triangleq: triangleq$1,
  triangleright: triangleright$1,
  trianglerighteq: trianglerighteq$1,
  tridot: tridot$1,
  trie: trie$1,
  triminus: triminus$1,
  TripleDot: TripleDot$1,
  triplus: triplus$1,
  trisb: trisb$1,
  tritime: tritime$1,
  trpezium: trpezium$1,
  Tscr: Tscr$1,
  tscr: tscr$1,
  TScy: TScy$1,
  tscy: tscy$1,
  TSHcy: TSHcy$1,
  tshcy: tshcy$1,
  Tstrok: Tstrok$1,
  tstrok: tstrok$1,
  twixt: twixt$1,
  twoheadleftarrow: twoheadleftarrow$1,
  twoheadrightarrow: twoheadrightarrow$1,
  Uacute: Uacute$2,
  uacute: uacute$2,
  uarr: uarr$1,
  Uarr: Uarr$1,
  uArr: uArr$1,
  Uarrocir: Uarrocir$1,
  Ubrcy: Ubrcy$1,
  ubrcy: ubrcy$1,
  Ubreve: Ubreve$1,
  ubreve: ubreve$1,
  Ucirc: Ucirc$2,
  ucirc: ucirc$2,
  Ucy: Ucy$1,
  ucy: ucy$1,
  udarr: udarr$1,
  Udblac: Udblac$1,
  udblac: udblac$1,
  udhar: udhar$1,
  ufisht: ufisht$1,
  Ufr: Ufr$1,
  ufr: ufr$1,
  Ugrave: Ugrave$2,
  ugrave: ugrave$2,
  uHar: uHar$1,
  uharl: uharl$1,
  uharr: uharr$1,
  uhblk: uhblk$1,
  ulcorn: ulcorn$1,
  ulcorner: ulcorner$1,
  ulcrop: ulcrop$1,
  ultri: ultri$1,
  Umacr: Umacr$1,
  umacr: umacr$1,
  uml: uml$2,
  UnderBar: UnderBar$1,
  UnderBrace: UnderBrace$1,
  UnderBracket: UnderBracket$1,
  UnderParenthesis: UnderParenthesis$1,
  Union: Union$1,
  UnionPlus: UnionPlus$1,
  Uogon: Uogon$1,
  uogon: uogon$1,
  Uopf: Uopf$1,
  uopf: uopf$1,
  UpArrowBar: UpArrowBar$1,
  uparrow: uparrow$1,
  UpArrow: UpArrow$1,
  Uparrow: Uparrow$1,
  UpArrowDownArrow: UpArrowDownArrow$1,
  updownarrow: updownarrow$1,
  UpDownArrow: UpDownArrow$1,
  Updownarrow: Updownarrow$1,
  UpEquilibrium: UpEquilibrium$1,
  upharpoonleft: upharpoonleft$1,
  upharpoonright: upharpoonright$1,
  uplus: uplus$1,
  UpperLeftArrow: UpperLeftArrow$1,
  UpperRightArrow: UpperRightArrow$1,
  upsi: upsi$1,
  Upsi: Upsi$1,
  upsih: upsih$1,
  Upsilon: Upsilon$1,
  upsilon: upsilon$1,
  UpTeeArrow: UpTeeArrow$1,
  UpTee: UpTee$1,
  upuparrows: upuparrows$1,
  urcorn: urcorn$1,
  urcorner: urcorner$1,
  urcrop: urcrop$1,
  Uring: Uring$1,
  uring: uring$1,
  urtri: urtri$1,
  Uscr: Uscr$1,
  uscr: uscr$1,
  utdot: utdot$1,
  Utilde: Utilde$1,
  utilde: utilde$1,
  utri: utri$1,
  utrif: utrif$1,
  uuarr: uuarr$1,
  Uuml: Uuml$2,
  uuml: uuml$2,
  uwangle: uwangle$1,
  vangrt: vangrt$1,
  varepsilon: varepsilon$1,
  varkappa: varkappa$1,
  varnothing: varnothing$1,
  varphi: varphi$1,
  varpi: varpi$1,
  varpropto: varpropto$1,
  varr: varr$1,
  vArr: vArr$1,
  varrho: varrho$1,
  varsigma: varsigma$1,
  varsubsetneq: varsubsetneq$1,
  varsubsetneqq: varsubsetneqq$1,
  varsupsetneq: varsupsetneq$1,
  varsupsetneqq: varsupsetneqq$1,
  vartheta: vartheta$1,
  vartriangleleft: vartriangleleft$1,
  vartriangleright: vartriangleright$1,
  vBar: vBar$1,
  Vbar: Vbar$1,
  vBarv: vBarv$1,
  Vcy: Vcy$1,
  vcy: vcy$1,
  vdash: vdash$1,
  vDash: vDash$1,
  Vdash: Vdash$1,
  VDash: VDash$1,
  Vdashl: Vdashl$1,
  veebar: veebar$1,
  vee: vee$1,
  Vee: Vee$1,
  veeeq: veeeq$1,
  vellip: vellip$1,
  verbar: verbar$1,
  Verbar: Verbar$1,
  vert: vert$1,
  Vert: Vert$1,
  VerticalBar: VerticalBar$1,
  VerticalLine: VerticalLine$1,
  VerticalSeparator: VerticalSeparator$1,
  VerticalTilde: VerticalTilde$1,
  VeryThinSpace: VeryThinSpace$1,
  Vfr: Vfr$1,
  vfr: vfr$1,
  vltri: vltri$1,
  vnsub: vnsub$1,
  vnsup: vnsup$1,
  Vopf: Vopf$1,
  vopf: vopf$1,
  vprop: vprop$1,
  vrtri: vrtri$1,
  Vscr: Vscr$1,
  vscr: vscr$1,
  vsubnE: vsubnE$1,
  vsubne: vsubne$1,
  vsupnE: vsupnE$1,
  vsupne: vsupne$1,
  Vvdash: Vvdash$1,
  vzigzag: vzigzag$1,
  Wcirc: Wcirc$1,
  wcirc: wcirc$1,
  wedbar: wedbar$1,
  wedge: wedge$1,
  Wedge: Wedge$1,
  wedgeq: wedgeq$1,
  weierp: weierp$1,
  Wfr: Wfr$1,
  wfr: wfr$1,
  Wopf: Wopf$1,
  wopf: wopf$1,
  wp: wp$1,
  wr: wr$1,
  wreath: wreath$1,
  Wscr: Wscr$1,
  wscr: wscr$1,
  xcap: xcap$1,
  xcirc: xcirc$1,
  xcup: xcup$1,
  xdtri: xdtri$1,
  Xfr: Xfr$1,
  xfr: xfr$1,
  xharr: xharr$1,
  xhArr: xhArr$1,
  Xi: Xi$1,
  xi: xi$1,
  xlarr: xlarr$1,
  xlArr: xlArr$1,
  xmap: xmap$1,
  xnis: xnis$1,
  xodot: xodot$1,
  Xopf: Xopf$1,
  xopf: xopf$1,
  xoplus: xoplus$1,
  xotime: xotime$1,
  xrarr: xrarr$1,
  xrArr: xrArr$1,
  Xscr: Xscr$1,
  xscr: xscr$1,
  xsqcup: xsqcup$1,
  xuplus: xuplus$1,
  xutri: xutri$1,
  xvee: xvee$1,
  xwedge: xwedge$1,
  Yacute: Yacute$2,
  yacute: yacute$2,
  YAcy: YAcy$1,
  yacy: yacy$1,
  Ycirc: Ycirc$1,
  ycirc: ycirc$1,
  Ycy: Ycy$1,
  ycy: ycy$1,
  yen: yen$3,
  Yfr: Yfr$1,
  yfr: yfr$1,
  YIcy: YIcy$1,
  yicy: yicy$1,
  Yopf: Yopf$1,
  yopf: yopf$1,
  Yscr: Yscr$1,
  yscr: yscr$1,
  YUcy: YUcy$1,
  yucy: yucy$1,
  yuml: yuml$2,
  Yuml: Yuml$1,
  Zacute: Zacute$1,
  zacute: zacute$1,
  Zcaron: Zcaron$1,
  zcaron: zcaron$1,
  Zcy: Zcy$1,
  zcy: zcy$1,
  Zdot: Zdot$1,
  zdot: zdot$1,
  zeetrf: zeetrf$1,
  ZeroWidthSpace: ZeroWidthSpace$1,
  Zeta: Zeta$1,
  zeta: zeta$1,
  zfr: zfr$1,
  Zfr: Zfr$1,
  ZHcy: ZHcy$1,
  zhcy: zhcy$1,
  zigrarr: zigrarr$1,
  zopf: zopf$1,
  Zopf: Zopf$1,
  Zscr: Zscr$1,
  zscr: zscr$1,
  zwj: zwj$1,
  zwnj: zwnj$1
};
var entities$1 = require$$0$3;
var regex$4 = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;
var mdurl$1 = {};
var encodeCache = {};
function getEncodeCache(exclude) {
  var i, ch, cache = encodeCache[exclude];
  if (cache) {
    return cache;
  }
  cache = encodeCache[exclude] = [];
  for (i = 0; i < 128; i++) {
    ch = String.fromCharCode(i);
    if (/^[0-9a-z]$/i.test(ch)) {
      cache.push(ch);
    } else {
      cache.push("%" + ("0" + i.toString(16).toUpperCase()).slice(-2));
    }
  }
  for (i = 0; i < exclude.length; i++) {
    cache[exclude.charCodeAt(i)] = exclude[i];
  }
  return cache;
}
function encode$2(string, exclude, keepEscaped) {
  var i, l, code3, nextCode, cache, result2 = "";
  if (typeof exclude !== "string") {
    keepEscaped = exclude;
    exclude = encode$2.defaultChars;
  }
  if (typeof keepEscaped === "undefined") {
    keepEscaped = true;
  }
  cache = getEncodeCache(exclude);
  for (i = 0, l = string.length; i < l; i++) {
    code3 = string.charCodeAt(i);
    if (keepEscaped && code3 === 37 && i + 2 < l) {
      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
        result2 += string.slice(i, i + 3);
        i += 2;
        continue;
      }
    }
    if (code3 < 128) {
      result2 += cache[code3];
      continue;
    }
    if (code3 >= 55296 && code3 <= 57343) {
      if (code3 >= 55296 && code3 <= 56319 && i + 1 < l) {
        nextCode = string.charCodeAt(i + 1);
        if (nextCode >= 56320 && nextCode <= 57343) {
          result2 += encodeURIComponent(string[i] + string[i + 1]);
          i++;
          continue;
        }
      }
      result2 += "%EF%BF%BD";
      continue;
    }
    result2 += encodeURIComponent(string[i]);
  }
  return result2;
}
encode$2.defaultChars = ";/?:@&=+$,-_.!~*'()#";
encode$2.componentChars = "-_.!~*'()";
var encode_1 = encode$2;
var decodeCache = {};
function getDecodeCache(exclude) {
  var i, ch, cache = decodeCache[exclude];
  if (cache) {
    return cache;
  }
  cache = decodeCache[exclude] = [];
  for (i = 0; i < 128; i++) {
    ch = String.fromCharCode(i);
    cache.push(ch);
  }
  for (i = 0; i < exclude.length; i++) {
    ch = exclude.charCodeAt(i);
    cache[ch] = "%" + ("0" + ch.toString(16).toUpperCase()).slice(-2);
  }
  return cache;
}
function decode$2(string, exclude) {
  var cache;
  if (typeof exclude !== "string") {
    exclude = decode$2.defaultChars;
  }
  cache = getDecodeCache(exclude);
  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {
    var i, l, b1, b2, b3, b4, chr, result2 = "";
    for (i = 0, l = seq.length; i < l; i += 3) {
      b1 = parseInt(seq.slice(i + 1, i + 3), 16);
      if (b1 < 128) {
        result2 += cache[b1];
        continue;
      }
      if ((b1 & 224) === 192 && i + 3 < l) {
        b2 = parseInt(seq.slice(i + 4, i + 6), 16);
        if ((b2 & 192) === 128) {
          chr = b1 << 6 & 1984 | b2 & 63;
          if (chr < 128) {
            result2 += "\uFFFD\uFFFD";
          } else {
            result2 += String.fromCharCode(chr);
          }
          i += 3;
          continue;
        }
      }
      if ((b1 & 240) === 224 && i + 6 < l) {
        b2 = parseInt(seq.slice(i + 4, i + 6), 16);
        b3 = parseInt(seq.slice(i + 7, i + 9), 16);
        if ((b2 & 192) === 128 && (b3 & 192) === 128) {
          chr = b1 << 12 & 61440 | b2 << 6 & 4032 | b3 & 63;
          if (chr < 2048 || chr >= 55296 && chr <= 57343) {
            result2 += "\uFFFD\uFFFD\uFFFD";
          } else {
            result2 += String.fromCharCode(chr);
          }
          i += 6;
          continue;
        }
      }
      if ((b1 & 248) === 240 && i + 9 < l) {
        b2 = parseInt(seq.slice(i + 4, i + 6), 16);
        b3 = parseInt(seq.slice(i + 7, i + 9), 16);
        b4 = parseInt(seq.slice(i + 10, i + 12), 16);
        if ((b2 & 192) === 128 && (b3 & 192) === 128 && (b4 & 192) === 128) {
          chr = b1 << 18 & 1835008 | b2 << 12 & 258048 | b3 << 6 & 4032 | b4 & 63;
          if (chr < 65536 || chr > 1114111) {
            result2 += "\uFFFD\uFFFD\uFFFD\uFFFD";
          } else {
            chr -= 65536;
            result2 += String.fromCharCode(55296 + (chr >> 10), 56320 + (chr & 1023));
          }
          i += 9;
          continue;
        }
      }
      result2 += "\uFFFD";
    }
    return result2;
  });
}
decode$2.defaultChars = ";/?:@&=+$,#";
decode$2.componentChars = "";
var decode_1 = decode$2;
var format = function format2(url) {
  var result2 = "";
  result2 += url.protocol || "";
  result2 += url.slashes ? "//" : "";
  result2 += url.auth ? url.auth + "@" : "";
  if (url.hostname && url.hostname.indexOf(":") !== -1) {
    result2 += "[" + url.hostname + "]";
  } else {
    result2 += url.hostname || "";
  }
  result2 += url.port ? ":" + url.port : "";
  result2 += url.pathname || "";
  result2 += url.search || "";
  result2 += url.hash || "";
  return result2;
};
function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.pathname = null;
}
var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"], unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims), autoEscape = ["'"].concat(unwise), nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape), hostEndingChars = ["/", "?", "#"], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, hostlessProtocol = {
  "javascript": true,
  "javascript:": true
}, slashedProtocol = {
  "http": true,
  "https": true,
  "ftp": true,
  "gopher": true,
  "file": true,
  "http:": true,
  "https:": true,
  "ftp:": true,
  "gopher:": true,
  "file:": true
};
function urlParse(url, slashesDenoteHost) {
  if (url && url instanceof Url) {
    return url;
  }
  var u = new Url();
  u.parse(url, slashesDenoteHost);
  return u;
}
Url.prototype.parse = function(url, slashesDenoteHost) {
  var i, l, lowerProto, hec, slashes, rest = url;
  rest = rest.trim();
  if (!slashesDenoteHost && url.split("#").length === 1) {
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
      }
      return this;
    }
  }
  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    lowerProto = proto.toLowerCase();
    this.protocol = proto;
    rest = rest.substr(proto.length);
  }
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    slashes = rest.substr(0, 2) === "//";
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }
  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    var hostEnd = -1;
    for (i = 0; i < hostEndingChars.length; i++) {
      hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec;
      }
    }
    var auth, atSign;
    if (hostEnd === -1) {
      atSign = rest.lastIndexOf("@");
    } else {
      atSign = rest.lastIndexOf("@", hostEnd);
    }
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = auth;
    }
    hostEnd = -1;
    for (i = 0; i < nonHostChars.length; i++) {
      hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec;
      }
    }
    if (hostEnd === -1) {
      hostEnd = rest.length;
    }
    if (rest[hostEnd - 1] === ":") {
      hostEnd--;
    }
    var host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);
    this.parseHost(host);
    this.hostname = this.hostname || "";
    var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (i = 0, l = hostparts.length; i < l; i++) {
        var part2 = hostparts[i];
        if (!part2) {
          continue;
        }
        if (!part2.match(hostnamePartPattern)) {
          var newpart = "";
          for (var j = 0, k = part2.length; j < k; j++) {
            if (part2.charCodeAt(j) > 127) {
              newpart += "x";
            } else {
              newpart += part2[j];
            }
          }
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part2.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = notHost.join(".") + rest;
            }
            this.hostname = validParts.join(".");
            break;
          }
        }
      }
    }
    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = "";
    }
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
    }
  }
  var hash2 = rest.indexOf("#");
  if (hash2 !== -1) {
    this.hash = rest.substr(hash2);
    rest = rest.slice(0, hash2);
  }
  var qm = rest.indexOf("?");
  if (qm !== -1) {
    this.search = rest.substr(qm);
    rest = rest.slice(0, qm);
  }
  if (rest) {
    this.pathname = rest;
  }
  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = "";
  }
  return this;
};
Url.prototype.parseHost = function(host) {
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ":") {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) {
    this.hostname = host;
  }
};
var parse$5 = urlParse;
mdurl$1.encode = encode_1;
mdurl$1.decode = decode_1;
mdurl$1.format = format;
mdurl$1.parse = parse$5;
var uc_micro = {};
var regex$3 = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var regex$2 = /[\0-\x1F\x7F-\x9F]/;
var regex$1 = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;
var regex = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
uc_micro.Any = regex$3;
uc_micro.Cc = regex$2;
uc_micro.Cf = regex$1;
uc_micro.P = regex$4;
uc_micro.Z = regex;
(function(exports) {
  function _class2(obj) {
    return Object.prototype.toString.call(obj);
  }
  function isString2(obj) {
    return _class2(obj) === "[object String]";
  }
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  function has2(object, key2) {
    return _hasOwnProperty.call(object, key2);
  }
  function assign2(obj) {
    var sources = Array.prototype.slice.call(arguments, 1);
    sources.forEach(function(source) {
      if (!source) {
        return;
      }
      if (typeof source !== "object") {
        throw new TypeError(source + "must be object");
      }
      Object.keys(source).forEach(function(key2) {
        obj[key2] = source[key2];
      });
    });
    return obj;
  }
  function arrayReplaceAt2(src, pos, newElements) {
    return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
  }
  function isValidEntityCode2(c) {
    if (c >= 55296 && c <= 57343) {
      return false;
    }
    if (c >= 64976 && c <= 65007) {
      return false;
    }
    if ((c & 65535) === 65535 || (c & 65535) === 65534) {
      return false;
    }
    if (c >= 0 && c <= 8) {
      return false;
    }
    if (c === 11) {
      return false;
    }
    if (c >= 14 && c <= 31) {
      return false;
    }
    if (c >= 127 && c <= 159) {
      return false;
    }
    if (c > 1114111) {
      return false;
    }
    return true;
  }
  function fromCodePoint2(c) {
    if (c > 65535) {
      c -= 65536;
      var surrogate1 = 55296 + (c >> 10), surrogate2 = 56320 + (c & 1023);
      return String.fromCharCode(surrogate1, surrogate2);
    }
    return String.fromCharCode(c);
  }
  var UNESCAPE_MD_RE = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g;
  var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;
  var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + "|" + ENTITY_RE.source, "gi");
  var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;
  var entities2 = entities$1;
  function replaceEntityPattern(match2, name) {
    var code3 = 0;
    if (has2(entities2, name)) {
      return entities2[name];
    }
    if (name.charCodeAt(0) === 35 && DIGITAL_ENTITY_TEST_RE.test(name)) {
      code3 = name[1].toLowerCase() === "x" ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);
      if (isValidEntityCode2(code3)) {
        return fromCodePoint2(code3);
      }
    }
    return match2;
  }
  function unescapeMd(str) {
    if (str.indexOf("\\") < 0) {
      return str;
    }
    return str.replace(UNESCAPE_MD_RE, "$1");
  }
  function unescapeAll2(str) {
    if (str.indexOf("\\") < 0 && str.indexOf("&") < 0) {
      return str;
    }
    return str.replace(UNESCAPE_ALL_RE, function(match2, escaped, entity3) {
      if (escaped) {
        return escaped;
      }
      return replaceEntityPattern(match2, entity3);
    });
  }
  var HTML_ESCAPE_TEST_RE = /[&<>"]/;
  var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
  var HTML_REPLACEMENTS = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;"
  };
  function replaceUnsafeChar(ch) {
    return HTML_REPLACEMENTS[ch];
  }
  function escapeHtml2(str) {
    if (HTML_ESCAPE_TEST_RE.test(str)) {
      return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
    }
    return str;
  }
  var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;
  function escapeRE2(str) {
    return str.replace(REGEXP_ESCAPE_RE, "\\$&");
  }
  function isSpace2(code3) {
    switch (code3) {
      case 9:
      case 32:
        return true;
    }
    return false;
  }
  function isWhiteSpace2(code3) {
    if (code3 >= 8192 && code3 <= 8202) {
      return true;
    }
    switch (code3) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 160:
      case 5760:
      case 8239:
      case 8287:
      case 12288:
        return true;
    }
    return false;
  }
  var UNICODE_PUNCT_RE = regex$4;
  function isPunctChar2(ch) {
    return UNICODE_PUNCT_RE.test(ch);
  }
  function isMdAsciiPunct2(ch) {
    switch (ch) {
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 123:
      case 124:
      case 125:
      case 126:
        return true;
      default:
        return false;
    }
  }
  function normalizeReference2(str) {
    str = str.trim().replace(/\s+/g, " ");
    if ("\u1E9E".toLowerCase() === "\u1E7E") {
      str = str.replace(/ẞ/g, "\xDF");
    }
    return str.toLowerCase().toUpperCase();
  }
  exports.lib = {};
  exports.lib.mdurl = mdurl$1;
  exports.lib.ucmicro = uc_micro;
  exports.assign = assign2;
  exports.isString = isString2;
  exports.has = has2;
  exports.unescapeMd = unescapeMd;
  exports.unescapeAll = unescapeAll2;
  exports.isValidEntityCode = isValidEntityCode2;
  exports.fromCodePoint = fromCodePoint2;
  exports.escapeHtml = escapeHtml2;
  exports.arrayReplaceAt = arrayReplaceAt2;
  exports.isSpace = isSpace2;
  exports.isWhiteSpace = isWhiteSpace2;
  exports.isMdAsciiPunct = isMdAsciiPunct2;
  exports.isPunctChar = isPunctChar2;
  exports.escapeRE = escapeRE2;
  exports.normalizeReference = normalizeReference2;
})(utils$1);
var helpers$2 = {};
var parse_link_label = function parseLinkLabel(state, start, disableNested) {
  var level, found, marker2, prevPos, labelEnd = -1, max = state.posMax, oldPos = state.pos;
  state.pos = start + 1;
  level = 1;
  while (state.pos < max) {
    marker2 = state.src.charCodeAt(state.pos);
    if (marker2 === 93) {
      level--;
      if (level === 0) {
        found = true;
        break;
      }
    }
    prevPos = state.pos;
    state.md.inline.skipToken(state);
    if (marker2 === 91) {
      if (prevPos === state.pos - 1) {
        level++;
      } else if (disableNested) {
        state.pos = oldPos;
        return -1;
      }
    }
  }
  if (found) {
    labelEnd = state.pos;
  }
  state.pos = oldPos;
  return labelEnd;
};
var unescapeAll$2 = utils$1.unescapeAll;
var parse_link_destination = function parseLinkDestination(str, pos, max) {
  var code3, level, lines = 0, start = pos, result2 = {
    ok: false,
    pos: 0,
    lines: 0,
    str: ""
  };
  if (str.charCodeAt(pos) === 60) {
    pos++;
    while (pos < max) {
      code3 = str.charCodeAt(pos);
      if (code3 === 10) {
        return result2;
      }
      if (code3 === 60) {
        return result2;
      }
      if (code3 === 62) {
        result2.pos = pos + 1;
        result2.str = unescapeAll$2(str.slice(start + 1, pos));
        result2.ok = true;
        return result2;
      }
      if (code3 === 92 && pos + 1 < max) {
        pos += 2;
        continue;
      }
      pos++;
    }
    return result2;
  }
  level = 0;
  while (pos < max) {
    code3 = str.charCodeAt(pos);
    if (code3 === 32) {
      break;
    }
    if (code3 < 32 || code3 === 127) {
      break;
    }
    if (code3 === 92 && pos + 1 < max) {
      if (str.charCodeAt(pos + 1) === 32) {
        break;
      }
      pos += 2;
      continue;
    }
    if (code3 === 40) {
      level++;
      if (level > 32) {
        return result2;
      }
    }
    if (code3 === 41) {
      if (level === 0) {
        break;
      }
      level--;
    }
    pos++;
  }
  if (start === pos) {
    return result2;
  }
  if (level !== 0) {
    return result2;
  }
  result2.str = unescapeAll$2(str.slice(start, pos));
  result2.lines = lines;
  result2.pos = pos;
  result2.ok = true;
  return result2;
};
var unescapeAll$1 = utils$1.unescapeAll;
var parse_link_title = function parseLinkTitle(str, pos, max) {
  var code3, marker2, lines = 0, start = pos, result2 = {
    ok: false,
    pos: 0,
    lines: 0,
    str: ""
  };
  if (pos >= max) {
    return result2;
  }
  marker2 = str.charCodeAt(pos);
  if (marker2 !== 34 && marker2 !== 39 && marker2 !== 40) {
    return result2;
  }
  pos++;
  if (marker2 === 40) {
    marker2 = 41;
  }
  while (pos < max) {
    code3 = str.charCodeAt(pos);
    if (code3 === marker2) {
      result2.pos = pos + 1;
      result2.lines = lines;
      result2.str = unescapeAll$1(str.slice(start + 1, pos));
      result2.ok = true;
      return result2;
    } else if (code3 === 40 && marker2 === 41) {
      return result2;
    } else if (code3 === 10) {
      lines++;
    } else if (code3 === 92 && pos + 1 < max) {
      pos++;
      if (str.charCodeAt(pos) === 10) {
        lines++;
      }
    }
    pos++;
  }
  return result2;
};
helpers$2.parseLinkLabel = parse_link_label;
helpers$2.parseLinkDestination = parse_link_destination;
helpers$2.parseLinkTitle = parse_link_title;
var assign$1 = utils$1.assign;
var unescapeAll = utils$1.unescapeAll;
var escapeHtml$1 = utils$1.escapeHtml;
var default_rules = {};
default_rules.code_inline = function(tokens, idx, options2, env, slf) {
  var token2 = tokens[idx];
  return "<code" + slf.renderAttrs(token2) + ">" + escapeHtml$1(tokens[idx].content) + "</code>";
};
default_rules.code_block = function(tokens, idx, options2, env, slf) {
  var token2 = tokens[idx];
  return "<pre" + slf.renderAttrs(token2) + "><code>" + escapeHtml$1(tokens[idx].content) + "</code></pre>\n";
};
default_rules.fence = function(tokens, idx, options2, env, slf) {
  var token2 = tokens[idx], info2 = token2.info ? unescapeAll(token2.info).trim() : "", langName = "", langAttrs = "", highlighted, i, arr, tmpAttrs, tmpToken;
  if (info2) {
    arr = info2.split(/(\s+)/g);
    langName = arr[0];
    langAttrs = arr.slice(2).join("");
  }
  if (options2.highlight) {
    highlighted = options2.highlight(token2.content, langName, langAttrs) || escapeHtml$1(token2.content);
  } else {
    highlighted = escapeHtml$1(token2.content);
  }
  if (highlighted.indexOf("<pre") === 0) {
    return highlighted + "\n";
  }
  if (info2) {
    i = token2.attrIndex("class");
    tmpAttrs = token2.attrs ? token2.attrs.slice() : [];
    if (i < 0) {
      tmpAttrs.push(["class", options2.langPrefix + langName]);
    } else {
      tmpAttrs[i] = tmpAttrs[i].slice();
      tmpAttrs[i][1] += " " + options2.langPrefix + langName;
    }
    tmpToken = {
      attrs: tmpAttrs
    };
    return "<pre><code" + slf.renderAttrs(tmpToken) + ">" + highlighted + "</code></pre>\n";
  }
  return "<pre><code" + slf.renderAttrs(token2) + ">" + highlighted + "</code></pre>\n";
};
default_rules.image = function(tokens, idx, options2, env, slf) {
  var token2 = tokens[idx];
  token2.attrs[token2.attrIndex("alt")][1] = slf.renderInlineAsText(token2.children, options2, env);
  return slf.renderToken(tokens, idx, options2);
};
default_rules.hardbreak = function(tokens, idx, options2) {
  return options2.xhtmlOut ? "<br />\n" : "<br>\n";
};
default_rules.softbreak = function(tokens, idx, options2) {
  return options2.breaks ? options2.xhtmlOut ? "<br />\n" : "<br>\n" : "\n";
};
default_rules.text = function(tokens, idx) {
  return escapeHtml$1(tokens[idx].content);
};
default_rules.html_block = function(tokens, idx) {
  return tokens[idx].content;
};
default_rules.html_inline = function(tokens, idx) {
  return tokens[idx].content;
};
function Renderer$1() {
  this.rules = assign$1({}, default_rules);
}
Renderer$1.prototype.renderAttrs = function renderAttrs(token2) {
  var i, l, result2;
  if (!token2.attrs) {
    return "";
  }
  result2 = "";
  for (i = 0, l = token2.attrs.length; i < l; i++) {
    result2 += " " + escapeHtml$1(token2.attrs[i][0]) + '="' + escapeHtml$1(token2.attrs[i][1]) + '"';
  }
  return result2;
};
Renderer$1.prototype.renderToken = function renderToken(tokens, idx, options2) {
  var nextToken, result2 = "", needLf = false, token2 = tokens[idx];
  if (token2.hidden) {
    return "";
  }
  if (token2.block && token2.nesting !== -1 && idx && tokens[idx - 1].hidden) {
    result2 += "\n";
  }
  result2 += (token2.nesting === -1 ? "</" : "<") + token2.tag;
  result2 += this.renderAttrs(token2);
  if (token2.nesting === 0 && options2.xhtmlOut) {
    result2 += " /";
  }
  if (token2.block) {
    needLf = true;
    if (token2.nesting === 1) {
      if (idx + 1 < tokens.length) {
        nextToken = tokens[idx + 1];
        if (nextToken.type === "inline" || nextToken.hidden) {
          needLf = false;
        } else if (nextToken.nesting === -1 && nextToken.tag === token2.tag) {
          needLf = false;
        }
      }
    }
  }
  result2 += needLf ? ">\n" : ">";
  return result2;
};
Renderer$1.prototype.renderInline = function(tokens, options2, env) {
  var type, result2 = "", rules = this.rules;
  for (var i = 0, len = tokens.length; i < len; i++) {
    type = tokens[i].type;
    if (typeof rules[type] !== "undefined") {
      result2 += rules[type](tokens, i, options2, env, this);
    } else {
      result2 += this.renderToken(tokens, i, options2);
    }
  }
  return result2;
};
Renderer$1.prototype.renderInlineAsText = function(tokens, options2, env) {
  var result2 = "";
  for (var i = 0, len = tokens.length; i < len; i++) {
    if (tokens[i].type === "text") {
      result2 += tokens[i].content;
    } else if (tokens[i].type === "image") {
      result2 += this.renderInlineAsText(tokens[i].children, options2, env);
    } else if (tokens[i].type === "softbreak") {
      result2 += "\n";
    }
  }
  return result2;
};
Renderer$1.prototype.render = function(tokens, options2, env) {
  var i, len, type, result2 = "", rules = this.rules;
  for (i = 0, len = tokens.length; i < len; i++) {
    type = tokens[i].type;
    if (type === "inline") {
      result2 += this.renderInline(tokens[i].children, options2, env);
    } else if (typeof rules[type] !== "undefined") {
      result2 += rules[tokens[i].type](tokens, i, options2, env, this);
    } else {
      result2 += this.renderToken(tokens, i, options2, env);
    }
  }
  return result2;
};
var renderer = Renderer$1;
function Ruler$3() {
  this.__rules__ = [];
  this.__cache__ = null;
}
Ruler$3.prototype.__find__ = function(name) {
  for (var i = 0; i < this.__rules__.length; i++) {
    if (this.__rules__[i].name === name) {
      return i;
    }
  }
  return -1;
};
Ruler$3.prototype.__compile__ = function() {
  var self2 = this;
  var chains2 = [""];
  self2.__rules__.forEach(function(rule2) {
    if (!rule2.enabled) {
      return;
    }
    rule2.alt.forEach(function(altName) {
      if (chains2.indexOf(altName) < 0) {
        chains2.push(altName);
      }
    });
  });
  self2.__cache__ = {};
  chains2.forEach(function(chain) {
    self2.__cache__[chain] = [];
    self2.__rules__.forEach(function(rule2) {
      if (!rule2.enabled) {
        return;
      }
      if (chain && rule2.alt.indexOf(chain) < 0) {
        return;
      }
      self2.__cache__[chain].push(rule2.fn);
    });
  });
};
Ruler$3.prototype.at = function(name, fn, options2) {
  var index2 = this.__find__(name);
  var opt = options2 || {};
  if (index2 === -1) {
    throw new Error("Parser rule not found: " + name);
  }
  this.__rules__[index2].fn = fn;
  this.__rules__[index2].alt = opt.alt || [];
  this.__cache__ = null;
};
Ruler$3.prototype.before = function(beforeName, ruleName, fn, options2) {
  var index2 = this.__find__(beforeName);
  var opt = options2 || {};
  if (index2 === -1) {
    throw new Error("Parser rule not found: " + beforeName);
  }
  this.__rules__.splice(index2, 0, {
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  });
  this.__cache__ = null;
};
Ruler$3.prototype.after = function(afterName, ruleName, fn, options2) {
  var index2 = this.__find__(afterName);
  var opt = options2 || {};
  if (index2 === -1) {
    throw new Error("Parser rule not found: " + afterName);
  }
  this.__rules__.splice(index2 + 1, 0, {
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  });
  this.__cache__ = null;
};
Ruler$3.prototype.push = function(ruleName, fn, options2) {
  var opt = options2 || {};
  this.__rules__.push({
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  });
  this.__cache__ = null;
};
Ruler$3.prototype.enable = function(list3, ignoreInvalid) {
  if (!Array.isArray(list3)) {
    list3 = [list3];
  }
  var result2 = [];
  list3.forEach(function(name) {
    var idx = this.__find__(name);
    if (idx < 0) {
      if (ignoreInvalid) {
        return;
      }
      throw new Error("Rules manager: invalid rule name " + name);
    }
    this.__rules__[idx].enabled = true;
    result2.push(name);
  }, this);
  this.__cache__ = null;
  return result2;
};
Ruler$3.prototype.enableOnly = function(list3, ignoreInvalid) {
  if (!Array.isArray(list3)) {
    list3 = [list3];
  }
  this.__rules__.forEach(function(rule2) {
    rule2.enabled = false;
  });
  this.enable(list3, ignoreInvalid);
};
Ruler$3.prototype.disable = function(list3, ignoreInvalid) {
  if (!Array.isArray(list3)) {
    list3 = [list3];
  }
  var result2 = [];
  list3.forEach(function(name) {
    var idx = this.__find__(name);
    if (idx < 0) {
      if (ignoreInvalid) {
        return;
      }
      throw new Error("Rules manager: invalid rule name " + name);
    }
    this.__rules__[idx].enabled = false;
    result2.push(name);
  }, this);
  this.__cache__ = null;
  return result2;
};
Ruler$3.prototype.getRules = function(chainName) {
  if (this.__cache__ === null) {
    this.__compile__();
  }
  return this.__cache__[chainName] || [];
};
var ruler = Ruler$3;
var NEWLINES_RE = /\r\n?|\n/g;
var NULL_RE = /\0/g;
var normalize = function normalize2(state) {
  var str;
  str = state.src.replace(NEWLINES_RE, "\n");
  str = str.replace(NULL_RE, "\uFFFD");
  state.src = str;
};
var block$1 = function block(state) {
  var token2;
  if (state.inlineMode) {
    token2 = new state.Token("inline", "", 0);
    token2.content = state.src;
    token2.map = [0, 1];
    token2.children = [];
    state.tokens.push(token2);
  } else {
    state.md.block.parse(state.src, state.md, state.env, state.tokens);
  }
};
var inline = function inline2(state) {
  var tokens = state.tokens, tok, i, l;
  for (i = 0, l = tokens.length; i < l; i++) {
    tok = tokens[i];
    if (tok.type === "inline") {
      state.md.inline.parse(tok.content, state.md, state.env, tok.children);
    }
  }
};
var arrayReplaceAt = utils$1.arrayReplaceAt;
function isLinkOpen(str) {
  return /^<a[>\s]/i.test(str);
}
function isLinkClose(str) {
  return /^<\/a\s*>/i.test(str);
}
var linkify = function linkify2(state) {
  var i, j, l, tokens, token2, currentToken, nodes, ln, text3, pos, lastPos, level, htmlLinkLevel, url, fullUrl, urlText, blockTokens = state.tokens, links;
  if (!state.md.options.linkify) {
    return;
  }
  for (j = 0, l = blockTokens.length; j < l; j++) {
    if (blockTokens[j].type !== "inline" || !state.md.linkify.pretest(blockTokens[j].content)) {
      continue;
    }
    tokens = blockTokens[j].children;
    htmlLinkLevel = 0;
    for (i = tokens.length - 1; i >= 0; i--) {
      currentToken = tokens[i];
      if (currentToken.type === "link_close") {
        i--;
        while (tokens[i].level !== currentToken.level && tokens[i].type !== "link_open") {
          i--;
        }
        continue;
      }
      if (currentToken.type === "html_inline") {
        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
          htmlLinkLevel--;
        }
        if (isLinkClose(currentToken.content)) {
          htmlLinkLevel++;
        }
      }
      if (htmlLinkLevel > 0) {
        continue;
      }
      if (currentToken.type === "text" && state.md.linkify.test(currentToken.content)) {
        text3 = currentToken.content;
        links = state.md.linkify.match(text3);
        nodes = [];
        level = currentToken.level;
        lastPos = 0;
        for (ln = 0; ln < links.length; ln++) {
          url = links[ln].url;
          fullUrl = state.md.normalizeLink(url);
          if (!state.md.validateLink(fullUrl)) {
            continue;
          }
          urlText = links[ln].text;
          if (!links[ln].schema) {
            urlText = state.md.normalizeLinkText("http://" + urlText).replace(/^http:\/\//, "");
          } else if (links[ln].schema === "mailto:" && !/^mailto:/i.test(urlText)) {
            urlText = state.md.normalizeLinkText("mailto:" + urlText).replace(/^mailto:/, "");
          } else {
            urlText = state.md.normalizeLinkText(urlText);
          }
          pos = links[ln].index;
          if (pos > lastPos) {
            token2 = new state.Token("text", "", 0);
            token2.content = text3.slice(lastPos, pos);
            token2.level = level;
            nodes.push(token2);
          }
          token2 = new state.Token("link_open", "a", 1);
          token2.attrs = [["href", fullUrl]];
          token2.level = level++;
          token2.markup = "linkify";
          token2.info = "auto";
          nodes.push(token2);
          token2 = new state.Token("text", "", 0);
          token2.content = urlText;
          token2.level = level;
          nodes.push(token2);
          token2 = new state.Token("link_close", "a", -1);
          token2.level = --level;
          token2.markup = "linkify";
          token2.info = "auto";
          nodes.push(token2);
          lastPos = links[ln].lastIndex;
        }
        if (lastPos < text3.length) {
          token2 = new state.Token("text", "", 0);
          token2.content = text3.slice(lastPos);
          token2.level = level;
          nodes.push(token2);
        }
        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
      }
    }
  }
};
var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;
var SCOPED_ABBR_TEST_RE = /\((c|tm|r|p)\)/i;
var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
var SCOPED_ABBR = {
  c: "\xA9",
  r: "\xAE",
  p: "\xA7",
  tm: "\u2122"
};
function replaceFn(match2, name) {
  return SCOPED_ABBR[name.toLowerCase()];
}
function replace_scoped(inlineTokens) {
  var i, token2, inside_autolink = 0;
  for (i = inlineTokens.length - 1; i >= 0; i--) {
    token2 = inlineTokens[i];
    if (token2.type === "text" && !inside_autolink) {
      token2.content = token2.content.replace(SCOPED_ABBR_RE, replaceFn);
    }
    if (token2.type === "link_open" && token2.info === "auto") {
      inside_autolink--;
    }
    if (token2.type === "link_close" && token2.info === "auto") {
      inside_autolink++;
    }
  }
}
function replace_rare(inlineTokens) {
  var i, token2, inside_autolink = 0;
  for (i = inlineTokens.length - 1; i >= 0; i--) {
    token2 = inlineTokens[i];
    if (token2.type === "text" && !inside_autolink) {
      if (RARE_RE.test(token2.content)) {
        token2.content = token2.content.replace(/\+-/g, "\xB1").replace(/\.{2,}/g, "\u2026").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1\u2014").replace(/(^|\s)--(?=\s|$)/mg, "$1\u2013").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1\u2013");
      }
    }
    if (token2.type === "link_open" && token2.info === "auto") {
      inside_autolink--;
    }
    if (token2.type === "link_close" && token2.info === "auto") {
      inside_autolink++;
    }
  }
}
var replacements = function replace(state) {
  var blkIdx;
  if (!state.md.options.typographer) {
    return;
  }
  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
    if (state.tokens[blkIdx].type !== "inline") {
      continue;
    }
    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
      replace_scoped(state.tokens[blkIdx].children);
    }
    if (RARE_RE.test(state.tokens[blkIdx].content)) {
      replace_rare(state.tokens[blkIdx].children);
    }
  }
};
var isWhiteSpace$1 = utils$1.isWhiteSpace;
var isPunctChar$1 = utils$1.isPunctChar;
var isMdAsciiPunct$1 = utils$1.isMdAsciiPunct;
var QUOTE_TEST_RE = /['"]/;
var QUOTE_RE = /['"]/g;
var APOSTROPHE = "\u2019";
function replaceAt(str, index2, ch) {
  return str.substr(0, index2) + ch + str.substr(index2 + 1);
}
function process_inlines(tokens, state) {
  var i, token2, text3, t4, pos, max, thisLevel, item2, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;
  stack = [];
  for (i = 0; i < tokens.length; i++) {
    token2 = tokens[i];
    thisLevel = tokens[i].level;
    for (j = stack.length - 1; j >= 0; j--) {
      if (stack[j].level <= thisLevel) {
        break;
      }
    }
    stack.length = j + 1;
    if (token2.type !== "text") {
      continue;
    }
    text3 = token2.content;
    pos = 0;
    max = text3.length;
    OUTER:
      while (pos < max) {
        QUOTE_RE.lastIndex = pos;
        t4 = QUOTE_RE.exec(text3);
        if (!t4) {
          break;
        }
        canOpen = canClose = true;
        pos = t4.index + 1;
        isSingle = t4[0] === "'";
        lastChar = 32;
        if (t4.index - 1 >= 0) {
          lastChar = text3.charCodeAt(t4.index - 1);
        } else {
          for (j = i - 1; j >= 0; j--) {
            if (tokens[j].type === "softbreak" || tokens[j].type === "hardbreak")
              break;
            if (!tokens[j].content)
              continue;
            lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
            break;
          }
        }
        nextChar = 32;
        if (pos < max) {
          nextChar = text3.charCodeAt(pos);
        } else {
          for (j = i + 1; j < tokens.length; j++) {
            if (tokens[j].type === "softbreak" || tokens[j].type === "hardbreak")
              break;
            if (!tokens[j].content)
              continue;
            nextChar = tokens[j].content.charCodeAt(0);
            break;
          }
        }
        isLastPunctChar = isMdAsciiPunct$1(lastChar) || isPunctChar$1(String.fromCharCode(lastChar));
        isNextPunctChar = isMdAsciiPunct$1(nextChar) || isPunctChar$1(String.fromCharCode(nextChar));
        isLastWhiteSpace = isWhiteSpace$1(lastChar);
        isNextWhiteSpace = isWhiteSpace$1(nextChar);
        if (isNextWhiteSpace) {
          canOpen = false;
        } else if (isNextPunctChar) {
          if (!(isLastWhiteSpace || isLastPunctChar)) {
            canOpen = false;
          }
        }
        if (isLastWhiteSpace) {
          canClose = false;
        } else if (isLastPunctChar) {
          if (!(isNextWhiteSpace || isNextPunctChar)) {
            canClose = false;
          }
        }
        if (nextChar === 34 && t4[0] === '"') {
          if (lastChar >= 48 && lastChar <= 57) {
            canClose = canOpen = false;
          }
        }
        if (canOpen && canClose) {
          canOpen = isLastPunctChar;
          canClose = isNextPunctChar;
        }
        if (!canOpen && !canClose) {
          if (isSingle) {
            token2.content = replaceAt(token2.content, t4.index, APOSTROPHE);
          }
          continue;
        }
        if (canClose) {
          for (j = stack.length - 1; j >= 0; j--) {
            item2 = stack[j];
            if (stack[j].level < thisLevel) {
              break;
            }
            if (item2.single === isSingle && stack[j].level === thisLevel) {
              item2 = stack[j];
              if (isSingle) {
                openQuote = state.md.options.quotes[2];
                closeQuote = state.md.options.quotes[3];
              } else {
                openQuote = state.md.options.quotes[0];
                closeQuote = state.md.options.quotes[1];
              }
              token2.content = replaceAt(token2.content, t4.index, closeQuote);
              tokens[item2.token].content = replaceAt(
                tokens[item2.token].content,
                item2.pos,
                openQuote
              );
              pos += closeQuote.length - 1;
              if (item2.token === i) {
                pos += openQuote.length - 1;
              }
              text3 = token2.content;
              max = text3.length;
              stack.length = j;
              continue OUTER;
            }
          }
        }
        if (canOpen) {
          stack.push({
            token: i,
            pos: t4.index,
            single: isSingle,
            level: thisLevel
          });
        } else if (canClose && isSingle) {
          token2.content = replaceAt(token2.content, t4.index, APOSTROPHE);
        }
      }
  }
}
var smartquotes = function smartquotes2(state) {
  var blkIdx;
  if (!state.md.options.typographer) {
    return;
  }
  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
    if (state.tokens[blkIdx].type !== "inline" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
      continue;
    }
    process_inlines(state.tokens[blkIdx].children, state);
  }
};
function Token$3(type, tag2, nesting) {
  this.type = type;
  this.tag = tag2;
  this.attrs = null;
  this.map = null;
  this.nesting = nesting;
  this.level = 0;
  this.children = null;
  this.content = "";
  this.markup = "";
  this.info = "";
  this.meta = null;
  this.block = false;
  this.hidden = false;
}
Token$3.prototype.attrIndex = function attrIndex(name) {
  var attrs, i, len;
  if (!this.attrs) {
    return -1;
  }
  attrs = this.attrs;
  for (i = 0, len = attrs.length; i < len; i++) {
    if (attrs[i][0] === name) {
      return i;
    }
  }
  return -1;
};
Token$3.prototype.attrPush = function attrPush(attrData) {
  if (this.attrs) {
    this.attrs.push(attrData);
  } else {
    this.attrs = [attrData];
  }
};
Token$3.prototype.attrSet = function attrSet(name, value) {
  var idx = this.attrIndex(name), attrData = [name, value];
  if (idx < 0) {
    this.attrPush(attrData);
  } else {
    this.attrs[idx] = attrData;
  }
};
Token$3.prototype.attrGet = function attrGet(name) {
  var idx = this.attrIndex(name), value = null;
  if (idx >= 0) {
    value = this.attrs[idx][1];
  }
  return value;
};
Token$3.prototype.attrJoin = function attrJoin(name, value) {
  var idx = this.attrIndex(name);
  if (idx < 0) {
    this.attrPush([name, value]);
  } else {
    this.attrs[idx][1] = this.attrs[idx][1] + " " + value;
  }
};
var token = Token$3;
var Token$2 = token;
function StateCore(src, md, env) {
  this.src = src;
  this.env = env;
  this.tokens = [];
  this.inlineMode = false;
  this.md = md;
}
StateCore.prototype.Token = Token$2;
var state_core = StateCore;
var Ruler$2 = ruler;
var _rules$2 = [
  ["normalize", normalize],
  ["block", block$1],
  ["inline", inline],
  ["linkify", linkify],
  ["replacements", replacements],
  ["smartquotes", smartquotes]
];
function Core() {
  this.ruler = new Ruler$2();
  for (var i = 0; i < _rules$2.length; i++) {
    this.ruler.push(_rules$2[i][0], _rules$2[i][1]);
  }
}
Core.prototype.process = function(state) {
  var i, l, rules;
  rules = this.ruler.getRules("");
  for (i = 0, l = rules.length; i < l; i++) {
    rules[i](state);
  }
};
Core.prototype.State = state_core;
var parser_core = Core;
var isSpace$a = utils$1.isSpace;
function getLine(state, line) {
  var pos = state.bMarks[line] + state.tShift[line], max = state.eMarks[line];
  return state.src.substr(pos, max - pos);
}
function escapedSplit(str) {
  var result2 = [], pos = 0, max = str.length, ch, isEscaped = false, lastPos = 0, current = "";
  ch = str.charCodeAt(pos);
  while (pos < max) {
    if (ch === 124) {
      if (!isEscaped) {
        result2.push(current + str.substring(lastPos, pos));
        current = "";
        lastPos = pos + 1;
      } else {
        current += str.substring(lastPos, pos - 1);
        lastPos = pos;
      }
    }
    isEscaped = ch === 92;
    pos++;
    ch = str.charCodeAt(pos);
  }
  result2.push(current + str.substring(lastPos));
  return result2;
}
var table$1 = function table(state, startLine, endLine, silent) {
  var ch, lineText, pos, i, l, nextLine, columns, columnCount, token2, aligns, t4, tableLines, tbodyLines, oldParentType, terminate, terminatorRules, firstCh, secondCh;
  if (startLine + 2 > endLine) {
    return false;
  }
  nextLine = startLine + 1;
  if (state.sCount[nextLine] < state.blkIndent) {
    return false;
  }
  if (state.sCount[nextLine] - state.blkIndent >= 4) {
    return false;
  }
  pos = state.bMarks[nextLine] + state.tShift[nextLine];
  if (pos >= state.eMarks[nextLine]) {
    return false;
  }
  firstCh = state.src.charCodeAt(pos++);
  if (firstCh !== 124 && firstCh !== 45 && firstCh !== 58) {
    return false;
  }
  if (pos >= state.eMarks[nextLine]) {
    return false;
  }
  secondCh = state.src.charCodeAt(pos++);
  if (secondCh !== 124 && secondCh !== 45 && secondCh !== 58 && !isSpace$a(secondCh)) {
    return false;
  }
  if (firstCh === 45 && isSpace$a(secondCh)) {
    return false;
  }
  while (pos < state.eMarks[nextLine]) {
    ch = state.src.charCodeAt(pos);
    if (ch !== 124 && ch !== 45 && ch !== 58 && !isSpace$a(ch)) {
      return false;
    }
    pos++;
  }
  lineText = getLine(state, startLine + 1);
  columns = lineText.split("|");
  aligns = [];
  for (i = 0; i < columns.length; i++) {
    t4 = columns[i].trim();
    if (!t4) {
      if (i === 0 || i === columns.length - 1) {
        continue;
      } else {
        return false;
      }
    }
    if (!/^:?-+:?$/.test(t4)) {
      return false;
    }
    if (t4.charCodeAt(t4.length - 1) === 58) {
      aligns.push(t4.charCodeAt(0) === 58 ? "center" : "right");
    } else if (t4.charCodeAt(0) === 58) {
      aligns.push("left");
    } else {
      aligns.push("");
    }
  }
  lineText = getLine(state, startLine).trim();
  if (lineText.indexOf("|") === -1) {
    return false;
  }
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  columns = escapedSplit(lineText);
  if (columns.length && columns[0] === "")
    columns.shift();
  if (columns.length && columns[columns.length - 1] === "")
    columns.pop();
  columnCount = columns.length;
  if (columnCount === 0 || columnCount !== aligns.length) {
    return false;
  }
  if (silent) {
    return true;
  }
  oldParentType = state.parentType;
  state.parentType = "table";
  terminatorRules = state.md.block.ruler.getRules("blockquote");
  token2 = state.push("table_open", "table", 1);
  token2.map = tableLines = [startLine, 0];
  token2 = state.push("thead_open", "thead", 1);
  token2.map = [startLine, startLine + 1];
  token2 = state.push("tr_open", "tr", 1);
  token2.map = [startLine, startLine + 1];
  for (i = 0; i < columns.length; i++) {
    token2 = state.push("th_open", "th", 1);
    if (aligns[i]) {
      token2.attrs = [["style", "text-align:" + aligns[i]]];
    }
    token2 = state.push("inline", "", 0);
    token2.content = columns[i].trim();
    token2.children = [];
    token2 = state.push("th_close", "th", -1);
  }
  token2 = state.push("tr_close", "tr", -1);
  token2 = state.push("thead_close", "thead", -1);
  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
    if (state.sCount[nextLine] < state.blkIndent) {
      break;
    }
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
    lineText = getLine(state, nextLine).trim();
    if (!lineText) {
      break;
    }
    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      break;
    }
    columns = escapedSplit(lineText);
    if (columns.length && columns[0] === "")
      columns.shift();
    if (columns.length && columns[columns.length - 1] === "")
      columns.pop();
    if (nextLine === startLine + 2) {
      token2 = state.push("tbody_open", "tbody", 1);
      token2.map = tbodyLines = [startLine + 2, 0];
    }
    token2 = state.push("tr_open", "tr", 1);
    token2.map = [nextLine, nextLine + 1];
    for (i = 0; i < columnCount; i++) {
      token2 = state.push("td_open", "td", 1);
      if (aligns[i]) {
        token2.attrs = [["style", "text-align:" + aligns[i]]];
      }
      token2 = state.push("inline", "", 0);
      token2.content = columns[i] ? columns[i].trim() : "";
      token2.children = [];
      token2 = state.push("td_close", "td", -1);
    }
    token2 = state.push("tr_close", "tr", -1);
  }
  if (tbodyLines) {
    token2 = state.push("tbody_close", "tbody", -1);
    tbodyLines[1] = nextLine;
  }
  token2 = state.push("table_close", "table", -1);
  tableLines[1] = nextLine;
  state.parentType = oldParentType;
  state.line = nextLine;
  return true;
};
var code = function code2(state, startLine, endLine) {
  var nextLine, last, token2;
  if (state.sCount[startLine] - state.blkIndent < 4) {
    return false;
  }
  last = nextLine = startLine + 1;
  while (nextLine < endLine) {
    if (state.isEmpty(nextLine)) {
      nextLine++;
      continue;
    }
    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      nextLine++;
      last = nextLine;
      continue;
    }
    break;
  }
  state.line = last;
  token2 = state.push("code_block", "code", 0);
  token2.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + "\n";
  token2.map = [startLine, state.line];
  return true;
};
var fence = function fence2(state, startLine, endLine, silent) {
  var marker2, len, params, nextLine, mem, token2, markup, haveEndMarker = false, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  if (pos + 3 > max) {
    return false;
  }
  marker2 = state.src.charCodeAt(pos);
  if (marker2 !== 126 && marker2 !== 96) {
    return false;
  }
  mem = pos;
  pos = state.skipChars(pos, marker2);
  len = pos - mem;
  if (len < 3) {
    return false;
  }
  markup = state.src.slice(mem, pos);
  params = state.src.slice(pos, max);
  if (marker2 === 96) {
    if (params.indexOf(String.fromCharCode(marker2)) >= 0) {
      return false;
    }
  }
  if (silent) {
    return true;
  }
  nextLine = startLine;
  for (; ; ) {
    nextLine++;
    if (nextLine >= endLine) {
      break;
    }
    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
    max = state.eMarks[nextLine];
    if (pos < max && state.sCount[nextLine] < state.blkIndent) {
      break;
    }
    if (state.src.charCodeAt(pos) !== marker2) {
      continue;
    }
    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      continue;
    }
    pos = state.skipChars(pos, marker2);
    if (pos - mem < len) {
      continue;
    }
    pos = state.skipSpaces(pos);
    if (pos < max) {
      continue;
    }
    haveEndMarker = true;
    break;
  }
  len = state.sCount[startLine];
  state.line = nextLine + (haveEndMarker ? 1 : 0);
  token2 = state.push("fence", "code", 0);
  token2.info = params;
  token2.content = state.getLines(startLine + 1, nextLine, len, true);
  token2.markup = markup;
  token2.map = [startLine, state.line];
  return true;
};
var isSpace$9 = utils$1.isSpace;
var blockquote = function blockquote2(state, startLine, endLine, silent) {
  var adjustTab, ch, i, initial2, l, lastLineEmpty, lines, nextLine, offset, oldBMarks, oldBSCount, oldIndent, oldParentType, oldSCount, oldTShift, spaceAfterMarker, terminate, terminatorRules, token2, isOutdented, oldLineMax = state.lineMax, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  if (state.src.charCodeAt(pos++) !== 62) {
    return false;
  }
  if (silent) {
    return true;
  }
  initial2 = offset = state.sCount[startLine] + 1;
  if (state.src.charCodeAt(pos) === 32) {
    pos++;
    initial2++;
    offset++;
    adjustTab = false;
    spaceAfterMarker = true;
  } else if (state.src.charCodeAt(pos) === 9) {
    spaceAfterMarker = true;
    if ((state.bsCount[startLine] + offset) % 4 === 3) {
      pos++;
      initial2++;
      offset++;
      adjustTab = false;
    } else {
      adjustTab = true;
    }
  } else {
    spaceAfterMarker = false;
  }
  oldBMarks = [state.bMarks[startLine]];
  state.bMarks[startLine] = pos;
  while (pos < max) {
    ch = state.src.charCodeAt(pos);
    if (isSpace$9(ch)) {
      if (ch === 9) {
        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
      } else {
        offset++;
      }
    } else {
      break;
    }
    pos++;
  }
  oldBSCount = [state.bsCount[startLine]];
  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);
  lastLineEmpty = pos >= max;
  oldSCount = [state.sCount[startLine]];
  state.sCount[startLine] = offset - initial2;
  oldTShift = [state.tShift[startLine]];
  state.tShift[startLine] = pos - state.bMarks[startLine];
  terminatorRules = state.md.block.ruler.getRules("blockquote");
  oldParentType = state.parentType;
  state.parentType = "blockquote";
  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
    isOutdented = state.sCount[nextLine] < state.blkIndent;
    pos = state.bMarks[nextLine] + state.tShift[nextLine];
    max = state.eMarks[nextLine];
    if (pos >= max) {
      break;
    }
    if (state.src.charCodeAt(pos++) === 62 && !isOutdented) {
      initial2 = offset = state.sCount[nextLine] + 1;
      if (state.src.charCodeAt(pos) === 32) {
        pos++;
        initial2++;
        offset++;
        adjustTab = false;
        spaceAfterMarker = true;
      } else if (state.src.charCodeAt(pos) === 9) {
        spaceAfterMarker = true;
        if ((state.bsCount[nextLine] + offset) % 4 === 3) {
          pos++;
          initial2++;
          offset++;
          adjustTab = false;
        } else {
          adjustTab = true;
        }
      } else {
        spaceAfterMarker = false;
      }
      oldBMarks.push(state.bMarks[nextLine]);
      state.bMarks[nextLine] = pos;
      while (pos < max) {
        ch = state.src.charCodeAt(pos);
        if (isSpace$9(ch)) {
          if (ch === 9) {
            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
          } else {
            offset++;
          }
        } else {
          break;
        }
        pos++;
      }
      lastLineEmpty = pos >= max;
      oldBSCount.push(state.bsCount[nextLine]);
      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);
      oldSCount.push(state.sCount[nextLine]);
      state.sCount[nextLine] = offset - initial2;
      oldTShift.push(state.tShift[nextLine]);
      state.tShift[nextLine] = pos - state.bMarks[nextLine];
      continue;
    }
    if (lastLineEmpty) {
      break;
    }
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      state.lineMax = nextLine;
      if (state.blkIndent !== 0) {
        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]);
        state.sCount[nextLine] -= state.blkIndent;
      }
      break;
    }
    oldBMarks.push(state.bMarks[nextLine]);
    oldBSCount.push(state.bsCount[nextLine]);
    oldTShift.push(state.tShift[nextLine]);
    oldSCount.push(state.sCount[nextLine]);
    state.sCount[nextLine] = -1;
  }
  oldIndent = state.blkIndent;
  state.blkIndent = 0;
  token2 = state.push("blockquote_open", "blockquote", 1);
  token2.markup = ">";
  token2.map = lines = [startLine, 0];
  state.md.block.tokenize(state, startLine, nextLine);
  token2 = state.push("blockquote_close", "blockquote", -1);
  token2.markup = ">";
  state.lineMax = oldLineMax;
  state.parentType = oldParentType;
  lines[1] = state.line;
  for (i = 0; i < oldTShift.length; i++) {
    state.bMarks[i + startLine] = oldBMarks[i];
    state.tShift[i + startLine] = oldTShift[i];
    state.sCount[i + startLine] = oldSCount[i];
    state.bsCount[i + startLine] = oldBSCount[i];
  }
  state.blkIndent = oldIndent;
  return true;
};
var isSpace$8 = utils$1.isSpace;
var hr = function hr2(state, startLine, endLine, silent) {
  var marker2, cnt, ch, token2, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  marker2 = state.src.charCodeAt(pos++);
  if (marker2 !== 42 && marker2 !== 45 && marker2 !== 95) {
    return false;
  }
  cnt = 1;
  while (pos < max) {
    ch = state.src.charCodeAt(pos++);
    if (ch !== marker2 && !isSpace$8(ch)) {
      return false;
    }
    if (ch === marker2) {
      cnt++;
    }
  }
  if (cnt < 3) {
    return false;
  }
  if (silent) {
    return true;
  }
  state.line = startLine + 1;
  token2 = state.push("hr", "hr", 0);
  token2.map = [startLine, state.line];
  token2.markup = Array(cnt + 1).join(String.fromCharCode(marker2));
  return true;
};
var isSpace$7 = utils$1.isSpace;
function skipBulletListMarker(state, startLine) {
  var marker2, pos, max, ch;
  pos = state.bMarks[startLine] + state.tShift[startLine];
  max = state.eMarks[startLine];
  marker2 = state.src.charCodeAt(pos++);
  if (marker2 !== 42 && marker2 !== 45 && marker2 !== 43) {
    return -1;
  }
  if (pos < max) {
    ch = state.src.charCodeAt(pos);
    if (!isSpace$7(ch)) {
      return -1;
    }
  }
  return pos;
}
function skipOrderedListMarker(state, startLine) {
  var ch, start = state.bMarks[startLine] + state.tShift[startLine], pos = start, max = state.eMarks[startLine];
  if (pos + 1 >= max) {
    return -1;
  }
  ch = state.src.charCodeAt(pos++);
  if (ch < 48 || ch > 57) {
    return -1;
  }
  for (; ; ) {
    if (pos >= max) {
      return -1;
    }
    ch = state.src.charCodeAt(pos++);
    if (ch >= 48 && ch <= 57) {
      if (pos - start >= 10) {
        return -1;
      }
      continue;
    }
    if (ch === 41 || ch === 46) {
      break;
    }
    return -1;
  }
  if (pos < max) {
    ch = state.src.charCodeAt(pos);
    if (!isSpace$7(ch)) {
      return -1;
    }
  }
  return pos;
}
function markTightParagraphs(state, idx) {
  var i, l, level = state.level + 2;
  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
    if (state.tokens[i].level === level && state.tokens[i].type === "paragraph_open") {
      state.tokens[i + 2].hidden = true;
      state.tokens[i].hidden = true;
      i += 2;
    }
  }
}
var list$3 = function list(state, startLine, endLine, silent) {
  var ch, contentStart, i, indent2, indentAfterMarker, initial2, isOrdered, itemLines, l, listLines, listTokIdx, markerCharCode, markerValue, max, nextLine, offset, oldListIndent, oldParentType, oldSCount, oldTShift, oldTight, pos, posAfterMarker, prevEmptyEnd, start, terminate, terminatorRules, token2, isTerminatingParagraph = false, tight = true;
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  if (state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) {
    return false;
  }
  if (silent && state.parentType === "paragraph") {
    if (state.sCount[startLine] >= state.blkIndent) {
      isTerminatingParagraph = true;
    }
  }
  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
    isOrdered = true;
    start = state.bMarks[startLine] + state.tShift[startLine];
    markerValue = Number(state.src.slice(start, posAfterMarker - 1));
    if (isTerminatingParagraph && markerValue !== 1)
      return false;
  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
    isOrdered = false;
  } else {
    return false;
  }
  if (isTerminatingParagraph) {
    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine])
      return false;
  }
  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);
  if (silent) {
    return true;
  }
  listTokIdx = state.tokens.length;
  if (isOrdered) {
    token2 = state.push("ordered_list_open", "ol", 1);
    if (markerValue !== 1) {
      token2.attrs = [["start", markerValue]];
    }
  } else {
    token2 = state.push("bullet_list_open", "ul", 1);
  }
  token2.map = listLines = [startLine, 0];
  token2.markup = String.fromCharCode(markerCharCode);
  nextLine = startLine;
  prevEmptyEnd = false;
  terminatorRules = state.md.block.ruler.getRules("list");
  oldParentType = state.parentType;
  state.parentType = "list";
  while (nextLine < endLine) {
    pos = posAfterMarker;
    max = state.eMarks[nextLine];
    initial2 = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);
    while (pos < max) {
      ch = state.src.charCodeAt(pos);
      if (ch === 9) {
        offset += 4 - (offset + state.bsCount[nextLine]) % 4;
      } else if (ch === 32) {
        offset++;
      } else {
        break;
      }
      pos++;
    }
    contentStart = pos;
    if (contentStart >= max) {
      indentAfterMarker = 1;
    } else {
      indentAfterMarker = offset - initial2;
    }
    if (indentAfterMarker > 4) {
      indentAfterMarker = 1;
    }
    indent2 = initial2 + indentAfterMarker;
    token2 = state.push("list_item_open", "li", 1);
    token2.markup = String.fromCharCode(markerCharCode);
    token2.map = itemLines = [startLine, 0];
    if (isOrdered) {
      token2.info = state.src.slice(start, posAfterMarker - 1);
    }
    oldTight = state.tight;
    oldTShift = state.tShift[startLine];
    oldSCount = state.sCount[startLine];
    oldListIndent = state.listIndent;
    state.listIndent = state.blkIndent;
    state.blkIndent = indent2;
    state.tight = true;
    state.tShift[startLine] = contentStart - state.bMarks[startLine];
    state.sCount[startLine] = offset;
    if (contentStart >= max && state.isEmpty(startLine + 1)) {
      state.line = Math.min(state.line + 2, endLine);
    } else {
      state.md.block.tokenize(state, startLine, endLine, true);
    }
    if (!state.tight || prevEmptyEnd) {
      tight = false;
    }
    prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);
    state.blkIndent = state.listIndent;
    state.listIndent = oldListIndent;
    state.tShift[startLine] = oldTShift;
    state.sCount[startLine] = oldSCount;
    state.tight = oldTight;
    token2 = state.push("list_item_close", "li", -1);
    token2.markup = String.fromCharCode(markerCharCode);
    nextLine = startLine = state.line;
    itemLines[1] = nextLine;
    contentStart = state.bMarks[startLine];
    if (nextLine >= endLine) {
      break;
    }
    if (state.sCount[nextLine] < state.blkIndent) {
      break;
    }
    if (state.sCount[startLine] - state.blkIndent >= 4) {
      break;
    }
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
    if (isOrdered) {
      posAfterMarker = skipOrderedListMarker(state, nextLine);
      if (posAfterMarker < 0) {
        break;
      }
      start = state.bMarks[nextLine] + state.tShift[nextLine];
    } else {
      posAfterMarker = skipBulletListMarker(state, nextLine);
      if (posAfterMarker < 0) {
        break;
      }
    }
    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {
      break;
    }
  }
  if (isOrdered) {
    token2 = state.push("ordered_list_close", "ol", -1);
  } else {
    token2 = state.push("bullet_list_close", "ul", -1);
  }
  token2.markup = String.fromCharCode(markerCharCode);
  listLines[1] = nextLine;
  state.line = nextLine;
  state.parentType = oldParentType;
  if (tight) {
    markTightParagraphs(state, listTokIdx);
  }
  return true;
};
var normalizeReference$2 = utils$1.normalizeReference;
var isSpace$6 = utils$1.isSpace;
var reference = function reference2(state, startLine, _endLine, silent) {
  var ch, destEndPos, destEndLineNo, endLine, href, i, l, label2, labelEnd, oldParentType, res, start, str, terminate, terminatorRules, title2, lines = 0, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine], nextLine = startLine + 1;
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  if (state.src.charCodeAt(pos) !== 91) {
    return false;
  }
  while (++pos < max) {
    if (state.src.charCodeAt(pos) === 93 && state.src.charCodeAt(pos - 1) !== 92) {
      if (pos + 1 === max) {
        return false;
      }
      if (state.src.charCodeAt(pos + 1) !== 58) {
        return false;
      }
      break;
    }
  }
  endLine = state.lineMax;
  terminatorRules = state.md.block.ruler.getRules("reference");
  oldParentType = state.parentType;
  state.parentType = "reference";
  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    if (state.sCount[nextLine] - state.blkIndent > 3) {
      continue;
    }
    if (state.sCount[nextLine] < 0) {
      continue;
    }
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
  }
  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
  max = str.length;
  for (pos = 1; pos < max; pos++) {
    ch = str.charCodeAt(pos);
    if (ch === 91) {
      return false;
    } else if (ch === 93) {
      labelEnd = pos;
      break;
    } else if (ch === 10) {
      lines++;
    } else if (ch === 92) {
      pos++;
      if (pos < max && str.charCodeAt(pos) === 10) {
        lines++;
      }
    }
  }
  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 58) {
    return false;
  }
  for (pos = labelEnd + 2; pos < max; pos++) {
    ch = str.charCodeAt(pos);
    if (ch === 10) {
      lines++;
    } else if (isSpace$6(ch))
      ;
    else {
      break;
    }
  }
  res = state.md.helpers.parseLinkDestination(str, pos, max);
  if (!res.ok) {
    return false;
  }
  href = state.md.normalizeLink(res.str);
  if (!state.md.validateLink(href)) {
    return false;
  }
  pos = res.pos;
  lines += res.lines;
  destEndPos = pos;
  destEndLineNo = lines;
  start = pos;
  for (; pos < max; pos++) {
    ch = str.charCodeAt(pos);
    if (ch === 10) {
      lines++;
    } else if (isSpace$6(ch))
      ;
    else {
      break;
    }
  }
  res = state.md.helpers.parseLinkTitle(str, pos, max);
  if (pos < max && start !== pos && res.ok) {
    title2 = res.str;
    pos = res.pos;
    lines += res.lines;
  } else {
    title2 = "";
    pos = destEndPos;
    lines = destEndLineNo;
  }
  while (pos < max) {
    ch = str.charCodeAt(pos);
    if (!isSpace$6(ch)) {
      break;
    }
    pos++;
  }
  if (pos < max && str.charCodeAt(pos) !== 10) {
    if (title2) {
      title2 = "";
      pos = destEndPos;
      lines = destEndLineNo;
      while (pos < max) {
        ch = str.charCodeAt(pos);
        if (!isSpace$6(ch)) {
          break;
        }
        pos++;
      }
    }
  }
  if (pos < max && str.charCodeAt(pos) !== 10) {
    return false;
  }
  label2 = normalizeReference$2(str.slice(1, labelEnd));
  if (!label2) {
    return false;
  }
  if (silent) {
    return true;
  }
  if (typeof state.env.references === "undefined") {
    state.env.references = {};
  }
  if (typeof state.env.references[label2] === "undefined") {
    state.env.references[label2] = { title: title2, href };
  }
  state.parentType = oldParentType;
  state.line = startLine + lines + 1;
  return true;
};
var html_blocks = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "section",
  "source",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
];
var html_re = {};
var attr_name = "[a-zA-Z_:][a-zA-Z0-9:._-]*";
var unquoted = "[^\"'=<>`\\x00-\\x20]+";
var single_quoted = "'[^']*'";
var double_quoted = '"[^"]*"';
var attr_value = "(?:" + unquoted + "|" + single_quoted + "|" + double_quoted + ")";
var attribute = "(?:\\s+" + attr_name + "(?:\\s*=\\s*" + attr_value + ")?)";
var open_tag = "<[A-Za-z][A-Za-z0-9\\-]*" + attribute + "*\\s*\\/?>";
var close_tag = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";
var comment$1 = "<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->";
var processing = "<[?][\\s\\S]*?[?]>";
var declaration$1 = "<![A-Z]+\\s+[^>]*>";
var cdata = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>";
var HTML_TAG_RE$1 = new RegExp("^(?:" + open_tag + "|" + close_tag + "|" + comment$1 + "|" + processing + "|" + declaration$1 + "|" + cdata + ")");
var HTML_OPEN_CLOSE_TAG_RE$1 = new RegExp("^(?:" + open_tag + "|" + close_tag + ")");
html_re.HTML_TAG_RE = HTML_TAG_RE$1;
html_re.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE$1;
var block_names = html_blocks;
var HTML_OPEN_CLOSE_TAG_RE = html_re.HTML_OPEN_CLOSE_TAG_RE;
var HTML_SEQUENCES = [
  [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true],
  [/^<!--/, /-->/, true],
  [/^<\?/, /\?>/, true],
  [/^<![A-Z]/, />/, true],
  [/^<!\[CDATA\[/, /\]\]>/, true],
  [new RegExp("^</?(" + block_names.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, true],
  [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + "\\s*$"), /^$/, false]
];
var html_block = function html_block2(state, startLine, endLine, silent) {
  var i, nextLine, token2, lineText, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  if (!state.md.options.html) {
    return false;
  }
  if (state.src.charCodeAt(pos) !== 60) {
    return false;
  }
  lineText = state.src.slice(pos, max);
  for (i = 0; i < HTML_SEQUENCES.length; i++) {
    if (HTML_SEQUENCES[i][0].test(lineText)) {
      break;
    }
  }
  if (i === HTML_SEQUENCES.length) {
    return false;
  }
  if (silent) {
    return HTML_SEQUENCES[i][2];
  }
  nextLine = startLine + 1;
  if (!HTML_SEQUENCES[i][1].test(lineText)) {
    for (; nextLine < endLine; nextLine++) {
      if (state.sCount[nextLine] < state.blkIndent) {
        break;
      }
      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      max = state.eMarks[nextLine];
      lineText = state.src.slice(pos, max);
      if (HTML_SEQUENCES[i][1].test(lineText)) {
        if (lineText.length !== 0) {
          nextLine++;
        }
        break;
      }
    }
  }
  state.line = nextLine;
  token2 = state.push("html_block", "", 0);
  token2.map = [startLine, nextLine];
  token2.content = state.getLines(startLine, nextLine, state.blkIndent, true);
  return true;
};
var isSpace$5 = utils$1.isSpace;
var heading = function heading2(state, startLine, endLine, silent) {
  var ch, level, tmp, token2, pos = state.bMarks[startLine] + state.tShift[startLine], max = state.eMarks[startLine];
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  ch = state.src.charCodeAt(pos);
  if (ch !== 35 || pos >= max) {
    return false;
  }
  level = 1;
  ch = state.src.charCodeAt(++pos);
  while (ch === 35 && pos < max && level <= 6) {
    level++;
    ch = state.src.charCodeAt(++pos);
  }
  if (level > 6 || pos < max && !isSpace$5(ch)) {
    return false;
  }
  if (silent) {
    return true;
  }
  max = state.skipSpacesBack(max, pos);
  tmp = state.skipCharsBack(max, 35, pos);
  if (tmp > pos && isSpace$5(state.src.charCodeAt(tmp - 1))) {
    max = tmp;
  }
  state.line = startLine + 1;
  token2 = state.push("heading_open", "h" + String(level), 1);
  token2.markup = "########".slice(0, level);
  token2.map = [startLine, state.line];
  token2 = state.push("inline", "", 0);
  token2.content = state.src.slice(pos, max).trim();
  token2.map = [startLine, state.line];
  token2.children = [];
  token2 = state.push("heading_close", "h" + String(level), -1);
  token2.markup = "########".slice(0, level);
  return true;
};
var lheading = function lheading2(state, startLine, endLine) {
  var content2, terminate, i, l, token2, pos, max, level, marker2, nextLine = startLine + 1, oldParentType, terminatorRules = state.md.block.ruler.getRules("paragraph");
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  oldParentType = state.parentType;
  state.parentType = "paragraph";
  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    if (state.sCount[nextLine] - state.blkIndent > 3) {
      continue;
    }
    if (state.sCount[nextLine] >= state.blkIndent) {
      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      max = state.eMarks[nextLine];
      if (pos < max) {
        marker2 = state.src.charCodeAt(pos);
        if (marker2 === 45 || marker2 === 61) {
          pos = state.skipChars(pos, marker2);
          pos = state.skipSpaces(pos);
          if (pos >= max) {
            level = marker2 === 61 ? 1 : 2;
            break;
          }
        }
      }
    }
    if (state.sCount[nextLine] < 0) {
      continue;
    }
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
  }
  if (!level) {
    return false;
  }
  content2 = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
  state.line = nextLine + 1;
  token2 = state.push("heading_open", "h" + String(level), 1);
  token2.markup = String.fromCharCode(marker2);
  token2.map = [startLine, state.line];
  token2 = state.push("inline", "", 0);
  token2.content = content2;
  token2.map = [startLine, state.line - 1];
  token2.children = [];
  token2 = state.push("heading_close", "h" + String(level), -1);
  token2.markup = String.fromCharCode(marker2);
  state.parentType = oldParentType;
  return true;
};
var paragraph = function paragraph2(state, startLine) {
  var content2, terminate, i, l, token2, oldParentType, nextLine = startLine + 1, terminatorRules = state.md.block.ruler.getRules("paragraph"), endLine = state.lineMax;
  oldParentType = state.parentType;
  state.parentType = "paragraph";
  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    if (state.sCount[nextLine] - state.blkIndent > 3) {
      continue;
    }
    if (state.sCount[nextLine] < 0) {
      continue;
    }
    terminate = false;
    for (i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
  }
  content2 = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
  state.line = nextLine;
  token2 = state.push("paragraph_open", "p", 1);
  token2.map = [startLine, state.line];
  token2 = state.push("inline", "", 0);
  token2.content = content2;
  token2.map = [startLine, state.line];
  token2.children = [];
  token2 = state.push("paragraph_close", "p", -1);
  state.parentType = oldParentType;
  return true;
};
var Token$1 = token;
var isSpace$4 = utils$1.isSpace;
function StateBlock(src, md, env, tokens) {
  var ch, s, start, pos, len, indent2, offset, indent_found;
  this.src = src;
  this.md = md;
  this.env = env;
  this.tokens = tokens;
  this.bMarks = [];
  this.eMarks = [];
  this.tShift = [];
  this.sCount = [];
  this.bsCount = [];
  this.blkIndent = 0;
  this.line = 0;
  this.lineMax = 0;
  this.tight = false;
  this.ddIndent = -1;
  this.listIndent = -1;
  this.parentType = "root";
  this.level = 0;
  this.result = "";
  s = this.src;
  indent_found = false;
  for (start = pos = indent2 = offset = 0, len = s.length; pos < len; pos++) {
    ch = s.charCodeAt(pos);
    if (!indent_found) {
      if (isSpace$4(ch)) {
        indent2++;
        if (ch === 9) {
          offset += 4 - offset % 4;
        } else {
          offset++;
        }
        continue;
      } else {
        indent_found = true;
      }
    }
    if (ch === 10 || pos === len - 1) {
      if (ch !== 10) {
        pos++;
      }
      this.bMarks.push(start);
      this.eMarks.push(pos);
      this.tShift.push(indent2);
      this.sCount.push(offset);
      this.bsCount.push(0);
      indent_found = false;
      indent2 = 0;
      offset = 0;
      start = pos + 1;
    }
  }
  this.bMarks.push(s.length);
  this.eMarks.push(s.length);
  this.tShift.push(0);
  this.sCount.push(0);
  this.bsCount.push(0);
  this.lineMax = this.bMarks.length - 1;
}
StateBlock.prototype.push = function(type, tag2, nesting) {
  var token2 = new Token$1(type, tag2, nesting);
  token2.block = true;
  if (nesting < 0)
    this.level--;
  token2.level = this.level;
  if (nesting > 0)
    this.level++;
  this.tokens.push(token2);
  return token2;
};
StateBlock.prototype.isEmpty = function isEmpty3(line) {
  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
};
StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
  for (var max = this.lineMax; from < max; from++) {
    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
      break;
    }
  }
  return from;
};
StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
  var ch;
  for (var max = this.src.length; pos < max; pos++) {
    ch = this.src.charCodeAt(pos);
    if (!isSpace$4(ch)) {
      break;
    }
  }
  return pos;
};
StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
  if (pos <= min) {
    return pos;
  }
  while (pos > min) {
    if (!isSpace$4(this.src.charCodeAt(--pos))) {
      return pos + 1;
    }
  }
  return pos;
};
StateBlock.prototype.skipChars = function skipChars(pos, code3) {
  for (var max = this.src.length; pos < max; pos++) {
    if (this.src.charCodeAt(pos) !== code3) {
      break;
    }
  }
  return pos;
};
StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code3, min) {
  if (pos <= min) {
    return pos;
  }
  while (pos > min) {
    if (code3 !== this.src.charCodeAt(--pos)) {
      return pos + 1;
    }
  }
  return pos;
};
StateBlock.prototype.getLines = function getLines(begin, end2, indent2, keepLastLF) {
  var i, lineIndent, ch, first, last, queue, lineStart, line = begin;
  if (begin >= end2) {
    return "";
  }
  queue = new Array(end2 - begin);
  for (i = 0; line < end2; line++, i++) {
    lineIndent = 0;
    lineStart = first = this.bMarks[line];
    if (line + 1 < end2 || keepLastLF) {
      last = this.eMarks[line] + 1;
    } else {
      last = this.eMarks[line];
    }
    while (first < last && lineIndent < indent2) {
      ch = this.src.charCodeAt(first);
      if (isSpace$4(ch)) {
        if (ch === 9) {
          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
        } else {
          lineIndent++;
        }
      } else if (first - lineStart < this.tShift[line]) {
        lineIndent++;
      } else {
        break;
      }
      first++;
    }
    if (lineIndent > indent2) {
      queue[i] = new Array(lineIndent - indent2 + 1).join(" ") + this.src.slice(first, last);
    } else {
      queue[i] = this.src.slice(first, last);
    }
  }
  return queue.join("");
};
StateBlock.prototype.Token = Token$1;
var state_block = StateBlock;
var Ruler$1 = ruler;
var _rules$1 = [
  ["table", table$1, ["paragraph", "reference"]],
  ["code", code],
  ["fence", fence, ["paragraph", "reference", "blockquote", "list"]],
  ["blockquote", blockquote, ["paragraph", "reference", "blockquote", "list"]],
  ["hr", hr, ["paragraph", "reference", "blockquote", "list"]],
  ["list", list$3, ["paragraph", "reference", "blockquote"]],
  ["reference", reference],
  ["html_block", html_block, ["paragraph", "reference", "blockquote"]],
  ["heading", heading, ["paragraph", "reference", "blockquote"]],
  ["lheading", lheading],
  ["paragraph", paragraph]
];
function ParserBlock$1() {
  this.ruler = new Ruler$1();
  for (var i = 0; i < _rules$1.length; i++) {
    this.ruler.push(_rules$1[i][0], _rules$1[i][1], { alt: (_rules$1[i][2] || []).slice() });
  }
}
ParserBlock$1.prototype.tokenize = function(state, startLine, endLine) {
  var ok2, i, rules = this.ruler.getRules(""), len = rules.length, line = startLine, hasEmptyLines = false, maxNesting = state.md.options.maxNesting;
  while (line < endLine) {
    state.line = line = state.skipEmptyLines(line);
    if (line >= endLine) {
      break;
    }
    if (state.sCount[line] < state.blkIndent) {
      break;
    }
    if (state.level >= maxNesting) {
      state.line = endLine;
      break;
    }
    for (i = 0; i < len; i++) {
      ok2 = rules[i](state, line, endLine, false);
      if (ok2) {
        break;
      }
    }
    state.tight = !hasEmptyLines;
    if (state.isEmpty(state.line - 1)) {
      hasEmptyLines = true;
    }
    line = state.line;
    if (line < endLine && state.isEmpty(line)) {
      hasEmptyLines = true;
      line++;
      state.line = line;
    }
  }
};
ParserBlock$1.prototype.parse = function(src, md, env, outTokens) {
  var state;
  if (!src) {
    return;
  }
  state = new this.State(src, md, env, outTokens);
  this.tokenize(state, state.line, state.lineMax);
};
ParserBlock$1.prototype.State = state_block;
var parser_block = ParserBlock$1;
function isTerminatorChar(ch) {
  switch (ch) {
    case 10:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 42:
    case 43:
    case 45:
    case 58:
    case 60:
    case 61:
    case 62:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 125:
    case 126:
      return true;
    default:
      return false;
  }
}
var text = function text2(state, silent) {
  var pos = state.pos;
  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
    pos++;
  }
  if (pos === state.pos) {
    return false;
  }
  if (!silent) {
    state.pending += state.src.slice(state.pos, pos);
  }
  state.pos = pos;
  return true;
};
var isSpace$3 = utils$1.isSpace;
var newline = function newline2(state, silent) {
  var pmax, max, ws, pos = state.pos;
  if (state.src.charCodeAt(pos) !== 10) {
    return false;
  }
  pmax = state.pending.length - 1;
  max = state.posMax;
  if (!silent) {
    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 32) {
      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 32) {
        ws = pmax - 1;
        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 32)
          ws--;
        state.pending = state.pending.slice(0, ws);
        state.push("hardbreak", "br", 0);
      } else {
        state.pending = state.pending.slice(0, -1);
        state.push("softbreak", "br", 0);
      }
    } else {
      state.push("softbreak", "br", 0);
    }
  }
  pos++;
  while (pos < max && isSpace$3(state.src.charCodeAt(pos))) {
    pos++;
  }
  state.pos = pos;
  return true;
};
var isSpace$2 = utils$1.isSpace;
var ESCAPED = [];
for (var i = 0; i < 256; i++) {
  ESCAPED.push(0);
}
"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(ch) {
  ESCAPED[ch.charCodeAt(0)] = 1;
});
var _escape = function escape(state, silent) {
  var ch, pos = state.pos, max = state.posMax;
  if (state.src.charCodeAt(pos) !== 92) {
    return false;
  }
  pos++;
  if (pos < max) {
    ch = state.src.charCodeAt(pos);
    if (ch < 256 && ESCAPED[ch] !== 0) {
      if (!silent) {
        state.pending += state.src[pos];
      }
      state.pos += 2;
      return true;
    }
    if (ch === 10) {
      if (!silent) {
        state.push("hardbreak", "br", 0);
      }
      pos++;
      while (pos < max) {
        ch = state.src.charCodeAt(pos);
        if (!isSpace$2(ch)) {
          break;
        }
        pos++;
      }
      state.pos = pos;
      return true;
    }
  }
  if (!silent) {
    state.pending += "\\";
  }
  state.pos++;
  return true;
};
var backticks = function backtick(state, silent) {
  var start, max, marker2, token2, matchStart, matchEnd, openerLength, closerLength, pos = state.pos, ch = state.src.charCodeAt(pos);
  if (ch !== 96) {
    return false;
  }
  start = pos;
  pos++;
  max = state.posMax;
  while (pos < max && state.src.charCodeAt(pos) === 96) {
    pos++;
  }
  marker2 = state.src.slice(start, pos);
  openerLength = marker2.length;
  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {
    if (!silent)
      state.pending += marker2;
    state.pos += openerLength;
    return true;
  }
  matchStart = matchEnd = pos;
  while ((matchStart = state.src.indexOf("`", matchEnd)) !== -1) {
    matchEnd = matchStart + 1;
    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 96) {
      matchEnd++;
    }
    closerLength = matchEnd - matchStart;
    if (closerLength === openerLength) {
      if (!silent) {
        token2 = state.push("code_inline", "code", 0);
        token2.markup = marker2;
        token2.content = state.src.slice(pos, matchStart).replace(/\n/g, " ").replace(/^ (.+) $/, "$1");
      }
      state.pos = matchEnd;
      return true;
    }
    state.backticks[closerLength] = matchStart;
  }
  state.backticksScanned = true;
  if (!silent)
    state.pending += marker2;
  state.pos += openerLength;
  return true;
};
var strikethrough = {};
strikethrough.tokenize = function strikethrough2(state, silent) {
  var i, scanned, token2, len, ch, start = state.pos, marker2 = state.src.charCodeAt(start);
  if (silent) {
    return false;
  }
  if (marker2 !== 126) {
    return false;
  }
  scanned = state.scanDelims(state.pos, true);
  len = scanned.length;
  ch = String.fromCharCode(marker2);
  if (len < 2) {
    return false;
  }
  if (len % 2) {
    token2 = state.push("text", "", 0);
    token2.content = ch;
    len--;
  }
  for (i = 0; i < len; i += 2) {
    token2 = state.push("text", "", 0);
    token2.content = ch + ch;
    state.delimiters.push({
      marker: marker2,
      length: 0,
      token: state.tokens.length - 1,
      end: -1,
      open: scanned.can_open,
      close: scanned.can_close
    });
  }
  state.pos += scanned.length;
  return true;
};
function postProcess$1(state, delimiters) {
  var i, j, startDelim, endDelim, token2, loneMarkers = [], max = delimiters.length;
  for (i = 0; i < max; i++) {
    startDelim = delimiters[i];
    if (startDelim.marker !== 126) {
      continue;
    }
    if (startDelim.end === -1) {
      continue;
    }
    endDelim = delimiters[startDelim.end];
    token2 = state.tokens[startDelim.token];
    token2.type = "s_open";
    token2.tag = "s";
    token2.nesting = 1;
    token2.markup = "~~";
    token2.content = "";
    token2 = state.tokens[endDelim.token];
    token2.type = "s_close";
    token2.tag = "s";
    token2.nesting = -1;
    token2.markup = "~~";
    token2.content = "";
    if (state.tokens[endDelim.token - 1].type === "text" && state.tokens[endDelim.token - 1].content === "~") {
      loneMarkers.push(endDelim.token - 1);
    }
  }
  while (loneMarkers.length) {
    i = loneMarkers.pop();
    j = i + 1;
    while (j < state.tokens.length && state.tokens[j].type === "s_close") {
      j++;
    }
    j--;
    if (i !== j) {
      token2 = state.tokens[j];
      state.tokens[j] = state.tokens[i];
      state.tokens[i] = token2;
    }
  }
}
strikethrough.postProcess = function strikethrough3(state) {
  var curr, tokens_meta = state.tokens_meta, max = state.tokens_meta.length;
  postProcess$1(state, state.delimiters);
  for (curr = 0; curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      postProcess$1(state, tokens_meta[curr].delimiters);
    }
  }
};
var emphasis = {};
emphasis.tokenize = function emphasis2(state, silent) {
  var i, scanned, token2, start = state.pos, marker2 = state.src.charCodeAt(start);
  if (silent) {
    return false;
  }
  if (marker2 !== 95 && marker2 !== 42) {
    return false;
  }
  scanned = state.scanDelims(state.pos, marker2 === 42);
  for (i = 0; i < scanned.length; i++) {
    token2 = state.push("text", "", 0);
    token2.content = String.fromCharCode(marker2);
    state.delimiters.push({
      marker: marker2,
      length: scanned.length,
      token: state.tokens.length - 1,
      end: -1,
      open: scanned.can_open,
      close: scanned.can_close
    });
  }
  state.pos += scanned.length;
  return true;
};
function postProcess(state, delimiters) {
  var i, startDelim, endDelim, token2, ch, isStrong, max = delimiters.length;
  for (i = max - 1; i >= 0; i--) {
    startDelim = delimiters[i];
    if (startDelim.marker !== 95 && startDelim.marker !== 42) {
      continue;
    }
    if (startDelim.end === -1) {
      continue;
    }
    endDelim = delimiters[startDelim.end];
    isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1;
    ch = String.fromCharCode(startDelim.marker);
    token2 = state.tokens[startDelim.token];
    token2.type = isStrong ? "strong_open" : "em_open";
    token2.tag = isStrong ? "strong" : "em";
    token2.nesting = 1;
    token2.markup = isStrong ? ch + ch : ch;
    token2.content = "";
    token2 = state.tokens[endDelim.token];
    token2.type = isStrong ? "strong_close" : "em_close";
    token2.tag = isStrong ? "strong" : "em";
    token2.nesting = -1;
    token2.markup = isStrong ? ch + ch : ch;
    token2.content = "";
    if (isStrong) {
      state.tokens[delimiters[i - 1].token].content = "";
      state.tokens[delimiters[startDelim.end + 1].token].content = "";
      i--;
    }
  }
}
emphasis.postProcess = function emphasis3(state) {
  var curr, tokens_meta = state.tokens_meta, max = state.tokens_meta.length;
  postProcess(state, state.delimiters);
  for (curr = 0; curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      postProcess(state, tokens_meta[curr].delimiters);
    }
  }
};
var normalizeReference$1 = utils$1.normalizeReference;
var isSpace$1 = utils$1.isSpace;
var link$2 = function link(state, silent) {
  var attrs, code3, label2, labelEnd, labelStart, pos, res, ref2, token2, href = "", title2 = "", oldPos = state.pos, max = state.posMax, start = state.pos, parseReference = true;
  if (state.src.charCodeAt(state.pos) !== 91) {
    return false;
  }
  labelStart = state.pos + 1;
  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);
  if (labelEnd < 0) {
    return false;
  }
  pos = labelEnd + 1;
  if (pos < max && state.src.charCodeAt(pos) === 40) {
    parseReference = false;
    pos++;
    for (; pos < max; pos++) {
      code3 = state.src.charCodeAt(pos);
      if (!isSpace$1(code3) && code3 !== 10) {
        break;
      }
    }
    if (pos >= max) {
      return false;
    }
    start = pos;
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
    if (res.ok) {
      href = state.md.normalizeLink(res.str);
      if (state.md.validateLink(href)) {
        pos = res.pos;
      } else {
        href = "";
      }
      start = pos;
      for (; pos < max; pos++) {
        code3 = state.src.charCodeAt(pos);
        if (!isSpace$1(code3) && code3 !== 10) {
          break;
        }
      }
      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
      if (pos < max && start !== pos && res.ok) {
        title2 = res.str;
        pos = res.pos;
        for (; pos < max; pos++) {
          code3 = state.src.charCodeAt(pos);
          if (!isSpace$1(code3) && code3 !== 10) {
            break;
          }
        }
      }
    }
    if (pos >= max || state.src.charCodeAt(pos) !== 41) {
      parseReference = true;
    }
    pos++;
  }
  if (parseReference) {
    if (typeof state.env.references === "undefined") {
      return false;
    }
    if (pos < max && state.src.charCodeAt(pos) === 91) {
      start = pos + 1;
      pos = state.md.helpers.parseLinkLabel(state, pos);
      if (pos >= 0) {
        label2 = state.src.slice(start, pos++);
      } else {
        pos = labelEnd + 1;
      }
    } else {
      pos = labelEnd + 1;
    }
    if (!label2) {
      label2 = state.src.slice(labelStart, labelEnd);
    }
    ref2 = state.env.references[normalizeReference$1(label2)];
    if (!ref2) {
      state.pos = oldPos;
      return false;
    }
    href = ref2.href;
    title2 = ref2.title;
  }
  if (!silent) {
    state.pos = labelStart;
    state.posMax = labelEnd;
    token2 = state.push("link_open", "a", 1);
    token2.attrs = attrs = [["href", href]];
    if (title2) {
      attrs.push(["title", title2]);
    }
    state.md.inline.tokenize(state);
    token2 = state.push("link_close", "a", -1);
  }
  state.pos = pos;
  state.posMax = max;
  return true;
};
var normalizeReference = utils$1.normalizeReference;
var isSpace = utils$1.isSpace;
var image$1 = function image(state, silent) {
  var attrs, code3, content2, label2, labelEnd, labelStart, pos, ref2, res, title2, token2, tokens, start, href = "", oldPos = state.pos, max = state.posMax;
  if (state.src.charCodeAt(state.pos) !== 33) {
    return false;
  }
  if (state.src.charCodeAt(state.pos + 1) !== 91) {
    return false;
  }
  labelStart = state.pos + 2;
  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);
  if (labelEnd < 0) {
    return false;
  }
  pos = labelEnd + 1;
  if (pos < max && state.src.charCodeAt(pos) === 40) {
    pos++;
    for (; pos < max; pos++) {
      code3 = state.src.charCodeAt(pos);
      if (!isSpace(code3) && code3 !== 10) {
        break;
      }
    }
    if (pos >= max) {
      return false;
    }
    start = pos;
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
    if (res.ok) {
      href = state.md.normalizeLink(res.str);
      if (state.md.validateLink(href)) {
        pos = res.pos;
      } else {
        href = "";
      }
    }
    start = pos;
    for (; pos < max; pos++) {
      code3 = state.src.charCodeAt(pos);
      if (!isSpace(code3) && code3 !== 10) {
        break;
      }
    }
    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
    if (pos < max && start !== pos && res.ok) {
      title2 = res.str;
      pos = res.pos;
      for (; pos < max; pos++) {
        code3 = state.src.charCodeAt(pos);
        if (!isSpace(code3) && code3 !== 10) {
          break;
        }
      }
    } else {
      title2 = "";
    }
    if (pos >= max || state.src.charCodeAt(pos) !== 41) {
      state.pos = oldPos;
      return false;
    }
    pos++;
  } else {
    if (typeof state.env.references === "undefined") {
      return false;
    }
    if (pos < max && state.src.charCodeAt(pos) === 91) {
      start = pos + 1;
      pos = state.md.helpers.parseLinkLabel(state, pos);
      if (pos >= 0) {
        label2 = state.src.slice(start, pos++);
      } else {
        pos = labelEnd + 1;
      }
    } else {
      pos = labelEnd + 1;
    }
    if (!label2) {
      label2 = state.src.slice(labelStart, labelEnd);
    }
    ref2 = state.env.references[normalizeReference(label2)];
    if (!ref2) {
      state.pos = oldPos;
      return false;
    }
    href = ref2.href;
    title2 = ref2.title;
  }
  if (!silent) {
    content2 = state.src.slice(labelStart, labelEnd);
    state.md.inline.parse(
      content2,
      state.md,
      state.env,
      tokens = []
    );
    token2 = state.push("image", "img", 0);
    token2.attrs = attrs = [["src", href], ["alt", ""]];
    token2.children = tokens;
    token2.content = content2;
    if (title2) {
      attrs.push(["title", title2]);
    }
  }
  state.pos = pos;
  state.posMax = max;
  return true;
};
var EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/;
var autolink = function autolink2(state, silent) {
  var url, fullUrl, token2, ch, start, max, pos = state.pos;
  if (state.src.charCodeAt(pos) !== 60) {
    return false;
  }
  start = state.pos;
  max = state.posMax;
  for (; ; ) {
    if (++pos >= max)
      return false;
    ch = state.src.charCodeAt(pos);
    if (ch === 60)
      return false;
    if (ch === 62)
      break;
  }
  url = state.src.slice(start + 1, pos);
  if (AUTOLINK_RE.test(url)) {
    fullUrl = state.md.normalizeLink(url);
    if (!state.md.validateLink(fullUrl)) {
      return false;
    }
    if (!silent) {
      token2 = state.push("link_open", "a", 1);
      token2.attrs = [["href", fullUrl]];
      token2.markup = "autolink";
      token2.info = "auto";
      token2 = state.push("text", "", 0);
      token2.content = state.md.normalizeLinkText(url);
      token2 = state.push("link_close", "a", -1);
      token2.markup = "autolink";
      token2.info = "auto";
    }
    state.pos += url.length + 2;
    return true;
  }
  if (EMAIL_RE.test(url)) {
    fullUrl = state.md.normalizeLink("mailto:" + url);
    if (!state.md.validateLink(fullUrl)) {
      return false;
    }
    if (!silent) {
      token2 = state.push("link_open", "a", 1);
      token2.attrs = [["href", fullUrl]];
      token2.markup = "autolink";
      token2.info = "auto";
      token2 = state.push("text", "", 0);
      token2.content = state.md.normalizeLinkText(url);
      token2 = state.push("link_close", "a", -1);
      token2.markup = "autolink";
      token2.info = "auto";
    }
    state.pos += url.length + 2;
    return true;
  }
  return false;
};
var HTML_TAG_RE = html_re.HTML_TAG_RE;
function isLetter(ch) {
  var lc = ch | 32;
  return lc >= 97 && lc <= 122;
}
var html_inline = function html_inline2(state, silent) {
  var ch, match2, max, token2, pos = state.pos;
  if (!state.md.options.html) {
    return false;
  }
  max = state.posMax;
  if (state.src.charCodeAt(pos) !== 60 || pos + 2 >= max) {
    return false;
  }
  ch = state.src.charCodeAt(pos + 1);
  if (ch !== 33 && ch !== 63 && ch !== 47 && !isLetter(ch)) {
    return false;
  }
  match2 = state.src.slice(pos).match(HTML_TAG_RE);
  if (!match2) {
    return false;
  }
  if (!silent) {
    token2 = state.push("html_inline", "", 0);
    token2.content = state.src.slice(pos, pos + match2[0].length);
  }
  state.pos += match2[0].length;
  return true;
};
var entities = entities$1;
var has$1 = utils$1.has;
var isValidEntityCode = utils$1.isValidEntityCode;
var fromCodePoint$1 = utils$1.fromCodePoint;
var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;
var entity = function entity2(state, silent) {
  var ch, code3, match2, pos = state.pos, max = state.posMax;
  if (state.src.charCodeAt(pos) !== 38) {
    return false;
  }
  if (pos + 1 < max) {
    ch = state.src.charCodeAt(pos + 1);
    if (ch === 35) {
      match2 = state.src.slice(pos).match(DIGITAL_RE);
      if (match2) {
        if (!silent) {
          code3 = match2[1][0].toLowerCase() === "x" ? parseInt(match2[1].slice(1), 16) : parseInt(match2[1], 10);
          state.pending += isValidEntityCode(code3) ? fromCodePoint$1(code3) : fromCodePoint$1(65533);
        }
        state.pos += match2[0].length;
        return true;
      }
    } else {
      match2 = state.src.slice(pos).match(NAMED_RE);
      if (match2) {
        if (has$1(entities, match2[1])) {
          if (!silent) {
            state.pending += entities[match2[1]];
          }
          state.pos += match2[0].length;
          return true;
        }
      }
    }
  }
  if (!silent) {
    state.pending += "&";
  }
  state.pos++;
  return true;
};
function processDelimiters(state, delimiters) {
  var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx, isOddMatch, lastJump, openersBottom = {}, max = delimiters.length;
  if (!max)
    return;
  var headerIdx = 0;
  var lastTokenIdx = -2;
  var jumps = [];
  for (closerIdx = 0; closerIdx < max; closerIdx++) {
    closer = delimiters[closerIdx];
    jumps.push(0);
    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {
      headerIdx = closerIdx;
    }
    lastTokenIdx = closer.token;
    closer.length = closer.length || 0;
    if (!closer.close)
      continue;
    if (!openersBottom.hasOwnProperty(closer.marker)) {
      openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];
    }
    minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];
    openerIdx = headerIdx - jumps[headerIdx] - 1;
    newMinOpenerIdx = openerIdx;
    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {
      opener = delimiters[openerIdx];
      if (opener.marker !== closer.marker)
        continue;
      if (opener.open && opener.end < 0) {
        isOddMatch = false;
        if (opener.close || closer.open) {
          if ((opener.length + closer.length) % 3 === 0) {
            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
              isOddMatch = true;
            }
          }
        }
        if (!isOddMatch) {
          lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;
          jumps[closerIdx] = closerIdx - openerIdx + lastJump;
          jumps[openerIdx] = lastJump;
          closer.open = false;
          opener.end = closerIdx;
          opener.close = false;
          newMinOpenerIdx = -1;
          lastTokenIdx = -2;
          break;
        }
      }
    }
    if (newMinOpenerIdx !== -1) {
      openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;
    }
  }
}
var balance_pairs = function link_pairs(state) {
  var curr, tokens_meta = state.tokens_meta, max = state.tokens_meta.length;
  processDelimiters(state, state.delimiters);
  for (curr = 0; curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      processDelimiters(state, tokens_meta[curr].delimiters);
    }
  }
};
var text_collapse = function text_collapse2(state) {
  var curr, last, level = 0, tokens = state.tokens, max = state.tokens.length;
  for (curr = last = 0; curr < max; curr++) {
    if (tokens[curr].nesting < 0)
      level--;
    tokens[curr].level = level;
    if (tokens[curr].nesting > 0)
      level++;
    if (tokens[curr].type === "text" && curr + 1 < max && tokens[curr + 1].type === "text") {
      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
    } else {
      if (curr !== last) {
        tokens[last] = tokens[curr];
      }
      last++;
    }
  }
  if (curr !== last) {
    tokens.length = last;
  }
};
var Token = token;
var isWhiteSpace = utils$1.isWhiteSpace;
var isPunctChar = utils$1.isPunctChar;
var isMdAsciiPunct = utils$1.isMdAsciiPunct;
function StateInline(src, md, env, outTokens) {
  this.src = src;
  this.env = env;
  this.md = md;
  this.tokens = outTokens;
  this.tokens_meta = Array(outTokens.length);
  this.pos = 0;
  this.posMax = this.src.length;
  this.level = 0;
  this.pending = "";
  this.pendingLevel = 0;
  this.cache = {};
  this.delimiters = [];
  this._prev_delimiters = [];
  this.backticks = {};
  this.backticksScanned = false;
}
StateInline.prototype.pushPending = function() {
  var token2 = new Token("text", "", 0);
  token2.content = this.pending;
  token2.level = this.pendingLevel;
  this.tokens.push(token2);
  this.pending = "";
  return token2;
};
StateInline.prototype.push = function(type, tag2, nesting) {
  if (this.pending) {
    this.pushPending();
  }
  var token2 = new Token(type, tag2, nesting);
  var token_meta = null;
  if (nesting < 0) {
    this.level--;
    this.delimiters = this._prev_delimiters.pop();
  }
  token2.level = this.level;
  if (nesting > 0) {
    this.level++;
    this._prev_delimiters.push(this.delimiters);
    this.delimiters = [];
    token_meta = { delimiters: this.delimiters };
  }
  this.pendingLevel = this.level;
  this.tokens.push(token2);
  this.tokens_meta.push(token_meta);
  return token2;
};
StateInline.prototype.scanDelims = function(start, canSplitWord) {
  var pos = start, lastChar, nextChar, count, can_open, can_close, isLastWhiteSpace, isLastPunctChar, isNextWhiteSpace, isNextPunctChar, left_flanking = true, right_flanking = true, max = this.posMax, marker2 = this.src.charCodeAt(start);
  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 32;
  while (pos < max && this.src.charCodeAt(pos) === marker2) {
    pos++;
  }
  count = pos - start;
  nextChar = pos < max ? this.src.charCodeAt(pos) : 32;
  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
  isLastWhiteSpace = isWhiteSpace(lastChar);
  isNextWhiteSpace = isWhiteSpace(nextChar);
  if (isNextWhiteSpace) {
    left_flanking = false;
  } else if (isNextPunctChar) {
    if (!(isLastWhiteSpace || isLastPunctChar)) {
      left_flanking = false;
    }
  }
  if (isLastWhiteSpace) {
    right_flanking = false;
  } else if (isLastPunctChar) {
    if (!(isNextWhiteSpace || isNextPunctChar)) {
      right_flanking = false;
    }
  }
  if (!canSplitWord) {
    can_open = left_flanking && (!right_flanking || isLastPunctChar);
    can_close = right_flanking && (!left_flanking || isNextPunctChar);
  } else {
    can_open = left_flanking;
    can_close = right_flanking;
  }
  return {
    can_open,
    can_close,
    length: count
  };
};
StateInline.prototype.Token = Token;
var state_inline = StateInline;
var Ruler = ruler;
var _rules = [
  ["text", text],
  ["newline", newline],
  ["escape", _escape],
  ["backticks", backticks],
  ["strikethrough", strikethrough.tokenize],
  ["emphasis", emphasis.tokenize],
  ["link", link$2],
  ["image", image$1],
  ["autolink", autolink],
  ["html_inline", html_inline],
  ["entity", entity]
];
var _rules2 = [
  ["balance_pairs", balance_pairs],
  ["strikethrough", strikethrough.postProcess],
  ["emphasis", emphasis.postProcess],
  ["text_collapse", text_collapse]
];
function ParserInline$1() {
  var i;
  this.ruler = new Ruler();
  for (i = 0; i < _rules.length; i++) {
    this.ruler.push(_rules[i][0], _rules[i][1]);
  }
  this.ruler2 = new Ruler();
  for (i = 0; i < _rules2.length; i++) {
    this.ruler2.push(_rules2[i][0], _rules2[i][1]);
  }
}
ParserInline$1.prototype.skipToken = function(state) {
  var ok2, i, pos = state.pos, rules = this.ruler.getRules(""), len = rules.length, maxNesting = state.md.options.maxNesting, cache = state.cache;
  if (typeof cache[pos] !== "undefined") {
    state.pos = cache[pos];
    return;
  }
  if (state.level < maxNesting) {
    for (i = 0; i < len; i++) {
      state.level++;
      ok2 = rules[i](state, true);
      state.level--;
      if (ok2) {
        break;
      }
    }
  } else {
    state.pos = state.posMax;
  }
  if (!ok2) {
    state.pos++;
  }
  cache[pos] = state.pos;
};
ParserInline$1.prototype.tokenize = function(state) {
  var ok2, i, rules = this.ruler.getRules(""), len = rules.length, end2 = state.posMax, maxNesting = state.md.options.maxNesting;
  while (state.pos < end2) {
    if (state.level < maxNesting) {
      for (i = 0; i < len; i++) {
        ok2 = rules[i](state, false);
        if (ok2) {
          break;
        }
      }
    }
    if (ok2) {
      if (state.pos >= end2) {
        break;
      }
      continue;
    }
    state.pending += state.src[state.pos++];
  }
  if (state.pending) {
    state.pushPending();
  }
};
ParserInline$1.prototype.parse = function(str, md, env, outTokens) {
  var i, rules, len;
  var state = new this.State(str, md, env, outTokens);
  this.tokenize(state);
  rules = this.ruler2.getRules("");
  len = rules.length;
  for (i = 0; i < len; i++) {
    rules[i](state);
  }
};
ParserInline$1.prototype.State = state_inline;
var parser_inline = ParserInline$1;
var re = function(opts) {
  var re2 = {};
  re2.src_Any = regex$3.source;
  re2.src_Cc = regex$2.source;
  re2.src_Z = regex.source;
  re2.src_P = regex$4.source;
  re2.src_ZPCc = [re2.src_Z, re2.src_P, re2.src_Cc].join("|");
  re2.src_ZCc = [re2.src_Z, re2.src_Cc].join("|");
  var text_separators = "[><\uFF5C]";
  re2.src_pseudo_letter = "(?:(?!" + text_separators + "|" + re2.src_ZPCc + ")" + re2.src_Any + ")";
  re2.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)";
  re2.src_auth = "(?:(?:(?!" + re2.src_ZCc + "|[@/\\[\\]()]).)+@)?";
  re2.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?";
  re2.src_host_terminator = "(?=$|" + text_separators + "|" + re2.src_ZPCc + ")(?!-|_|:\\d|\\.-|\\.(?!$|" + re2.src_ZPCc + "))";
  re2.src_path = "(?:[/?#](?:(?!" + re2.src_ZCc + "|" + text_separators + `|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!` + re2.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + re2.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + re2.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + re2.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + re2.src_ZCc + "|[']).)+\\'|\\'(?=" + re2.src_pseudo_letter + "|[-]).|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + re2.src_ZCc + "|[.]).|" + (opts && opts["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + ",(?!" + re2.src_ZCc + ").|;(?!" + re2.src_ZCc + ").|\\!+(?!" + re2.src_ZCc + "|[!]).|\\?(?!" + re2.src_ZCc + "|[?]).)+|\\/)?";
  re2.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';
  re2.src_xn = "xn--[a-z0-9\\-]{1,59}";
  re2.src_domain_root = "(?:" + re2.src_xn + "|" + re2.src_pseudo_letter + "{1,63})";
  re2.src_domain = "(?:" + re2.src_xn + "|(?:" + re2.src_pseudo_letter + ")|(?:" + re2.src_pseudo_letter + "(?:-|" + re2.src_pseudo_letter + "){0,61}" + re2.src_pseudo_letter + "))";
  re2.src_host = "(?:(?:(?:(?:" + re2.src_domain + ")\\.)*" + re2.src_domain + "))";
  re2.tpl_host_fuzzy = "(?:" + re2.src_ip4 + "|(?:(?:(?:" + re2.src_domain + ")\\.)+(?:%TLDS%)))";
  re2.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + re2.src_domain + ")\\.)+(?:%TLDS%))";
  re2.src_host_strict = re2.src_host + re2.src_host_terminator;
  re2.tpl_host_fuzzy_strict = re2.tpl_host_fuzzy + re2.src_host_terminator;
  re2.src_host_port_strict = re2.src_host + re2.src_port + re2.src_host_terminator;
  re2.tpl_host_port_fuzzy_strict = re2.tpl_host_fuzzy + re2.src_port + re2.src_host_terminator;
  re2.tpl_host_port_no_ip_fuzzy_strict = re2.tpl_host_no_ip_fuzzy + re2.src_port + re2.src_host_terminator;
  re2.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + re2.src_ZPCc + "|>|$))";
  re2.tpl_email_fuzzy = "(^|" + text_separators + '|"|\\(|' + re2.src_ZCc + ")(" + re2.src_email_name + "@" + re2.tpl_host_fuzzy_strict + ")";
  re2.tpl_link_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re2.src_ZPCc + "))((?![$+<=>^`|\uFF5C])" + re2.tpl_host_port_fuzzy_strict + re2.src_path + ")";
  re2.tpl_link_no_ip_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re2.src_ZPCc + "))((?![$+<=>^`|\uFF5C])" + re2.tpl_host_port_no_ip_fuzzy_strict + re2.src_path + ")";
  return re2;
};
function assign(obj) {
  var sources = Array.prototype.slice.call(arguments, 1);
  sources.forEach(function(source) {
    if (!source) {
      return;
    }
    Object.keys(source).forEach(function(key2) {
      obj[key2] = source[key2];
    });
  });
  return obj;
}
function _class(obj) {
  return Object.prototype.toString.call(obj);
}
function isString(obj) {
  return _class(obj) === "[object String]";
}
function isObject$1(obj) {
  return _class(obj) === "[object Object]";
}
function isRegExp(obj) {
  return _class(obj) === "[object RegExp]";
}
function isFunction2(obj) {
  return _class(obj) === "[object Function]";
}
function escapeRE(str) {
  return str.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
}
var defaultOptions = {
  fuzzyLink: true,
  fuzzyEmail: true,
  fuzzyIP: false
};
function isOptionsObj(obj) {
  return Object.keys(obj || {}).reduce(function(acc, k) {
    return acc || defaultOptions.hasOwnProperty(k);
  }, false);
}
var defaultSchemas = {
  "http:": {
    validate: function(text3, pos, self2) {
      var tail = text3.slice(pos);
      if (!self2.re.http) {
        self2.re.http = new RegExp(
          "^\\/\\/" + self2.re.src_auth + self2.re.src_host_port_strict + self2.re.src_path,
          "i"
        );
      }
      if (self2.re.http.test(tail)) {
        return tail.match(self2.re.http)[0].length;
      }
      return 0;
    }
  },
  "https:": "http:",
  "ftp:": "http:",
  "//": {
    validate: function(text3, pos, self2) {
      var tail = text3.slice(pos);
      if (!self2.re.no_http) {
        self2.re.no_http = new RegExp(
          "^" + self2.re.src_auth + "(?:localhost|(?:(?:" + self2.re.src_domain + ")\\.)+" + self2.re.src_domain_root + ")" + self2.re.src_port + self2.re.src_host_terminator + self2.re.src_path,
          "i"
        );
      }
      if (self2.re.no_http.test(tail)) {
        if (pos >= 3 && text3[pos - 3] === ":") {
          return 0;
        }
        if (pos >= 3 && text3[pos - 3] === "/") {
          return 0;
        }
        return tail.match(self2.re.no_http)[0].length;
      }
      return 0;
    }
  },
  "mailto:": {
    validate: function(text3, pos, self2) {
      var tail = text3.slice(pos);
      if (!self2.re.mailto) {
        self2.re.mailto = new RegExp(
          "^" + self2.re.src_email_name + "@" + self2.re.src_host_strict,
          "i"
        );
      }
      if (self2.re.mailto.test(tail)) {
        return tail.match(self2.re.mailto)[0].length;
      }
      return 0;
    }
  }
};
var tlds_2ch_src_re = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]";
var tlds_default = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444".split("|");
function resetScanCache(self2) {
  self2.__index__ = -1;
  self2.__text_cache__ = "";
}
function createValidator(re2) {
  return function(text3, pos) {
    var tail = text3.slice(pos);
    if (re2.test(tail)) {
      return tail.match(re2)[0].length;
    }
    return 0;
  };
}
function createNormalizer() {
  return function(match2, self2) {
    self2.normalize(match2);
  };
}
function compile(self2) {
  var re$1 = self2.re = re(self2.__opts__);
  var tlds2 = self2.__tlds__.slice();
  self2.onCompile();
  if (!self2.__tlds_replaced__) {
    tlds2.push(tlds_2ch_src_re);
  }
  tlds2.push(re$1.src_xn);
  re$1.src_tlds = tlds2.join("|");
  function untpl(tpl) {
    return tpl.replace("%TLDS%", re$1.src_tlds);
  }
  re$1.email_fuzzy = RegExp(untpl(re$1.tpl_email_fuzzy), "i");
  re$1.link_fuzzy = RegExp(untpl(re$1.tpl_link_fuzzy), "i");
  re$1.link_no_ip_fuzzy = RegExp(untpl(re$1.tpl_link_no_ip_fuzzy), "i");
  re$1.host_fuzzy_test = RegExp(untpl(re$1.tpl_host_fuzzy_test), "i");
  var aliases = [];
  self2.__compiled__ = {};
  function schemaError(name, val) {
    throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
  }
  Object.keys(self2.__schemas__).forEach(function(name) {
    var val = self2.__schemas__[name];
    if (val === null) {
      return;
    }
    var compiled = { validate: null, link: null };
    self2.__compiled__[name] = compiled;
    if (isObject$1(val)) {
      if (isRegExp(val.validate)) {
        compiled.validate = createValidator(val.validate);
      } else if (isFunction2(val.validate)) {
        compiled.validate = val.validate;
      } else {
        schemaError(name, val);
      }
      if (isFunction2(val.normalize)) {
        compiled.normalize = val.normalize;
      } else if (!val.normalize) {
        compiled.normalize = createNormalizer();
      } else {
        schemaError(name, val);
      }
      return;
    }
    if (isString(val)) {
      aliases.push(name);
      return;
    }
    schemaError(name, val);
  });
  aliases.forEach(function(alias) {
    if (!self2.__compiled__[self2.__schemas__[alias]]) {
      return;
    }
    self2.__compiled__[alias].validate = self2.__compiled__[self2.__schemas__[alias]].validate;
    self2.__compiled__[alias].normalize = self2.__compiled__[self2.__schemas__[alias]].normalize;
  });
  self2.__compiled__[""] = { validate: null, normalize: createNormalizer() };
  var slist = Object.keys(self2.__compiled__).filter(function(name) {
    return name.length > 0 && self2.__compiled__[name];
  }).map(escapeRE).join("|");
  self2.re.schema_test = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re$1.src_ZPCc + "))(" + slist + ")", "i");
  self2.re.schema_search = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re$1.src_ZPCc + "))(" + slist + ")", "ig");
  self2.re.pretest = RegExp(
    "(" + self2.re.schema_test.source + ")|(" + self2.re.host_fuzzy_test.source + ")|@",
    "i"
  );
  resetScanCache(self2);
}
function Match(self2, shift) {
  var start = self2.__index__, end2 = self2.__last_index__, text3 = self2.__text_cache__.slice(start, end2);
  this.schema = self2.__schema__.toLowerCase();
  this.index = start + shift;
  this.lastIndex = end2 + shift;
  this.raw = text3;
  this.text = text3;
  this.url = text3;
}
function createMatch(self2, shift) {
  var match2 = new Match(self2, shift);
  self2.__compiled__[match2.schema].normalize(match2, self2);
  return match2;
}
function LinkifyIt$1(schemas, options2) {
  if (!(this instanceof LinkifyIt$1)) {
    return new LinkifyIt$1(schemas, options2);
  }
  if (!options2) {
    if (isOptionsObj(schemas)) {
      options2 = schemas;
      schemas = {};
    }
  }
  this.__opts__ = assign({}, defaultOptions, options2);
  this.__index__ = -1;
  this.__last_index__ = -1;
  this.__schema__ = "";
  this.__text_cache__ = "";
  this.__schemas__ = assign({}, defaultSchemas, schemas);
  this.__compiled__ = {};
  this.__tlds__ = tlds_default;
  this.__tlds_replaced__ = false;
  this.re = {};
  compile(this);
}
LinkifyIt$1.prototype.add = function add(schema, definition) {
  this.__schemas__[schema] = definition;
  compile(this);
  return this;
};
LinkifyIt$1.prototype.set = function set2(options2) {
  this.__opts__ = assign(this.__opts__, options2);
  return this;
};
LinkifyIt$1.prototype.test = function test(text3) {
  this.__text_cache__ = text3;
  this.__index__ = -1;
  if (!text3.length) {
    return false;
  }
  var m2, ml, me, len, shift, next2, re2, tld_pos, at_pos;
  if (this.re.schema_test.test(text3)) {
    re2 = this.re.schema_search;
    re2.lastIndex = 0;
    while ((m2 = re2.exec(text3)) !== null) {
      len = this.testSchemaAt(text3, m2[2], re2.lastIndex);
      if (len) {
        this.__schema__ = m2[2];
        this.__index__ = m2.index + m2[1].length;
        this.__last_index__ = m2.index + m2[0].length + len;
        break;
      }
    }
  }
  if (this.__opts__.fuzzyLink && this.__compiled__["http:"]) {
    tld_pos = text3.search(this.re.host_fuzzy_test);
    if (tld_pos >= 0) {
      if (this.__index__ < 0 || tld_pos < this.__index__) {
        if ((ml = text3.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
          shift = ml.index + ml[1].length;
          if (this.__index__ < 0 || shift < this.__index__) {
            this.__schema__ = "";
            this.__index__ = shift;
            this.__last_index__ = ml.index + ml[0].length;
          }
        }
      }
    }
  }
  if (this.__opts__.fuzzyEmail && this.__compiled__["mailto:"]) {
    at_pos = text3.indexOf("@");
    if (at_pos >= 0) {
      if ((me = text3.match(this.re.email_fuzzy)) !== null) {
        shift = me.index + me[1].length;
        next2 = me.index + me[0].length;
        if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next2 > this.__last_index__) {
          this.__schema__ = "mailto:";
          this.__index__ = shift;
          this.__last_index__ = next2;
        }
      }
    }
  }
  return this.__index__ >= 0;
};
LinkifyIt$1.prototype.pretest = function pretest(text3) {
  return this.re.pretest.test(text3);
};
LinkifyIt$1.prototype.testSchemaAt = function testSchemaAt(text3, schema, pos) {
  if (!this.__compiled__[schema.toLowerCase()]) {
    return 0;
  }
  return this.__compiled__[schema.toLowerCase()].validate(text3, pos, this);
};
LinkifyIt$1.prototype.match = function match(text3) {
  var shift = 0, result2 = [];
  if (this.__index__ >= 0 && this.__text_cache__ === text3) {
    result2.push(createMatch(this, shift));
    shift = this.__last_index__;
  }
  var tail = shift ? text3.slice(shift) : text3;
  while (this.test(tail)) {
    result2.push(createMatch(this, shift));
    tail = tail.slice(this.__last_index__);
    shift += this.__last_index__;
  }
  if (result2.length) {
    return result2;
  }
  return null;
};
LinkifyIt$1.prototype.tlds = function tlds(list3, keepOld) {
  list3 = Array.isArray(list3) ? list3 : [list3];
  if (!keepOld) {
    this.__tlds__ = list3.slice();
    this.__tlds_replaced__ = true;
    compile(this);
    return this;
  }
  this.__tlds__ = this.__tlds__.concat(list3).sort().filter(function(el2, idx, arr) {
    return el2 !== arr[idx - 1];
  }).reverse();
  compile(this);
  return this;
};
LinkifyIt$1.prototype.normalize = function normalize3(match2) {
  if (!match2.schema) {
    match2.url = "http://" + match2.url;
  }
  if (match2.schema === "mailto:" && !/^mailto:/i.test(match2.url)) {
    match2.url = "mailto:" + match2.url;
  }
};
LinkifyIt$1.prototype.onCompile = function onCompile() {
};
var linkifyIt = LinkifyIt$1;
const maxInt = 2147483647;
const base = 36;
const tMin = 1;
const tMax = 26;
const skew = 38;
const damp = 700;
const initialBias = 72;
const initialN = 128;
const delimiter = "-";
const regexPunycode = /^xn--/;
const regexNonASCII = /[^\0-\x7E]/;
const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
const errors = {
  "overflow": "Overflow: input needs wider integers to process",
  "not-basic": "Illegal input >= 0x80 (not a basic code point)",
  "invalid-input": "Invalid input"
};
const baseMinusTMin = base - tMin;
const floor = Math.floor;
const stringFromCharCode = String.fromCharCode;
function error(type) {
  throw new RangeError(errors[type]);
}
function map$1(array, fn) {
  const result2 = [];
  let length = array.length;
  while (length--) {
    result2[length] = fn(array[length]);
  }
  return result2;
}
function mapDomain(string, fn) {
  const parts = string.split("@");
  let result2 = "";
  if (parts.length > 1) {
    result2 = parts[0] + "@";
    string = parts[1];
  }
  string = string.replace(regexSeparators, ".");
  const labels = string.split(".");
  const encoded = map$1(labels, fn).join(".");
  return result2 + encoded;
}
function ucs2decode(string) {
  const output = [];
  let counter = 0;
  const length = string.length;
  while (counter < length) {
    const value = string.charCodeAt(counter++);
    if (value >= 55296 && value <= 56319 && counter < length) {
      const extra = string.charCodeAt(counter++);
      if ((extra & 64512) == 56320) {
        output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
      } else {
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
}
const ucs2encode = (array) => String.fromCodePoint(...array);
const basicToDigit = function(codePoint) {
  if (codePoint - 48 < 10) {
    return codePoint - 22;
  }
  if (codePoint - 65 < 26) {
    return codePoint - 65;
  }
  if (codePoint - 97 < 26) {
    return codePoint - 97;
  }
  return base;
};
const digitToBasic = function(digit, flag) {
  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
};
const adapt = function(delta2, numPoints, firstTime) {
  let k = 0;
  delta2 = firstTime ? floor(delta2 / damp) : delta2 >> 1;
  delta2 += floor(delta2 / numPoints);
  for (; delta2 > baseMinusTMin * tMax >> 1; k += base) {
    delta2 = floor(delta2 / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta2 / (delta2 + skew));
};
const decode$1 = function(input2) {
  const output = [];
  const inputLength = input2.length;
  let i = 0;
  let n = initialN;
  let bias = initialBias;
  let basic = input2.lastIndexOf(delimiter);
  if (basic < 0) {
    basic = 0;
  }
  for (let j = 0; j < basic; ++j) {
    if (input2.charCodeAt(j) >= 128) {
      error("not-basic");
    }
    output.push(input2.charCodeAt(j));
  }
  for (let index2 = basic > 0 ? basic + 1 : 0; index2 < inputLength; ) {
    let oldi = i;
    for (let w2 = 1, k = base; ; k += base) {
      if (index2 >= inputLength) {
        error("invalid-input");
      }
      const digit = basicToDigit(input2.charCodeAt(index2++));
      if (digit >= base || digit > floor((maxInt - i) / w2)) {
        error("overflow");
      }
      i += digit * w2;
      const t4 = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
      if (digit < t4) {
        break;
      }
      const baseMinusT = base - t4;
      if (w2 > floor(maxInt / baseMinusT)) {
        error("overflow");
      }
      w2 *= baseMinusT;
    }
    const out = output.length + 1;
    bias = adapt(i - oldi, out, oldi == 0);
    if (floor(i / out) > maxInt - n) {
      error("overflow");
    }
    n += floor(i / out);
    i %= out;
    output.splice(i++, 0, n);
  }
  return String.fromCodePoint(...output);
};
const encode$1 = function(input2) {
  const output = [];
  input2 = ucs2decode(input2);
  let inputLength = input2.length;
  let n = initialN;
  let delta2 = 0;
  let bias = initialBias;
  for (const currentValue of input2) {
    if (currentValue < 128) {
      output.push(stringFromCharCode(currentValue));
    }
  }
  let basicLength = output.length;
  let handledCPCount = basicLength;
  if (basicLength) {
    output.push(delimiter);
  }
  while (handledCPCount < inputLength) {
    let m2 = maxInt;
    for (const currentValue of input2) {
      if (currentValue >= n && currentValue < m2) {
        m2 = currentValue;
      }
    }
    const handledCPCountPlusOne = handledCPCount + 1;
    if (m2 - n > floor((maxInt - delta2) / handledCPCountPlusOne)) {
      error("overflow");
    }
    delta2 += (m2 - n) * handledCPCountPlusOne;
    n = m2;
    for (const currentValue of input2) {
      if (currentValue < n && ++delta2 > maxInt) {
        error("overflow");
      }
      if (currentValue == n) {
        let q = delta2;
        for (let k = base; ; k += base) {
          const t4 = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (q < t4) {
            break;
          }
          const qMinusT = q - t4;
          const baseMinusT = base - t4;
          output.push(
            stringFromCharCode(digitToBasic(t4 + qMinusT % baseMinusT, 0))
          );
          q = floor(qMinusT / baseMinusT);
        }
        output.push(stringFromCharCode(digitToBasic(q, 0)));
        bias = adapt(delta2, handledCPCountPlusOne, handledCPCount == basicLength);
        delta2 = 0;
        ++handledCPCount;
      }
    }
    ++delta2;
    ++n;
  }
  return output.join("");
};
const toUnicode = function(input2) {
  return mapDomain(input2, function(string) {
    return regexPunycode.test(string) ? decode$1(string.slice(4).toLowerCase()) : string;
  });
};
const toASCII = function(input2) {
  return mapDomain(input2, function(string) {
    return regexNonASCII.test(string) ? "xn--" + encode$1(string) : string;
  });
};
const punycode$1 = {
  "version": "2.1.0",
  "ucs2": {
    "decode": ucs2decode,
    "encode": ucs2encode
  },
  "decode": decode$1,
  "encode": encode$1,
  "toASCII": toASCII,
  "toUnicode": toUnicode
};
var punycode_es6 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ucs2decode,
  ucs2encode,
  decode: decode$1,
  encode: encode$1,
  toASCII,
  toUnicode,
  "default": punycode$1
}, Symbol.toStringTag, { value: "Module" }));
var require$$8 = /* @__PURE__ */ getAugmentedNamespace(punycode_es6);
var _default$3 = {
  options: {
    html: false,
    xhtmlOut: false,
    breaks: false,
    langPrefix: "language-",
    linkify: false,
    typographer: false,
    quotes: "\u201C\u201D\u2018\u2019",
    highlight: null,
    maxNesting: 100
  },
  components: {
    core: {},
    block: {},
    inline: {}
  }
};
var zero$1 = {
  options: {
    html: false,
    xhtmlOut: false,
    breaks: false,
    langPrefix: "language-",
    linkify: false,
    typographer: false,
    quotes: "\u201C\u201D\u2018\u2019",
    highlight: null,
    maxNesting: 20
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline"
      ]
    },
    block: {
      rules: [
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "text"
      ],
      rules2: [
        "balance_pairs",
        "text_collapse"
      ]
    }
  }
};
var commonmark = {
  options: {
    html: true,
    xhtmlOut: true,
    breaks: false,
    langPrefix: "language-",
    linkify: false,
    typographer: false,
    quotes: "\u201C\u201D\u2018\u2019",
    highlight: null,
    maxNesting: 20
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline"
      ]
    },
    block: {
      rules: [
        "blockquote",
        "code",
        "fence",
        "heading",
        "hr",
        "html_block",
        "lheading",
        "list",
        "reference",
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "autolink",
        "backticks",
        "emphasis",
        "entity",
        "escape",
        "html_inline",
        "image",
        "link",
        "newline",
        "text"
      ],
      rules2: [
        "balance_pairs",
        "emphasis",
        "text_collapse"
      ]
    }
  }
};
var utils = utils$1;
var helpers$1 = helpers$2;
var Renderer = renderer;
var ParserCore = parser_core;
var ParserBlock = parser_block;
var ParserInline = parser_inline;
var LinkifyIt = linkifyIt;
var mdurl = mdurl$1;
var punycode = require$$8;
var config = {
  default: _default$3,
  zero: zero$1,
  commonmark
};
var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;
function validateLink(url) {
  var str = url.trim().toLowerCase();
  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;
}
var RECODE_HOSTNAME_FOR = ["http:", "https:", "mailto:"];
function normalizeLink(url) {
  var parsed = mdurl.parse(url, true);
  if (parsed.hostname) {
    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
      try {
        parsed.hostname = punycode.toASCII(parsed.hostname);
      } catch (er) {
      }
    }
  }
  return mdurl.encode(mdurl.format(parsed));
}
function normalizeLinkText(url) {
  var parsed = mdurl.parse(url, true);
  if (parsed.hostname) {
    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
      try {
        parsed.hostname = punycode.toUnicode(parsed.hostname);
      } catch (er) {
      }
    }
  }
  return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + "%");
}
function MarkdownIt(presetName, options2) {
  if (!(this instanceof MarkdownIt)) {
    return new MarkdownIt(presetName, options2);
  }
  if (!options2) {
    if (!utils.isString(presetName)) {
      options2 = presetName || {};
      presetName = "default";
    }
  }
  this.inline = new ParserInline();
  this.block = new ParserBlock();
  this.core = new ParserCore();
  this.renderer = new Renderer();
  this.linkify = new LinkifyIt();
  this.validateLink = validateLink;
  this.normalizeLink = normalizeLink;
  this.normalizeLinkText = normalizeLinkText;
  this.utils = utils;
  this.helpers = utils.assign({}, helpers$1);
  this.options = {};
  this.configure(presetName);
  if (options2) {
    this.set(options2);
  }
}
MarkdownIt.prototype.set = function(options2) {
  utils.assign(this.options, options2);
  return this;
};
MarkdownIt.prototype.configure = function(presets) {
  var self2 = this, presetName;
  if (utils.isString(presets)) {
    presetName = presets;
    presets = config[presetName];
    if (!presets) {
      throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name');
    }
  }
  if (!presets) {
    throw new Error("Wrong `markdown-it` preset, can't be empty");
  }
  if (presets.options) {
    self2.set(presets.options);
  }
  if (presets.components) {
    Object.keys(presets.components).forEach(function(name) {
      if (presets.components[name].rules) {
        self2[name].ruler.enableOnly(presets.components[name].rules);
      }
      if (presets.components[name].rules2) {
        self2[name].ruler2.enableOnly(presets.components[name].rules2);
      }
    });
  }
  return this;
};
MarkdownIt.prototype.enable = function(list3, ignoreInvalid) {
  var result2 = [];
  if (!Array.isArray(list3)) {
    list3 = [list3];
  }
  ["core", "block", "inline"].forEach(function(chain) {
    result2 = result2.concat(this[chain].ruler.enable(list3, true));
  }, this);
  result2 = result2.concat(this.inline.ruler2.enable(list3, true));
  var missed = list3.filter(function(name) {
    return result2.indexOf(name) < 0;
  });
  if (missed.length && !ignoreInvalid) {
    throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + missed);
  }
  return this;
};
MarkdownIt.prototype.disable = function(list3, ignoreInvalid) {
  var result2 = [];
  if (!Array.isArray(list3)) {
    list3 = [list3];
  }
  ["core", "block", "inline"].forEach(function(chain) {
    result2 = result2.concat(this[chain].ruler.disable(list3, true));
  }, this);
  result2 = result2.concat(this.inline.ruler2.disable(list3, true));
  var missed = list3.filter(function(name) {
    return result2.indexOf(name) < 0;
  });
  if (missed.length && !ignoreInvalid) {
    throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + missed);
  }
  return this;
};
MarkdownIt.prototype.use = function(plugin2) {
  var args = [this].concat(Array.prototype.slice.call(arguments, 1));
  plugin2.apply(plugin2, args);
  return this;
};
MarkdownIt.prototype.parse = function(src, env) {
  if (typeof src !== "string") {
    throw new Error("Input data should be a String");
  }
  var state = new this.core.State(src, this, env);
  this.core.process(state);
  return state.tokens;
};
MarkdownIt.prototype.render = function(src, env) {
  env = env || {};
  return this.renderer.render(this.parse(src, env), this.options, env);
};
MarkdownIt.prototype.parseInline = function(src, env) {
  var state = new this.core.State(src, this, env);
  state.inlineMode = true;
  this.core.process(state);
  return state.tokens;
};
MarkdownIt.prototype.renderInline = function(src, env) {
  env = env || {};
  return this.renderer.render(this.parseInline(src, env), this.options, env);
};
var lib$8 = MarkdownIt;
var markdownIt = lib$8;
function findFirstMatchingConfig(link3, configs) {
  var i, config2;
  var href = link3.attrs[link3.attrIndex("href")][1];
  for (i = 0; i < configs.length; ++i) {
    config2 = configs[i];
    if (typeof config2.matcher === "function") {
      if (config2.matcher(href, config2)) {
        return config2;
      } else {
        continue;
      }
    }
    return config2;
  }
}
function applyAttributes(idx, tokens, attributes) {
  Object.keys(attributes).forEach(function(attr) {
    var attrIndex2;
    var value = attributes[attr];
    if (attr === "className") {
      attr = "class";
    }
    attrIndex2 = tokens[idx].attrIndex(attr);
    if (attrIndex2 < 0) {
      tokens[idx].attrPush([attr, value]);
    } else {
      tokens[idx].attrs[attrIndex2][1] = value;
    }
  });
}
function markdownitLinkAttributes(md, configs) {
  if (!configs) {
    configs = [];
  } else {
    configs = Array.isArray(configs) ? configs : [configs];
  }
  Object.freeze(configs);
  var defaultRender = md.renderer.rules.link_open || this.defaultRender;
  md.renderer.rules.link_open = function(tokens, idx, options2, env, self2) {
    var config2 = findFirstMatchingConfig(tokens[idx], configs);
    var attributes = config2 && config2.attrs;
    if (attributes) {
      applyAttributes(idx, tokens, attributes);
    }
    return defaultRender(tokens, idx, options2, env, self2);
  };
}
markdownitLinkAttributes.defaultRender = function(tokens, idx, options2, env, self2) {
  return self2.renderToken(tokens, idx, options2);
};
var markdownItLinkAttributes = markdownitLinkAttributes;
const grinning = "\u{1F600}";
const smiley = "\u{1F603}";
const smile$1 = "\u{1F604}";
const grin = "\u{1F601}";
const laughing = "\u{1F606}";
const satisfied = "\u{1F606}";
const sweat_smile = "\u{1F605}";
const rofl = "\u{1F923}";
const joy = "\u{1F602}";
const slightly_smiling_face = "\u{1F642}";
const upside_down_face = "\u{1F643}";
const wink = "\u{1F609}";
const blush = "\u{1F60A}";
const innocent = "\u{1F607}";
const smiling_face_with_three_hearts = "\u{1F970}";
const heart_eyes = "\u{1F60D}";
const star_struck = "\u{1F929}";
const kissing_heart = "\u{1F618}";
const kissing = "\u{1F617}";
const relaxed = "\u263A\uFE0F";
const kissing_closed_eyes = "\u{1F61A}";
const kissing_smiling_eyes = "\u{1F619}";
const smiling_face_with_tear = "\u{1F972}";
const yum = "\u{1F60B}";
const stuck_out_tongue = "\u{1F61B}";
const stuck_out_tongue_winking_eye = "\u{1F61C}";
const zany_face = "\u{1F92A}";
const stuck_out_tongue_closed_eyes = "\u{1F61D}";
const money_mouth_face = "\u{1F911}";
const hugs = "\u{1F917}";
const hand_over_mouth = "\u{1F92D}";
const shushing_face = "\u{1F92B}";
const thinking = "\u{1F914}";
const zipper_mouth_face = "\u{1F910}";
const raised_eyebrow = "\u{1F928}";
const neutral_face = "\u{1F610}";
const expressionless = "\u{1F611}";
const no_mouth = "\u{1F636}";
const smirk = "\u{1F60F}";
const unamused = "\u{1F612}";
const roll_eyes = "\u{1F644}";
const grimacing = "\u{1F62C}";
const lying_face = "\u{1F925}";
const relieved = "\u{1F60C}";
const pensive = "\u{1F614}";
const sleepy = "\u{1F62A}";
const drooling_face = "\u{1F924}";
const sleeping = "\u{1F634}";
const mask = "\u{1F637}";
const face_with_thermometer = "\u{1F912}";
const face_with_head_bandage = "\u{1F915}";
const nauseated_face = "\u{1F922}";
const vomiting_face = "\u{1F92E}";
const sneezing_face = "\u{1F927}";
const hot_face = "\u{1F975}";
const cold_face = "\u{1F976}";
const woozy_face = "\u{1F974}";
const dizzy_face = "\u{1F635}";
const exploding_head = "\u{1F92F}";
const cowboy_hat_face = "\u{1F920}";
const partying_face = "\u{1F973}";
const disguised_face = "\u{1F978}";
const sunglasses = "\u{1F60E}";
const nerd_face = "\u{1F913}";
const monocle_face = "\u{1F9D0}";
const confused = "\u{1F615}";
const worried = "\u{1F61F}";
const slightly_frowning_face = "\u{1F641}";
const frowning_face = "\u2639\uFE0F";
const open_mouth = "\u{1F62E}";
const hushed = "\u{1F62F}";
const astonished = "\u{1F632}";
const flushed = "\u{1F633}";
const pleading_face = "\u{1F97A}";
const frowning = "\u{1F626}";
const anguished = "\u{1F627}";
const fearful = "\u{1F628}";
const cold_sweat = "\u{1F630}";
const disappointed_relieved = "\u{1F625}";
const cry = "\u{1F622}";
const sob = "\u{1F62D}";
const scream = "\u{1F631}";
const confounded = "\u{1F616}";
const persevere = "\u{1F623}";
const disappointed = "\u{1F61E}";
const sweat = "\u{1F613}";
const weary = "\u{1F629}";
const tired_face = "\u{1F62B}";
const yawning_face = "\u{1F971}";
const triumph = "\u{1F624}";
const rage = "\u{1F621}";
const pout = "\u{1F621}";
const angry = "\u{1F620}";
const cursing_face = "\u{1F92C}";
const smiling_imp = "\u{1F608}";
const imp = "\u{1F47F}";
const skull = "\u{1F480}";
const skull_and_crossbones = "\u2620\uFE0F";
const hankey = "\u{1F4A9}";
const poop = "\u{1F4A9}";
const shit = "\u{1F4A9}";
const clown_face = "\u{1F921}";
const japanese_ogre = "\u{1F479}";
const japanese_goblin = "\u{1F47A}";
const ghost = "\u{1F47B}";
const alien = "\u{1F47D}";
const space_invader = "\u{1F47E}";
const robot = "\u{1F916}";
const smiley_cat = "\u{1F63A}";
const smile_cat = "\u{1F638}";
const joy_cat = "\u{1F639}";
const heart_eyes_cat = "\u{1F63B}";
const smirk_cat = "\u{1F63C}";
const kissing_cat = "\u{1F63D}";
const scream_cat = "\u{1F640}";
const crying_cat_face = "\u{1F63F}";
const pouting_cat = "\u{1F63E}";
const see_no_evil = "\u{1F648}";
const hear_no_evil = "\u{1F649}";
const speak_no_evil = "\u{1F64A}";
const kiss = "\u{1F48B}";
const love_letter = "\u{1F48C}";
const cupid = "\u{1F498}";
const gift_heart = "\u{1F49D}";
const sparkling_heart = "\u{1F496}";
const heartpulse = "\u{1F497}";
const heartbeat = "\u{1F493}";
const revolving_hearts = "\u{1F49E}";
const two_hearts = "\u{1F495}";
const heart_decoration = "\u{1F49F}";
const heavy_heart_exclamation = "\u2763\uFE0F";
const broken_heart = "\u{1F494}";
const heart = "\u2764\uFE0F";
const orange_heart = "\u{1F9E1}";
const yellow_heart = "\u{1F49B}";
const green_heart = "\u{1F49A}";
const blue_heart = "\u{1F499}";
const purple_heart = "\u{1F49C}";
const brown_heart = "\u{1F90E}";
const black_heart = "\u{1F5A4}";
const white_heart = "\u{1F90D}";
const anger = "\u{1F4A2}";
const boom = "\u{1F4A5}";
const collision = "\u{1F4A5}";
const dizzy = "\u{1F4AB}";
const sweat_drops = "\u{1F4A6}";
const dash$1 = "\u{1F4A8}";
const hole = "\u{1F573}\uFE0F";
const bomb = "\u{1F4A3}";
const speech_balloon = "\u{1F4AC}";
const eye_speech_bubble = "\u{1F441}\uFE0F\u200D\u{1F5E8}\uFE0F";
const left_speech_bubble = "\u{1F5E8}\uFE0F";
const right_anger_bubble = "\u{1F5EF}\uFE0F";
const thought_balloon = "\u{1F4AD}";
const zzz = "\u{1F4A4}";
const wave = "\u{1F44B}";
const raised_back_of_hand = "\u{1F91A}";
const raised_hand_with_fingers_splayed = "\u{1F590}\uFE0F";
const hand = "\u270B";
const raised_hand = "\u270B";
const vulcan_salute = "\u{1F596}";
const ok_hand = "\u{1F44C}";
const pinched_fingers = "\u{1F90C}";
const pinching_hand = "\u{1F90F}";
const v = "\u270C\uFE0F";
const crossed_fingers = "\u{1F91E}";
const love_you_gesture = "\u{1F91F}";
const metal = "\u{1F918}";
const call_me_hand = "\u{1F919}";
const point_left = "\u{1F448}";
const point_right = "\u{1F449}";
const point_up_2 = "\u{1F446}";
const middle_finger = "\u{1F595}";
const fu = "\u{1F595}";
const point_down = "\u{1F447}";
const point_up = "\u261D\uFE0F";
const thumbsup = "\u{1F44D}";
const thumbsdown = "\u{1F44E}";
const fist_raised = "\u270A";
const fist = "\u270A";
const fist_oncoming = "\u{1F44A}";
const facepunch = "\u{1F44A}";
const punch = "\u{1F44A}";
const fist_left = "\u{1F91B}";
const fist_right = "\u{1F91C}";
const clap = "\u{1F44F}";
const raised_hands = "\u{1F64C}";
const open_hands = "\u{1F450}";
const palms_up_together = "\u{1F932}";
const handshake = "\u{1F91D}";
const pray = "\u{1F64F}";
const writing_hand = "\u270D\uFE0F";
const nail_care = "\u{1F485}";
const selfie = "\u{1F933}";
const muscle = "\u{1F4AA}";
const mechanical_arm = "\u{1F9BE}";
const mechanical_leg = "\u{1F9BF}";
const leg$1 = "\u{1F9B5}";
const foot = "\u{1F9B6}";
const ear = "\u{1F442}";
const ear_with_hearing_aid = "\u{1F9BB}";
const nose = "\u{1F443}";
const brain = "\u{1F9E0}";
const anatomical_heart = "\u{1FAC0}";
const lungs = "\u{1FAC1}";
const tooth = "\u{1F9B7}";
const bone = "\u{1F9B4}";
const eyes = "\u{1F440}";
const eye = "\u{1F441}\uFE0F";
const tongue = "\u{1F445}";
const lips = "\u{1F444}";
const baby = "\u{1F476}";
const child = "\u{1F9D2}";
const boy = "\u{1F466}";
const girl = "\u{1F467}";
const adult = "\u{1F9D1}";
const blond_haired_person = "\u{1F471}";
const man = "\u{1F468}";
const bearded_person = "\u{1F9D4}";
const red_haired_man = "\u{1F468}\u200D\u{1F9B0}";
const curly_haired_man = "\u{1F468}\u200D\u{1F9B1}";
const white_haired_man = "\u{1F468}\u200D\u{1F9B3}";
const bald_man = "\u{1F468}\u200D\u{1F9B2}";
const woman = "\u{1F469}";
const red_haired_woman = "\u{1F469}\u200D\u{1F9B0}";
const person_red_hair = "\u{1F9D1}\u200D\u{1F9B0}";
const curly_haired_woman = "\u{1F469}\u200D\u{1F9B1}";
const person_curly_hair = "\u{1F9D1}\u200D\u{1F9B1}";
const white_haired_woman = "\u{1F469}\u200D\u{1F9B3}";
const person_white_hair = "\u{1F9D1}\u200D\u{1F9B3}";
const bald_woman = "\u{1F469}\u200D\u{1F9B2}";
const person_bald = "\u{1F9D1}\u200D\u{1F9B2}";
const blond_haired_woman = "\u{1F471}\u200D\u2640\uFE0F";
const blonde_woman = "\u{1F471}\u200D\u2640\uFE0F";
const blond_haired_man = "\u{1F471}\u200D\u2642\uFE0F";
const older_adult = "\u{1F9D3}";
const older_man = "\u{1F474}";
const older_woman = "\u{1F475}";
const frowning_person = "\u{1F64D}";
const frowning_man = "\u{1F64D}\u200D\u2642\uFE0F";
const frowning_woman = "\u{1F64D}\u200D\u2640\uFE0F";
const pouting_face = "\u{1F64E}";
const pouting_man = "\u{1F64E}\u200D\u2642\uFE0F";
const pouting_woman = "\u{1F64E}\u200D\u2640\uFE0F";
const no_good = "\u{1F645}";
const no_good_man = "\u{1F645}\u200D\u2642\uFE0F";
const ng_man = "\u{1F645}\u200D\u2642\uFE0F";
const no_good_woman = "\u{1F645}\u200D\u2640\uFE0F";
const ng_woman = "\u{1F645}\u200D\u2640\uFE0F";
const ok_person = "\u{1F646}";
const ok_man = "\u{1F646}\u200D\u2642\uFE0F";
const ok_woman = "\u{1F646}\u200D\u2640\uFE0F";
const tipping_hand_person = "\u{1F481}";
const information_desk_person = "\u{1F481}";
const tipping_hand_man = "\u{1F481}\u200D\u2642\uFE0F";
const sassy_man = "\u{1F481}\u200D\u2642\uFE0F";
const tipping_hand_woman = "\u{1F481}\u200D\u2640\uFE0F";
const sassy_woman = "\u{1F481}\u200D\u2640\uFE0F";
const raising_hand = "\u{1F64B}";
const raising_hand_man = "\u{1F64B}\u200D\u2642\uFE0F";
const raising_hand_woman = "\u{1F64B}\u200D\u2640\uFE0F";
const deaf_person = "\u{1F9CF}";
const deaf_man = "\u{1F9CF}\u200D\u2642\uFE0F";
const deaf_woman = "\u{1F9CF}\u200D\u2640\uFE0F";
const bow = "\u{1F647}";
const bowing_man = "\u{1F647}\u200D\u2642\uFE0F";
const bowing_woman = "\u{1F647}\u200D\u2640\uFE0F";
const facepalm = "\u{1F926}";
const man_facepalming = "\u{1F926}\u200D\u2642\uFE0F";
const woman_facepalming = "\u{1F926}\u200D\u2640\uFE0F";
const shrug = "\u{1F937}";
const man_shrugging = "\u{1F937}\u200D\u2642\uFE0F";
const woman_shrugging = "\u{1F937}\u200D\u2640\uFE0F";
const health_worker = "\u{1F9D1}\u200D\u2695\uFE0F";
const man_health_worker = "\u{1F468}\u200D\u2695\uFE0F";
const woman_health_worker = "\u{1F469}\u200D\u2695\uFE0F";
const student = "\u{1F9D1}\u200D\u{1F393}";
const man_student = "\u{1F468}\u200D\u{1F393}";
const woman_student = "\u{1F469}\u200D\u{1F393}";
const teacher = "\u{1F9D1}\u200D\u{1F3EB}";
const man_teacher = "\u{1F468}\u200D\u{1F3EB}";
const woman_teacher = "\u{1F469}\u200D\u{1F3EB}";
const judge = "\u{1F9D1}\u200D\u2696\uFE0F";
const man_judge = "\u{1F468}\u200D\u2696\uFE0F";
const woman_judge = "\u{1F469}\u200D\u2696\uFE0F";
const farmer = "\u{1F9D1}\u200D\u{1F33E}";
const man_farmer = "\u{1F468}\u200D\u{1F33E}";
const woman_farmer = "\u{1F469}\u200D\u{1F33E}";
const cook = "\u{1F9D1}\u200D\u{1F373}";
const man_cook = "\u{1F468}\u200D\u{1F373}";
const woman_cook = "\u{1F469}\u200D\u{1F373}";
const mechanic = "\u{1F9D1}\u200D\u{1F527}";
const man_mechanic = "\u{1F468}\u200D\u{1F527}";
const woman_mechanic = "\u{1F469}\u200D\u{1F527}";
const factory_worker = "\u{1F9D1}\u200D\u{1F3ED}";
const man_factory_worker = "\u{1F468}\u200D\u{1F3ED}";
const woman_factory_worker = "\u{1F469}\u200D\u{1F3ED}";
const office_worker = "\u{1F9D1}\u200D\u{1F4BC}";
const man_office_worker = "\u{1F468}\u200D\u{1F4BC}";
const woman_office_worker = "\u{1F469}\u200D\u{1F4BC}";
const scientist = "\u{1F9D1}\u200D\u{1F52C}";
const man_scientist = "\u{1F468}\u200D\u{1F52C}";
const woman_scientist = "\u{1F469}\u200D\u{1F52C}";
const technologist = "\u{1F9D1}\u200D\u{1F4BB}";
const man_technologist = "\u{1F468}\u200D\u{1F4BB}";
const woman_technologist = "\u{1F469}\u200D\u{1F4BB}";
const singer = "\u{1F9D1}\u200D\u{1F3A4}";
const man_singer = "\u{1F468}\u200D\u{1F3A4}";
const woman_singer = "\u{1F469}\u200D\u{1F3A4}";
const artist = "\u{1F9D1}\u200D\u{1F3A8}";
const man_artist = "\u{1F468}\u200D\u{1F3A8}";
const woman_artist = "\u{1F469}\u200D\u{1F3A8}";
const pilot = "\u{1F9D1}\u200D\u2708\uFE0F";
const man_pilot = "\u{1F468}\u200D\u2708\uFE0F";
const woman_pilot = "\u{1F469}\u200D\u2708\uFE0F";
const astronaut = "\u{1F9D1}\u200D\u{1F680}";
const man_astronaut = "\u{1F468}\u200D\u{1F680}";
const woman_astronaut = "\u{1F469}\u200D\u{1F680}";
const firefighter = "\u{1F9D1}\u200D\u{1F692}";
const man_firefighter = "\u{1F468}\u200D\u{1F692}";
const woman_firefighter = "\u{1F469}\u200D\u{1F692}";
const police_officer = "\u{1F46E}";
const cop = "\u{1F46E}";
const policeman = "\u{1F46E}\u200D\u2642\uFE0F";
const policewoman = "\u{1F46E}\u200D\u2640\uFE0F";
const detective = "\u{1F575}\uFE0F";
const male_detective = "\u{1F575}\uFE0F\u200D\u2642\uFE0F";
const female_detective = "\u{1F575}\uFE0F\u200D\u2640\uFE0F";
const guard = "\u{1F482}";
const guardsman = "\u{1F482}\u200D\u2642\uFE0F";
const guardswoman = "\u{1F482}\u200D\u2640\uFE0F";
const ninja = "\u{1F977}";
const construction_worker = "\u{1F477}";
const construction_worker_man = "\u{1F477}\u200D\u2642\uFE0F";
const construction_worker_woman = "\u{1F477}\u200D\u2640\uFE0F";
const prince = "\u{1F934}";
const princess = "\u{1F478}";
const person_with_turban = "\u{1F473}";
const man_with_turban = "\u{1F473}\u200D\u2642\uFE0F";
const woman_with_turban = "\u{1F473}\u200D\u2640\uFE0F";
const man_with_gua_pi_mao = "\u{1F472}";
const woman_with_headscarf = "\u{1F9D5}";
const person_in_tuxedo = "\u{1F935}";
const man_in_tuxedo = "\u{1F935}\u200D\u2642\uFE0F";
const woman_in_tuxedo = "\u{1F935}\u200D\u2640\uFE0F";
const person_with_veil = "\u{1F470}";
const man_with_veil = "\u{1F470}\u200D\u2642\uFE0F";
const woman_with_veil = "\u{1F470}\u200D\u2640\uFE0F";
const bride_with_veil = "\u{1F470}\u200D\u2640\uFE0F";
const pregnant_woman = "\u{1F930}";
const breast_feeding = "\u{1F931}";
const woman_feeding_baby = "\u{1F469}\u200D\u{1F37C}";
const man_feeding_baby = "\u{1F468}\u200D\u{1F37C}";
const person_feeding_baby = "\u{1F9D1}\u200D\u{1F37C}";
const angel = "\u{1F47C}";
const santa = "\u{1F385}";
const mrs_claus = "\u{1F936}";
const mx_claus = "\u{1F9D1}\u200D\u{1F384}";
const superhero = "\u{1F9B8}";
const superhero_man = "\u{1F9B8}\u200D\u2642\uFE0F";
const superhero_woman = "\u{1F9B8}\u200D\u2640\uFE0F";
const supervillain = "\u{1F9B9}";
const supervillain_man = "\u{1F9B9}\u200D\u2642\uFE0F";
const supervillain_woman = "\u{1F9B9}\u200D\u2640\uFE0F";
const mage = "\u{1F9D9}";
const mage_man = "\u{1F9D9}\u200D\u2642\uFE0F";
const mage_woman = "\u{1F9D9}\u200D\u2640\uFE0F";
const fairy = "\u{1F9DA}";
const fairy_man = "\u{1F9DA}\u200D\u2642\uFE0F";
const fairy_woman = "\u{1F9DA}\u200D\u2640\uFE0F";
const vampire = "\u{1F9DB}";
const vampire_man = "\u{1F9DB}\u200D\u2642\uFE0F";
const vampire_woman = "\u{1F9DB}\u200D\u2640\uFE0F";
const merperson = "\u{1F9DC}";
const merman = "\u{1F9DC}\u200D\u2642\uFE0F";
const mermaid = "\u{1F9DC}\u200D\u2640\uFE0F";
const elf = "\u{1F9DD}";
const elf_man = "\u{1F9DD}\u200D\u2642\uFE0F";
const elf_woman = "\u{1F9DD}\u200D\u2640\uFE0F";
const genie = "\u{1F9DE}";
const genie_man = "\u{1F9DE}\u200D\u2642\uFE0F";
const genie_woman = "\u{1F9DE}\u200D\u2640\uFE0F";
const zombie = "\u{1F9DF}";
const zombie_man = "\u{1F9DF}\u200D\u2642\uFE0F";
const zombie_woman = "\u{1F9DF}\u200D\u2640\uFE0F";
const massage = "\u{1F486}";
const massage_man = "\u{1F486}\u200D\u2642\uFE0F";
const massage_woman = "\u{1F486}\u200D\u2640\uFE0F";
const haircut = "\u{1F487}";
const haircut_man = "\u{1F487}\u200D\u2642\uFE0F";
const haircut_woman = "\u{1F487}\u200D\u2640\uFE0F";
const walking = "\u{1F6B6}";
const walking_man = "\u{1F6B6}\u200D\u2642\uFE0F";
const walking_woman = "\u{1F6B6}\u200D\u2640\uFE0F";
const standing_person = "\u{1F9CD}";
const standing_man = "\u{1F9CD}\u200D\u2642\uFE0F";
const standing_woman = "\u{1F9CD}\u200D\u2640\uFE0F";
const kneeling_person = "\u{1F9CE}";
const kneeling_man = "\u{1F9CE}\u200D\u2642\uFE0F";
const kneeling_woman = "\u{1F9CE}\u200D\u2640\uFE0F";
const person_with_probing_cane = "\u{1F9D1}\u200D\u{1F9AF}";
const man_with_probing_cane = "\u{1F468}\u200D\u{1F9AF}";
const woman_with_probing_cane = "\u{1F469}\u200D\u{1F9AF}";
const person_in_motorized_wheelchair = "\u{1F9D1}\u200D\u{1F9BC}";
const man_in_motorized_wheelchair = "\u{1F468}\u200D\u{1F9BC}";
const woman_in_motorized_wheelchair = "\u{1F469}\u200D\u{1F9BC}";
const person_in_manual_wheelchair = "\u{1F9D1}\u200D\u{1F9BD}";
const man_in_manual_wheelchair = "\u{1F468}\u200D\u{1F9BD}";
const woman_in_manual_wheelchair = "\u{1F469}\u200D\u{1F9BD}";
const runner = "\u{1F3C3}";
const running = "\u{1F3C3}";
const running_man = "\u{1F3C3}\u200D\u2642\uFE0F";
const running_woman = "\u{1F3C3}\u200D\u2640\uFE0F";
const woman_dancing = "\u{1F483}";
const dancer = "\u{1F483}";
const man_dancing = "\u{1F57A}";
const business_suit_levitating = "\u{1F574}\uFE0F";
const dancers = "\u{1F46F}";
const dancing_men = "\u{1F46F}\u200D\u2642\uFE0F";
const dancing_women = "\u{1F46F}\u200D\u2640\uFE0F";
const sauna_person = "\u{1F9D6}";
const sauna_man = "\u{1F9D6}\u200D\u2642\uFE0F";
const sauna_woman = "\u{1F9D6}\u200D\u2640\uFE0F";
const climbing = "\u{1F9D7}";
const climbing_man = "\u{1F9D7}\u200D\u2642\uFE0F";
const climbing_woman = "\u{1F9D7}\u200D\u2640\uFE0F";
const person_fencing = "\u{1F93A}";
const horse_racing = "\u{1F3C7}";
const skier = "\u26F7\uFE0F";
const snowboarder = "\u{1F3C2}";
const golfing = "\u{1F3CC}\uFE0F";
const golfing_man = "\u{1F3CC}\uFE0F\u200D\u2642\uFE0F";
const golfing_woman = "\u{1F3CC}\uFE0F\u200D\u2640\uFE0F";
const surfer = "\u{1F3C4}";
const surfing_man = "\u{1F3C4}\u200D\u2642\uFE0F";
const surfing_woman = "\u{1F3C4}\u200D\u2640\uFE0F";
const rowboat = "\u{1F6A3}";
const rowing_man = "\u{1F6A3}\u200D\u2642\uFE0F";
const rowing_woman = "\u{1F6A3}\u200D\u2640\uFE0F";
const swimmer = "\u{1F3CA}";
const swimming_man = "\u{1F3CA}\u200D\u2642\uFE0F";
const swimming_woman = "\u{1F3CA}\u200D\u2640\uFE0F";
const bouncing_ball_person = "\u26F9\uFE0F";
const bouncing_ball_man = "\u26F9\uFE0F\u200D\u2642\uFE0F";
const basketball_man = "\u26F9\uFE0F\u200D\u2642\uFE0F";
const bouncing_ball_woman = "\u26F9\uFE0F\u200D\u2640\uFE0F";
const basketball_woman = "\u26F9\uFE0F\u200D\u2640\uFE0F";
const weight_lifting = "\u{1F3CB}\uFE0F";
const weight_lifting_man = "\u{1F3CB}\uFE0F\u200D\u2642\uFE0F";
const weight_lifting_woman = "\u{1F3CB}\uFE0F\u200D\u2640\uFE0F";
const bicyclist = "\u{1F6B4}";
const biking_man = "\u{1F6B4}\u200D\u2642\uFE0F";
const biking_woman = "\u{1F6B4}\u200D\u2640\uFE0F";
const mountain_bicyclist = "\u{1F6B5}";
const mountain_biking_man = "\u{1F6B5}\u200D\u2642\uFE0F";
const mountain_biking_woman = "\u{1F6B5}\u200D\u2640\uFE0F";
const cartwheeling = "\u{1F938}";
const man_cartwheeling = "\u{1F938}\u200D\u2642\uFE0F";
const woman_cartwheeling = "\u{1F938}\u200D\u2640\uFE0F";
const wrestling = "\u{1F93C}";
const men_wrestling = "\u{1F93C}\u200D\u2642\uFE0F";
const women_wrestling = "\u{1F93C}\u200D\u2640\uFE0F";
const water_polo = "\u{1F93D}";
const man_playing_water_polo = "\u{1F93D}\u200D\u2642\uFE0F";
const woman_playing_water_polo = "\u{1F93D}\u200D\u2640\uFE0F";
const handball_person = "\u{1F93E}";
const man_playing_handball = "\u{1F93E}\u200D\u2642\uFE0F";
const woman_playing_handball = "\u{1F93E}\u200D\u2640\uFE0F";
const juggling_person = "\u{1F939}";
const man_juggling = "\u{1F939}\u200D\u2642\uFE0F";
const woman_juggling = "\u{1F939}\u200D\u2640\uFE0F";
const lotus_position = "\u{1F9D8}";
const lotus_position_man = "\u{1F9D8}\u200D\u2642\uFE0F";
const lotus_position_woman = "\u{1F9D8}\u200D\u2640\uFE0F";
const bath = "\u{1F6C0}";
const sleeping_bed = "\u{1F6CC}";
const people_holding_hands = "\u{1F9D1}\u200D\u{1F91D}\u200D\u{1F9D1}";
const two_women_holding_hands = "\u{1F46D}";
const couple = "\u{1F46B}";
const two_men_holding_hands = "\u{1F46C}";
const couplekiss = "\u{1F48F}";
const couplekiss_man_woman = "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}";
const couplekiss_man_man = "\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}";
const couplekiss_woman_woman = "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}";
const couple_with_heart = "\u{1F491}";
const couple_with_heart_woman_man = "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F468}";
const couple_with_heart_man_man = "\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F468}";
const couple_with_heart_woman_woman = "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F469}";
const family = "\u{1F46A}";
const family_man_woman_boy = "\u{1F468}\u200D\u{1F469}\u200D\u{1F466}";
const family_man_woman_girl = "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}";
const family_man_woman_girl_boy = "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}";
const family_man_woman_boy_boy = "\u{1F468}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}";
const family_man_woman_girl_girl = "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}";
const family_man_man_boy = "\u{1F468}\u200D\u{1F468}\u200D\u{1F466}";
const family_man_man_girl = "\u{1F468}\u200D\u{1F468}\u200D\u{1F467}";
const family_man_man_girl_boy = "\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F466}";
const family_man_man_boy_boy = "\u{1F468}\u200D\u{1F468}\u200D\u{1F466}\u200D\u{1F466}";
const family_man_man_girl_girl = "\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F467}";
const family_woman_woman_boy = "\u{1F469}\u200D\u{1F469}\u200D\u{1F466}";
const family_woman_woman_girl = "\u{1F469}\u200D\u{1F469}\u200D\u{1F467}";
const family_woman_woman_girl_boy = "\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}";
const family_woman_woman_boy_boy = "\u{1F469}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}";
const family_woman_woman_girl_girl = "\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}";
const family_man_boy = "\u{1F468}\u200D\u{1F466}";
const family_man_boy_boy = "\u{1F468}\u200D\u{1F466}\u200D\u{1F466}";
const family_man_girl = "\u{1F468}\u200D\u{1F467}";
const family_man_girl_boy = "\u{1F468}\u200D\u{1F467}\u200D\u{1F466}";
const family_man_girl_girl = "\u{1F468}\u200D\u{1F467}\u200D\u{1F467}";
const family_woman_boy = "\u{1F469}\u200D\u{1F466}";
const family_woman_boy_boy = "\u{1F469}\u200D\u{1F466}\u200D\u{1F466}";
const family_woman_girl = "\u{1F469}\u200D\u{1F467}";
const family_woman_girl_boy = "\u{1F469}\u200D\u{1F467}\u200D\u{1F466}";
const family_woman_girl_girl = "\u{1F469}\u200D\u{1F467}\u200D\u{1F467}";
const speaking_head = "\u{1F5E3}\uFE0F";
const bust_in_silhouette = "\u{1F464}";
const busts_in_silhouette = "\u{1F465}";
const people_hugging = "\u{1FAC2}";
const footprints = "\u{1F463}";
const monkey_face = "\u{1F435}";
const monkey = "\u{1F412}";
const gorilla = "\u{1F98D}";
const orangutan = "\u{1F9A7}";
const dog = "\u{1F436}";
const dog2 = "\u{1F415}";
const guide_dog = "\u{1F9AE}";
const service_dog = "\u{1F415}\u200D\u{1F9BA}";
const poodle = "\u{1F429}";
const wolf = "\u{1F43A}";
const fox_face = "\u{1F98A}";
const raccoon = "\u{1F99D}";
const cat = "\u{1F431}";
const cat2 = "\u{1F408}";
const black_cat = "\u{1F408}\u200D\u2B1B";
const lion = "\u{1F981}";
const tiger = "\u{1F42F}";
const tiger2 = "\u{1F405}";
const leopard = "\u{1F406}";
const horse = "\u{1F434}";
const racehorse = "\u{1F40E}";
const unicorn = "\u{1F984}";
const zebra = "\u{1F993}";
const deer = "\u{1F98C}";
const bison = "\u{1F9AC}";
const cow = "\u{1F42E}";
const ox = "\u{1F402}";
const water_buffalo = "\u{1F403}";
const cow2 = "\u{1F404}";
const pig = "\u{1F437}";
const pig2 = "\u{1F416}";
const boar = "\u{1F417}";
const pig_nose = "\u{1F43D}";
const ram = "\u{1F40F}";
const sheep = "\u{1F411}";
const goat = "\u{1F410}";
const dromedary_camel = "\u{1F42A}";
const camel = "\u{1F42B}";
const llama = "\u{1F999}";
const giraffe = "\u{1F992}";
const elephant = "\u{1F418}";
const mammoth = "\u{1F9A3}";
const rhinoceros = "\u{1F98F}";
const hippopotamus = "\u{1F99B}";
const mouse = "\u{1F42D}";
const mouse2 = "\u{1F401}";
const rat = "\u{1F400}";
const hamster = "\u{1F439}";
const rabbit = "\u{1F430}";
const rabbit2 = "\u{1F407}";
const chipmunk = "\u{1F43F}\uFE0F";
const beaver = "\u{1F9AB}";
const hedgehog = "\u{1F994}";
const bat = "\u{1F987}";
const bear = "\u{1F43B}";
const polar_bear = "\u{1F43B}\u200D\u2744\uFE0F";
const koala = "\u{1F428}";
const panda_face = "\u{1F43C}";
const sloth = "\u{1F9A5}";
const otter = "\u{1F9A6}";
const skunk = "\u{1F9A8}";
const kangaroo = "\u{1F998}";
const badger = "\u{1F9A1}";
const feet = "\u{1F43E}";
const paw_prints = "\u{1F43E}";
const turkey = "\u{1F983}";
const chicken = "\u{1F414}";
const rooster = "\u{1F413}";
const hatching_chick = "\u{1F423}";
const baby_chick = "\u{1F424}";
const hatched_chick = "\u{1F425}";
const bird = "\u{1F426}";
const penguin = "\u{1F427}";
const dove = "\u{1F54A}\uFE0F";
const eagle = "\u{1F985}";
const duck = "\u{1F986}";
const swan = "\u{1F9A2}";
const owl = "\u{1F989}";
const dodo = "\u{1F9A4}";
const feather = "\u{1FAB6}";
const flamingo = "\u{1F9A9}";
const peacock = "\u{1F99A}";
const parrot = "\u{1F99C}";
const frog = "\u{1F438}";
const crocodile = "\u{1F40A}";
const turtle = "\u{1F422}";
const lizard = "\u{1F98E}";
const snake = "\u{1F40D}";
const dragon_face = "\u{1F432}";
const dragon = "\u{1F409}";
const sauropod = "\u{1F995}";
const whale = "\u{1F433}";
const whale2 = "\u{1F40B}";
const dolphin = "\u{1F42C}";
const flipper = "\u{1F42C}";
const seal = "\u{1F9AD}";
const fish = "\u{1F41F}";
const tropical_fish = "\u{1F420}";
const blowfish = "\u{1F421}";
const shark = "\u{1F988}";
const octopus = "\u{1F419}";
const shell = "\u{1F41A}";
const snail = "\u{1F40C}";
const butterfly = "\u{1F98B}";
const bug = "\u{1F41B}";
const ant = "\u{1F41C}";
const bee = "\u{1F41D}";
const honeybee = "\u{1F41D}";
const beetle = "\u{1FAB2}";
const lady_beetle = "\u{1F41E}";
const cricket = "\u{1F997}";
const cockroach = "\u{1FAB3}";
const spider = "\u{1F577}\uFE0F";
const spider_web = "\u{1F578}\uFE0F";
const scorpion = "\u{1F982}";
const mosquito = "\u{1F99F}";
const fly = "\u{1FAB0}";
const worm = "\u{1FAB1}";
const microbe = "\u{1F9A0}";
const bouquet = "\u{1F490}";
const cherry_blossom = "\u{1F338}";
const white_flower = "\u{1F4AE}";
const rosette = "\u{1F3F5}\uFE0F";
const rose = "\u{1F339}";
const wilted_flower = "\u{1F940}";
const hibiscus = "\u{1F33A}";
const sunflower = "\u{1F33B}";
const blossom = "\u{1F33C}";
const tulip = "\u{1F337}";
const seedling = "\u{1F331}";
const potted_plant = "\u{1FAB4}";
const evergreen_tree = "\u{1F332}";
const deciduous_tree = "\u{1F333}";
const palm_tree = "\u{1F334}";
const cactus = "\u{1F335}";
const ear_of_rice = "\u{1F33E}";
const herb = "\u{1F33F}";
const shamrock = "\u2618\uFE0F";
const four_leaf_clover = "\u{1F340}";
const maple_leaf = "\u{1F341}";
const fallen_leaf = "\u{1F342}";
const leaves = "\u{1F343}";
const grapes = "\u{1F347}";
const melon = "\u{1F348}";
const watermelon = "\u{1F349}";
const tangerine = "\u{1F34A}";
const orange = "\u{1F34A}";
const mandarin = "\u{1F34A}";
const lemon = "\u{1F34B}";
const banana = "\u{1F34C}";
const pineapple = "\u{1F34D}";
const mango = "\u{1F96D}";
const apple = "\u{1F34E}";
const green_apple = "\u{1F34F}";
const pear = "\u{1F350}";
const peach = "\u{1F351}";
const cherries = "\u{1F352}";
const strawberry = "\u{1F353}";
const blueberries = "\u{1FAD0}";
const kiwi_fruit = "\u{1F95D}";
const tomato = "\u{1F345}";
const olive = "\u{1FAD2}";
const coconut = "\u{1F965}";
const avocado = "\u{1F951}";
const eggplant = "\u{1F346}";
const potato = "\u{1F954}";
const carrot = "\u{1F955}";
const corn = "\u{1F33D}";
const hot_pepper = "\u{1F336}\uFE0F";
const bell_pepper = "\u{1FAD1}";
const cucumber = "\u{1F952}";
const leafy_green = "\u{1F96C}";
const broccoli = "\u{1F966}";
const garlic = "\u{1F9C4}";
const onion = "\u{1F9C5}";
const mushroom = "\u{1F344}";
const peanuts = "\u{1F95C}";
const chestnut = "\u{1F330}";
const bread = "\u{1F35E}";
const croissant = "\u{1F950}";
const baguette_bread = "\u{1F956}";
const flatbread = "\u{1FAD3}";
const pretzel = "\u{1F968}";
const bagel = "\u{1F96F}";
const pancakes = "\u{1F95E}";
const waffle = "\u{1F9C7}";
const cheese = "\u{1F9C0}";
const meat_on_bone = "\u{1F356}";
const poultry_leg = "\u{1F357}";
const cut_of_meat = "\u{1F969}";
const bacon = "\u{1F953}";
const hamburger = "\u{1F354}";
const fries = "\u{1F35F}";
const pizza = "\u{1F355}";
const hotdog = "\u{1F32D}";
const sandwich = "\u{1F96A}";
const taco = "\u{1F32E}";
const burrito = "\u{1F32F}";
const tamale = "\u{1FAD4}";
const stuffed_flatbread = "\u{1F959}";
const falafel = "\u{1F9C6}";
const egg = "\u{1F95A}";
const fried_egg = "\u{1F373}";
const shallow_pan_of_food = "\u{1F958}";
const stew = "\u{1F372}";
const fondue = "\u{1FAD5}";
const bowl_with_spoon = "\u{1F963}";
const green_salad = "\u{1F957}";
const popcorn = "\u{1F37F}";
const butter = "\u{1F9C8}";
const salt = "\u{1F9C2}";
const canned_food = "\u{1F96B}";
const bento = "\u{1F371}";
const rice_cracker = "\u{1F358}";
const rice_ball = "\u{1F359}";
const rice = "\u{1F35A}";
const curry = "\u{1F35B}";
const ramen = "\u{1F35C}";
const spaghetti = "\u{1F35D}";
const sweet_potato = "\u{1F360}";
const oden = "\u{1F362}";
const sushi = "\u{1F363}";
const fried_shrimp = "\u{1F364}";
const fish_cake = "\u{1F365}";
const moon_cake = "\u{1F96E}";
const dango = "\u{1F361}";
const dumpling = "\u{1F95F}";
const fortune_cookie = "\u{1F960}";
const takeout_box = "\u{1F961}";
const crab = "\u{1F980}";
const lobster = "\u{1F99E}";
const shrimp = "\u{1F990}";
const squid = "\u{1F991}";
const oyster = "\u{1F9AA}";
const icecream = "\u{1F366}";
const shaved_ice = "\u{1F367}";
const ice_cream = "\u{1F368}";
const doughnut = "\u{1F369}";
const cookie = "\u{1F36A}";
const birthday = "\u{1F382}";
const cake = "\u{1F370}";
const cupcake = "\u{1F9C1}";
const pie = "\u{1F967}";
const chocolate_bar = "\u{1F36B}";
const candy = "\u{1F36C}";
const lollipop = "\u{1F36D}";
const custard = "\u{1F36E}";
const honey_pot = "\u{1F36F}";
const baby_bottle = "\u{1F37C}";
const milk_glass = "\u{1F95B}";
const coffee = "\u2615";
const teapot = "\u{1FAD6}";
const tea = "\u{1F375}";
const sake = "\u{1F376}";
const champagne = "\u{1F37E}";
const wine_glass = "\u{1F377}";
const cocktail = "\u{1F378}";
const tropical_drink = "\u{1F379}";
const beer = "\u{1F37A}";
const beers = "\u{1F37B}";
const clinking_glasses = "\u{1F942}";
const tumbler_glass = "\u{1F943}";
const cup_with_straw = "\u{1F964}";
const bubble_tea = "\u{1F9CB}";
const beverage_box = "\u{1F9C3}";
const mate = "\u{1F9C9}";
const ice_cube = "\u{1F9CA}";
const chopsticks = "\u{1F962}";
const plate_with_cutlery = "\u{1F37D}\uFE0F";
const fork_and_knife = "\u{1F374}";
const spoon = "\u{1F944}";
const hocho = "\u{1F52A}";
const knife = "\u{1F52A}";
const amphora = "\u{1F3FA}";
const earth_africa = "\u{1F30D}";
const earth_americas = "\u{1F30E}";
const earth_asia = "\u{1F30F}";
const globe_with_meridians = "\u{1F310}";
const world_map = "\u{1F5FA}\uFE0F";
const japan = "\u{1F5FE}";
const compass = "\u{1F9ED}";
const mountain_snow = "\u{1F3D4}\uFE0F";
const mountain = "\u26F0\uFE0F";
const volcano = "\u{1F30B}";
const mount_fuji = "\u{1F5FB}";
const camping = "\u{1F3D5}\uFE0F";
const beach_umbrella = "\u{1F3D6}\uFE0F";
const desert = "\u{1F3DC}\uFE0F";
const desert_island = "\u{1F3DD}\uFE0F";
const national_park = "\u{1F3DE}\uFE0F";
const stadium = "\u{1F3DF}\uFE0F";
const classical_building = "\u{1F3DB}\uFE0F";
const building_construction = "\u{1F3D7}\uFE0F";
const bricks = "\u{1F9F1}";
const rock = "\u{1FAA8}";
const wood = "\u{1FAB5}";
const hut = "\u{1F6D6}";
const houses = "\u{1F3D8}\uFE0F";
const derelict_house = "\u{1F3DA}\uFE0F";
const house = "\u{1F3E0}";
const house_with_garden = "\u{1F3E1}";
const office = "\u{1F3E2}";
const post_office = "\u{1F3E3}";
const european_post_office = "\u{1F3E4}";
const hospital = "\u{1F3E5}";
const bank = "\u{1F3E6}";
const hotel = "\u{1F3E8}";
const love_hotel = "\u{1F3E9}";
const convenience_store = "\u{1F3EA}";
const school = "\u{1F3EB}";
const department_store = "\u{1F3EC}";
const factory = "\u{1F3ED}";
const japanese_castle = "\u{1F3EF}";
const european_castle = "\u{1F3F0}";
const wedding = "\u{1F492}";
const tokyo_tower = "\u{1F5FC}";
const statue_of_liberty = "\u{1F5FD}";
const church = "\u26EA";
const mosque = "\u{1F54C}";
const hindu_temple = "\u{1F6D5}";
const synagogue = "\u{1F54D}";
const shinto_shrine = "\u26E9\uFE0F";
const kaaba = "\u{1F54B}";
const fountain = "\u26F2";
const tent = "\u26FA";
const foggy = "\u{1F301}";
const night_with_stars = "\u{1F303}";
const cityscape = "\u{1F3D9}\uFE0F";
const sunrise_over_mountains = "\u{1F304}";
const sunrise = "\u{1F305}";
const city_sunset = "\u{1F306}";
const city_sunrise = "\u{1F307}";
const bridge_at_night = "\u{1F309}";
const hotsprings = "\u2668\uFE0F";
const carousel_horse = "\u{1F3A0}";
const ferris_wheel = "\u{1F3A1}";
const roller_coaster = "\u{1F3A2}";
const barber = "\u{1F488}";
const circus_tent = "\u{1F3AA}";
const steam_locomotive = "\u{1F682}";
const railway_car = "\u{1F683}";
const bullettrain_side = "\u{1F684}";
const bullettrain_front = "\u{1F685}";
const train2 = "\u{1F686}";
const metro = "\u{1F687}";
const light_rail = "\u{1F688}";
const station = "\u{1F689}";
const tram = "\u{1F68A}";
const monorail = "\u{1F69D}";
const mountain_railway = "\u{1F69E}";
const train = "\u{1F68B}";
const bus = "\u{1F68C}";
const oncoming_bus = "\u{1F68D}";
const trolleybus = "\u{1F68E}";
const minibus = "\u{1F690}";
const ambulance = "\u{1F691}";
const fire_engine = "\u{1F692}";
const police_car = "\u{1F693}";
const oncoming_police_car = "\u{1F694}";
const taxi = "\u{1F695}";
const oncoming_taxi = "\u{1F696}";
const car = "\u{1F697}";
const red_car = "\u{1F697}";
const oncoming_automobile = "\u{1F698}";
const blue_car = "\u{1F699}";
const pickup_truck = "\u{1F6FB}";
const truck = "\u{1F69A}";
const articulated_lorry = "\u{1F69B}";
const tractor = "\u{1F69C}";
const racing_car = "\u{1F3CE}\uFE0F";
const motorcycle = "\u{1F3CD}\uFE0F";
const motor_scooter = "\u{1F6F5}";
const manual_wheelchair = "\u{1F9BD}";
const motorized_wheelchair = "\u{1F9BC}";
const auto_rickshaw = "\u{1F6FA}";
const bike = "\u{1F6B2}";
const kick_scooter = "\u{1F6F4}";
const skateboard = "\u{1F6F9}";
const roller_skate = "\u{1F6FC}";
const busstop = "\u{1F68F}";
const motorway = "\u{1F6E3}\uFE0F";
const railway_track = "\u{1F6E4}\uFE0F";
const oil_drum = "\u{1F6E2}\uFE0F";
const fuelpump = "\u26FD";
const rotating_light = "\u{1F6A8}";
const traffic_light = "\u{1F6A5}";
const vertical_traffic_light = "\u{1F6A6}";
const stop_sign = "\u{1F6D1}";
const construction = "\u{1F6A7}";
const anchor = "\u2693";
const boat = "\u26F5";
const sailboat = "\u26F5";
const canoe = "\u{1F6F6}";
const speedboat = "\u{1F6A4}";
const passenger_ship = "\u{1F6F3}\uFE0F";
const ferry = "\u26F4\uFE0F";
const motor_boat = "\u{1F6E5}\uFE0F";
const ship = "\u{1F6A2}";
const airplane = "\u2708\uFE0F";
const small_airplane = "\u{1F6E9}\uFE0F";
const flight_departure = "\u{1F6EB}";
const flight_arrival = "\u{1F6EC}";
const parachute = "\u{1FA82}";
const seat = "\u{1F4BA}";
const helicopter = "\u{1F681}";
const suspension_railway = "\u{1F69F}";
const mountain_cableway = "\u{1F6A0}";
const aerial_tramway = "\u{1F6A1}";
const artificial_satellite = "\u{1F6F0}\uFE0F";
const rocket = "\u{1F680}";
const flying_saucer = "\u{1F6F8}";
const bellhop_bell = "\u{1F6CE}\uFE0F";
const luggage = "\u{1F9F3}";
const hourglass = "\u231B";
const hourglass_flowing_sand = "\u23F3";
const watch = "\u231A";
const alarm_clock = "\u23F0";
const stopwatch = "\u23F1\uFE0F";
const timer_clock = "\u23F2\uFE0F";
const mantelpiece_clock = "\u{1F570}\uFE0F";
const clock12 = "\u{1F55B}";
const clock1230 = "\u{1F567}";
const clock1 = "\u{1F550}";
const clock130 = "\u{1F55C}";
const clock2 = "\u{1F551}";
const clock230 = "\u{1F55D}";
const clock3 = "\u{1F552}";
const clock330 = "\u{1F55E}";
const clock4 = "\u{1F553}";
const clock430 = "\u{1F55F}";
const clock5 = "\u{1F554}";
const clock530 = "\u{1F560}";
const clock6 = "\u{1F555}";
const clock630 = "\u{1F561}";
const clock7 = "\u{1F556}";
const clock730 = "\u{1F562}";
const clock8 = "\u{1F557}";
const clock830 = "\u{1F563}";
const clock9 = "\u{1F558}";
const clock930 = "\u{1F564}";
const clock10 = "\u{1F559}";
const clock1030 = "\u{1F565}";
const clock11 = "\u{1F55A}";
const clock1130 = "\u{1F566}";
const new_moon = "\u{1F311}";
const waxing_crescent_moon = "\u{1F312}";
const first_quarter_moon = "\u{1F313}";
const moon = "\u{1F314}";
const waxing_gibbous_moon = "\u{1F314}";
const full_moon = "\u{1F315}";
const waning_gibbous_moon = "\u{1F316}";
const last_quarter_moon = "\u{1F317}";
const waning_crescent_moon = "\u{1F318}";
const crescent_moon = "\u{1F319}";
const new_moon_with_face = "\u{1F31A}";
const first_quarter_moon_with_face = "\u{1F31B}";
const last_quarter_moon_with_face = "\u{1F31C}";
const thermometer = "\u{1F321}\uFE0F";
const sunny = "\u2600\uFE0F";
const full_moon_with_face = "\u{1F31D}";
const sun_with_face = "\u{1F31E}";
const ringed_planet = "\u{1FA90}";
const star$1 = "\u2B50";
const star2 = "\u{1F31F}";
const stars = "\u{1F320}";
const milky_way = "\u{1F30C}";
const cloud = "\u2601\uFE0F";
const partly_sunny = "\u26C5";
const cloud_with_lightning_and_rain = "\u26C8\uFE0F";
const sun_behind_small_cloud = "\u{1F324}\uFE0F";
const sun_behind_large_cloud = "\u{1F325}\uFE0F";
const sun_behind_rain_cloud = "\u{1F326}\uFE0F";
const cloud_with_rain = "\u{1F327}\uFE0F";
const cloud_with_snow = "\u{1F328}\uFE0F";
const cloud_with_lightning = "\u{1F329}\uFE0F";
const tornado = "\u{1F32A}\uFE0F";
const fog = "\u{1F32B}\uFE0F";
const wind_face = "\u{1F32C}\uFE0F";
const cyclone = "\u{1F300}";
const rainbow = "\u{1F308}";
const closed_umbrella = "\u{1F302}";
const open_umbrella = "\u2602\uFE0F";
const umbrella = "\u2614";
const parasol_on_ground = "\u26F1\uFE0F";
const zap = "\u26A1";
const snowflake = "\u2744\uFE0F";
const snowman_with_snow = "\u2603\uFE0F";
const snowman = "\u26C4";
const comet = "\u2604\uFE0F";
const fire = "\u{1F525}";
const droplet = "\u{1F4A7}";
const ocean = "\u{1F30A}";
const jack_o_lantern = "\u{1F383}";
const christmas_tree = "\u{1F384}";
const fireworks = "\u{1F386}";
const sparkler = "\u{1F387}";
const firecracker = "\u{1F9E8}";
const sparkles = "\u2728";
const balloon = "\u{1F388}";
const tada = "\u{1F389}";
const confetti_ball = "\u{1F38A}";
const tanabata_tree = "\u{1F38B}";
const bamboo = "\u{1F38D}";
const dolls = "\u{1F38E}";
const flags = "\u{1F38F}";
const wind_chime = "\u{1F390}";
const rice_scene = "\u{1F391}";
const red_envelope = "\u{1F9E7}";
const ribbon = "\u{1F380}";
const gift = "\u{1F381}";
const reminder_ribbon = "\u{1F397}\uFE0F";
const tickets = "\u{1F39F}\uFE0F";
const ticket = "\u{1F3AB}";
const medal_military = "\u{1F396}\uFE0F";
const trophy = "\u{1F3C6}";
const medal_sports = "\u{1F3C5}";
const soccer = "\u26BD";
const baseball = "\u26BE";
const softball = "\u{1F94E}";
const basketball = "\u{1F3C0}";
const volleyball = "\u{1F3D0}";
const football = "\u{1F3C8}";
const rugby_football = "\u{1F3C9}";
const tennis = "\u{1F3BE}";
const flying_disc = "\u{1F94F}";
const bowling = "\u{1F3B3}";
const cricket_game = "\u{1F3CF}";
const field_hockey = "\u{1F3D1}";
const ice_hockey = "\u{1F3D2}";
const lacrosse = "\u{1F94D}";
const ping_pong = "\u{1F3D3}";
const badminton = "\u{1F3F8}";
const boxing_glove = "\u{1F94A}";
const martial_arts_uniform = "\u{1F94B}";
const goal_net = "\u{1F945}";
const golf = "\u26F3";
const ice_skate = "\u26F8\uFE0F";
const fishing_pole_and_fish = "\u{1F3A3}";
const diving_mask = "\u{1F93F}";
const running_shirt_with_sash = "\u{1F3BD}";
const ski = "\u{1F3BF}";
const sled = "\u{1F6F7}";
const curling_stone = "\u{1F94C}";
const dart = "\u{1F3AF}";
const yo_yo = "\u{1FA80}";
const kite = "\u{1FA81}";
const crystal_ball = "\u{1F52E}";
const magic_wand = "\u{1FA84}";
const nazar_amulet = "\u{1F9FF}";
const video_game = "\u{1F3AE}";
const joystick = "\u{1F579}\uFE0F";
const slot_machine = "\u{1F3B0}";
const game_die = "\u{1F3B2}";
const jigsaw = "\u{1F9E9}";
const teddy_bear = "\u{1F9F8}";
const pinata = "\u{1FA85}";
const nesting_dolls = "\u{1FA86}";
const spades$1 = "\u2660\uFE0F";
const hearts$1 = "\u2665\uFE0F";
const diamonds = "\u2666\uFE0F";
const clubs$1 = "\u2663\uFE0F";
const chess_pawn = "\u265F\uFE0F";
const black_joker = "\u{1F0CF}";
const mahjong = "\u{1F004}";
const flower_playing_cards = "\u{1F3B4}";
const performing_arts = "\u{1F3AD}";
const framed_picture = "\u{1F5BC}\uFE0F";
const art = "\u{1F3A8}";
const thread = "\u{1F9F5}";
const sewing_needle = "\u{1FAA1}";
const yarn = "\u{1F9F6}";
const knot = "\u{1FAA2}";
const eyeglasses = "\u{1F453}";
const dark_sunglasses = "\u{1F576}\uFE0F";
const goggles = "\u{1F97D}";
const lab_coat = "\u{1F97C}";
const safety_vest = "\u{1F9BA}";
const necktie = "\u{1F454}";
const shirt = "\u{1F455}";
const tshirt = "\u{1F455}";
const jeans = "\u{1F456}";
const scarf = "\u{1F9E3}";
const gloves = "\u{1F9E4}";
const coat = "\u{1F9E5}";
const socks = "\u{1F9E6}";
const dress = "\u{1F457}";
const kimono = "\u{1F458}";
const sari = "\u{1F97B}";
const one_piece_swimsuit = "\u{1FA71}";
const swim_brief = "\u{1FA72}";
const shorts = "\u{1FA73}";
const bikini = "\u{1F459}";
const womans_clothes = "\u{1F45A}";
const purse = "\u{1F45B}";
const handbag = "\u{1F45C}";
const pouch = "\u{1F45D}";
const shopping = "\u{1F6CD}\uFE0F";
const school_satchel = "\u{1F392}";
const thong_sandal = "\u{1FA74}";
const mans_shoe = "\u{1F45E}";
const shoe = "\u{1F45E}";
const athletic_shoe = "\u{1F45F}";
const hiking_boot = "\u{1F97E}";
const flat_shoe = "\u{1F97F}";
const high_heel = "\u{1F460}";
const sandal = "\u{1F461}";
const ballet_shoes = "\u{1FA70}";
const boot = "\u{1F462}";
const crown = "\u{1F451}";
const womans_hat = "\u{1F452}";
const tophat = "\u{1F3A9}";
const mortar_board = "\u{1F393}";
const billed_cap = "\u{1F9E2}";
const military_helmet = "\u{1FA96}";
const rescue_worker_helmet = "\u26D1\uFE0F";
const prayer_beads = "\u{1F4FF}";
const lipstick = "\u{1F484}";
const ring$1 = "\u{1F48D}";
const gem = "\u{1F48E}";
const mute = "\u{1F507}";
const speaker = "\u{1F508}";
const sound = "\u{1F509}";
const loud_sound = "\u{1F50A}";
const loudspeaker = "\u{1F4E2}";
const mega = "\u{1F4E3}";
const postal_horn = "\u{1F4EF}";
const bell = "\u{1F514}";
const no_bell = "\u{1F515}";
const musical_score = "\u{1F3BC}";
const musical_note = "\u{1F3B5}";
const notes = "\u{1F3B6}";
const studio_microphone = "\u{1F399}\uFE0F";
const level_slider = "\u{1F39A}\uFE0F";
const control_knobs = "\u{1F39B}\uFE0F";
const microphone = "\u{1F3A4}";
const headphones = "\u{1F3A7}";
const radio$1 = "\u{1F4FB}";
const saxophone = "\u{1F3B7}";
const accordion = "\u{1FA97}";
const guitar = "\u{1F3B8}";
const musical_keyboard = "\u{1F3B9}";
const trumpet = "\u{1F3BA}";
const violin = "\u{1F3BB}";
const banjo = "\u{1FA95}";
const drum = "\u{1F941}";
const long_drum = "\u{1FA98}";
const iphone = "\u{1F4F1}";
const calling = "\u{1F4F2}";
const phone$1 = "\u260E\uFE0F";
const telephone = "\u260E\uFE0F";
const telephone_receiver = "\u{1F4DE}";
const pager = "\u{1F4DF}";
const fax = "\u{1F4E0}";
const battery = "\u{1F50B}";
const electric_plug = "\u{1F50C}";
const computer = "\u{1F4BB}";
const desktop_computer = "\u{1F5A5}\uFE0F";
const printer = "\u{1F5A8}\uFE0F";
const keyboard = "\u2328\uFE0F";
const computer_mouse = "\u{1F5B1}\uFE0F";
const trackball = "\u{1F5B2}\uFE0F";
const minidisc = "\u{1F4BD}";
const floppy_disk = "\u{1F4BE}";
const cd = "\u{1F4BF}";
const dvd = "\u{1F4C0}";
const abacus = "\u{1F9EE}";
const movie_camera = "\u{1F3A5}";
const film_strip = "\u{1F39E}\uFE0F";
const film_projector = "\u{1F4FD}\uFE0F";
const clapper = "\u{1F3AC}";
const tv = "\u{1F4FA}";
const camera = "\u{1F4F7}";
const camera_flash = "\u{1F4F8}";
const video_camera = "\u{1F4F9}";
const vhs = "\u{1F4FC}";
const mag = "\u{1F50D}";
const mag_right = "\u{1F50E}";
const candle = "\u{1F56F}\uFE0F";
const bulb = "\u{1F4A1}";
const flashlight = "\u{1F526}";
const izakaya_lantern = "\u{1F3EE}";
const lantern = "\u{1F3EE}";
const diya_lamp = "\u{1FA94}";
const notebook_with_decorative_cover = "\u{1F4D4}";
const closed_book = "\u{1F4D5}";
const book = "\u{1F4D6}";
const open_book = "\u{1F4D6}";
const green_book = "\u{1F4D7}";
const blue_book = "\u{1F4D8}";
const orange_book = "\u{1F4D9}";
const books = "\u{1F4DA}";
const notebook = "\u{1F4D3}";
const ledger = "\u{1F4D2}";
const page_with_curl = "\u{1F4C3}";
const scroll = "\u{1F4DC}";
const page_facing_up = "\u{1F4C4}";
const newspaper = "\u{1F4F0}";
const newspaper_roll = "\u{1F5DE}\uFE0F";
const bookmark_tabs = "\u{1F4D1}";
const bookmark = "\u{1F516}";
const label$2 = "\u{1F3F7}\uFE0F";
const moneybag = "\u{1F4B0}";
const coin = "\u{1FA99}";
const yen$2 = "\u{1F4B4}";
const dollar$1 = "\u{1F4B5}";
const euro$1 = "\u{1F4B6}";
const pound$2 = "\u{1F4B7}";
const money_with_wings = "\u{1F4B8}";
const credit_card = "\u{1F4B3}";
const receipt = "\u{1F9FE}";
const chart = "\u{1F4B9}";
const envelope = "\u2709\uFE0F";
const email = "\u{1F4E7}";
const incoming_envelope = "\u{1F4E8}";
const envelope_with_arrow = "\u{1F4E9}";
const outbox_tray = "\u{1F4E4}";
const inbox_tray = "\u{1F4E5}";
const mailbox = "\u{1F4EB}";
const mailbox_closed = "\u{1F4EA}";
const mailbox_with_mail = "\u{1F4EC}";
const mailbox_with_no_mail = "\u{1F4ED}";
const postbox = "\u{1F4EE}";
const ballot_box = "\u{1F5F3}\uFE0F";
const pencil2 = "\u270F\uFE0F";
const black_nib = "\u2712\uFE0F";
const fountain_pen = "\u{1F58B}\uFE0F";
const pen = "\u{1F58A}\uFE0F";
const paintbrush = "\u{1F58C}\uFE0F";
const crayon = "\u{1F58D}\uFE0F";
const memo = "\u{1F4DD}";
const pencil = "\u{1F4DD}";
const briefcase = "\u{1F4BC}";
const file_folder = "\u{1F4C1}";
const open_file_folder = "\u{1F4C2}";
const card_index_dividers = "\u{1F5C2}\uFE0F";
const date$1 = "\u{1F4C5}";
const calendar = "\u{1F4C6}";
const spiral_notepad = "\u{1F5D2}\uFE0F";
const spiral_calendar = "\u{1F5D3}\uFE0F";
const card_index = "\u{1F4C7}";
const chart_with_upwards_trend = "\u{1F4C8}";
const chart_with_downwards_trend = "\u{1F4C9}";
const bar_chart = "\u{1F4CA}";
const clipboard = "\u{1F4CB}";
const pushpin = "\u{1F4CC}";
const round_pushpin = "\u{1F4CD}";
const paperclip = "\u{1F4CE}";
const paperclips = "\u{1F587}\uFE0F";
const straight_ruler = "\u{1F4CF}";
const triangular_ruler = "\u{1F4D0}";
const scissors = "\u2702\uFE0F";
const card_file_box = "\u{1F5C3}\uFE0F";
const file_cabinet = "\u{1F5C4}\uFE0F";
const wastebasket = "\u{1F5D1}\uFE0F";
const lock = "\u{1F512}";
const unlock = "\u{1F513}";
const lock_with_ink_pen = "\u{1F50F}";
const closed_lock_with_key = "\u{1F510}";
const key = "\u{1F511}";
const old_key = "\u{1F5DD}\uFE0F";
const hammer = "\u{1F528}";
const axe = "\u{1FA93}";
const pick = "\u26CF\uFE0F";
const hammer_and_pick = "\u2692\uFE0F";
const hammer_and_wrench = "\u{1F6E0}\uFE0F";
const dagger$1 = "\u{1F5E1}\uFE0F";
const crossed_swords = "\u2694\uFE0F";
const gun = "\u{1F52B}";
const boomerang = "\u{1FA83}";
const bow_and_arrow = "\u{1F3F9}";
const shield = "\u{1F6E1}\uFE0F";
const carpentry_saw = "\u{1FA9A}";
const wrench = "\u{1F527}";
const screwdriver = "\u{1FA9B}";
const nut_and_bolt = "\u{1F529}";
const gear = "\u2699\uFE0F";
const clamp = "\u{1F5DC}\uFE0F";
const balance_scale = "\u2696\uFE0F";
const probing_cane = "\u{1F9AF}";
const link$1 = "\u{1F517}";
const chains = "\u26D3\uFE0F";
const hook = "\u{1FA9D}";
const toolbox = "\u{1F9F0}";
const magnet = "\u{1F9F2}";
const ladder = "\u{1FA9C}";
const alembic = "\u2697\uFE0F";
const test_tube = "\u{1F9EA}";
const petri_dish = "\u{1F9EB}";
const dna = "\u{1F9EC}";
const microscope = "\u{1F52C}";
const telescope = "\u{1F52D}";
const satellite = "\u{1F4E1}";
const syringe = "\u{1F489}";
const drop_of_blood = "\u{1FA78}";
const pill = "\u{1F48A}";
const adhesive_bandage = "\u{1FA79}";
const stethoscope = "\u{1FA7A}";
const door = "\u{1F6AA}";
const elevator = "\u{1F6D7}";
const mirror = "\u{1FA9E}";
const window$1 = "\u{1FA9F}";
const bed = "\u{1F6CF}\uFE0F";
const couch_and_lamp = "\u{1F6CB}\uFE0F";
const chair = "\u{1FA91}";
const toilet = "\u{1F6BD}";
const plunger = "\u{1FAA0}";
const shower = "\u{1F6BF}";
const bathtub = "\u{1F6C1}";
const mouse_trap = "\u{1FAA4}";
const razor = "\u{1FA92}";
const lotion_bottle = "\u{1F9F4}";
const safety_pin = "\u{1F9F7}";
const broom = "\u{1F9F9}";
const basket = "\u{1F9FA}";
const roll_of_paper = "\u{1F9FB}";
const bucket = "\u{1FAA3}";
const soap = "\u{1F9FC}";
const toothbrush = "\u{1FAA5}";
const sponge = "\u{1F9FD}";
const fire_extinguisher = "\u{1F9EF}";
const shopping_cart = "\u{1F6D2}";
const smoking = "\u{1F6AC}";
const coffin = "\u26B0\uFE0F";
const headstone = "\u{1FAA6}";
const funeral_urn = "\u26B1\uFE0F";
const moyai = "\u{1F5FF}";
const placard = "\u{1FAA7}";
const atm = "\u{1F3E7}";
const put_litter_in_its_place = "\u{1F6AE}";
const potable_water = "\u{1F6B0}";
const wheelchair = "\u267F";
const mens = "\u{1F6B9}";
const womens = "\u{1F6BA}";
const restroom = "\u{1F6BB}";
const baby_symbol = "\u{1F6BC}";
const wc = "\u{1F6BE}";
const passport_control = "\u{1F6C2}";
const customs = "\u{1F6C3}";
const baggage_claim = "\u{1F6C4}";
const left_luggage = "\u{1F6C5}";
const warning$2 = "\u26A0\uFE0F";
const children_crossing = "\u{1F6B8}";
const no_entry = "\u26D4";
const no_entry_sign = "\u{1F6AB}";
const no_bicycles = "\u{1F6B3}";
const no_smoking = "\u{1F6AD}";
const do_not_litter = "\u{1F6AF}";
const no_pedestrians = "\u{1F6B7}";
const no_mobile_phones = "\u{1F4F5}";
const underage = "\u{1F51E}";
const radioactive = "\u2622\uFE0F";
const biohazard = "\u2623\uFE0F";
const arrow_up = "\u2B06\uFE0F";
const arrow_upper_right = "\u2197\uFE0F";
const arrow_right = "\u27A1\uFE0F";
const arrow_lower_right = "\u2198\uFE0F";
const arrow_down = "\u2B07\uFE0F";
const arrow_lower_left = "\u2199\uFE0F";
const arrow_left = "\u2B05\uFE0F";
const arrow_upper_left = "\u2196\uFE0F";
const arrow_up_down = "\u2195\uFE0F";
const left_right_arrow = "\u2194\uFE0F";
const leftwards_arrow_with_hook = "\u21A9\uFE0F";
const arrow_right_hook = "\u21AA\uFE0F";
const arrow_heading_up = "\u2934\uFE0F";
const arrow_heading_down = "\u2935\uFE0F";
const arrows_clockwise = "\u{1F503}";
const arrows_counterclockwise = "\u{1F504}";
const back$1 = "\u{1F519}";
const end = "\u{1F51A}";
const on = "\u{1F51B}";
const soon = "\u{1F51C}";
const top$2 = "\u{1F51D}";
const place_of_worship = "\u{1F6D0}";
const atom_symbol = "\u269B\uFE0F";
const om = "\u{1F549}\uFE0F";
const star_of_david = "\u2721\uFE0F";
const wheel_of_dharma = "\u2638\uFE0F";
const yin_yang = "\u262F\uFE0F";
const latin_cross = "\u271D\uFE0F";
const orthodox_cross = "\u2626\uFE0F";
const star_and_crescent = "\u262A\uFE0F";
const peace_symbol = "\u262E\uFE0F";
const menorah = "\u{1F54E}";
const six_pointed_star = "\u{1F52F}";
const aries = "\u2648";
const taurus = "\u2649";
const gemini = "\u264A";
const cancer = "\u264B";
const leo = "\u264C";
const virgo = "\u264D";
const libra = "\u264E";
const scorpius = "\u264F";
const sagittarius = "\u2650";
const capricorn = "\u2651";
const aquarius = "\u2652";
const pisces = "\u2653";
const ophiuchus = "\u26CE";
const twisted_rightwards_arrows = "\u{1F500}";
const repeat = "\u{1F501}";
const repeat_one = "\u{1F502}";
const arrow_forward = "\u25B6\uFE0F";
const fast_forward = "\u23E9";
const next_track_button = "\u23ED\uFE0F";
const play_or_pause_button = "\u23EF\uFE0F";
const arrow_backward = "\u25C0\uFE0F";
const rewind = "\u23EA";
const previous_track_button = "\u23EE\uFE0F";
const arrow_up_small = "\u{1F53C}";
const arrow_double_up = "\u23EB";
const arrow_down_small = "\u{1F53D}";
const arrow_double_down = "\u23EC";
const pause_button = "\u23F8\uFE0F";
const stop_button = "\u23F9\uFE0F";
const record_button = "\u23FA\uFE0F";
const eject_button = "\u23CF\uFE0F";
const cinema = "\u{1F3A6}";
const low_brightness = "\u{1F505}";
const high_brightness = "\u{1F506}";
const signal_strength = "\u{1F4F6}";
const vibration_mode = "\u{1F4F3}";
const mobile_phone_off = "\u{1F4F4}";
const female_sign = "\u2640\uFE0F";
const male_sign = "\u2642\uFE0F";
const transgender_symbol = "\u26A7\uFE0F";
const heavy_multiplication_x = "\u2716\uFE0F";
const heavy_plus_sign = "\u2795";
const heavy_minus_sign = "\u2796";
const heavy_division_sign = "\u2797";
const infinity = "\u267E\uFE0F";
const bangbang = "\u203C\uFE0F";
const interrobang = "\u2049\uFE0F";
const question = "\u2753";
const grey_question = "\u2754";
const grey_exclamation = "\u2755";
const exclamation = "\u2757";
const heavy_exclamation_mark = "\u2757";
const wavy_dash = "\u3030\uFE0F";
const currency_exchange = "\u{1F4B1}";
const heavy_dollar_sign = "\u{1F4B2}";
const medical_symbol = "\u2695\uFE0F";
const recycle = "\u267B\uFE0F";
const fleur_de_lis = "\u269C\uFE0F";
const trident = "\u{1F531}";
const name_badge = "\u{1F4DB}";
const beginner = "\u{1F530}";
const o = "\u2B55";
const white_check_mark = "\u2705";
const ballot_box_with_check = "\u2611\uFE0F";
const heavy_check_mark = "\u2714\uFE0F";
const x$1 = "\u274C";
const negative_squared_cross_mark = "\u274E";
const curly_loop = "\u27B0";
const loop = "\u27BF";
const part_alternation_mark = "\u303D\uFE0F";
const eight_spoked_asterisk = "\u2733\uFE0F";
const eight_pointed_black_star = "\u2734\uFE0F";
const sparkle = "\u2747\uFE0F";
const copyright = "\xA9\uFE0F";
const registered = "\xAE\uFE0F";
const tm = "\u2122\uFE0F";
const hash = "#\uFE0F\u20E3";
const asterisk = "*\uFE0F\u20E3";
const zero = "0\uFE0F\u20E3";
const one = "1\uFE0F\u20E3";
const two = "2\uFE0F\u20E3";
const three = "3\uFE0F\u20E3";
const four = "4\uFE0F\u20E3";
const five = "5\uFE0F\u20E3";
const six = "6\uFE0F\u20E3";
const seven = "7\uFE0F\u20E3";
const eight = "8\uFE0F\u20E3";
const nine = "9\uFE0F\u20E3";
const keycap_ten = "\u{1F51F}";
const capital_abcd = "\u{1F520}";
const abcd = "\u{1F521}";
const symbols$1 = "\u{1F523}";
const abc = "\u{1F524}";
const a = "\u{1F170}\uFE0F";
const ab = "\u{1F18E}";
const b = "\u{1F171}\uFE0F";
const cl = "\u{1F191}";
const cool = "\u{1F192}";
const free = "\u{1F193}";
const information_source = "\u2139\uFE0F";
const id = "\u{1F194}";
const m = "\u24C2\uFE0F";
const ng = "\u{1F196}";
const o2 = "\u{1F17E}\uFE0F";
const ok = "\u{1F197}";
const parking = "\u{1F17F}\uFE0F";
const sos = "\u{1F198}";
const up = "\u{1F199}";
const vs = "\u{1F19A}";
const koko = "\u{1F201}";
const sa = "\u{1F202}\uFE0F";
const ideograph_advantage = "\u{1F250}";
const accept = "\u{1F251}";
const congratulations = "\u3297\uFE0F";
const secret = "\u3299\uFE0F";
const u6e80 = "\u{1F235}";
const red_circle = "\u{1F534}";
const orange_circle = "\u{1F7E0}";
const yellow_circle = "\u{1F7E1}";
const green_circle = "\u{1F7E2}";
const large_blue_circle = "\u{1F535}";
const purple_circle = "\u{1F7E3}";
const brown_circle = "\u{1F7E4}";
const black_circle = "\u26AB";
const white_circle = "\u26AA";
const red_square = "\u{1F7E5}";
const orange_square = "\u{1F7E7}";
const yellow_square = "\u{1F7E8}";
const green_square = "\u{1F7E9}";
const blue_square = "\u{1F7E6}";
const purple_square = "\u{1F7EA}";
const brown_square = "\u{1F7EB}";
const black_large_square = "\u2B1B";
const white_large_square = "\u2B1C";
const black_medium_square = "\u25FC\uFE0F";
const white_medium_square = "\u25FB\uFE0F";
const black_medium_small_square = "\u25FE";
const white_medium_small_square = "\u25FD";
const black_small_square = "\u25AA\uFE0F";
const white_small_square = "\u25AB\uFE0F";
const large_orange_diamond = "\u{1F536}";
const large_blue_diamond = "\u{1F537}";
const small_orange_diamond = "\u{1F538}";
const small_blue_diamond = "\u{1F539}";
const small_red_triangle = "\u{1F53A}";
const small_red_triangle_down = "\u{1F53B}";
const diamond_shape_with_a_dot_inside = "\u{1F4A0}";
const radio_button = "\u{1F518}";
const white_square_button = "\u{1F533}";
const black_square_button = "\u{1F532}";
const checkered_flag = "\u{1F3C1}";
const triangular_flag_on_post = "\u{1F6A9}";
const crossed_flags = "\u{1F38C}";
const black_flag = "\u{1F3F4}";
const white_flag = "\u{1F3F3}\uFE0F";
const rainbow_flag = "\u{1F3F3}\uFE0F\u200D\u{1F308}";
const transgender_flag = "\u{1F3F3}\uFE0F\u200D\u26A7\uFE0F";
const pirate_flag = "\u{1F3F4}\u200D\u2620\uFE0F";
const ascension_island = "\u{1F1E6}\u{1F1E8}";
const andorra = "\u{1F1E6}\u{1F1E9}";
const united_arab_emirates = "\u{1F1E6}\u{1F1EA}";
const afghanistan = "\u{1F1E6}\u{1F1EB}";
const antigua_barbuda = "\u{1F1E6}\u{1F1EC}";
const anguilla = "\u{1F1E6}\u{1F1EE}";
const albania = "\u{1F1E6}\u{1F1F1}";
const armenia = "\u{1F1E6}\u{1F1F2}";
const angola = "\u{1F1E6}\u{1F1F4}";
const antarctica = "\u{1F1E6}\u{1F1F6}";
const argentina = "\u{1F1E6}\u{1F1F7}";
const american_samoa = "\u{1F1E6}\u{1F1F8}";
const austria = "\u{1F1E6}\u{1F1F9}";
const australia = "\u{1F1E6}\u{1F1FA}";
const aruba = "\u{1F1E6}\u{1F1FC}";
const aland_islands = "\u{1F1E6}\u{1F1FD}";
const azerbaijan = "\u{1F1E6}\u{1F1FF}";
const bosnia_herzegovina = "\u{1F1E7}\u{1F1E6}";
const barbados = "\u{1F1E7}\u{1F1E7}";
const bangladesh = "\u{1F1E7}\u{1F1E9}";
const belgium = "\u{1F1E7}\u{1F1EA}";
const burkina_faso = "\u{1F1E7}\u{1F1EB}";
const bulgaria = "\u{1F1E7}\u{1F1EC}";
const bahrain = "\u{1F1E7}\u{1F1ED}";
const burundi = "\u{1F1E7}\u{1F1EE}";
const benin = "\u{1F1E7}\u{1F1EF}";
const st_barthelemy = "\u{1F1E7}\u{1F1F1}";
const bermuda = "\u{1F1E7}\u{1F1F2}";
const brunei = "\u{1F1E7}\u{1F1F3}";
const bolivia = "\u{1F1E7}\u{1F1F4}";
const caribbean_netherlands = "\u{1F1E7}\u{1F1F6}";
const brazil = "\u{1F1E7}\u{1F1F7}";
const bahamas = "\u{1F1E7}\u{1F1F8}";
const bhutan = "\u{1F1E7}\u{1F1F9}";
const bouvet_island = "\u{1F1E7}\u{1F1FB}";
const botswana = "\u{1F1E7}\u{1F1FC}";
const belarus = "\u{1F1E7}\u{1F1FE}";
const belize = "\u{1F1E7}\u{1F1FF}";
const canada = "\u{1F1E8}\u{1F1E6}";
const cocos_islands = "\u{1F1E8}\u{1F1E8}";
const congo_kinshasa = "\u{1F1E8}\u{1F1E9}";
const central_african_republic = "\u{1F1E8}\u{1F1EB}";
const congo_brazzaville = "\u{1F1E8}\u{1F1EC}";
const switzerland = "\u{1F1E8}\u{1F1ED}";
const cote_divoire = "\u{1F1E8}\u{1F1EE}";
const cook_islands = "\u{1F1E8}\u{1F1F0}";
const chile = "\u{1F1E8}\u{1F1F1}";
const cameroon = "\u{1F1E8}\u{1F1F2}";
const cn = "\u{1F1E8}\u{1F1F3}";
const colombia = "\u{1F1E8}\u{1F1F4}";
const clipperton_island = "\u{1F1E8}\u{1F1F5}";
const costa_rica = "\u{1F1E8}\u{1F1F7}";
const cuba = "\u{1F1E8}\u{1F1FA}";
const cape_verde = "\u{1F1E8}\u{1F1FB}";
const curacao = "\u{1F1E8}\u{1F1FC}";
const christmas_island = "\u{1F1E8}\u{1F1FD}";
const cyprus = "\u{1F1E8}\u{1F1FE}";
const czech_republic = "\u{1F1E8}\u{1F1FF}";
const de = "\u{1F1E9}\u{1F1EA}";
const diego_garcia = "\u{1F1E9}\u{1F1EC}";
const djibouti = "\u{1F1E9}\u{1F1EF}";
const denmark = "\u{1F1E9}\u{1F1F0}";
const dominica = "\u{1F1E9}\u{1F1F2}";
const dominican_republic = "\u{1F1E9}\u{1F1F4}";
const algeria = "\u{1F1E9}\u{1F1FF}";
const ceuta_melilla = "\u{1F1EA}\u{1F1E6}";
const ecuador = "\u{1F1EA}\u{1F1E8}";
const estonia = "\u{1F1EA}\u{1F1EA}";
const egypt = "\u{1F1EA}\u{1F1EC}";
const western_sahara = "\u{1F1EA}\u{1F1ED}";
const eritrea = "\u{1F1EA}\u{1F1F7}";
const es = "\u{1F1EA}\u{1F1F8}";
const ethiopia = "\u{1F1EA}\u{1F1F9}";
const eu = "\u{1F1EA}\u{1F1FA}";
const european_union = "\u{1F1EA}\u{1F1FA}";
const finland = "\u{1F1EB}\u{1F1EE}";
const fiji = "\u{1F1EB}\u{1F1EF}";
const falkland_islands = "\u{1F1EB}\u{1F1F0}";
const micronesia = "\u{1F1EB}\u{1F1F2}";
const faroe_islands = "\u{1F1EB}\u{1F1F4}";
const fr = "\u{1F1EB}\u{1F1F7}";
const gabon = "\u{1F1EC}\u{1F1E6}";
const gb = "\u{1F1EC}\u{1F1E7}";
const uk = "\u{1F1EC}\u{1F1E7}";
const grenada = "\u{1F1EC}\u{1F1E9}";
const georgia = "\u{1F1EC}\u{1F1EA}";
const french_guiana = "\u{1F1EC}\u{1F1EB}";
const guernsey = "\u{1F1EC}\u{1F1EC}";
const ghana = "\u{1F1EC}\u{1F1ED}";
const gibraltar = "\u{1F1EC}\u{1F1EE}";
const greenland = "\u{1F1EC}\u{1F1F1}";
const gambia = "\u{1F1EC}\u{1F1F2}";
const guinea = "\u{1F1EC}\u{1F1F3}";
const guadeloupe = "\u{1F1EC}\u{1F1F5}";
const equatorial_guinea = "\u{1F1EC}\u{1F1F6}";
const greece = "\u{1F1EC}\u{1F1F7}";
const south_georgia_south_sandwich_islands = "\u{1F1EC}\u{1F1F8}";
const guatemala = "\u{1F1EC}\u{1F1F9}";
const guam = "\u{1F1EC}\u{1F1FA}";
const guinea_bissau = "\u{1F1EC}\u{1F1FC}";
const guyana = "\u{1F1EC}\u{1F1FE}";
const hong_kong = "\u{1F1ED}\u{1F1F0}";
const heard_mcdonald_islands = "\u{1F1ED}\u{1F1F2}";
const honduras = "\u{1F1ED}\u{1F1F3}";
const croatia = "\u{1F1ED}\u{1F1F7}";
const haiti = "\u{1F1ED}\u{1F1F9}";
const hungary = "\u{1F1ED}\u{1F1FA}";
const canary_islands = "\u{1F1EE}\u{1F1E8}";
const indonesia = "\u{1F1EE}\u{1F1E9}";
const ireland = "\u{1F1EE}\u{1F1EA}";
const israel = "\u{1F1EE}\u{1F1F1}";
const isle_of_man = "\u{1F1EE}\u{1F1F2}";
const india = "\u{1F1EE}\u{1F1F3}";
const british_indian_ocean_territory = "\u{1F1EE}\u{1F1F4}";
const iraq = "\u{1F1EE}\u{1F1F6}";
const iran = "\u{1F1EE}\u{1F1F7}";
const iceland = "\u{1F1EE}\u{1F1F8}";
const it$1 = "\u{1F1EE}\u{1F1F9}";
const jersey = "\u{1F1EF}\u{1F1EA}";
const jamaica = "\u{1F1EF}\u{1F1F2}";
const jordan = "\u{1F1EF}\u{1F1F4}";
const jp = "\u{1F1EF}\u{1F1F5}";
const kenya = "\u{1F1F0}\u{1F1EA}";
const kyrgyzstan = "\u{1F1F0}\u{1F1EC}";
const cambodia = "\u{1F1F0}\u{1F1ED}";
const kiribati = "\u{1F1F0}\u{1F1EE}";
const comoros = "\u{1F1F0}\u{1F1F2}";
const st_kitts_nevis = "\u{1F1F0}\u{1F1F3}";
const north_korea = "\u{1F1F0}\u{1F1F5}";
const kr = "\u{1F1F0}\u{1F1F7}";
const kuwait = "\u{1F1F0}\u{1F1FC}";
const cayman_islands = "\u{1F1F0}\u{1F1FE}";
const kazakhstan = "\u{1F1F0}\u{1F1FF}";
const laos = "\u{1F1F1}\u{1F1E6}";
const lebanon = "\u{1F1F1}\u{1F1E7}";
const st_lucia = "\u{1F1F1}\u{1F1E8}";
const liechtenstein = "\u{1F1F1}\u{1F1EE}";
const sri_lanka = "\u{1F1F1}\u{1F1F0}";
const liberia = "\u{1F1F1}\u{1F1F7}";
const lesotho = "\u{1F1F1}\u{1F1F8}";
const lithuania = "\u{1F1F1}\u{1F1F9}";
const luxembourg = "\u{1F1F1}\u{1F1FA}";
const latvia = "\u{1F1F1}\u{1F1FB}";
const libya = "\u{1F1F1}\u{1F1FE}";
const morocco = "\u{1F1F2}\u{1F1E6}";
const monaco = "\u{1F1F2}\u{1F1E8}";
const moldova = "\u{1F1F2}\u{1F1E9}";
const montenegro = "\u{1F1F2}\u{1F1EA}";
const st_martin = "\u{1F1F2}\u{1F1EB}";
const madagascar = "\u{1F1F2}\u{1F1EC}";
const marshall_islands = "\u{1F1F2}\u{1F1ED}";
const macedonia = "\u{1F1F2}\u{1F1F0}";
const mali = "\u{1F1F2}\u{1F1F1}";
const myanmar = "\u{1F1F2}\u{1F1F2}";
const mongolia = "\u{1F1F2}\u{1F1F3}";
const macau = "\u{1F1F2}\u{1F1F4}";
const northern_mariana_islands = "\u{1F1F2}\u{1F1F5}";
const martinique = "\u{1F1F2}\u{1F1F6}";
const mauritania = "\u{1F1F2}\u{1F1F7}";
const montserrat = "\u{1F1F2}\u{1F1F8}";
const malta = "\u{1F1F2}\u{1F1F9}";
const mauritius = "\u{1F1F2}\u{1F1FA}";
const maldives = "\u{1F1F2}\u{1F1FB}";
const malawi = "\u{1F1F2}\u{1F1FC}";
const mexico = "\u{1F1F2}\u{1F1FD}";
const malaysia = "\u{1F1F2}\u{1F1FE}";
const mozambique = "\u{1F1F2}\u{1F1FF}";
const namibia = "\u{1F1F3}\u{1F1E6}";
const new_caledonia = "\u{1F1F3}\u{1F1E8}";
const niger = "\u{1F1F3}\u{1F1EA}";
const norfolk_island = "\u{1F1F3}\u{1F1EB}";
const nigeria = "\u{1F1F3}\u{1F1EC}";
const nicaragua = "\u{1F1F3}\u{1F1EE}";
const netherlands = "\u{1F1F3}\u{1F1F1}";
const norway = "\u{1F1F3}\u{1F1F4}";
const nepal = "\u{1F1F3}\u{1F1F5}";
const nauru = "\u{1F1F3}\u{1F1F7}";
const niue = "\u{1F1F3}\u{1F1FA}";
const new_zealand = "\u{1F1F3}\u{1F1FF}";
const oman = "\u{1F1F4}\u{1F1F2}";
const panama = "\u{1F1F5}\u{1F1E6}";
const peru = "\u{1F1F5}\u{1F1EA}";
const french_polynesia = "\u{1F1F5}\u{1F1EB}";
const papua_new_guinea = "\u{1F1F5}\u{1F1EC}";
const philippines = "\u{1F1F5}\u{1F1ED}";
const pakistan = "\u{1F1F5}\u{1F1F0}";
const poland = "\u{1F1F5}\u{1F1F1}";
const st_pierre_miquelon = "\u{1F1F5}\u{1F1F2}";
const pitcairn_islands = "\u{1F1F5}\u{1F1F3}";
const puerto_rico = "\u{1F1F5}\u{1F1F7}";
const palestinian_territories = "\u{1F1F5}\u{1F1F8}";
const portugal = "\u{1F1F5}\u{1F1F9}";
const palau = "\u{1F1F5}\u{1F1FC}";
const paraguay = "\u{1F1F5}\u{1F1FE}";
const qatar = "\u{1F1F6}\u{1F1E6}";
const reunion = "\u{1F1F7}\u{1F1EA}";
const romania = "\u{1F1F7}\u{1F1F4}";
const serbia = "\u{1F1F7}\u{1F1F8}";
const ru = "\u{1F1F7}\u{1F1FA}";
const rwanda = "\u{1F1F7}\u{1F1FC}";
const saudi_arabia = "\u{1F1F8}\u{1F1E6}";
const solomon_islands = "\u{1F1F8}\u{1F1E7}";
const seychelles = "\u{1F1F8}\u{1F1E8}";
const sudan = "\u{1F1F8}\u{1F1E9}";
const sweden = "\u{1F1F8}\u{1F1EA}";
const singapore = "\u{1F1F8}\u{1F1EC}";
const st_helena = "\u{1F1F8}\u{1F1ED}";
const slovenia = "\u{1F1F8}\u{1F1EE}";
const svalbard_jan_mayen = "\u{1F1F8}\u{1F1EF}";
const slovakia = "\u{1F1F8}\u{1F1F0}";
const sierra_leone = "\u{1F1F8}\u{1F1F1}";
const san_marino = "\u{1F1F8}\u{1F1F2}";
const senegal = "\u{1F1F8}\u{1F1F3}";
const somalia = "\u{1F1F8}\u{1F1F4}";
const suriname = "\u{1F1F8}\u{1F1F7}";
const south_sudan = "\u{1F1F8}\u{1F1F8}";
const sao_tome_principe = "\u{1F1F8}\u{1F1F9}";
const el_salvador = "\u{1F1F8}\u{1F1FB}";
const sint_maarten = "\u{1F1F8}\u{1F1FD}";
const syria = "\u{1F1F8}\u{1F1FE}";
const swaziland = "\u{1F1F8}\u{1F1FF}";
const tristan_da_cunha = "\u{1F1F9}\u{1F1E6}";
const turks_caicos_islands = "\u{1F1F9}\u{1F1E8}";
const chad = "\u{1F1F9}\u{1F1E9}";
const french_southern_territories = "\u{1F1F9}\u{1F1EB}";
const togo = "\u{1F1F9}\u{1F1EC}";
const thailand = "\u{1F1F9}\u{1F1ED}";
const tajikistan = "\u{1F1F9}\u{1F1EF}";
const tokelau = "\u{1F1F9}\u{1F1F0}";
const timor_leste = "\u{1F1F9}\u{1F1F1}";
const turkmenistan = "\u{1F1F9}\u{1F1F2}";
const tunisia = "\u{1F1F9}\u{1F1F3}";
const tonga = "\u{1F1F9}\u{1F1F4}";
const tr = "\u{1F1F9}\u{1F1F7}";
const trinidad_tobago = "\u{1F1F9}\u{1F1F9}";
const tuvalu = "\u{1F1F9}\u{1F1FB}";
const taiwan = "\u{1F1F9}\u{1F1FC}";
const tanzania = "\u{1F1F9}\u{1F1FF}";
const ukraine = "\u{1F1FA}\u{1F1E6}";
const uganda = "\u{1F1FA}\u{1F1EC}";
const us_outlying_islands = "\u{1F1FA}\u{1F1F2}";
const united_nations = "\u{1F1FA}\u{1F1F3}";
const us = "\u{1F1FA}\u{1F1F8}";
const uruguay = "\u{1F1FA}\u{1F1FE}";
const uzbekistan = "\u{1F1FA}\u{1F1FF}";
const vatican_city = "\u{1F1FB}\u{1F1E6}";
const st_vincent_grenadines = "\u{1F1FB}\u{1F1E8}";
const venezuela = "\u{1F1FB}\u{1F1EA}";
const british_virgin_islands = "\u{1F1FB}\u{1F1EC}";
const us_virgin_islands = "\u{1F1FB}\u{1F1EE}";
const vietnam = "\u{1F1FB}\u{1F1F3}";
const vanuatu = "\u{1F1FB}\u{1F1FA}";
const wallis_futuna = "\u{1F1FC}\u{1F1EB}";
const samoa = "\u{1F1FC}\u{1F1F8}";
const kosovo = "\u{1F1FD}\u{1F1F0}";
const yemen = "\u{1F1FE}\u{1F1EA}";
const mayotte = "\u{1F1FE}\u{1F1F9}";
const south_africa = "\u{1F1FF}\u{1F1E6}";
const zambia = "\u{1F1FF}\u{1F1F2}";
const zimbabwe = "\u{1F1FF}\u{1F1FC}";
const england = "\u{1F3F4}\u{E0067}\u{E0062}\u{E0065}\u{E006E}\u{E0067}\u{E007F}";
const scotland = "\u{1F3F4}\u{E0067}\u{E0062}\u{E0073}\u{E0063}\u{E0074}\u{E007F}";
const wales = "\u{1F3F4}\u{E0067}\u{E0062}\u{E0077}\u{E006C}\u{E0073}\u{E007F}";
var require$$0$2 = {
  "100": "\u{1F4AF}",
  "1234": "\u{1F522}",
  grinning,
  smiley,
  smile: smile$1,
  grin,
  laughing,
  satisfied,
  sweat_smile,
  rofl,
  joy,
  slightly_smiling_face,
  upside_down_face,
  wink,
  blush,
  innocent,
  smiling_face_with_three_hearts,
  heart_eyes,
  star_struck,
  kissing_heart,
  kissing,
  relaxed,
  kissing_closed_eyes,
  kissing_smiling_eyes,
  smiling_face_with_tear,
  yum,
  stuck_out_tongue,
  stuck_out_tongue_winking_eye,
  zany_face,
  stuck_out_tongue_closed_eyes,
  money_mouth_face,
  hugs,
  hand_over_mouth,
  shushing_face,
  thinking,
  zipper_mouth_face,
  raised_eyebrow,
  neutral_face,
  expressionless,
  no_mouth,
  smirk,
  unamused,
  roll_eyes,
  grimacing,
  lying_face,
  relieved,
  pensive,
  sleepy,
  drooling_face,
  sleeping,
  mask,
  face_with_thermometer,
  face_with_head_bandage,
  nauseated_face,
  vomiting_face,
  sneezing_face,
  hot_face,
  cold_face,
  woozy_face,
  dizzy_face,
  exploding_head,
  cowboy_hat_face,
  partying_face,
  disguised_face,
  sunglasses,
  nerd_face,
  monocle_face,
  confused,
  worried,
  slightly_frowning_face,
  frowning_face,
  open_mouth,
  hushed,
  astonished,
  flushed,
  pleading_face,
  frowning,
  anguished,
  fearful,
  cold_sweat,
  disappointed_relieved,
  cry,
  sob,
  scream,
  confounded,
  persevere,
  disappointed,
  sweat,
  weary,
  tired_face,
  yawning_face,
  triumph,
  rage,
  pout,
  angry,
  cursing_face,
  smiling_imp,
  imp,
  skull,
  skull_and_crossbones,
  hankey,
  poop,
  shit,
  clown_face,
  japanese_ogre,
  japanese_goblin,
  ghost,
  alien,
  space_invader,
  robot,
  smiley_cat,
  smile_cat,
  joy_cat,
  heart_eyes_cat,
  smirk_cat,
  kissing_cat,
  scream_cat,
  crying_cat_face,
  pouting_cat,
  see_no_evil,
  hear_no_evil,
  speak_no_evil,
  kiss,
  love_letter,
  cupid,
  gift_heart,
  sparkling_heart,
  heartpulse,
  heartbeat,
  revolving_hearts,
  two_hearts,
  heart_decoration,
  heavy_heart_exclamation,
  broken_heart,
  heart,
  orange_heart,
  yellow_heart,
  green_heart,
  blue_heart,
  purple_heart,
  brown_heart,
  black_heart,
  white_heart,
  anger,
  boom,
  collision,
  dizzy,
  sweat_drops,
  dash: dash$1,
  hole,
  bomb,
  speech_balloon,
  eye_speech_bubble,
  left_speech_bubble,
  right_anger_bubble,
  thought_balloon,
  zzz,
  wave,
  raised_back_of_hand,
  raised_hand_with_fingers_splayed,
  hand,
  raised_hand,
  vulcan_salute,
  ok_hand,
  pinched_fingers,
  pinching_hand,
  v,
  crossed_fingers,
  love_you_gesture,
  metal,
  call_me_hand,
  point_left,
  point_right,
  point_up_2,
  middle_finger,
  fu,
  point_down,
  point_up,
  "+1": "\u{1F44D}",
  thumbsup,
  "-1": "\u{1F44E}",
  thumbsdown,
  fist_raised,
  fist,
  fist_oncoming,
  facepunch,
  punch,
  fist_left,
  fist_right,
  clap,
  raised_hands,
  open_hands,
  palms_up_together,
  handshake,
  pray,
  writing_hand,
  nail_care,
  selfie,
  muscle,
  mechanical_arm,
  mechanical_leg,
  leg: leg$1,
  foot,
  ear,
  ear_with_hearing_aid,
  nose,
  brain,
  anatomical_heart,
  lungs,
  tooth,
  bone,
  eyes,
  eye,
  tongue,
  lips,
  baby,
  child,
  boy,
  girl,
  adult,
  blond_haired_person,
  man,
  bearded_person,
  red_haired_man,
  curly_haired_man,
  white_haired_man,
  bald_man,
  woman,
  red_haired_woman,
  person_red_hair,
  curly_haired_woman,
  person_curly_hair,
  white_haired_woman,
  person_white_hair,
  bald_woman,
  person_bald,
  blond_haired_woman,
  blonde_woman,
  blond_haired_man,
  older_adult,
  older_man,
  older_woman,
  frowning_person,
  frowning_man,
  frowning_woman,
  pouting_face,
  pouting_man,
  pouting_woman,
  no_good,
  no_good_man,
  ng_man,
  no_good_woman,
  ng_woman,
  ok_person,
  ok_man,
  ok_woman,
  tipping_hand_person,
  information_desk_person,
  tipping_hand_man,
  sassy_man,
  tipping_hand_woman,
  sassy_woman,
  raising_hand,
  raising_hand_man,
  raising_hand_woman,
  deaf_person,
  deaf_man,
  deaf_woman,
  bow,
  bowing_man,
  bowing_woman,
  facepalm,
  man_facepalming,
  woman_facepalming,
  shrug,
  man_shrugging,
  woman_shrugging,
  health_worker,
  man_health_worker,
  woman_health_worker,
  student,
  man_student,
  woman_student,
  teacher,
  man_teacher,
  woman_teacher,
  judge,
  man_judge,
  woman_judge,
  farmer,
  man_farmer,
  woman_farmer,
  cook,
  man_cook,
  woman_cook,
  mechanic,
  man_mechanic,
  woman_mechanic,
  factory_worker,
  man_factory_worker,
  woman_factory_worker,
  office_worker,
  man_office_worker,
  woman_office_worker,
  scientist,
  man_scientist,
  woman_scientist,
  technologist,
  man_technologist,
  woman_technologist,
  singer,
  man_singer,
  woman_singer,
  artist,
  man_artist,
  woman_artist,
  pilot,
  man_pilot,
  woman_pilot,
  astronaut,
  man_astronaut,
  woman_astronaut,
  firefighter,
  man_firefighter,
  woman_firefighter,
  police_officer,
  cop,
  policeman,
  policewoman,
  detective,
  male_detective,
  female_detective,
  guard,
  guardsman,
  guardswoman,
  ninja,
  construction_worker,
  construction_worker_man,
  construction_worker_woman,
  prince,
  princess,
  person_with_turban,
  man_with_turban,
  woman_with_turban,
  man_with_gua_pi_mao,
  woman_with_headscarf,
  person_in_tuxedo,
  man_in_tuxedo,
  woman_in_tuxedo,
  person_with_veil,
  man_with_veil,
  woman_with_veil,
  bride_with_veil,
  pregnant_woman,
  breast_feeding,
  woman_feeding_baby,
  man_feeding_baby,
  person_feeding_baby,
  angel,
  santa,
  mrs_claus,
  mx_claus,
  superhero,
  superhero_man,
  superhero_woman,
  supervillain,
  supervillain_man,
  supervillain_woman,
  mage,
  mage_man,
  mage_woman,
  fairy,
  fairy_man,
  fairy_woman,
  vampire,
  vampire_man,
  vampire_woman,
  merperson,
  merman,
  mermaid,
  elf,
  elf_man,
  elf_woman,
  genie,
  genie_man,
  genie_woman,
  zombie,
  zombie_man,
  zombie_woman,
  massage,
  massage_man,
  massage_woman,
  haircut,
  haircut_man,
  haircut_woman,
  walking,
  walking_man,
  walking_woman,
  standing_person,
  standing_man,
  standing_woman,
  kneeling_person,
  kneeling_man,
  kneeling_woman,
  person_with_probing_cane,
  man_with_probing_cane,
  woman_with_probing_cane,
  person_in_motorized_wheelchair,
  man_in_motorized_wheelchair,
  woman_in_motorized_wheelchair,
  person_in_manual_wheelchair,
  man_in_manual_wheelchair,
  woman_in_manual_wheelchair,
  runner,
  running,
  running_man,
  running_woman,
  woman_dancing,
  dancer,
  man_dancing,
  business_suit_levitating,
  dancers,
  dancing_men,
  dancing_women,
  sauna_person,
  sauna_man,
  sauna_woman,
  climbing,
  climbing_man,
  climbing_woman,
  person_fencing,
  horse_racing,
  skier,
  snowboarder,
  golfing,
  golfing_man,
  golfing_woman,
  surfer,
  surfing_man,
  surfing_woman,
  rowboat,
  rowing_man,
  rowing_woman,
  swimmer,
  swimming_man,
  swimming_woman,
  bouncing_ball_person,
  bouncing_ball_man,
  basketball_man,
  bouncing_ball_woman,
  basketball_woman,
  weight_lifting,
  weight_lifting_man,
  weight_lifting_woman,
  bicyclist,
  biking_man,
  biking_woman,
  mountain_bicyclist,
  mountain_biking_man,
  mountain_biking_woman,
  cartwheeling,
  man_cartwheeling,
  woman_cartwheeling,
  wrestling,
  men_wrestling,
  women_wrestling,
  water_polo,
  man_playing_water_polo,
  woman_playing_water_polo,
  handball_person,
  man_playing_handball,
  woman_playing_handball,
  juggling_person,
  man_juggling,
  woman_juggling,
  lotus_position,
  lotus_position_man,
  lotus_position_woman,
  bath,
  sleeping_bed,
  people_holding_hands,
  two_women_holding_hands,
  couple,
  two_men_holding_hands,
  couplekiss,
  couplekiss_man_woman,
  couplekiss_man_man,
  couplekiss_woman_woman,
  couple_with_heart,
  couple_with_heart_woman_man,
  couple_with_heart_man_man,
  couple_with_heart_woman_woman,
  family,
  family_man_woman_boy,
  family_man_woman_girl,
  family_man_woman_girl_boy,
  family_man_woman_boy_boy,
  family_man_woman_girl_girl,
  family_man_man_boy,
  family_man_man_girl,
  family_man_man_girl_boy,
  family_man_man_boy_boy,
  family_man_man_girl_girl,
  family_woman_woman_boy,
  family_woman_woman_girl,
  family_woman_woman_girl_boy,
  family_woman_woman_boy_boy,
  family_woman_woman_girl_girl,
  family_man_boy,
  family_man_boy_boy,
  family_man_girl,
  family_man_girl_boy,
  family_man_girl_girl,
  family_woman_boy,
  family_woman_boy_boy,
  family_woman_girl,
  family_woman_girl_boy,
  family_woman_girl_girl,
  speaking_head,
  bust_in_silhouette,
  busts_in_silhouette,
  people_hugging,
  footprints,
  monkey_face,
  monkey,
  gorilla,
  orangutan,
  dog,
  dog2,
  guide_dog,
  service_dog,
  poodle,
  wolf,
  fox_face,
  raccoon,
  cat,
  cat2,
  black_cat,
  lion,
  tiger,
  tiger2,
  leopard,
  horse,
  racehorse,
  unicorn,
  zebra,
  deer,
  bison,
  cow,
  ox,
  water_buffalo,
  cow2,
  pig,
  pig2,
  boar,
  pig_nose,
  ram,
  sheep,
  goat,
  dromedary_camel,
  camel,
  llama,
  giraffe,
  elephant,
  mammoth,
  rhinoceros,
  hippopotamus,
  mouse,
  mouse2,
  rat,
  hamster,
  rabbit,
  rabbit2,
  chipmunk,
  beaver,
  hedgehog,
  bat,
  bear,
  polar_bear,
  koala,
  panda_face,
  sloth,
  otter,
  skunk,
  kangaroo,
  badger,
  feet,
  paw_prints,
  turkey,
  chicken,
  rooster,
  hatching_chick,
  baby_chick,
  hatched_chick,
  bird,
  penguin,
  dove,
  eagle,
  duck,
  swan,
  owl,
  dodo,
  feather,
  flamingo,
  peacock,
  parrot,
  frog,
  crocodile,
  turtle,
  lizard,
  snake,
  dragon_face,
  dragon,
  sauropod,
  "t-rex": "\u{1F996}",
  whale,
  whale2,
  dolphin,
  flipper,
  seal,
  fish,
  tropical_fish,
  blowfish,
  shark,
  octopus,
  shell,
  snail,
  butterfly,
  bug,
  ant,
  bee,
  honeybee,
  beetle,
  lady_beetle,
  cricket,
  cockroach,
  spider,
  spider_web,
  scorpion,
  mosquito,
  fly,
  worm,
  microbe,
  bouquet,
  cherry_blossom,
  white_flower,
  rosette,
  rose,
  wilted_flower,
  hibiscus,
  sunflower,
  blossom,
  tulip,
  seedling,
  potted_plant,
  evergreen_tree,
  deciduous_tree,
  palm_tree,
  cactus,
  ear_of_rice,
  herb,
  shamrock,
  four_leaf_clover,
  maple_leaf,
  fallen_leaf,
  leaves,
  grapes,
  melon,
  watermelon,
  tangerine,
  orange,
  mandarin,
  lemon,
  banana,
  pineapple,
  mango,
  apple,
  green_apple,
  pear,
  peach,
  cherries,
  strawberry,
  blueberries,
  kiwi_fruit,
  tomato,
  olive,
  coconut,
  avocado,
  eggplant,
  potato,
  carrot,
  corn,
  hot_pepper,
  bell_pepper,
  cucumber,
  leafy_green,
  broccoli,
  garlic,
  onion,
  mushroom,
  peanuts,
  chestnut,
  bread,
  croissant,
  baguette_bread,
  flatbread,
  pretzel,
  bagel,
  pancakes,
  waffle,
  cheese,
  meat_on_bone,
  poultry_leg,
  cut_of_meat,
  bacon,
  hamburger,
  fries,
  pizza,
  hotdog,
  sandwich,
  taco,
  burrito,
  tamale,
  stuffed_flatbread,
  falafel,
  egg,
  fried_egg,
  shallow_pan_of_food,
  stew,
  fondue,
  bowl_with_spoon,
  green_salad,
  popcorn,
  butter,
  salt,
  canned_food,
  bento,
  rice_cracker,
  rice_ball,
  rice,
  curry,
  ramen,
  spaghetti,
  sweet_potato,
  oden,
  sushi,
  fried_shrimp,
  fish_cake,
  moon_cake,
  dango,
  dumpling,
  fortune_cookie,
  takeout_box,
  crab,
  lobster,
  shrimp,
  squid,
  oyster,
  icecream,
  shaved_ice,
  ice_cream,
  doughnut,
  cookie,
  birthday,
  cake,
  cupcake,
  pie,
  chocolate_bar,
  candy,
  lollipop,
  custard,
  honey_pot,
  baby_bottle,
  milk_glass,
  coffee,
  teapot,
  tea,
  sake,
  champagne,
  wine_glass,
  cocktail,
  tropical_drink,
  beer,
  beers,
  clinking_glasses,
  tumbler_glass,
  cup_with_straw,
  bubble_tea,
  beverage_box,
  mate,
  ice_cube,
  chopsticks,
  plate_with_cutlery,
  fork_and_knife,
  spoon,
  hocho,
  knife,
  amphora,
  earth_africa,
  earth_americas,
  earth_asia,
  globe_with_meridians,
  world_map,
  japan,
  compass,
  mountain_snow,
  mountain,
  volcano,
  mount_fuji,
  camping,
  beach_umbrella,
  desert,
  desert_island,
  national_park,
  stadium,
  classical_building,
  building_construction,
  bricks,
  rock,
  wood,
  hut,
  houses,
  derelict_house,
  house,
  house_with_garden,
  office,
  post_office,
  european_post_office,
  hospital,
  bank,
  hotel,
  love_hotel,
  convenience_store,
  school,
  department_store,
  factory,
  japanese_castle,
  european_castle,
  wedding,
  tokyo_tower,
  statue_of_liberty,
  church,
  mosque,
  hindu_temple,
  synagogue,
  shinto_shrine,
  kaaba,
  fountain,
  tent,
  foggy,
  night_with_stars,
  cityscape,
  sunrise_over_mountains,
  sunrise,
  city_sunset,
  city_sunrise,
  bridge_at_night,
  hotsprings,
  carousel_horse,
  ferris_wheel,
  roller_coaster,
  barber,
  circus_tent,
  steam_locomotive,
  railway_car,
  bullettrain_side,
  bullettrain_front,
  train2,
  metro,
  light_rail,
  station,
  tram,
  monorail,
  mountain_railway,
  train,
  bus,
  oncoming_bus,
  trolleybus,
  minibus,
  ambulance,
  fire_engine,
  police_car,
  oncoming_police_car,
  taxi,
  oncoming_taxi,
  car,
  red_car,
  oncoming_automobile,
  blue_car,
  pickup_truck,
  truck,
  articulated_lorry,
  tractor,
  racing_car,
  motorcycle,
  motor_scooter,
  manual_wheelchair,
  motorized_wheelchair,
  auto_rickshaw,
  bike,
  kick_scooter,
  skateboard,
  roller_skate,
  busstop,
  motorway,
  railway_track,
  oil_drum,
  fuelpump,
  rotating_light,
  traffic_light,
  vertical_traffic_light,
  stop_sign,
  construction,
  anchor,
  boat,
  sailboat,
  canoe,
  speedboat,
  passenger_ship,
  ferry,
  motor_boat,
  ship,
  airplane,
  small_airplane,
  flight_departure,
  flight_arrival,
  parachute,
  seat,
  helicopter,
  suspension_railway,
  mountain_cableway,
  aerial_tramway,
  artificial_satellite,
  rocket,
  flying_saucer,
  bellhop_bell,
  luggage,
  hourglass,
  hourglass_flowing_sand,
  watch,
  alarm_clock,
  stopwatch,
  timer_clock,
  mantelpiece_clock,
  clock12,
  clock1230,
  clock1,
  clock130,
  clock2,
  clock230,
  clock3,
  clock330,
  clock4,
  clock430,
  clock5,
  clock530,
  clock6,
  clock630,
  clock7,
  clock730,
  clock8,
  clock830,
  clock9,
  clock930,
  clock10,
  clock1030,
  clock11,
  clock1130,
  new_moon,
  waxing_crescent_moon,
  first_quarter_moon,
  moon,
  waxing_gibbous_moon,
  full_moon,
  waning_gibbous_moon,
  last_quarter_moon,
  waning_crescent_moon,
  crescent_moon,
  new_moon_with_face,
  first_quarter_moon_with_face,
  last_quarter_moon_with_face,
  thermometer,
  sunny,
  full_moon_with_face,
  sun_with_face,
  ringed_planet,
  star: star$1,
  star2,
  stars,
  milky_way,
  cloud,
  partly_sunny,
  cloud_with_lightning_and_rain,
  sun_behind_small_cloud,
  sun_behind_large_cloud,
  sun_behind_rain_cloud,
  cloud_with_rain,
  cloud_with_snow,
  cloud_with_lightning,
  tornado,
  fog,
  wind_face,
  cyclone,
  rainbow,
  closed_umbrella,
  open_umbrella,
  umbrella,
  parasol_on_ground,
  zap,
  snowflake,
  snowman_with_snow,
  snowman,
  comet,
  fire,
  droplet,
  ocean,
  jack_o_lantern,
  christmas_tree,
  fireworks,
  sparkler,
  firecracker,
  sparkles,
  balloon,
  tada,
  confetti_ball,
  tanabata_tree,
  bamboo,
  dolls,
  flags,
  wind_chime,
  rice_scene,
  red_envelope,
  ribbon,
  gift,
  reminder_ribbon,
  tickets,
  ticket,
  medal_military,
  trophy,
  medal_sports,
  "1st_place_medal": "\u{1F947}",
  "2nd_place_medal": "\u{1F948}",
  "3rd_place_medal": "\u{1F949}",
  soccer,
  baseball,
  softball,
  basketball,
  volleyball,
  football,
  rugby_football,
  tennis,
  flying_disc,
  bowling,
  cricket_game,
  field_hockey,
  ice_hockey,
  lacrosse,
  ping_pong,
  badminton,
  boxing_glove,
  martial_arts_uniform,
  goal_net,
  golf,
  ice_skate,
  fishing_pole_and_fish,
  diving_mask,
  running_shirt_with_sash,
  ski,
  sled,
  curling_stone,
  dart,
  yo_yo,
  kite,
  "8ball": "\u{1F3B1}",
  crystal_ball,
  magic_wand,
  nazar_amulet,
  video_game,
  joystick,
  slot_machine,
  game_die,
  jigsaw,
  teddy_bear,
  pinata,
  nesting_dolls,
  spades: spades$1,
  hearts: hearts$1,
  diamonds,
  clubs: clubs$1,
  chess_pawn,
  black_joker,
  mahjong,
  flower_playing_cards,
  performing_arts,
  framed_picture,
  art,
  thread,
  sewing_needle,
  yarn,
  knot,
  eyeglasses,
  dark_sunglasses,
  goggles,
  lab_coat,
  safety_vest,
  necktie,
  shirt,
  tshirt,
  jeans,
  scarf,
  gloves,
  coat,
  socks,
  dress,
  kimono,
  sari,
  one_piece_swimsuit,
  swim_brief,
  shorts,
  bikini,
  womans_clothes,
  purse,
  handbag,
  pouch,
  shopping,
  school_satchel,
  thong_sandal,
  mans_shoe,
  shoe,
  athletic_shoe,
  hiking_boot,
  flat_shoe,
  high_heel,
  sandal,
  ballet_shoes,
  boot,
  crown,
  womans_hat,
  tophat,
  mortar_board,
  billed_cap,
  military_helmet,
  rescue_worker_helmet,
  prayer_beads,
  lipstick,
  ring: ring$1,
  gem,
  mute,
  speaker,
  sound,
  loud_sound,
  loudspeaker,
  mega,
  postal_horn,
  bell,
  no_bell,
  musical_score,
  musical_note,
  notes,
  studio_microphone,
  level_slider,
  control_knobs,
  microphone,
  headphones,
  radio: radio$1,
  saxophone,
  accordion,
  guitar,
  musical_keyboard,
  trumpet,
  violin,
  banjo,
  drum,
  long_drum,
  iphone,
  calling,
  phone: phone$1,
  telephone,
  telephone_receiver,
  pager,
  fax,
  battery,
  electric_plug,
  computer,
  desktop_computer,
  printer,
  keyboard,
  computer_mouse,
  trackball,
  minidisc,
  floppy_disk,
  cd,
  dvd,
  abacus,
  movie_camera,
  film_strip,
  film_projector,
  clapper,
  tv,
  camera,
  camera_flash,
  video_camera,
  vhs,
  mag,
  mag_right,
  candle,
  bulb,
  flashlight,
  izakaya_lantern,
  lantern,
  diya_lamp,
  notebook_with_decorative_cover,
  closed_book,
  book,
  open_book,
  green_book,
  blue_book,
  orange_book,
  books,
  notebook,
  ledger,
  page_with_curl,
  scroll,
  page_facing_up,
  newspaper,
  newspaper_roll,
  bookmark_tabs,
  bookmark,
  label: label$2,
  moneybag,
  coin,
  yen: yen$2,
  dollar: dollar$1,
  euro: euro$1,
  pound: pound$2,
  money_with_wings,
  credit_card,
  receipt,
  chart,
  envelope,
  email,
  "e-mail": "\u{1F4E7}",
  incoming_envelope,
  envelope_with_arrow,
  outbox_tray,
  inbox_tray,
  "package": "\u{1F4E6}",
  mailbox,
  mailbox_closed,
  mailbox_with_mail,
  mailbox_with_no_mail,
  postbox,
  ballot_box,
  pencil2,
  black_nib,
  fountain_pen,
  pen,
  paintbrush,
  crayon,
  memo,
  pencil,
  briefcase,
  file_folder,
  open_file_folder,
  card_index_dividers,
  date: date$1,
  calendar,
  spiral_notepad,
  spiral_calendar,
  card_index,
  chart_with_upwards_trend,
  chart_with_downwards_trend,
  bar_chart,
  clipboard,
  pushpin,
  round_pushpin,
  paperclip,
  paperclips,
  straight_ruler,
  triangular_ruler,
  scissors,
  card_file_box,
  file_cabinet,
  wastebasket,
  lock,
  unlock,
  lock_with_ink_pen,
  closed_lock_with_key,
  key,
  old_key,
  hammer,
  axe,
  pick,
  hammer_and_pick,
  hammer_and_wrench,
  dagger: dagger$1,
  crossed_swords,
  gun,
  boomerang,
  bow_and_arrow,
  shield,
  carpentry_saw,
  wrench,
  screwdriver,
  nut_and_bolt,
  gear,
  clamp,
  balance_scale,
  probing_cane,
  link: link$1,
  chains,
  hook,
  toolbox,
  magnet,
  ladder,
  alembic,
  test_tube,
  petri_dish,
  dna,
  microscope,
  telescope,
  satellite,
  syringe,
  drop_of_blood,
  pill,
  adhesive_bandage,
  stethoscope,
  door,
  elevator,
  mirror,
  window: window$1,
  bed,
  couch_and_lamp,
  chair,
  toilet,
  plunger,
  shower,
  bathtub,
  mouse_trap,
  razor,
  lotion_bottle,
  safety_pin,
  broom,
  basket,
  roll_of_paper,
  bucket,
  soap,
  toothbrush,
  sponge,
  fire_extinguisher,
  shopping_cart,
  smoking,
  coffin,
  headstone,
  funeral_urn,
  moyai,
  placard,
  atm,
  put_litter_in_its_place,
  potable_water,
  wheelchair,
  mens,
  womens,
  restroom,
  baby_symbol,
  wc,
  passport_control,
  customs,
  baggage_claim,
  left_luggage,
  warning: warning$2,
  children_crossing,
  no_entry,
  no_entry_sign,
  no_bicycles,
  no_smoking,
  do_not_litter,
  "non-potable_water": "\u{1F6B1}",
  no_pedestrians,
  no_mobile_phones,
  underage,
  radioactive,
  biohazard,
  arrow_up,
  arrow_upper_right,
  arrow_right,
  arrow_lower_right,
  arrow_down,
  arrow_lower_left,
  arrow_left,
  arrow_upper_left,
  arrow_up_down,
  left_right_arrow,
  leftwards_arrow_with_hook,
  arrow_right_hook,
  arrow_heading_up,
  arrow_heading_down,
  arrows_clockwise,
  arrows_counterclockwise,
  back: back$1,
  end,
  on,
  soon,
  top: top$2,
  place_of_worship,
  atom_symbol,
  om,
  star_of_david,
  wheel_of_dharma,
  yin_yang,
  latin_cross,
  orthodox_cross,
  star_and_crescent,
  peace_symbol,
  menorah,
  six_pointed_star,
  aries,
  taurus,
  gemini,
  cancer,
  leo,
  virgo,
  libra,
  scorpius,
  sagittarius,
  capricorn,
  aquarius,
  pisces,
  ophiuchus,
  twisted_rightwards_arrows,
  repeat,
  repeat_one,
  arrow_forward,
  fast_forward,
  next_track_button,
  play_or_pause_button,
  arrow_backward,
  rewind,
  previous_track_button,
  arrow_up_small,
  arrow_double_up,
  arrow_down_small,
  arrow_double_down,
  pause_button,
  stop_button,
  record_button,
  eject_button,
  cinema,
  low_brightness,
  high_brightness,
  signal_strength,
  vibration_mode,
  mobile_phone_off,
  female_sign,
  male_sign,
  transgender_symbol,
  heavy_multiplication_x,
  heavy_plus_sign,
  heavy_minus_sign,
  heavy_division_sign,
  infinity,
  bangbang,
  interrobang,
  question,
  grey_question,
  grey_exclamation,
  exclamation,
  heavy_exclamation_mark,
  wavy_dash,
  currency_exchange,
  heavy_dollar_sign,
  medical_symbol,
  recycle,
  fleur_de_lis,
  trident,
  name_badge,
  beginner,
  o,
  white_check_mark,
  ballot_box_with_check,
  heavy_check_mark,
  x: x$1,
  negative_squared_cross_mark,
  curly_loop,
  loop,
  part_alternation_mark,
  eight_spoked_asterisk,
  eight_pointed_black_star,
  sparkle,
  copyright,
  registered,
  tm,
  hash,
  asterisk,
  zero,
  one,
  two,
  three,
  four,
  five,
  six,
  seven,
  eight,
  nine,
  keycap_ten,
  capital_abcd,
  abcd,
  symbols: symbols$1,
  abc,
  a,
  ab,
  b,
  cl,
  cool,
  free,
  information_source,
  id,
  m,
  "new": "\u{1F195}",
  ng,
  o2,
  ok,
  parking,
  sos,
  up,
  vs,
  koko,
  sa,
  ideograph_advantage,
  accept,
  congratulations,
  secret,
  u6e80,
  red_circle,
  orange_circle,
  yellow_circle,
  green_circle,
  large_blue_circle,
  purple_circle,
  brown_circle,
  black_circle,
  white_circle,
  red_square,
  orange_square,
  yellow_square,
  green_square,
  blue_square,
  purple_square,
  brown_square,
  black_large_square,
  white_large_square,
  black_medium_square,
  white_medium_square,
  black_medium_small_square,
  white_medium_small_square,
  black_small_square,
  white_small_square,
  large_orange_diamond,
  large_blue_diamond,
  small_orange_diamond,
  small_blue_diamond,
  small_red_triangle,
  small_red_triangle_down,
  diamond_shape_with_a_dot_inside,
  radio_button,
  white_square_button,
  black_square_button,
  checkered_flag,
  triangular_flag_on_post,
  crossed_flags,
  black_flag,
  white_flag,
  rainbow_flag,
  transgender_flag,
  pirate_flag,
  ascension_island,
  andorra,
  united_arab_emirates,
  afghanistan,
  antigua_barbuda,
  anguilla,
  albania,
  armenia,
  angola,
  antarctica,
  argentina,
  american_samoa,
  austria,
  australia,
  aruba,
  aland_islands,
  azerbaijan,
  bosnia_herzegovina,
  barbados,
  bangladesh,
  belgium,
  burkina_faso,
  bulgaria,
  bahrain,
  burundi,
  benin,
  st_barthelemy,
  bermuda,
  brunei,
  bolivia,
  caribbean_netherlands,
  brazil,
  bahamas,
  bhutan,
  bouvet_island,
  botswana,
  belarus,
  belize,
  canada,
  cocos_islands,
  congo_kinshasa,
  central_african_republic,
  congo_brazzaville,
  switzerland,
  cote_divoire,
  cook_islands,
  chile,
  cameroon,
  cn,
  colombia,
  clipperton_island,
  costa_rica,
  cuba,
  cape_verde,
  curacao,
  christmas_island,
  cyprus,
  czech_republic,
  de,
  diego_garcia,
  djibouti,
  denmark,
  dominica,
  dominican_republic,
  algeria,
  ceuta_melilla,
  ecuador,
  estonia,
  egypt,
  western_sahara,
  eritrea,
  es,
  ethiopia,
  eu,
  european_union,
  finland,
  fiji,
  falkland_islands,
  micronesia,
  faroe_islands,
  fr,
  gabon,
  gb,
  uk,
  grenada,
  georgia,
  french_guiana,
  guernsey,
  ghana,
  gibraltar,
  greenland,
  gambia,
  guinea,
  guadeloupe,
  equatorial_guinea,
  greece,
  south_georgia_south_sandwich_islands,
  guatemala,
  guam,
  guinea_bissau,
  guyana,
  hong_kong,
  heard_mcdonald_islands,
  honduras,
  croatia,
  haiti,
  hungary,
  canary_islands,
  indonesia,
  ireland,
  israel,
  isle_of_man,
  india,
  british_indian_ocean_territory,
  iraq,
  iran,
  iceland,
  it: it$1,
  jersey,
  jamaica,
  jordan,
  jp,
  kenya,
  kyrgyzstan,
  cambodia,
  kiribati,
  comoros,
  st_kitts_nevis,
  north_korea,
  kr,
  kuwait,
  cayman_islands,
  kazakhstan,
  laos,
  lebanon,
  st_lucia,
  liechtenstein,
  sri_lanka,
  liberia,
  lesotho,
  lithuania,
  luxembourg,
  latvia,
  libya,
  morocco,
  monaco,
  moldova,
  montenegro,
  st_martin,
  madagascar,
  marshall_islands,
  macedonia,
  mali,
  myanmar,
  mongolia,
  macau,
  northern_mariana_islands,
  martinique,
  mauritania,
  montserrat,
  malta,
  mauritius,
  maldives,
  malawi,
  mexico,
  malaysia,
  mozambique,
  namibia,
  new_caledonia,
  niger,
  norfolk_island,
  nigeria,
  nicaragua,
  netherlands,
  norway,
  nepal,
  nauru,
  niue,
  new_zealand,
  oman,
  panama,
  peru,
  french_polynesia,
  papua_new_guinea,
  philippines,
  pakistan,
  poland,
  st_pierre_miquelon,
  pitcairn_islands,
  puerto_rico,
  palestinian_territories,
  portugal,
  palau,
  paraguay,
  qatar,
  reunion,
  romania,
  serbia,
  ru,
  rwanda,
  saudi_arabia,
  solomon_islands,
  seychelles,
  sudan,
  sweden,
  singapore,
  st_helena,
  slovenia,
  svalbard_jan_mayen,
  slovakia,
  sierra_leone,
  san_marino,
  senegal,
  somalia,
  suriname,
  south_sudan,
  sao_tome_principe,
  el_salvador,
  sint_maarten,
  syria,
  swaziland,
  tristan_da_cunha,
  turks_caicos_islands,
  chad,
  french_southern_territories,
  togo,
  thailand,
  tajikistan,
  tokelau,
  timor_leste,
  turkmenistan,
  tunisia,
  tonga,
  tr,
  trinidad_tobago,
  tuvalu,
  taiwan,
  tanzania,
  ukraine,
  uganda,
  us_outlying_islands,
  united_nations,
  us,
  uruguay,
  uzbekistan,
  vatican_city,
  st_vincent_grenadines,
  venezuela,
  british_virgin_islands,
  us_virgin_islands,
  vietnam,
  vanuatu,
  wallis_futuna,
  samoa,
  kosovo,
  yemen,
  mayotte,
  south_africa,
  zambia,
  zimbabwe,
  england,
  scotland,
  wales
};
var shortcuts = {
  angry: [">:(", ">:-("],
  blush: [':")', ':-")'],
  broken_heart: ["</3", "<\\3"],
  confused: [":/", ":-/"],
  cry: [":'(", ":'-(", ":,(", ":,-("],
  frowning: [":(", ":-("],
  heart: ["<3"],
  imp: ["]:(", "]:-("],
  innocent: ["o:)", "O:)", "o:-)", "O:-)", "0:)", "0:-)"],
  joy: [":')", ":'-)", ":,)", ":,-)", ":'D", ":'-D", ":,D", ":,-D"],
  kissing: [":*", ":-*"],
  laughing: ["x-)", "X-)"],
  neutral_face: [":|", ":-|"],
  open_mouth: [":o", ":-o", ":O", ":-O"],
  rage: [":@", ":-@"],
  smile: [":D", ":-D"],
  smiley: [":)", ":-)"],
  smiling_imp: ["]:)", "]:-)"],
  sob: [":,'(", ":,'-(", ";(", ";-("],
  stuck_out_tongue: [":P", ":-P"],
  sunglasses: ["8-)", "B-)"],
  sweat: [",:(", ",:-("],
  sweat_smile: [",:)", ",:-)"],
  unamused: [":s", ":-S", ":z", ":-Z", ":$", ":-$"],
  wink: [";)", ";-)"]
};
var render$1 = function emoji_html(tokens, idx) {
  return tokens[idx].content;
};
var replace2 = function create_rule(md, emojies, shortcuts2, scanRE, replaceRE) {
  var arrayReplaceAt2 = md.utils.arrayReplaceAt, ucm = md.utils.lib.ucmicro, ZPCc = new RegExp([ucm.Z.source, ucm.P.source, ucm.Cc.source].join("|"));
  function splitTextToken(text3, level, Token2) {
    var token2, last_pos = 0, nodes = [];
    text3.replace(replaceRE, function(match2, offset, src) {
      var emoji_name;
      if (shortcuts2.hasOwnProperty(match2)) {
        emoji_name = shortcuts2[match2];
        if (offset > 0 && !ZPCc.test(src[offset - 1])) {
          return;
        }
        if (offset + match2.length < src.length && !ZPCc.test(src[offset + match2.length])) {
          return;
        }
      } else {
        emoji_name = match2.slice(1, -1);
      }
      if (offset > last_pos) {
        token2 = new Token2("text", "", 0);
        token2.content = text3.slice(last_pos, offset);
        nodes.push(token2);
      }
      token2 = new Token2("emoji", "", 0);
      token2.markup = emoji_name;
      token2.content = emojies[emoji_name];
      nodes.push(token2);
      last_pos = offset + match2.length;
    });
    if (last_pos < text3.length) {
      token2 = new Token2("text", "", 0);
      token2.content = text3.slice(last_pos);
      nodes.push(token2);
    }
    return nodes;
  }
  return function emoji_replace2(state) {
    var i, j, l, tokens, token2, blockTokens = state.tokens, autolinkLevel = 0;
    for (j = 0, l = blockTokens.length; j < l; j++) {
      if (blockTokens[j].type !== "inline") {
        continue;
      }
      tokens = blockTokens[j].children;
      for (i = tokens.length - 1; i >= 0; i--) {
        token2 = tokens[i];
        if (token2.type === "link_open" || token2.type === "link_close") {
          if (token2.info === "auto") {
            autolinkLevel -= token2.nesting;
          }
        }
        if (token2.type === "text" && autolinkLevel === 0 && scanRE.test(token2.content)) {
          blockTokens[j].children = tokens = arrayReplaceAt2(
            tokens,
            i,
            splitTextToken(token2.content, token2.level, state.Token)
          );
        }
      }
    }
  };
};
function quoteRE(str) {
  return str.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
}
var normalize_opts$1 = function normalize_opts(options2) {
  var emojies = options2.defs, shortcuts2;
  if (options2.enabled.length) {
    emojies = Object.keys(emojies).reduce(function(acc, key2) {
      if (options2.enabled.indexOf(key2) >= 0) {
        acc[key2] = emojies[key2];
      }
      return acc;
    }, {});
  }
  shortcuts2 = Object.keys(options2.shortcuts).reduce(function(acc, key2) {
    if (!emojies[key2]) {
      return acc;
    }
    if (Array.isArray(options2.shortcuts[key2])) {
      options2.shortcuts[key2].forEach(function(alias) {
        acc[alias] = key2;
      });
      return acc;
    }
    acc[options2.shortcuts[key2]] = key2;
    return acc;
  }, {});
  var keys = Object.keys(emojies), names;
  if (keys.length === 0) {
    names = "^$";
  } else {
    names = keys.map(function(name) {
      return ":" + name + ":";
    }).concat(Object.keys(shortcuts2)).sort().reverse().map(function(name) {
      return quoteRE(name);
    }).join("|");
  }
  var scanRE = RegExp(names);
  var replaceRE = RegExp(names, "g");
  return {
    defs: emojies,
    shortcuts: shortcuts2,
    scanRE,
    replaceRE
  };
};
var emoji_html2 = render$1;
var emoji_replace = replace2;
var normalize_opts2 = normalize_opts$1;
var bare = function emoji_plugin(md, options2) {
  var defaults = {
    defs: {},
    shortcuts: {},
    enabled: []
  };
  var opts = normalize_opts2(md.utils.assign({}, defaults, options2 || {}));
  md.renderer.rules.emoji = emoji_html2;
  md.core.ruler.after(
    "linkify",
    "emoji",
    emoji_replace(md, opts.defs, opts.shortcuts, opts.scanRE, opts.replaceRE)
  );
};
var emojies_defs = require$$0$2;
var emojies_shortcuts = shortcuts;
var bare_emoji_plugin = bare;
var markdownItEmoji = function emoji_plugin2(md, options2) {
  var defaults = {
    defs: emojies_defs,
    shortcuts: emojies_shortcuts,
    enabled: []
  };
  var opts = md.utils.assign({}, defaults, options2 || {});
  bare_emoji_plugin(md, opts);
};
var disableCheckboxes = true;
var useLabelWrapper = false;
var useLabelAfter = false;
var markdownItTaskLists = function(md, options2) {
  if (options2) {
    disableCheckboxes = !options2.enabled;
    useLabelWrapper = !!options2.label;
    useLabelAfter = !!options2.labelAfter;
  }
  md.core.ruler.after("inline", "github-task-lists", function(state) {
    var tokens = state.tokens;
    for (var i = 2; i < tokens.length; i++) {
      if (isTodoItem(tokens, i)) {
        todoify(tokens[i], state.Token);
        attrSet2(tokens[i - 2], "class", "task-list-item" + (!disableCheckboxes ? " enabled" : ""));
        attrSet2(tokens[parentToken(tokens, i - 2)], "class", "contains-task-list");
      }
    }
  });
};
function attrSet2(token2, name, value) {
  var index2 = token2.attrIndex(name);
  var attr = [name, value];
  if (index2 < 0) {
    token2.attrPush(attr);
  } else {
    token2.attrs[index2] = attr;
  }
}
function parentToken(tokens, index2) {
  var targetLevel = tokens[index2].level - 1;
  for (var i = index2 - 1; i >= 0; i--) {
    if (tokens[i].level === targetLevel) {
      return i;
    }
  }
  return -1;
}
function isTodoItem(tokens, index2) {
  return isInline(tokens[index2]) && isParagraph(tokens[index2 - 1]) && isListItem(tokens[index2 - 2]) && startsWithTodoMarkdown(tokens[index2]);
}
function todoify(token2, TokenConstructor) {
  token2.children.unshift(makeCheckbox(token2, TokenConstructor));
  token2.children[1].content = token2.children[1].content.slice(3);
  token2.content = token2.content.slice(3);
  if (useLabelWrapper) {
    if (useLabelAfter) {
      token2.children.pop();
      var id2 = "task-item-" + Math.ceil(Math.random() * (1e4 * 1e3) - 1e3);
      token2.children[0].content = token2.children[0].content.slice(0, -1) + ' id="' + id2 + '">';
      token2.children.push(afterLabel(token2.content, id2, TokenConstructor));
    } else {
      token2.children.unshift(beginLabel(TokenConstructor));
      token2.children.push(endLabel(TokenConstructor));
    }
  }
}
function makeCheckbox(token2, TokenConstructor) {
  var checkbox2 = new TokenConstructor("html_inline", "", 0);
  var disabledAttr = disableCheckboxes ? ' disabled="" ' : "";
  if (token2.content.indexOf("[ ] ") === 0) {
    checkbox2.content = '<input class="task-list-item-checkbox"' + disabledAttr + 'type="checkbox">';
  } else if (token2.content.indexOf("[x] ") === 0 || token2.content.indexOf("[X] ") === 0) {
    checkbox2.content = '<input class="task-list-item-checkbox" checked=""' + disabledAttr + 'type="checkbox">';
  }
  return checkbox2;
}
function beginLabel(TokenConstructor) {
  var token2 = new TokenConstructor("html_inline", "", 0);
  token2.content = "<label>";
  return token2;
}
function endLabel(TokenConstructor) {
  var token2 = new TokenConstructor("html_inline", "", 0);
  token2.content = "</label>";
  return token2;
}
function afterLabel(content2, id2, TokenConstructor) {
  var token2 = new TokenConstructor("html_inline", "", 0);
  token2.content = '<label class="task-list-item-label" for="' + id2 + '">' + content2 + "</label>";
  token2.attrs = [{ for: id2 }];
  return token2;
}
function isInline(token2) {
  return token2.type === "inline";
}
function isParagraph(token2) {
  return token2.type === "paragraph_open";
}
function isListItem(token2) {
  return token2.type === "list_item_open";
}
function startsWithTodoMarkdown(token2) {
  return token2.content.indexOf("[ ] ") === 0 || token2.content.indexOf("[x] ") === 0 || token2.content.indexOf("[X] ") === 0;
}
var lib$7 = { exports: {} };
var _default$2 = {};
var lib$6 = { exports: {} };
var _default$1 = {};
function getDefaultWhiteList$1() {
  var whiteList = {};
  whiteList["align-content"] = false;
  whiteList["align-items"] = false;
  whiteList["align-self"] = false;
  whiteList["alignment-adjust"] = false;
  whiteList["alignment-baseline"] = false;
  whiteList["all"] = false;
  whiteList["anchor-point"] = false;
  whiteList["animation"] = false;
  whiteList["animation-delay"] = false;
  whiteList["animation-direction"] = false;
  whiteList["animation-duration"] = false;
  whiteList["animation-fill-mode"] = false;
  whiteList["animation-iteration-count"] = false;
  whiteList["animation-name"] = false;
  whiteList["animation-play-state"] = false;
  whiteList["animation-timing-function"] = false;
  whiteList["azimuth"] = false;
  whiteList["backface-visibility"] = false;
  whiteList["background"] = true;
  whiteList["background-attachment"] = true;
  whiteList["background-clip"] = true;
  whiteList["background-color"] = true;
  whiteList["background-image"] = true;
  whiteList["background-origin"] = true;
  whiteList["background-position"] = true;
  whiteList["background-repeat"] = true;
  whiteList["background-size"] = true;
  whiteList["baseline-shift"] = false;
  whiteList["binding"] = false;
  whiteList["bleed"] = false;
  whiteList["bookmark-label"] = false;
  whiteList["bookmark-level"] = false;
  whiteList["bookmark-state"] = false;
  whiteList["border"] = true;
  whiteList["border-bottom"] = true;
  whiteList["border-bottom-color"] = true;
  whiteList["border-bottom-left-radius"] = true;
  whiteList["border-bottom-right-radius"] = true;
  whiteList["border-bottom-style"] = true;
  whiteList["border-bottom-width"] = true;
  whiteList["border-collapse"] = true;
  whiteList["border-color"] = true;
  whiteList["border-image"] = true;
  whiteList["border-image-outset"] = true;
  whiteList["border-image-repeat"] = true;
  whiteList["border-image-slice"] = true;
  whiteList["border-image-source"] = true;
  whiteList["border-image-width"] = true;
  whiteList["border-left"] = true;
  whiteList["border-left-color"] = true;
  whiteList["border-left-style"] = true;
  whiteList["border-left-width"] = true;
  whiteList["border-radius"] = true;
  whiteList["border-right"] = true;
  whiteList["border-right-color"] = true;
  whiteList["border-right-style"] = true;
  whiteList["border-right-width"] = true;
  whiteList["border-spacing"] = true;
  whiteList["border-style"] = true;
  whiteList["border-top"] = true;
  whiteList["border-top-color"] = true;
  whiteList["border-top-left-radius"] = true;
  whiteList["border-top-right-radius"] = true;
  whiteList["border-top-style"] = true;
  whiteList["border-top-width"] = true;
  whiteList["border-width"] = true;
  whiteList["bottom"] = false;
  whiteList["box-decoration-break"] = true;
  whiteList["box-shadow"] = true;
  whiteList["box-sizing"] = true;
  whiteList["box-snap"] = true;
  whiteList["box-suppress"] = true;
  whiteList["break-after"] = true;
  whiteList["break-before"] = true;
  whiteList["break-inside"] = true;
  whiteList["caption-side"] = false;
  whiteList["chains"] = false;
  whiteList["clear"] = true;
  whiteList["clip"] = false;
  whiteList["clip-path"] = false;
  whiteList["clip-rule"] = false;
  whiteList["color"] = true;
  whiteList["color-interpolation-filters"] = true;
  whiteList["column-count"] = false;
  whiteList["column-fill"] = false;
  whiteList["column-gap"] = false;
  whiteList["column-rule"] = false;
  whiteList["column-rule-color"] = false;
  whiteList["column-rule-style"] = false;
  whiteList["column-rule-width"] = false;
  whiteList["column-span"] = false;
  whiteList["column-width"] = false;
  whiteList["columns"] = false;
  whiteList["contain"] = false;
  whiteList["content"] = false;
  whiteList["counter-increment"] = false;
  whiteList["counter-reset"] = false;
  whiteList["counter-set"] = false;
  whiteList["crop"] = false;
  whiteList["cue"] = false;
  whiteList["cue-after"] = false;
  whiteList["cue-before"] = false;
  whiteList["cursor"] = false;
  whiteList["direction"] = false;
  whiteList["display"] = true;
  whiteList["display-inside"] = true;
  whiteList["display-list"] = true;
  whiteList["display-outside"] = true;
  whiteList["dominant-baseline"] = false;
  whiteList["elevation"] = false;
  whiteList["empty-cells"] = false;
  whiteList["filter"] = false;
  whiteList["flex"] = false;
  whiteList["flex-basis"] = false;
  whiteList["flex-direction"] = false;
  whiteList["flex-flow"] = false;
  whiteList["flex-grow"] = false;
  whiteList["flex-shrink"] = false;
  whiteList["flex-wrap"] = false;
  whiteList["float"] = false;
  whiteList["float-offset"] = false;
  whiteList["flood-color"] = false;
  whiteList["flood-opacity"] = false;
  whiteList["flow-from"] = false;
  whiteList["flow-into"] = false;
  whiteList["font"] = true;
  whiteList["font-family"] = true;
  whiteList["font-feature-settings"] = true;
  whiteList["font-kerning"] = true;
  whiteList["font-language-override"] = true;
  whiteList["font-size"] = true;
  whiteList["font-size-adjust"] = true;
  whiteList["font-stretch"] = true;
  whiteList["font-style"] = true;
  whiteList["font-synthesis"] = true;
  whiteList["font-variant"] = true;
  whiteList["font-variant-alternates"] = true;
  whiteList["font-variant-caps"] = true;
  whiteList["font-variant-east-asian"] = true;
  whiteList["font-variant-ligatures"] = true;
  whiteList["font-variant-numeric"] = true;
  whiteList["font-variant-position"] = true;
  whiteList["font-weight"] = true;
  whiteList["grid"] = false;
  whiteList["grid-area"] = false;
  whiteList["grid-auto-columns"] = false;
  whiteList["grid-auto-flow"] = false;
  whiteList["grid-auto-rows"] = false;
  whiteList["grid-column"] = false;
  whiteList["grid-column-end"] = false;
  whiteList["grid-column-start"] = false;
  whiteList["grid-row"] = false;
  whiteList["grid-row-end"] = false;
  whiteList["grid-row-start"] = false;
  whiteList["grid-template"] = false;
  whiteList["grid-template-areas"] = false;
  whiteList["grid-template-columns"] = false;
  whiteList["grid-template-rows"] = false;
  whiteList["hanging-punctuation"] = false;
  whiteList["height"] = true;
  whiteList["hyphens"] = false;
  whiteList["icon"] = false;
  whiteList["image-orientation"] = false;
  whiteList["image-resolution"] = false;
  whiteList["ime-mode"] = false;
  whiteList["initial-letters"] = false;
  whiteList["inline-box-align"] = false;
  whiteList["justify-content"] = false;
  whiteList["justify-items"] = false;
  whiteList["justify-self"] = false;
  whiteList["left"] = false;
  whiteList["letter-spacing"] = true;
  whiteList["lighting-color"] = true;
  whiteList["line-box-contain"] = false;
  whiteList["line-break"] = false;
  whiteList["line-grid"] = false;
  whiteList["line-height"] = false;
  whiteList["line-snap"] = false;
  whiteList["line-stacking"] = false;
  whiteList["line-stacking-ruby"] = false;
  whiteList["line-stacking-shift"] = false;
  whiteList["line-stacking-strategy"] = false;
  whiteList["list-style"] = true;
  whiteList["list-style-image"] = true;
  whiteList["list-style-position"] = true;
  whiteList["list-style-type"] = true;
  whiteList["margin"] = true;
  whiteList["margin-bottom"] = true;
  whiteList["margin-left"] = true;
  whiteList["margin-right"] = true;
  whiteList["margin-top"] = true;
  whiteList["marker-offset"] = false;
  whiteList["marker-side"] = false;
  whiteList["marks"] = false;
  whiteList["mask"] = false;
  whiteList["mask-box"] = false;
  whiteList["mask-box-outset"] = false;
  whiteList["mask-box-repeat"] = false;
  whiteList["mask-box-slice"] = false;
  whiteList["mask-box-source"] = false;
  whiteList["mask-box-width"] = false;
  whiteList["mask-clip"] = false;
  whiteList["mask-image"] = false;
  whiteList["mask-origin"] = false;
  whiteList["mask-position"] = false;
  whiteList["mask-repeat"] = false;
  whiteList["mask-size"] = false;
  whiteList["mask-source-type"] = false;
  whiteList["mask-type"] = false;
  whiteList["max-height"] = true;
  whiteList["max-lines"] = false;
  whiteList["max-width"] = true;
  whiteList["min-height"] = true;
  whiteList["min-width"] = true;
  whiteList["move-to"] = false;
  whiteList["nav-down"] = false;
  whiteList["nav-index"] = false;
  whiteList["nav-left"] = false;
  whiteList["nav-right"] = false;
  whiteList["nav-up"] = false;
  whiteList["object-fit"] = false;
  whiteList["object-position"] = false;
  whiteList["opacity"] = false;
  whiteList["order"] = false;
  whiteList["orphans"] = false;
  whiteList["outline"] = false;
  whiteList["outline-color"] = false;
  whiteList["outline-offset"] = false;
  whiteList["outline-style"] = false;
  whiteList["outline-width"] = false;
  whiteList["overflow"] = false;
  whiteList["overflow-wrap"] = false;
  whiteList["overflow-x"] = false;
  whiteList["overflow-y"] = false;
  whiteList["padding"] = true;
  whiteList["padding-bottom"] = true;
  whiteList["padding-left"] = true;
  whiteList["padding-right"] = true;
  whiteList["padding-top"] = true;
  whiteList["page"] = false;
  whiteList["page-break-after"] = false;
  whiteList["page-break-before"] = false;
  whiteList["page-break-inside"] = false;
  whiteList["page-policy"] = false;
  whiteList["pause"] = false;
  whiteList["pause-after"] = false;
  whiteList["pause-before"] = false;
  whiteList["perspective"] = false;
  whiteList["perspective-origin"] = false;
  whiteList["pitch"] = false;
  whiteList["pitch-range"] = false;
  whiteList["play-during"] = false;
  whiteList["position"] = false;
  whiteList["presentation-level"] = false;
  whiteList["quotes"] = false;
  whiteList["region-fragment"] = false;
  whiteList["resize"] = false;
  whiteList["rest"] = false;
  whiteList["rest-after"] = false;
  whiteList["rest-before"] = false;
  whiteList["richness"] = false;
  whiteList["right"] = false;
  whiteList["rotation"] = false;
  whiteList["rotation-point"] = false;
  whiteList["ruby-align"] = false;
  whiteList["ruby-merge"] = false;
  whiteList["ruby-position"] = false;
  whiteList["shape-image-threshold"] = false;
  whiteList["shape-outside"] = false;
  whiteList["shape-margin"] = false;
  whiteList["size"] = false;
  whiteList["speak"] = false;
  whiteList["speak-as"] = false;
  whiteList["speak-header"] = false;
  whiteList["speak-numeral"] = false;
  whiteList["speak-punctuation"] = false;
  whiteList["speech-rate"] = false;
  whiteList["stress"] = false;
  whiteList["string-set"] = false;
  whiteList["tab-size"] = false;
  whiteList["table-layout"] = false;
  whiteList["text-align"] = true;
  whiteList["text-align-last"] = true;
  whiteList["text-combine-upright"] = true;
  whiteList["text-decoration"] = true;
  whiteList["text-decoration-color"] = true;
  whiteList["text-decoration-line"] = true;
  whiteList["text-decoration-skip"] = true;
  whiteList["text-decoration-style"] = true;
  whiteList["text-emphasis"] = true;
  whiteList["text-emphasis-color"] = true;
  whiteList["text-emphasis-position"] = true;
  whiteList["text-emphasis-style"] = true;
  whiteList["text-height"] = true;
  whiteList["text-indent"] = true;
  whiteList["text-justify"] = true;
  whiteList["text-orientation"] = true;
  whiteList["text-overflow"] = true;
  whiteList["text-shadow"] = true;
  whiteList["text-space-collapse"] = true;
  whiteList["text-transform"] = true;
  whiteList["text-underline-position"] = true;
  whiteList["text-wrap"] = true;
  whiteList["top"] = false;
  whiteList["transform"] = false;
  whiteList["transform-origin"] = false;
  whiteList["transform-style"] = false;
  whiteList["transition"] = false;
  whiteList["transition-delay"] = false;
  whiteList["transition-duration"] = false;
  whiteList["transition-property"] = false;
  whiteList["transition-timing-function"] = false;
  whiteList["unicode-bidi"] = false;
  whiteList["vertical-align"] = false;
  whiteList["visibility"] = false;
  whiteList["voice-balance"] = false;
  whiteList["voice-duration"] = false;
  whiteList["voice-family"] = false;
  whiteList["voice-pitch"] = false;
  whiteList["voice-range"] = false;
  whiteList["voice-rate"] = false;
  whiteList["voice-stress"] = false;
  whiteList["voice-volume"] = false;
  whiteList["volume"] = false;
  whiteList["white-space"] = false;
  whiteList["widows"] = false;
  whiteList["width"] = true;
  whiteList["will-change"] = false;
  whiteList["word-break"] = true;
  whiteList["word-spacing"] = true;
  whiteList["word-wrap"] = true;
  whiteList["wrap-flow"] = false;
  whiteList["wrap-through"] = false;
  whiteList["writing-mode"] = false;
  whiteList["z-index"] = false;
  return whiteList;
}
function onAttr(name, value, options2) {
}
function onIgnoreAttr(name, value, options2) {
}
var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;
function safeAttrValue$1(name, value) {
  if (REGEXP_URL_JAVASCRIPT.test(value))
    return "";
  return value;
}
_default$1.whiteList = getDefaultWhiteList$1();
_default$1.getDefaultWhiteList = getDefaultWhiteList$1;
_default$1.onAttr = onAttr;
_default$1.onIgnoreAttr = onIgnoreAttr;
_default$1.safeAttrValue = safeAttrValue$1;
var util$1 = {
  indexOf: function(arr, item2) {
    var i, j;
    if (Array.prototype.indexOf) {
      return arr.indexOf(item2);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      if (arr[i] === item2) {
        return i;
      }
    }
    return -1;
  },
  forEach: function(arr, fn, scope) {
    var i, j;
    if (Array.prototype.forEach) {
      return arr.forEach(fn, scope);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      fn.call(scope, arr[i], i, arr);
    }
  },
  trim: function(str) {
    if (String.prototype.trim) {
      return str.trim();
    }
    return str.replace(/(^\s*)|(\s*$)/g, "");
  },
  trimRight: function(str) {
    if (String.prototype.trimRight) {
      return str.trimRight();
    }
    return str.replace(/(\s*$)/g, "");
  }
};
var _$3 = util$1;
function parseStyle$1(css2, onAttr2) {
  css2 = _$3.trimRight(css2);
  if (css2[css2.length - 1] !== ";")
    css2 += ";";
  var cssLength = css2.length;
  var isParenthesisOpen = false;
  var lastPos = 0;
  var i = 0;
  var retCSS = "";
  function addNewAttr() {
    if (!isParenthesisOpen) {
      var source = _$3.trim(css2.slice(lastPos, i));
      var j2 = source.indexOf(":");
      if (j2 !== -1) {
        var name = _$3.trim(source.slice(0, j2));
        var value = _$3.trim(source.slice(j2 + 1));
        if (name) {
          var ret = onAttr2(lastPos, retCSS.length, name, value, source);
          if (ret)
            retCSS += ret + "; ";
        }
      }
    }
    lastPos = i + 1;
  }
  for (; i < cssLength; i++) {
    var c = css2[i];
    if (c === "/" && css2[i + 1] === "*") {
      var j = css2.indexOf("*/", i + 2);
      if (j === -1)
        break;
      i = j + 1;
      lastPos = i + 1;
      isParenthesisOpen = false;
    } else if (c === "(") {
      isParenthesisOpen = true;
    } else if (c === ")") {
      isParenthesisOpen = false;
    } else if (c === ";") {
      if (isParenthesisOpen)
        ;
      else {
        addNewAttr();
      }
    } else if (c === "\n") {
      addNewAttr();
    }
  }
  return _$3.trim(retCSS);
}
var parser$3 = parseStyle$1;
var DEFAULT$1 = _default$1;
var parseStyle = parser$3;
function isNull$1(obj) {
  return obj === void 0 || obj === null;
}
function shallowCopyObject$1(obj) {
  var ret = {};
  for (var i in obj) {
    ret[i] = obj[i];
  }
  return ret;
}
function FilterCSS$2(options2) {
  options2 = shallowCopyObject$1(options2 || {});
  options2.whiteList = options2.whiteList || DEFAULT$1.whiteList;
  options2.onAttr = options2.onAttr || DEFAULT$1.onAttr;
  options2.onIgnoreAttr = options2.onIgnoreAttr || DEFAULT$1.onIgnoreAttr;
  options2.safeAttrValue = options2.safeAttrValue || DEFAULT$1.safeAttrValue;
  this.options = options2;
}
FilterCSS$2.prototype.process = function(css2) {
  css2 = css2 || "";
  css2 = css2.toString();
  if (!css2)
    return "";
  var me = this;
  var options2 = me.options;
  var whiteList = options2.whiteList;
  var onAttr2 = options2.onAttr;
  var onIgnoreAttr2 = options2.onIgnoreAttr;
  var safeAttrValue2 = options2.safeAttrValue;
  var retCSS = parseStyle(css2, function(sourcePosition, position, name, value, source) {
    var check2 = whiteList[name];
    var isWhite = false;
    if (check2 === true)
      isWhite = check2;
    else if (typeof check2 === "function")
      isWhite = check2(value);
    else if (check2 instanceof RegExp)
      isWhite = check2.test(value);
    if (isWhite !== true)
      isWhite = false;
    value = safeAttrValue2(name, value);
    if (!value)
      return;
    var opts = {
      position,
      sourcePosition,
      source,
      isWhite
    };
    if (isWhite) {
      var ret = onAttr2(name, value, opts);
      if (isNull$1(ret)) {
        return name + ":" + value;
      } else {
        return ret;
      }
    } else {
      var ret = onIgnoreAttr2(name, value, opts);
      if (!isNull$1(ret)) {
        return ret;
      }
    }
  });
  return retCSS;
};
var css = FilterCSS$2;
(function(module, exports) {
  var DEFAULT2 = _default$1;
  var FilterCSS2 = css;
  function filterCSS(html, options2) {
    var xss2 = new FilterCSS2(options2);
    return xss2.process(html);
  }
  exports = module.exports = filterCSS;
  exports.FilterCSS = FilterCSS2;
  for (var i in DEFAULT2)
    exports[i] = DEFAULT2[i];
  if (typeof window !== "undefined") {
    window.filterCSS = module.exports;
  }
})(lib$6, lib$6.exports);
var util = {
  indexOf: function(arr, item2) {
    var i, j;
    if (Array.prototype.indexOf) {
      return arr.indexOf(item2);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      if (arr[i] === item2) {
        return i;
      }
    }
    return -1;
  },
  forEach: function(arr, fn, scope) {
    var i, j;
    if (Array.prototype.forEach) {
      return arr.forEach(fn, scope);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      fn.call(scope, arr[i], i, arr);
    }
  },
  trim: function(str) {
    if (String.prototype.trim) {
      return str.trim();
    }
    return str.replace(/(^\s*)|(\s*$)/g, "");
  },
  spaceIndex: function(str) {
    var reg2 = /\s|\n|\t/;
    var match2 = reg2.exec(str);
    return match2 ? match2.index : -1;
  }
};
var FilterCSS$1 = lib$6.exports.FilterCSS;
var getDefaultCSSWhiteList = lib$6.exports.getDefaultWhiteList;
var _$2 = util;
function getDefaultWhiteList() {
  return {
    a: ["target", "href", "title"],
    abbr: ["title"],
    address: [],
    area: ["shape", "coords", "href", "alt"],
    article: [],
    aside: [],
    audio: [
      "autoplay",
      "controls",
      "crossorigin",
      "loop",
      "muted",
      "preload",
      "src"
    ],
    b: [],
    bdi: ["dir"],
    bdo: ["dir"],
    big: [],
    blockquote: ["cite"],
    br: [],
    caption: [],
    center: [],
    cite: [],
    code: [],
    col: ["align", "valign", "span", "width"],
    colgroup: ["align", "valign", "span", "width"],
    dd: [],
    del: ["datetime"],
    details: ["open"],
    div: [],
    dl: [],
    dt: [],
    em: [],
    figcaption: [],
    figure: [],
    font: ["color", "size", "face"],
    footer: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    header: [],
    hr: [],
    i: [],
    img: ["src", "alt", "title", "width", "height"],
    ins: ["datetime"],
    li: [],
    mark: [],
    nav: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    section: [],
    small: [],
    span: [],
    sub: [],
    summary: [],
    sup: [],
    strong: [],
    strike: [],
    table: ["width", "border", "align", "valign"],
    tbody: ["align", "valign"],
    td: ["width", "rowspan", "colspan", "align", "valign"],
    tfoot: ["align", "valign"],
    th: ["width", "rowspan", "colspan", "align", "valign"],
    thead: ["align", "valign"],
    tr: ["rowspan", "align", "valign"],
    tt: [],
    u: [],
    ul: [],
    video: [
      "autoplay",
      "controls",
      "crossorigin",
      "loop",
      "muted",
      "playsinline",
      "poster",
      "preload",
      "src",
      "height",
      "width"
    ]
  };
}
var defaultCSSFilter = new FilterCSS$1();
function onTag(tag2, html, options2) {
}
function onIgnoreTag(tag2, html, options2) {
}
function onTagAttr(tag2, name, value) {
}
function onIgnoreTagAttr(tag2, name, value) {
}
function escapeHtml(html) {
  return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
}
function safeAttrValue(tag2, name, value, cssFilter) {
  value = friendlyAttrValue(value);
  if (name === "href" || name === "src") {
    value = _$2.trim(value);
    if (value === "#")
      return "#";
    if (!(value.substr(0, 7) === "http://" || value.substr(0, 8) === "https://" || value.substr(0, 7) === "mailto:" || value.substr(0, 4) === "tel:" || value.substr(0, 11) === "data:image/" || value.substr(0, 6) === "ftp://" || value.substr(0, 2) === "./" || value.substr(0, 3) === "../" || value[0] === "#" || value[0] === "/")) {
      return "";
    }
  } else if (name === "background") {
    REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
      return "";
    }
  } else if (name === "style") {
    REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
      return "";
    }
    REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
      REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
        return "";
      }
    }
    if (cssFilter !== false) {
      cssFilter = cssFilter || defaultCSSFilter;
      value = cssFilter.process(value);
    }
  }
  value = escapeAttrValue(value);
  return value;
}
var REGEXP_LT = /</g;
var REGEXP_GT = />/g;
var REGEXP_QUOTE = /"/g;
var REGEXP_QUOTE_2 = /&quot;/g;
var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a):/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;
function escapeQuote(str) {
  return str.replace(REGEXP_QUOTE, "&quot;");
}
function unescapeQuote(str) {
  return str.replace(REGEXP_QUOTE_2, '"');
}
function escapeHtmlEntities(str) {
  return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str2, code3) {
    return code3[0] === "x" || code3[0] === "X" ? String.fromCharCode(parseInt(code3.substr(1), 16)) : String.fromCharCode(parseInt(code3, 10));
  });
}
function escapeDangerHtml5Entities(str) {
  return str.replace(REGEXP_ATTR_VALUE_COLON, ":").replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
}
function clearNonPrintableCharacter(str) {
  var str2 = "";
  for (var i = 0, len = str.length; i < len; i++) {
    str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
  }
  return _$2.trim(str2);
}
function friendlyAttrValue(str) {
  str = unescapeQuote(str);
  str = escapeHtmlEntities(str);
  str = escapeDangerHtml5Entities(str);
  str = clearNonPrintableCharacter(str);
  return str;
}
function escapeAttrValue(str) {
  str = escapeQuote(str);
  str = escapeHtml(str);
  return str;
}
function onIgnoreTagStripAll() {
  return "";
}
function StripTagBody(tags2, next2) {
  if (typeof next2 !== "function") {
    next2 = function() {
    };
  }
  var isRemoveAllTag = !Array.isArray(tags2);
  function isRemoveTag(tag2) {
    if (isRemoveAllTag)
      return true;
    return _$2.indexOf(tags2, tag2) !== -1;
  }
  var removeList = [];
  var posStart = false;
  return {
    onIgnoreTag: function(tag2, html, options2) {
      if (isRemoveTag(tag2)) {
        if (options2.isClosing) {
          var ret = "[/removed]";
          var end2 = options2.position + ret.length;
          removeList.push([
            posStart !== false ? posStart : options2.position,
            end2
          ]);
          posStart = false;
          return ret;
        } else {
          if (!posStart) {
            posStart = options2.position;
          }
          return "[removed]";
        }
      } else {
        return next2(tag2, html, options2);
      }
    },
    remove: function(html) {
      var rethtml = "";
      var lastPos = 0;
      _$2.forEach(removeList, function(pos) {
        rethtml += html.slice(lastPos, pos[0]);
        lastPos = pos[1];
      });
      rethtml += html.slice(lastPos);
      return rethtml;
    }
  };
}
function stripCommentTag(html) {
  var retHtml = "";
  var lastPos = 0;
  while (lastPos < html.length) {
    var i = html.indexOf("<!--", lastPos);
    if (i === -1) {
      retHtml += html.slice(lastPos);
      break;
    }
    retHtml += html.slice(lastPos, i);
    var j = html.indexOf("-->", i);
    if (j === -1) {
      break;
    }
    lastPos = j + 3;
  }
  return retHtml;
}
function stripBlankChar(html) {
  var chars = html.split("");
  chars = chars.filter(function(char) {
    var c = char.charCodeAt(0);
    if (c === 127)
      return false;
    if (c <= 31) {
      if (c === 10 || c === 13)
        return true;
      return false;
    }
    return true;
  });
  return chars.join("");
}
_default$2.whiteList = getDefaultWhiteList();
_default$2.getDefaultWhiteList = getDefaultWhiteList;
_default$2.onTag = onTag;
_default$2.onIgnoreTag = onIgnoreTag;
_default$2.onTagAttr = onTagAttr;
_default$2.onIgnoreTagAttr = onIgnoreTagAttr;
_default$2.safeAttrValue = safeAttrValue;
_default$2.escapeHtml = escapeHtml;
_default$2.escapeQuote = escapeQuote;
_default$2.unescapeQuote = unescapeQuote;
_default$2.escapeHtmlEntities = escapeHtmlEntities;
_default$2.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
_default$2.clearNonPrintableCharacter = clearNonPrintableCharacter;
_default$2.friendlyAttrValue = friendlyAttrValue;
_default$2.escapeAttrValue = escapeAttrValue;
_default$2.onIgnoreTagStripAll = onIgnoreTagStripAll;
_default$2.StripTagBody = StripTagBody;
_default$2.stripCommentTag = stripCommentTag;
_default$2.stripBlankChar = stripBlankChar;
_default$2.cssFilter = defaultCSSFilter;
_default$2.getDefaultCSSWhiteList = getDefaultCSSWhiteList;
var parser$2 = {};
var _$1 = util;
function getTagName(html) {
  var i = _$1.spaceIndex(html);
  var tagName;
  if (i === -1) {
    tagName = html.slice(1, -1);
  } else {
    tagName = html.slice(1, i + 1);
  }
  tagName = _$1.trim(tagName).toLowerCase();
  if (tagName.slice(0, 1) === "/")
    tagName = tagName.slice(1);
  if (tagName.slice(-1) === "/")
    tagName = tagName.slice(0, -1);
  return tagName;
}
function isClosing(html) {
  return html.slice(0, 2) === "</";
}
function parseTag$1(html, onTag2, escapeHtml2) {
  var rethtml = "";
  var lastPos = 0;
  var tagStart = false;
  var quoteStart = false;
  var currentPos = 0;
  var len = html.length;
  var currentTagName = "";
  var currentHtml = "";
  chariterator:
    for (currentPos = 0; currentPos < len; currentPos++) {
      var c = html.charAt(currentPos);
      if (tagStart === false) {
        if (c === "<") {
          tagStart = currentPos;
          continue;
        }
      } else {
        if (quoteStart === false) {
          if (c === "<") {
            rethtml += escapeHtml2(html.slice(lastPos, currentPos));
            tagStart = currentPos;
            lastPos = currentPos;
            continue;
          }
          if (c === ">" || currentPos === len - 1) {
            rethtml += escapeHtml2(html.slice(lastPos, tagStart));
            currentHtml = html.slice(tagStart, currentPos + 1);
            currentTagName = getTagName(currentHtml);
            rethtml += onTag2(
              tagStart,
              rethtml.length,
              currentTagName,
              currentHtml,
              isClosing(currentHtml)
            );
            lastPos = currentPos + 1;
            tagStart = false;
            continue;
          }
          if (c === '"' || c === "'") {
            var i = 1;
            var ic2 = html.charAt(currentPos - i);
            while (ic2.trim() === "" || ic2 === "=") {
              if (ic2 === "=") {
                quoteStart = c;
                continue chariterator;
              }
              ic2 = html.charAt(currentPos - ++i);
            }
          }
        } else {
          if (c === quoteStart) {
            quoteStart = false;
            continue;
          }
        }
      }
    }
  if (lastPos < len) {
    rethtml += escapeHtml2(html.substr(lastPos));
  }
  return rethtml;
}
var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9\\_:.-]/gim;
function parseAttr$1(html, onAttr2) {
  var lastPos = 0;
  var lastMarkPos = 0;
  var retAttrs = [];
  var tmpName = false;
  var len = html.length;
  function addAttr(name, value) {
    name = _$1.trim(name);
    name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
    if (name.length < 1)
      return;
    var ret = onAttr2(name, value || "");
    if (ret)
      retAttrs.push(ret);
  }
  for (var i = 0; i < len; i++) {
    var c = html.charAt(i);
    var v2, j;
    if (tmpName === false && c === "=") {
      tmpName = html.slice(lastPos, i);
      lastPos = i + 1;
      lastMarkPos = html.charAt(lastPos) === '"' || html.charAt(lastPos) === "'" ? lastPos : findNextQuotationMark(html, i + 1);
      continue;
    }
    if (tmpName !== false) {
      if (i === lastMarkPos) {
        j = html.indexOf(c, i + 1);
        if (j === -1) {
          break;
        } else {
          v2 = _$1.trim(html.slice(lastMarkPos + 1, j));
          addAttr(tmpName, v2);
          tmpName = false;
          i = j;
          lastPos = i + 1;
          continue;
        }
      }
    }
    if (/\s|\n|\t/.test(c)) {
      html = html.replace(/\s|\n|\t/g, " ");
      if (tmpName === false) {
        j = findNextEqual(html, i);
        if (j === -1) {
          v2 = _$1.trim(html.slice(lastPos, i));
          addAttr(v2);
          tmpName = false;
          lastPos = i + 1;
          continue;
        } else {
          i = j - 1;
          continue;
        }
      } else {
        j = findBeforeEqual(html, i - 1);
        if (j === -1) {
          v2 = _$1.trim(html.slice(lastPos, i));
          v2 = stripQuoteWrap(v2);
          addAttr(tmpName, v2);
          tmpName = false;
          lastPos = i + 1;
          continue;
        } else {
          continue;
        }
      }
    }
  }
  if (lastPos < html.length) {
    if (tmpName === false) {
      addAttr(html.slice(lastPos));
    } else {
      addAttr(tmpName, stripQuoteWrap(_$1.trim(html.slice(lastPos))));
    }
  }
  return _$1.trim(retAttrs.join(" "));
}
function findNextEqual(str, i) {
  for (; i < str.length; i++) {
    var c = str[i];
    if (c === " ")
      continue;
    if (c === "=")
      return i;
    return -1;
  }
}
function findNextQuotationMark(str, i) {
  for (; i < str.length; i++) {
    var c = str[i];
    if (c === " ")
      continue;
    if (c === "'" || c === '"')
      return i;
    return -1;
  }
}
function findBeforeEqual(str, i) {
  for (; i > 0; i--) {
    var c = str[i];
    if (c === " ")
      continue;
    if (c === "=")
      return i;
    return -1;
  }
}
function isQuoteWrapString(text3) {
  if (text3[0] === '"' && text3[text3.length - 1] === '"' || text3[0] === "'" && text3[text3.length - 1] === "'") {
    return true;
  } else {
    return false;
  }
}
function stripQuoteWrap(text3) {
  if (isQuoteWrapString(text3)) {
    return text3.substr(1, text3.length - 2);
  } else {
    return text3;
  }
}
parser$2.parseTag = parseTag$1;
parser$2.parseAttr = parseAttr$1;
var FilterCSS = lib$6.exports.FilterCSS;
var DEFAULT = _default$2;
var parser$1 = parser$2;
var parseTag = parser$1.parseTag;
var parseAttr = parser$1.parseAttr;
var _ = util;
function isNull(obj) {
  return obj === void 0 || obj === null;
}
function getAttrs(html) {
  var i = _.spaceIndex(html);
  if (i === -1) {
    return {
      html: "",
      closing: html[html.length - 2] === "/"
    };
  }
  html = _.trim(html.slice(i + 1, -1));
  var isClosing2 = html[html.length - 1] === "/";
  if (isClosing2)
    html = _.trim(html.slice(0, -1));
  return {
    html,
    closing: isClosing2
  };
}
function shallowCopyObject(obj) {
  var ret = {};
  for (var i in obj) {
    ret[i] = obj[i];
  }
  return ret;
}
function keysToLowerCase(obj) {
  var ret = {};
  for (var i in obj) {
    if (Array.isArray(obj[i])) {
      ret[i.toLowerCase()] = obj[i].map(function(item2) {
        return item2.toLowerCase();
      });
    } else {
      ret[i.toLowerCase()] = obj[i];
    }
  }
  return ret;
}
function FilterXSS(options2) {
  options2 = shallowCopyObject(options2 || {});
  if (options2.stripIgnoreTag) {
    if (options2.onIgnoreTag) {
      console.error(
        'Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'
      );
    }
    options2.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
  }
  if (options2.whiteList || options2.allowList) {
    options2.whiteList = keysToLowerCase(options2.whiteList || options2.allowList);
  } else {
    options2.whiteList = DEFAULT.whiteList;
  }
  options2.onTag = options2.onTag || DEFAULT.onTag;
  options2.onTagAttr = options2.onTagAttr || DEFAULT.onTagAttr;
  options2.onIgnoreTag = options2.onIgnoreTag || DEFAULT.onIgnoreTag;
  options2.onIgnoreTagAttr = options2.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
  options2.safeAttrValue = options2.safeAttrValue || DEFAULT.safeAttrValue;
  options2.escapeHtml = options2.escapeHtml || DEFAULT.escapeHtml;
  this.options = options2;
  if (options2.css === false) {
    this.cssFilter = false;
  } else {
    options2.css = options2.css || {};
    this.cssFilter = new FilterCSS(options2.css);
  }
}
FilterXSS.prototype.process = function(html) {
  html = html || "";
  html = html.toString();
  if (!html)
    return "";
  var me = this;
  var options2 = me.options;
  var whiteList = options2.whiteList;
  var onTag2 = options2.onTag;
  var onIgnoreTag2 = options2.onIgnoreTag;
  var onTagAttr2 = options2.onTagAttr;
  var onIgnoreTagAttr2 = options2.onIgnoreTagAttr;
  var safeAttrValue2 = options2.safeAttrValue;
  var escapeHtml2 = options2.escapeHtml;
  var cssFilter = me.cssFilter;
  if (options2.stripBlankChar) {
    html = DEFAULT.stripBlankChar(html);
  }
  if (!options2.allowCommentTag) {
    html = DEFAULT.stripCommentTag(html);
  }
  var stripIgnoreTagBody = false;
  if (options2.stripIgnoreTagBody) {
    stripIgnoreTagBody = DEFAULT.StripTagBody(
      options2.stripIgnoreTagBody,
      onIgnoreTag2
    );
    onIgnoreTag2 = stripIgnoreTagBody.onIgnoreTag;
  }
  var retHtml = parseTag(
    html,
    function(sourcePosition, position, tag2, html2, isClosing2) {
      var info2 = {
        sourcePosition,
        position,
        isClosing: isClosing2,
        isWhite: Object.prototype.hasOwnProperty.call(whiteList, tag2)
      };
      var ret = onTag2(tag2, html2, info2);
      if (!isNull(ret))
        return ret;
      if (info2.isWhite) {
        if (info2.isClosing) {
          return "</" + tag2 + ">";
        }
        var attrs = getAttrs(html2);
        var whiteAttrList = whiteList[tag2];
        var attrsHtml = parseAttr(attrs.html, function(name, value) {
          var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
          var ret2 = onTagAttr2(tag2, name, value, isWhiteAttr);
          if (!isNull(ret2))
            return ret2;
          if (isWhiteAttr) {
            value = safeAttrValue2(tag2, name, value, cssFilter);
            if (value) {
              return name + '="' + value + '"';
            } else {
              return name;
            }
          } else {
            ret2 = onIgnoreTagAttr2(tag2, name, value, isWhiteAttr);
            if (!isNull(ret2))
              return ret2;
            return;
          }
        });
        html2 = "<" + tag2;
        if (attrsHtml)
          html2 += " " + attrsHtml;
        if (attrs.closing)
          html2 += " /";
        html2 += ">";
        return html2;
      } else {
        ret = onIgnoreTag2(tag2, html2, info2);
        if (!isNull(ret))
          return ret;
        return escapeHtml2(html2);
      }
    },
    escapeHtml2
  );
  if (stripIgnoreTagBody) {
    retHtml = stripIgnoreTagBody.remove(retHtml);
  }
  return retHtml;
};
var xss$1 = FilterXSS;
(function(module, exports) {
  var DEFAULT2 = _default$2;
  var parser2 = parser$2;
  var FilterXSS2 = xss$1;
  function filterXSS(html, options2) {
    var xss2 = new FilterXSS2(options2);
    return xss2.process(html);
  }
  exports = module.exports = filterXSS;
  exports.filterXSS = filterXSS;
  exports.FilterXSS = FilterXSS2;
  (function() {
    for (var i in DEFAULT2) {
      exports[i] = DEFAULT2[i];
    }
    for (var j in parser2) {
      exports[j] = parser2[j];
    }
  })();
  if (typeof window !== "undefined") {
    window.filterXSS = module.exports;
  }
  function isWorkerEnv() {
    return typeof self !== "undefined" && typeof DedicatedWorkerGlobalScope !== "undefined" && self instanceof DedicatedWorkerGlobalScope;
  }
  if (isWorkerEnv()) {
    self.filterXSS = module.exports;
  }
})(lib$7, lib$7.exports);
var xss = lib$7.exports;
const escapeMarkdown = (html) => {
  if (!html) {
    return "";
  }
  const escaped = html.replace(/</g, "&lt;").replace(/>/g, "&gt;");
  const withQuotes = escaped.replace(/^((\s)*(&gt;)+)+\s*/gm, (matches) => {
    return matches.replace(/&gt;/g, ">");
  });
  return withQuotes;
};
const DEFAULT_OPTIONS_MARKDOWN = {
  html: true,
  linkify: true,
  typographer: true,
  breaks: true
};
const DEFAULT_OPTIONS_LINK_ATTRIBUTES = {
  attrs: {
    target: "_blank",
    rel: "noopener"
  }
};
const DEFAULT_OPTIONS_TASKLISTS = {
  label: true,
  labelAfter: true
};
var _sfc_main$g = Vue.extend({
  components: {
    N8nLoading
  },
  name: "n8n-markdown",
  props: {
    content: {
      type: String
    },
    withMultiBreaks: {
      type: Boolean
    },
    images: {
      type: Array
    },
    loading: {
      type: Boolean
    },
    loadingBlocks: {
      type: Number,
      default: 2
    },
    loadingRows: {
      type: Number,
      default: () => {
        return 3;
      }
    },
    theme: {
      type: String,
      default: "markdown"
    },
    options: {
      type: Object,
      default() {
        return {
          markdown: DEFAULT_OPTIONS_MARKDOWN,
          linkAttributes: DEFAULT_OPTIONS_LINK_ATTRIBUTES,
          tasklists: DEFAULT_OPTIONS_TASKLISTS
        };
      }
    }
  },
  computed: {
    htmlContent() {
      if (!this.content) {
        return "";
      }
      const imageUrls = {};
      if (this.images) {
        this.images.forEach((image3) => {
          if (!image3) {
            return;
          }
          imageUrls[image3.id] = image3.url;
        });
      }
      const fileIdRegex = new RegExp("fileId:([0-9]+)");
      let contentToRender = this.content;
      if (this.withMultiBreaks) {
        contentToRender = contentToRender.replaceAll("\n\n", "\n&nbsp;\n");
      }
      const html = this.md.render(escapeMarkdown(contentToRender));
      const safeHtml = xss(html, {
        onTagAttr: (tag2, name, value, isWhiteAttr) => {
          if (tag2 === "img" && name === "src") {
            if (value.match(fileIdRegex)) {
              const id2 = value.split("fileId:")[1];
              return `src=${lib$7.exports.friendlyAttrValue(imageUrls[id2])}` || "";
            }
            const isImageFile = value.split("#")[0].match(/\.(jpeg|jpg|gif|png|webp)$/) !== null;
            const isStaticImageFile = isImageFile && value.startsWith("/static/");
            if (!value.startsWith("https://") && !isStaticImageFile) {
              return "";
            }
          }
        },
        onTag(tag2, code3, options2) {
          if (tag2 === "img" && code3.includes(`alt="workflow-screenshot"`)) {
            return "";
          }
        }
      });
      return safeHtml;
    }
  },
  data() {
    return {
      md: new markdownIt(this.options.markdown).use(markdownItLinkAttributes, this.options.linkAttributes).use(markdownItEmoji).use(markdownItTaskLists, this.options.tasklists)
    };
  },
  methods: {
    onClick(event) {
      let clickedLink = null;
      if (event.target instanceof HTMLAnchorElement) {
        clickedLink = event.target;
      }
      if (event.target instanceof HTMLElement && event.target.matches("a *")) {
        const parentLink = event.target.closest("a");
        if (parentLink) {
          clickedLink = parentLink;
        }
      }
      this.$emit("markdown-click", clickedLink, event);
    }
  }
});
const markdown = "_markdown_1td0j_1";
const label$1 = "_label_1td0j_44";
const sticky$1 = "_sticky_1td0j_60";
const spacer = "_spacer_1td0j_111";
var style0$g = {
  markdown,
  label: label$1,
  sticky: sticky$1,
  spacer
};
var _sfc_render$h = function render31() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { staticClass: "n8n-markdown" }, [!_vm.loading ? _c("div", { ref: "editor", staticClass: "ph-no-capture", class: _vm.$style[_vm.theme], domProps: { "innerHTML": _vm._s(_vm.htmlContent) }, on: { "click": _vm.onClick } }) : _c("div", { class: _vm.$style.markdown }, _vm._l(_vm.loadingBlocks, function(block3, index2) {
    return _c("div", { key: index2 }, [_c("n8n-loading", { attrs: { "loading": _vm.loading, "rows": _vm.loadingRows, "animated": "", "variant": "p" } }), _c("div", { class: _vm.$style.spacer })], 1);
  }), 0)]);
};
var _sfc_staticRenderFns$h = [];
const __cssModules$g = {
  "$style": style0$g
};
function _sfc_injectStyles$g(ctx2) {
  for (var key2 in __cssModules$g) {
    this[key2] = __cssModules$g[key2];
  }
}
var __component__$h = /* @__PURE__ */ normalizeComponent(
  _sfc_main$g,
  _sfc_render$h,
  _sfc_staticRenderFns$h,
  false,
  _sfc_injectStyles$g,
  null,
  null,
  null
);
var N8nMarkdown = __component__$h.exports;
var menu = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 71);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    11: function(module2, exports) {
      module2.exports = migrating;
    },
    2: function(module2, exports) {
      module2.exports = dom;
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    71: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var migrating_ = __webpack_require__(11);
      var migrating_default = /* @__PURE__ */ __webpack_require__.n(migrating_);
      var aria2 = aria2 || {};
      aria2.Utils = aria2.Utils || {};
      aria2.Utils.focusFirstDescendant = function(element) {
        for (var i = 0; i < element.childNodes.length; i++) {
          var child2 = element.childNodes[i];
          if (aria2.Utils.attemptFocus(child2) || aria2.Utils.focusFirstDescendant(child2)) {
            return true;
          }
        }
        return false;
      };
      aria2.Utils.focusLastDescendant = function(element) {
        for (var i = element.childNodes.length - 1; i >= 0; i--) {
          var child2 = element.childNodes[i];
          if (aria2.Utils.attemptFocus(child2) || aria2.Utils.focusLastDescendant(child2)) {
            return true;
          }
        }
        return false;
      };
      aria2.Utils.attemptFocus = function(element) {
        if (!aria2.Utils.isFocusable(element)) {
          return false;
        }
        aria2.Utils.IgnoreUtilFocusChanges = true;
        try {
          element.focus();
        } catch (e) {
        }
        aria2.Utils.IgnoreUtilFocusChanges = false;
        return document.activeElement === element;
      };
      aria2.Utils.isFocusable = function(element) {
        if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
          return true;
        }
        if (element.disabled) {
          return false;
        }
        switch (element.nodeName) {
          case "A":
            return !!element.href && element.rel !== "ignore";
          case "INPUT":
            return element.type !== "hidden" && element.type !== "file";
          case "BUTTON":
          case "SELECT":
          case "TEXTAREA":
            return true;
          default:
            return false;
        }
      };
      aria2.Utils.triggerEvent = function(elm, name) {
        var eventName = void 0;
        if (/^mouse|click/.test(name)) {
          eventName = "MouseEvents";
        } else if (/^key/.test(name)) {
          eventName = "KeyboardEvent";
        } else {
          eventName = "HTMLEvents";
        }
        var evt = document.createEvent(eventName);
        for (var _len = arguments.length, opts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          opts[_key - 2] = arguments[_key];
        }
        evt.initEvent.apply(evt, [name].concat(opts));
        elm.dispatchEvent ? elm.dispatchEvent(evt) : elm.fireEvent("on" + name, evt);
        return elm;
      };
      aria2.Utils.keys = {
        tab: 9,
        enter: 13,
        space: 32,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        esc: 27
      };
      var aria_utils = aria2.Utils;
      var SubMenu = function SubMenu2(parent, domNode) {
        this.domNode = domNode;
        this.parent = parent;
        this.subMenuItems = [];
        this.subIndex = 0;
        this.init();
      };
      SubMenu.prototype.init = function() {
        this.subMenuItems = this.domNode.querySelectorAll("li");
        this.addListeners();
      };
      SubMenu.prototype.gotoSubIndex = function(idx) {
        if (idx === this.subMenuItems.length) {
          idx = 0;
        } else if (idx < 0) {
          idx = this.subMenuItems.length - 1;
        }
        this.subMenuItems[idx].focus();
        this.subIndex = idx;
      };
      SubMenu.prototype.addListeners = function() {
        var _this = this;
        var keys = aria_utils.keys;
        var parentNode = this.parent.domNode;
        Array.prototype.forEach.call(this.subMenuItems, function(el2) {
          el2.addEventListener("keydown", function(event) {
            var prevDef = false;
            switch (event.keyCode) {
              case keys.down:
                _this.gotoSubIndex(_this.subIndex + 1);
                prevDef = true;
                break;
              case keys.up:
                _this.gotoSubIndex(_this.subIndex - 1);
                prevDef = true;
                break;
              case keys.tab:
                aria_utils.triggerEvent(parentNode, "mouseleave");
                break;
              case keys.enter:
              case keys.space:
                prevDef = true;
                event.currentTarget.click();
                break;
            }
            if (prevDef) {
              event.preventDefault();
              event.stopPropagation();
            }
            return false;
          });
        });
      };
      var aria_submenu = SubMenu;
      var MenuItem = function MenuItem2(domNode) {
        this.domNode = domNode;
        this.submenu = null;
        this.init();
      };
      MenuItem.prototype.init = function() {
        this.domNode.setAttribute("tabindex", "0");
        var menuChild = this.domNode.querySelector(".el-menu");
        if (menuChild) {
          this.submenu = new aria_submenu(this, menuChild);
        }
        this.addListeners();
      };
      MenuItem.prototype.addListeners = function() {
        var _this = this;
        var keys = aria_utils.keys;
        this.domNode.addEventListener("keydown", function(event) {
          var prevDef = false;
          switch (event.keyCode) {
            case keys.down:
              aria_utils.triggerEvent(event.currentTarget, "mouseenter");
              _this.submenu && _this.submenu.gotoSubIndex(0);
              prevDef = true;
              break;
            case keys.up:
              aria_utils.triggerEvent(event.currentTarget, "mouseenter");
              _this.submenu && _this.submenu.gotoSubIndex(_this.submenu.subMenuItems.length - 1);
              prevDef = true;
              break;
            case keys.tab:
              aria_utils.triggerEvent(event.currentTarget, "mouseleave");
              break;
            case keys.enter:
            case keys.space:
              prevDef = true;
              event.currentTarget.click();
              break;
          }
          if (prevDef) {
            event.preventDefault();
          }
        });
      };
      var aria_menuitem = MenuItem;
      var Menu = function Menu2(domNode) {
        this.domNode = domNode;
        this.init();
      };
      Menu.prototype.init = function() {
        var menuChildren = this.domNode.childNodes;
        [].filter.call(menuChildren, function(child2) {
          return child2.nodeType === 1;
        }).forEach(function(child2) {
          new aria_menuitem(child2);
        });
      };
      var aria_menubar = Menu;
      var dom_ = __webpack_require__(2);
      var menuvue_type_script_lang_js_ = {
        name: "ElMenu",
        render: function render50(h) {
          var component2 = h(
            "ul",
            {
              attrs: {
                role: "menubar"
              },
              key: +this.collapse,
              style: { backgroundColor: this.backgroundColor || "" },
              "class": {
                "el-menu--horizontal": this.mode === "horizontal",
                "el-menu--collapse": this.collapse,
                "el-menu": true
              }
            },
            [this.$slots.default]
          );
          if (this.collapseTransition) {
            return h("el-menu-collapse-transition", [component2]);
          } else {
            return component2;
          }
        },
        componentName: "ElMenu",
        mixins: [emitter_default.a, migrating_default.a],
        provide: function provide() {
          return {
            rootMenu: this
          };
        },
        components: {
          "el-menu-collapse-transition": {
            functional: true,
            render: function render50(createElement, context) {
              var data3 = {
                props: {
                  mode: "out-in"
                },
                on: {
                  beforeEnter: function beforeEnter(el2) {
                    el2.style.opacity = 0.2;
                  },
                  enter: function enter(el2) {
                    Object(dom_["addClass"])(el2, "el-opacity-transition");
                    el2.style.opacity = 1;
                  },
                  afterEnter: function afterEnter(el2) {
                    Object(dom_["removeClass"])(el2, "el-opacity-transition");
                    el2.style.opacity = "";
                  },
                  beforeLeave: function beforeLeave(el2) {
                    if (!el2.dataset)
                      el2.dataset = {};
                    if (Object(dom_["hasClass"])(el2, "el-menu--collapse")) {
                      Object(dom_["removeClass"])(el2, "el-menu--collapse");
                      el2.dataset.oldOverflow = el2.style.overflow;
                      el2.dataset.scrollWidth = el2.clientWidth;
                      Object(dom_["addClass"])(el2, "el-menu--collapse");
                    } else {
                      Object(dom_["addClass"])(el2, "el-menu--collapse");
                      el2.dataset.oldOverflow = el2.style.overflow;
                      el2.dataset.scrollWidth = el2.clientWidth;
                      Object(dom_["removeClass"])(el2, "el-menu--collapse");
                    }
                    el2.style.width = el2.scrollWidth + "px";
                    el2.style.overflow = "hidden";
                  },
                  leave: function leave(el2) {
                    Object(dom_["addClass"])(el2, "horizontal-collapse-transition");
                    el2.style.width = el2.dataset.scrollWidth + "px";
                  }
                }
              };
              return createElement("transition", data3, context.children);
            }
          }
        },
        props: {
          mode: {
            type: String,
            default: "vertical"
          },
          defaultActive: {
            type: String,
            default: ""
          },
          defaultOpeneds: Array,
          uniqueOpened: Boolean,
          router: Boolean,
          menuTrigger: {
            type: String,
            default: "hover"
          },
          collapse: Boolean,
          backgroundColor: String,
          textColor: String,
          activeTextColor: String,
          collapseTransition: {
            type: Boolean,
            default: true
          }
        },
        data: function data3() {
          return {
            activeIndex: this.defaultActive,
            openedMenus: this.defaultOpeneds && !this.collapse ? this.defaultOpeneds.slice(0) : [],
            items: {},
            submenus: {}
          };
        },
        computed: {
          hoverBackground: function hoverBackground() {
            return this.backgroundColor ? this.mixColor(this.backgroundColor, 0.2) : "";
          },
          isMenuPopup: function isMenuPopup() {
            return this.mode === "horizontal" || this.mode === "vertical" && this.collapse;
          }
        },
        watch: {
          defaultActive: function defaultActive(value) {
            if (!this.items[value]) {
              this.activeIndex = null;
            }
            this.updateActiveIndex(value);
          },
          defaultOpeneds: function defaultOpeneds(value) {
            if (!this.collapse) {
              this.openedMenus = value;
            }
          },
          collapse: function collapse(value) {
            if (value)
              this.openedMenus = [];
            this.broadcast("ElSubmenu", "toggle-collapse", value);
          }
        },
        methods: {
          updateActiveIndex: function updateActiveIndex(val) {
            var item2 = this.items[val] || this.items[this.activeIndex] || this.items[this.defaultActive];
            if (item2) {
              this.activeIndex = item2.index;
              this.initOpenedMenu();
            } else {
              this.activeIndex = null;
            }
          },
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "theme": "theme is removed."
              }
            };
          },
          getColorChannels: function getColorChannels(color) {
            color = color.replace("#", "");
            if (/^[0-9a-fA-F]{3}$/.test(color)) {
              color = color.split("");
              for (var i = 2; i >= 0; i--) {
                color.splice(i, 0, color[i]);
              }
              color = color.join("");
            }
            if (/^[0-9a-fA-F]{6}$/.test(color)) {
              return {
                red: parseInt(color.slice(0, 2), 16),
                green: parseInt(color.slice(2, 4), 16),
                blue: parseInt(color.slice(4, 6), 16)
              };
            } else {
              return {
                red: 255,
                green: 255,
                blue: 255
              };
            }
          },
          mixColor: function mixColor(color, percent) {
            var _getColorChannels = this.getColorChannels(color), red = _getColorChannels.red, green = _getColorChannels.green, blue = _getColorChannels.blue;
            if (percent > 0) {
              red *= 1 - percent;
              green *= 1 - percent;
              blue *= 1 - percent;
            } else {
              red += (255 - red) * percent;
              green += (255 - green) * percent;
              blue += (255 - blue) * percent;
            }
            return "rgb(" + Math.round(red) + ", " + Math.round(green) + ", " + Math.round(blue) + ")";
          },
          addItem: function addItem(item2) {
            this.$set(this.items, item2.index, item2);
          },
          removeItem: function removeItem(item2) {
            delete this.items[item2.index];
          },
          addSubmenu: function addSubmenu(item2) {
            this.$set(this.submenus, item2.index, item2);
          },
          removeSubmenu: function removeSubmenu(item2) {
            delete this.submenus[item2.index];
          },
          openMenu: function openMenu(index2, indexPath) {
            var openedMenus = this.openedMenus;
            if (openedMenus.indexOf(index2) !== -1)
              return;
            if (this.uniqueOpened) {
              this.openedMenus = openedMenus.filter(function(index3) {
                return indexPath.indexOf(index3) !== -1;
              });
            }
            this.openedMenus.push(index2);
          },
          closeMenu: function closeMenu(index2) {
            var i = this.openedMenus.indexOf(index2);
            if (i !== -1) {
              this.openedMenus.splice(i, 1);
            }
          },
          handleSubmenuClick: function handleSubmenuClick(submenu2) {
            var index2 = submenu2.index, indexPath = submenu2.indexPath;
            var isOpened = this.openedMenus.indexOf(index2) !== -1;
            if (isOpened) {
              this.closeMenu(index2);
              this.$emit("close", index2, indexPath);
            } else {
              this.openMenu(index2, indexPath);
              this.$emit("open", index2, indexPath);
            }
          },
          handleItemClick: function handleItemClick(item2) {
            var _this = this;
            var index2 = item2.index, indexPath = item2.indexPath;
            var oldActiveIndex = this.activeIndex;
            var hasIndex = item2.index !== null;
            if (hasIndex) {
              this.activeIndex = item2.index;
            }
            this.$emit("select", index2, indexPath, item2);
            if (this.mode === "horizontal" || this.collapse) {
              this.openedMenus = [];
            }
            if (this.router && hasIndex) {
              this.routeToItem(item2, function(error2) {
                _this.activeIndex = oldActiveIndex;
                if (error2) {
                  if (error2.name === "NavigationDuplicated")
                    return;
                  console.error(error2);
                }
              });
            }
          },
          initOpenedMenu: function initOpenedMenu() {
            var _this2 = this;
            var index2 = this.activeIndex;
            var activeItem = this.items[index2];
            if (!activeItem || this.mode === "horizontal" || this.collapse)
              return;
            var indexPath = activeItem.indexPath;
            indexPath.forEach(function(index3) {
              var submenu2 = _this2.submenus[index3];
              submenu2 && _this2.openMenu(index3, submenu2.indexPath);
            });
          },
          routeToItem: function routeToItem(item2, onError) {
            var route = item2.route || item2.index;
            try {
              this.$router.push(route, function() {
              }, onError);
            } catch (e) {
              console.error(e);
            }
          },
          open: function open2(index2) {
            var _this3 = this;
            var indexPath = this.submenus[index2.toString()].indexPath;
            indexPath.forEach(function(i) {
              return _this3.openMenu(i, indexPath);
            });
          },
          close: function close2(index2) {
            this.closeMenu(index2);
          }
        },
        mounted: function mounted2() {
          this.initOpenedMenu();
          this.$on("item-click", this.handleItemClick);
          this.$on("submenu-click", this.handleSubmenuClick);
          if (this.mode === "horizontal") {
            new aria_menubar(this.$el);
          }
          this.$watch("items", this.updateActiveIndex);
        }
      };
      var src_menuvue_type_script_lang_js_ = menuvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var menu_render, staticRenderFns;
      var component = Object(componentNormalizer["a"])(
        src_menuvue_type_script_lang_js_,
        menu_render,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/menu/src/menu.vue";
      var menu2 = component.exports;
      menu2.install = function(Vue2) {
        Vue2.component(menu2.name, menu2);
      };
      __webpack_exports__["default"] = menu2;
    }
  });
})(menu);
var ElMenu = /* @__PURE__ */ getDefaultExportFromCjs(menu.exports);
var submenu$1 = { exports: {} };
var collapseTransition = {};
collapseTransition.__esModule = true;
var _dom = dom;
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var Transition = function() {
  function Transition2() {
    _classCallCheck(this, Transition2);
  }
  Transition2.prototype.beforeEnter = function beforeEnter(el2) {
    (0, _dom.addClass)(el2, "collapse-transition");
    if (!el2.dataset)
      el2.dataset = {};
    el2.dataset.oldPaddingTop = el2.style.paddingTop;
    el2.dataset.oldPaddingBottom = el2.style.paddingBottom;
    el2.style.height = "0";
    el2.style.paddingTop = 0;
    el2.style.paddingBottom = 0;
  };
  Transition2.prototype.enter = function enter(el2) {
    el2.dataset.oldOverflow = el2.style.overflow;
    if (el2.scrollHeight !== 0) {
      el2.style.height = el2.scrollHeight + "px";
      el2.style.paddingTop = el2.dataset.oldPaddingTop;
      el2.style.paddingBottom = el2.dataset.oldPaddingBottom;
    } else {
      el2.style.height = "";
      el2.style.paddingTop = el2.dataset.oldPaddingTop;
      el2.style.paddingBottom = el2.dataset.oldPaddingBottom;
    }
    el2.style.overflow = "hidden";
  };
  Transition2.prototype.afterEnter = function afterEnter(el2) {
    (0, _dom.removeClass)(el2, "collapse-transition");
    el2.style.height = "";
    el2.style.overflow = el2.dataset.oldOverflow;
  };
  Transition2.prototype.beforeLeave = function beforeLeave(el2) {
    if (!el2.dataset)
      el2.dataset = {};
    el2.dataset.oldPaddingTop = el2.style.paddingTop;
    el2.dataset.oldPaddingBottom = el2.style.paddingBottom;
    el2.dataset.oldOverflow = el2.style.overflow;
    el2.style.height = el2.scrollHeight + "px";
    el2.style.overflow = "hidden";
  };
  Transition2.prototype.leave = function leave(el2) {
    if (el2.scrollHeight !== 0) {
      (0, _dom.addClass)(el2, "collapse-transition");
      el2.style.height = 0;
      el2.style.paddingTop = 0;
      el2.style.paddingBottom = 0;
    }
  };
  Transition2.prototype.afterLeave = function afterLeave2(el2) {
    (0, _dom.removeClass)(el2, "collapse-transition");
    el2.style.height = "";
    el2.style.overflow = el2.dataset.oldOverflow;
    el2.style.paddingTop = el2.dataset.oldPaddingTop;
    el2.style.paddingBottom = el2.dataset.oldPaddingBottom;
  };
  return Transition2;
}();
var _default2 = collapseTransition.default = {
  name: "ElCollapseTransition",
  functional: true,
  render: function render32(h, _ref2) {
    var children = _ref2.children;
    var data3 = {
      on: new Transition()
    };
    return h("transition", data3, children);
  }
};
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 129);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    129: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var collapse_transition_ = __webpack_require__(28);
      var collapse_transition_default = /* @__PURE__ */ __webpack_require__.n(collapse_transition_);
      var menu_mixin = __webpack_require__(36);
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var poperMixins = {
        props: {
          transformOrigin: {
            type: [Boolean, String],
            default: false
          },
          offset: vue_popper_default.a.props.offset,
          boundariesPadding: vue_popper_default.a.props.boundariesPadding,
          popperOptions: vue_popper_default.a.props.popperOptions
        },
        data: vue_popper_default.a.data,
        methods: vue_popper_default.a.methods,
        beforeDestroy: vue_popper_default.a.beforeDestroy,
        deactivated: vue_popper_default.a.deactivated
      };
      var submenuvue_type_script_lang_js_ = {
        name: "ElSubmenu",
        componentName: "ElSubmenu",
        mixins: [menu_mixin["a"], emitter_default.a, poperMixins],
        components: { ElCollapseTransition: collapse_transition_default.a },
        props: {
          index: {
            type: String,
            required: true
          },
          showTimeout: {
            type: Number,
            default: 300
          },
          hideTimeout: {
            type: Number,
            default: 300
          },
          popperClass: String,
          disabled: Boolean,
          popperAppendToBody: {
            type: Boolean,
            default: void 0
          }
        },
        data: function data3() {
          return {
            popperJS: null,
            timeout: null,
            items: {},
            submenus: {},
            mouseInChild: false
          };
        },
        watch: {
          opened: function opened(val) {
            var _this = this;
            if (this.isMenuPopup) {
              this.$nextTick(function(_2) {
                _this.updatePopper();
              });
            }
          }
        },
        computed: {
          appendToBody: function appendToBody() {
            return this.popperAppendToBody === void 0 ? this.isFirstLevel : this.popperAppendToBody;
          },
          menuTransitionName: function menuTransitionName() {
            return this.rootMenu.collapse ? "el-zoom-in-left" : "el-zoom-in-top";
          },
          opened: function opened() {
            return this.rootMenu.openedMenus.indexOf(this.index) > -1;
          },
          active: function active2() {
            var isActive = false;
            var submenus = this.submenus;
            var items = this.items;
            Object.keys(items).forEach(function(index2) {
              if (items[index2].active) {
                isActive = true;
              }
            });
            Object.keys(submenus).forEach(function(index2) {
              if (submenus[index2].active) {
                isActive = true;
              }
            });
            return isActive;
          },
          hoverBackground: function hoverBackground() {
            return this.rootMenu.hoverBackground;
          },
          backgroundColor: function backgroundColor() {
            return this.rootMenu.backgroundColor || "";
          },
          activeTextColor: function activeTextColor() {
            return this.rootMenu.activeTextColor || "";
          },
          textColor: function textColor() {
            return this.rootMenu.textColor || "";
          },
          mode: function mode() {
            return this.rootMenu.mode;
          },
          isMenuPopup: function isMenuPopup() {
            return this.rootMenu.isMenuPopup;
          },
          titleStyle: function titleStyle() {
            if (this.mode !== "horizontal") {
              return {
                color: this.textColor
              };
            }
            return {
              borderBottomColor: this.active ? this.rootMenu.activeTextColor ? this.activeTextColor : "" : "transparent",
              color: this.active ? this.activeTextColor : this.textColor
            };
          },
          isFirstLevel: function isFirstLevel() {
            var isFirstLevel2 = true;
            var parent = this.$parent;
            while (parent && parent !== this.rootMenu) {
              if (["ElSubmenu", "ElMenuItemGroup"].indexOf(parent.$options.componentName) > -1) {
                isFirstLevel2 = false;
                break;
              } else {
                parent = parent.$parent;
              }
            }
            return isFirstLevel2;
          }
        },
        methods: {
          handleCollapseToggle: function handleCollapseToggle(value) {
            if (value) {
              this.initPopper();
            } else {
              this.doDestroy();
            }
          },
          addItem: function addItem(item2) {
            this.$set(this.items, item2.index, item2);
          },
          removeItem: function removeItem(item2) {
            delete this.items[item2.index];
          },
          addSubmenu: function addSubmenu(item2) {
            this.$set(this.submenus, item2.index, item2);
          },
          removeSubmenu: function removeSubmenu(item2) {
            delete this.submenus[item2.index];
          },
          handleClick: function handleClick() {
            var rootMenu = this.rootMenu, disabled2 = this.disabled;
            if (rootMenu.menuTrigger === "hover" && rootMenu.mode === "horizontal" || rootMenu.collapse && rootMenu.mode === "vertical" || disabled2) {
              return;
            }
            this.dispatch("ElMenu", "submenu-click", this);
          },
          handleMouseenter: function handleMouseenter(event) {
            var _this2 = this;
            var showTimeout = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.showTimeout;
            if (!("ActiveXObject" in window) && event.type === "focus" && !event.relatedTarget) {
              return;
            }
            var rootMenu = this.rootMenu, disabled2 = this.disabled;
            if (rootMenu.menuTrigger === "click" && rootMenu.mode === "horizontal" || !rootMenu.collapse && rootMenu.mode === "vertical" || disabled2) {
              return;
            }
            this.dispatch("ElSubmenu", "mouse-enter-child");
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this2.rootMenu.openMenu(_this2.index, _this2.indexPath);
            }, showTimeout);
            if (this.appendToBody) {
              this.$parent.$el.dispatchEvent(new MouseEvent("mouseenter"));
            }
          },
          handleMouseleave: function handleMouseleave() {
            var _this3 = this;
            var deepDispatch = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            var rootMenu = this.rootMenu;
            if (rootMenu.menuTrigger === "click" && rootMenu.mode === "horizontal" || !rootMenu.collapse && rootMenu.mode === "vertical") {
              return;
            }
            this.dispatch("ElSubmenu", "mouse-leave-child");
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              !_this3.mouseInChild && _this3.rootMenu.closeMenu(_this3.index);
            }, this.hideTimeout);
            if (this.appendToBody && deepDispatch) {
              if (this.$parent.$options.name === "ElSubmenu") {
                this.$parent.handleMouseleave(true);
              }
            }
          },
          handleTitleMouseenter: function handleTitleMouseenter() {
            if (this.mode === "horizontal" && !this.rootMenu.backgroundColor)
              return;
            var title2 = this.$refs["submenu-title"];
            title2 && (title2.style.backgroundColor = this.rootMenu.hoverBackground);
          },
          handleTitleMouseleave: function handleTitleMouseleave() {
            if (this.mode === "horizontal" && !this.rootMenu.backgroundColor)
              return;
            var title2 = this.$refs["submenu-title"];
            title2 && (title2.style.backgroundColor = this.rootMenu.backgroundColor || "");
          },
          updatePlacement: function updatePlacement() {
            this.currentPlacement = this.mode === "horizontal" && this.isFirstLevel ? "bottom-start" : "right-start";
          },
          initPopper: function initPopper() {
            this.referenceElm = this.$el;
            this.popperElm = this.$refs.menu;
            this.updatePlacement();
          }
        },
        created: function created() {
          var _this4 = this;
          this.$on("toggle-collapse", this.handleCollapseToggle);
          this.$on("mouse-enter-child", function() {
            _this4.mouseInChild = true;
            clearTimeout(_this4.timeout);
          });
          this.$on("mouse-leave-child", function() {
            _this4.mouseInChild = false;
            clearTimeout(_this4.timeout);
          });
        },
        mounted: function mounted2() {
          this.parentMenu.addSubmenu(this);
          this.rootMenu.addSubmenu(this);
          this.initPopper();
        },
        beforeDestroy: function beforeDestroy3() {
          this.parentMenu.removeSubmenu(this);
          this.rootMenu.removeSubmenu(this);
        },
        render: function render51(h) {
          var _this5 = this;
          var active2 = this.active, opened = this.opened, paddingStyle = this.paddingStyle, titleStyle = this.titleStyle, backgroundColor = this.backgroundColor, rootMenu = this.rootMenu, currentPlacement = this.currentPlacement, menuTransitionName = this.menuTransitionName, mode = this.mode, disabled2 = this.disabled, popperClass = this.popperClass, $slots = this.$slots, isFirstLevel = this.isFirstLevel;
          var popupMenu = h(
            "transition",
            {
              attrs: { name: menuTransitionName }
            },
            [h(
              "div",
              {
                ref: "menu",
                directives: [{
                  name: "show",
                  value: opened
                }],
                "class": ["el-menu--" + mode, popperClass],
                on: {
                  "mouseenter": function mouseenter($event) {
                    return _this5.handleMouseenter($event, 100);
                  },
                  "mouseleave": function mouseleave() {
                    return _this5.handleMouseleave(true);
                  },
                  "focus": function focus2($event) {
                    return _this5.handleMouseenter($event, 100);
                  }
                }
              },
              [h(
                "ul",
                {
                  attrs: {
                    role: "menu"
                  },
                  "class": ["el-menu el-menu--popup", "el-menu--popup-" + currentPlacement],
                  style: { backgroundColor: rootMenu.backgroundColor || "" }
                },
                [$slots.default]
              )]
            )]
          );
          var inlineMenu = h("el-collapse-transition", [h(
            "ul",
            {
              attrs: {
                role: "menu"
              },
              "class": "el-menu el-menu--inline",
              directives: [{
                name: "show",
                value: opened
              }],
              style: { backgroundColor: rootMenu.backgroundColor || "" }
            },
            [$slots.default]
          )]);
          var submenuTitleIcon = rootMenu.mode === "horizontal" && isFirstLevel || rootMenu.mode === "vertical" && !rootMenu.collapse ? "el-icon-arrow-down" : "el-icon-arrow-right";
          return h(
            "li",
            {
              "class": {
                "el-submenu": true,
                "is-active": active2,
                "is-opened": opened,
                "is-disabled": disabled2
              },
              attrs: {
                role: "menuitem",
                "aria-haspopup": "true",
                "aria-expanded": opened
              },
              on: {
                "mouseenter": this.handleMouseenter,
                "mouseleave": function mouseleave() {
                  return _this5.handleMouseleave(false);
                },
                "focus": this.handleMouseenter
              }
            },
            [h(
              "div",
              {
                "class": "el-submenu__title",
                ref: "submenu-title",
                on: {
                  "click": this.handleClick,
                  "mouseenter": this.handleTitleMouseenter,
                  "mouseleave": this.handleTitleMouseleave
                },
                style: [paddingStyle, titleStyle, { backgroundColor }]
              },
              [$slots.title, h("i", { "class": ["el-submenu__icon-arrow", submenuTitleIcon] })]
            ), this.isMenuPopup ? popupMenu : inlineMenu]
          );
        }
      };
      var src_submenuvue_type_script_lang_js_ = submenuvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var render50, staticRenderFns;
      var component = Object(componentNormalizer["a"])(
        src_submenuvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/menu/src/submenu.vue";
      var submenu2 = component.exports;
      submenu2.install = function(Vue2) {
        Vue2.component(submenu2.name, submenu2);
      };
      __webpack_exports__["default"] = submenu2;
    },
    28: function(module2, exports) {
      module2.exports = collapseTransition;
    },
    36: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_exports__["a"] = {
        inject: ["rootMenu"],
        computed: {
          indexPath: function indexPath() {
            var path = [this.index];
            var parent = this.$parent;
            while (parent.$options.componentName !== "ElMenu") {
              if (parent.index) {
                path.unshift(parent.index);
              }
              parent = parent.$parent;
            }
            return path;
          },
          parentMenu: function parentMenu() {
            var parent = this.$parent;
            while (parent && ["ElMenu", "ElSubmenu"].indexOf(parent.$options.componentName) === -1) {
              parent = parent.$parent;
            }
            return parent;
          },
          paddingStyle: function paddingStyle() {
            if (this.rootMenu.mode !== "vertical")
              return {};
            var padding = 20;
            var parent = this.$parent;
            if (this.rootMenu.collapse) {
              padding = 20;
            } else {
              while (parent && parent.$options.componentName !== "ElMenu") {
                if (parent.$options.componentName === "ElSubmenu") {
                  padding += 20;
                }
                parent = parent.$parent;
              }
            }
            return { paddingLeft: padding + "px" };
          }
        }
      };
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    5: function(module2, exports) {
      module2.exports = vuePopper;
    }
  });
})(submenu$1);
var Submenu = /* @__PURE__ */ getDefaultExportFromCjs(submenu$1.exports);
var menuItem$1 = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 84);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    29: function(module2, exports) {
      module2.exports = tooltip$1.exports;
    },
    36: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_exports__["a"] = {
        inject: ["rootMenu"],
        computed: {
          indexPath: function indexPath() {
            var path = [this.index];
            var parent = this.$parent;
            while (parent.$options.componentName !== "ElMenu") {
              if (parent.index) {
                path.unshift(parent.index);
              }
              parent = parent.$parent;
            }
            return path;
          },
          parentMenu: function parentMenu() {
            var parent = this.$parent;
            while (parent && ["ElMenu", "ElSubmenu"].indexOf(parent.$options.componentName) === -1) {
              parent = parent.$parent;
            }
            return parent;
          },
          paddingStyle: function paddingStyle() {
            if (this.rootMenu.mode !== "vertical")
              return {};
            var padding = 20;
            var parent = this.$parent;
            if (this.rootMenu.collapse) {
              padding = 20;
            } else {
              while (parent && parent.$options.componentName !== "ElMenu") {
                if (parent.$options.componentName === "ElSubmenu") {
                  padding += 20;
                }
                parent = parent.$parent;
              }
            }
            return { paddingLeft: padding + "px" };
          }
        }
      };
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    84: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "li",
          {
            staticClass: "el-menu-item",
            class: {
              "is-active": _vm.active,
              "is-disabled": _vm.disabled
            },
            style: [
              _vm.paddingStyle,
              _vm.itemStyle,
              { backgroundColor: _vm.backgroundColor }
            ],
            attrs: { role: "menuitem", tabindex: "-1" },
            on: {
              click: _vm.handleClick,
              mouseenter: _vm.onMouseEnter,
              focus: _vm.onMouseEnter,
              blur: _vm.onMouseLeave,
              mouseleave: _vm.onMouseLeave
            }
          },
          [
            _vm.parentMenu.$options.componentName === "ElMenu" && _vm.rootMenu.collapse && _vm.$slots.title ? _c("el-tooltip", { attrs: { effect: "dark", placement: "right" } }, [
              _c(
                "div",
                { attrs: { slot: "content" }, slot: "content" },
                [_vm._t("title")],
                2
              ),
              _c(
                "div",
                {
                  staticStyle: {
                    position: "absolute",
                    left: "0",
                    top: "0",
                    height: "100%",
                    width: "100%",
                    display: "inline-block",
                    "box-sizing": "border-box",
                    padding: "0 20px"
                  }
                },
                [_vm._t("default")],
                2
              )
            ]) : [_vm._t("default"), _vm._t("title")]
          ],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var menu_mixin = __webpack_require__(36);
      var tooltip_ = __webpack_require__(29);
      var tooltip_default = /* @__PURE__ */ __webpack_require__.n(tooltip_);
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var menu_itemvue_type_script_lang_js_ = {
        name: "ElMenuItem",
        componentName: "ElMenuItem",
        mixins: [menu_mixin["a"], emitter_default.a],
        components: { ElTooltip: tooltip_default.a },
        props: {
          index: {
            default: null,
            validator: function validator5(val) {
              return typeof val === "string" || val === null;
            }
          },
          route: [String, Object],
          disabled: Boolean
        },
        computed: {
          active: function active2() {
            return this.index === this.rootMenu.activeIndex;
          },
          hoverBackground: function hoverBackground() {
            return this.rootMenu.hoverBackground;
          },
          backgroundColor: function backgroundColor() {
            return this.rootMenu.backgroundColor || "";
          },
          activeTextColor: function activeTextColor() {
            return this.rootMenu.activeTextColor || "";
          },
          textColor: function textColor() {
            return this.rootMenu.textColor || "";
          },
          mode: function mode() {
            return this.rootMenu.mode;
          },
          itemStyle: function itemStyle() {
            var style = {
              color: this.active ? this.activeTextColor : this.textColor
            };
            if (this.mode === "horizontal" && !this.isNested) {
              style.borderBottomColor = this.active ? this.rootMenu.activeTextColor ? this.activeTextColor : "" : "transparent";
            }
            return style;
          },
          isNested: function isNested() {
            return this.parentMenu !== this.rootMenu;
          }
        },
        methods: {
          onMouseEnter: function onMouseEnter() {
            if (this.mode === "horizontal" && !this.rootMenu.backgroundColor)
              return;
            this.$el.style.backgroundColor = this.hoverBackground;
          },
          onMouseLeave: function onMouseLeave() {
            if (this.mode === "horizontal" && !this.rootMenu.backgroundColor)
              return;
            this.$el.style.backgroundColor = this.backgroundColor;
          },
          handleClick: function handleClick() {
            if (!this.disabled) {
              this.dispatch("ElMenu", "item-click", this);
              this.$emit("click", this);
            }
          }
        },
        mounted: function mounted2() {
          this.parentMenu.addItem(this);
          this.rootMenu.addItem(this);
        },
        beforeDestroy: function beforeDestroy3() {
          this.parentMenu.removeItem(this);
          this.rootMenu.removeItem(this);
        }
      };
      var src_menu_itemvue_type_script_lang_js_ = menu_itemvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_menu_itemvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/menu/src/menu-item.vue";
      var menu_item = component.exports;
      menu_item.install = function(Vue2) {
        Vue2.component(menu_item.name, menu_item);
      };
      __webpack_exports__["default"] = menu_item;
    }
  });
})(menuItem$1);
var ElMenuItem = /* @__PURE__ */ getDefaultExportFromCjs(menuItem$1.exports);
var _sfc_main$f = Vue.extend({
  name: "n8n-menu-item",
  components: {
    ElSubmenu: Submenu,
    ElMenuItem,
    N8nIcon,
    N8nTooltip
  },
  props: {
    item: {
      type: Object,
      required: true
    },
    compact: {
      type: Boolean,
      default: false
    },
    tooltipDelay: {
      type: Number,
      default: 300
    },
    popperClass: {
      type: String,
      default: ""
    },
    mode: {
      type: String,
      default: "router",
      validator: (value) => ["router", "tabs"].includes(value)
    },
    activeTab: {
      type: String
    }
  },
  computed: {
    availableChildren() {
      return Array.isArray(this.item.children) ? this.item.children.filter((child2) => child2.available !== false) : [];
    }
  },
  methods: {
    isItemActive(item2) {
      const isItemActive = this.isActive(item2);
      const hasActiveChild = Array.isArray(item2.children) && item2.children.some((child2) => this.isActive(child2));
      return isItemActive || hasActiveChild;
    },
    isActive(item2) {
      if (this.mode === "router") {
        if (item2.activateOnRoutePaths) {
          return Array.isArray(item2.activateOnRoutePaths) && item2.activateOnRoutePaths.includes(this.$route.path);
        } else if (item2.activateOnRouteNames) {
          return Array.isArray(item2.activateOnRouteNames) && item2.activateOnRouteNames.includes(this.$route.name || "");
        }
        return false;
      } else {
        return item2.id === this.activeTab;
      }
    },
    onItemClick(item2, event) {
      if (item2 && item2.type === "link" && item2.properties) {
        const href = item2.properties.href;
        if (!href) {
          return;
        }
        if (item2.properties.newWindow) {
          window.open(href);
        } else {
          window.location.assign(item2.properties.href);
        }
      }
      this.$emit("click", event, item2.id);
    }
  }
});
const submenu = "_submenu_1l8xn_11";
const compact = "_compact_1l8xn_14";
const icon$1 = "_icon_1l8xn_30";
const menuItem = "_menuItem_1l8xn_33";
const disableActiveStyle = "_disableActiveStyle_1l8xn_44";
const active$1 = "_active_1l8xn_61";
const label = "_label_1l8xn_82";
const item = "_item_1l8xn_88";
const submenuPopper = "_submenuPopper_1l8xn_106";
var style0$f = {
  submenu,
  compact,
  icon: icon$1,
  menuItem,
  disableActiveStyle,
  active: active$1,
  label,
  item,
  submenuPopper
};
var _sfc_render$g = function render33() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: ["n8n-menu-item", _vm.$style.item] }, [_vm.item.children && _vm.item.children.length > 0 ? _c("el-submenu", { class: {
    [_vm.$style.submenu]: true,
    [_vm.$style.compact]: _vm.compact,
    [_vm.$style.active]: _vm.mode === "router" && _vm.isItemActive(_vm.item)
  }, attrs: { "id": _vm.item.id, "index": _vm.item.id, "popper-append-to-body": "", "popper-class": `${_vm.$style.submenuPopper} ${_vm.popperClass}` } }, [_c("template", { slot: "title" }, [_vm.item.icon ? _c("n8n-icon", { class: _vm.$style.icon, attrs: { "icon": _vm.item.icon, "size": _vm.item.customIconSize || "large" } }) : _vm._e(), _c("span", { class: _vm.$style.label }, [_vm._v(_vm._s(_vm.item.label))])], 1), _vm._l(_vm.availableChildren, function(child2) {
    return _c("el-menu-item", { key: child2.id, class: {
      [_vm.$style.menuItem]: true,
      [_vm.$style.disableActiveStyle]: !_vm.isItemActive(child2),
      [_vm.$style.active]: _vm.isItemActive(child2)
    }, attrs: { "id": child2.id, "index": child2.id }, on: { "click": function($event) {
      return _vm.onItemClick(child2);
    } } }, [child2.icon ? _c("n8n-icon", { class: _vm.$style.icon, attrs: { "icon": child2.icon } }) : _vm._e(), _c("span", { class: _vm.$style.label }, [_vm._v(_vm._s(child2.label))])], 1);
  })], 2) : _c("n8n-tooltip", { attrs: { "placement": "right", "content": _vm.item.label, "disabled": !_vm.compact, "open-delay": _vm.tooltipDelay } }, [_c("el-menu-item", { class: {
    [_vm.$style.menuItem]: true,
    [_vm.$style.item]: true,
    [_vm.$style.disableActiveStyle]: !_vm.isItemActive(_vm.item),
    [_vm.$style.active]: _vm.isItemActive(_vm.item),
    [_vm.$style.compact]: _vm.compact
  }, attrs: { "id": _vm.item.id, "index": _vm.item.id }, on: { "click": function($event) {
    return _vm.onItemClick(_vm.item);
  } } }, [_vm.item.icon ? _c("n8n-icon", { class: _vm.$style.icon, attrs: { "icon": _vm.item.icon, "size": _vm.item.customIconSize || "large" } }) : _vm._e(), _c("span", { class: _vm.$style.label }, [_vm._v(_vm._s(_vm.item.label))])], 1)], 1)], 1);
};
var _sfc_staticRenderFns$g = [];
const __cssModules$f = {
  "$style": style0$f
};
function _sfc_injectStyles$f(ctx2) {
  for (var key2 in __cssModules$f) {
    this[key2] = __cssModules$f[key2];
  }
}
var __component__$g = /* @__PURE__ */ normalizeComponent(
  _sfc_main$f,
  _sfc_render$g,
  _sfc_staticRenderFns$g,
  false,
  _sfc_injectStyles$f,
  null,
  null,
  null
);
var N8nMenuItem = __component__$g.exports;
var _sfc_main$e = Vue.extend({
  name: "n8n-menu",
  components: {
    ElMenu,
    N8nMenuItem
  },
  data() {
    return {
      activeTab: this.value
    };
  },
  props: {
    type: {
      type: String,
      default: "primary",
      validator: (value) => ["primary", "secondary"].includes(value)
    },
    defaultActive: {
      type: String
    },
    collapsed: {
      type: Boolean,
      default: false
    },
    mode: {
      type: String,
      default: "router",
      validator: (value) => ["router", "tabs"].includes(value)
    },
    tooltipDelay: {
      type: Number,
      default: 300
    },
    items: {
      type: Array
    },
    value: {
      type: String,
      default: ""
    }
  },
  mounted() {
    if (this.mode === "router") {
      const found = this.items.find((item2) => {
        return Array.isArray(item2.activateOnRouteNames) && item2.activateOnRouteNames.includes(this.$route.name || "") || Array.isArray(item2.activateOnRoutePaths) && item2.activateOnRoutePaths.includes(this.$route.path);
      });
      this.activeTab = found ? found.id : "";
    } else {
      this.activeTab = this.items.length > 0 ? this.items[0].id : "";
    }
    this.$emit("input", this.activeTab);
  },
  computed: {
    upperMenuItems() {
      return this.items.filter((item2) => item2.position === "top" && item2.available !== false);
    },
    lowerMenuItems() {
      return this.items.filter((item2) => item2.position === "bottom" && item2.available !== false);
    }
  },
  methods: {
    onSelect(event, option2) {
      if (this.mode === "tabs") {
        this.activeTab = option2;
      }
      this.$emit("select", option2);
      this.$emit("input", this.activeTab);
    }
  },
  watch: {
    value(value) {
      this.activeTab = value;
    }
  }
});
const container$5 = "_container_1iyg6_1";
const menuContent = "_menuContent_1iyg6_8";
const upperContent = "_upperContent_1iyg6_19";
const lowerContent = "_lowerContent_1iyg6_23";
const menuCollapsed = "_menuCollapsed_1iyg6_27";
const menuPrefix = "_menuPrefix_1iyg6_34";
const menuSuffix = "_menuSuffix_1iyg6_34";
var style0$e = {
  container: container$5,
  menuContent,
  upperContent,
  lowerContent,
  menuCollapsed,
  menuPrefix,
  menuSuffix
};
var _sfc_render$f = function render34() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: {
    ["menu-container"]: true,
    [_vm.$style.container]: true,
    [_vm.$style.menuCollapsed]: _vm.collapsed
  } }, [_vm.$slots.header ? _c("div", { class: _vm.$style.menuHeader }, [_vm._t("header")], 2) : _vm._e(), _c("div", { class: _vm.$style.menuContent }, [_c("div", { class: { [_vm.$style.upperContent]: true, ["pt-xs"]: _vm.$slots.menuPrefix } }, [_vm.$slots.menuPrefix ? _c("div", { class: _vm.$style.menuPrefix }, [_vm._t("menuPrefix")], 2) : _vm._e(), _c("el-menu", _vm._g({ attrs: { "defaultActive": _vm.defaultActive, "collapse": _vm.collapsed } }, _vm.$listeners), _vm._l(_vm.upperMenuItems, function(item2) {
    return _c("n8n-menu-item", { key: item2.id, attrs: { "item": item2, "compact": _vm.collapsed, "tooltipDelay": _vm.tooltipDelay, "mode": _vm.mode, "activeTab": _vm.activeTab }, on: { "click": _vm.onSelect } });
  }), 1)], 1), _c("div", { class: [_vm.$style.lowerContent, "pb-2xs"] }, [_c("el-menu", _vm._g({ attrs: { "defaultActive": _vm.defaultActive, "collapse": _vm.collapsed } }, _vm.$listeners), _vm._l(_vm.lowerMenuItems, function(item2) {
    return _c("n8n-menu-item", { key: item2.id, attrs: { "item": item2, "compact": _vm.collapsed, "tooltipDelay": _vm.tooltipDelay, "mode": _vm.mode, "activeTab": _vm.activeTab }, on: { "click": _vm.onSelect } });
  }), 1), _vm.$slots.menuSuffix ? _c("div", { class: _vm.$style.menuSuffix }, [_vm._t("menuSuffix")], 2) : _vm._e()], 1)]), _vm.$slots.footer ? _c("div", { class: _vm.$style.menuFooter }, [_vm._t("footer")], 2) : _vm._e()]);
};
var _sfc_staticRenderFns$f = [];
const __cssModules$e = {
  "$style": style0$e
};
function _sfc_injectStyles$e(ctx2) {
  for (var key2 in __cssModules$e) {
    this[key2] = __cssModules$e[key2];
  }
}
var __component__$f = /* @__PURE__ */ normalizeComponent(
  _sfc_main$e,
  _sfc_render$f,
  _sfc_staticRenderFns$f,
  false,
  _sfc_injectStyles$e,
  null,
  null,
  null
);
var N8nMenu = __component__$f.exports;
var _sfc_main$d = Vue.extend({
  name: "n8n-node-icon",
  components: {
    N8nTooltip,
    FontAwesomeIcon
  },
  props: {
    type: {
      type: String,
      required: true,
      validator: (value) => ["file", "icon", "unknown"].includes(value)
    },
    src: {
      type: String
    },
    name: {
      type: String
    },
    nodeTypeName: {
      type: String
    },
    size: {
      type: Number
    },
    disabled: {
      type: Boolean
    },
    circle: {
      type: Boolean
    },
    color: {
      type: String
    },
    showTooltip: {
      type: Boolean
    }
  },
  computed: {
    iconStyleData() {
      if (!this.size) {
        return {
          color: this.color || ""
        };
      }
      return {
        color: this.color || "",
        width: `${this.size}px`,
        height: `${this.size}px`,
        "font-size": `${this.size}px`,
        "line-height": `${this.size}px`
      };
    },
    fontStyleData() {
      return {
        "max-width": `${this.size}px`
      };
    }
  }
});
const icon = "_icon_8ufzj_14";
const circle = "_circle_8ufzj_32";
const disabled$3 = "_disabled_8ufzj_36";
var style0$d = {
  "node-icon-wrapper": "_node-icon-wrapper_8ufzj_1",
  icon,
  "node-icon-placeholder": "_node-icon-placeholder_8ufzj_22",
  "node-icon-image": "_node-icon-image_8ufzj_26",
  circle,
  disabled: disabled$3
};
var _sfc_render$e = function render35() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { staticClass: "n8n-node-icon" }, [_c("div", _vm._g({ class: {
    [_vm.$style["node-icon-wrapper"]]: true,
    [_vm.$style["circle"]]: this.circle,
    [_vm.$style["disabled"]]: this.disabled
  }, style: _vm.iconStyleData }, _vm.$listeners), [_c("n8n-tooltip", { attrs: { "placement": "top", "disabled": !_vm.showTooltip }, scopedSlots: _vm._u([{ key: "content", fn: function() {
    return [_vm._v(_vm._s(_vm.nodeTypeName))];
  }, proxy: true }]) }, [_vm.type !== "unknown" ? _c("div", { class: _vm.$style["icon"] }, [_vm.type === "file" ? _c("img", { class: _vm.$style["node-icon-image"], attrs: { "src": _vm.src } }) : _c("font-awesome-icon", { style: _vm.fontStyleData, attrs: { "icon": _vm.name } })], 1) : _c("div", { class: _vm.$style["node-icon-placeholder"] }, [_vm._v(" " + _vm._s(_vm.nodeTypeName ? _vm.nodeTypeName.charAt(0) : "?") + " ? ")])])], 1)]);
};
var _sfc_staticRenderFns$e = [];
const __cssModules$d = {
  "$style": style0$d
};
function _sfc_injectStyles$d(ctx2) {
  for (var key2 in __cssModules$d) {
    this[key2] = __cssModules$d[key2];
  }
}
var __component__$e = /* @__PURE__ */ normalizeComponent(
  _sfc_main$d,
  _sfc_render$e,
  _sfc_staticRenderFns$e,
  false,
  _sfc_injectStyles$d,
  null,
  null,
  null
);
var N8nNodeIcon = __component__$e.exports;
var lib$5 = {};
var Parser$3 = {};
var Tokenizer$1 = {};
var decode_codepoint = {};
var require$$0$1 = {
  "0": 65533,
  "128": 8364,
  "130": 8218,
  "131": 402,
  "132": 8222,
  "133": 8230,
  "134": 8224,
  "135": 8225,
  "136": 710,
  "137": 8240,
  "138": 352,
  "139": 8249,
  "140": 338,
  "142": 381,
  "145": 8216,
  "146": 8217,
  "147": 8220,
  "148": 8221,
  "149": 8226,
  "150": 8211,
  "151": 8212,
  "152": 732,
  "153": 8482,
  "154": 353,
  "155": 8250,
  "156": 339,
  "158": 382,
  "159": 376
};
var __importDefault$6 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(decode_codepoint, "__esModule", { value: true });
var decode_json_1 = __importDefault$6(require$$0$1);
var fromCodePoint = String.fromCodePoint || function(codePoint) {
  var output = "";
  if (codePoint > 65535) {
    codePoint -= 65536;
    output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
    codePoint = 56320 | codePoint & 1023;
  }
  output += String.fromCharCode(codePoint);
  return output;
};
function decodeCodePoint(codePoint) {
  if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
    return "\uFFFD";
  }
  if (codePoint in decode_json_1.default) {
    codePoint = decode_json_1.default[codePoint];
  }
  return fromCodePoint(codePoint);
}
decode_codepoint.default = decodeCodePoint;
const Aacute$1 = "\xC1";
const aacute$1 = "\xE1";
const Abreve = "\u0102";
const abreve = "\u0103";
const ac = "\u223E";
const acd = "\u223F";
const acE = "\u223E\u0333";
const Acirc$1 = "\xC2";
const acirc$1 = "\xE2";
const acute$1 = "\xB4";
const Acy = "\u0410";
const acy = "\u0430";
const AElig$1 = "\xC6";
const aelig$1 = "\xE6";
const af = "\u2061";
const Afr = "\u{1D504}";
const afr = "\u{1D51E}";
const Agrave$1 = "\xC0";
const agrave$1 = "\xE0";
const alefsym = "\u2135";
const aleph = "\u2135";
const Alpha = "\u0391";
const alpha = "\u03B1";
const Amacr = "\u0100";
const amacr = "\u0101";
const amalg = "\u2A3F";
const amp$2 = "&";
const AMP$1 = "&";
const andand = "\u2A55";
const And = "\u2A53";
const and = "\u2227";
const andd = "\u2A5C";
const andslope = "\u2A58";
const andv = "\u2A5A";
const ang = "\u2220";
const ange = "\u29A4";
const angle = "\u2220";
const angmsdaa = "\u29A8";
const angmsdab = "\u29A9";
const angmsdac = "\u29AA";
const angmsdad = "\u29AB";
const angmsdae = "\u29AC";
const angmsdaf = "\u29AD";
const angmsdag = "\u29AE";
const angmsdah = "\u29AF";
const angmsd = "\u2221";
const angrt = "\u221F";
const angrtvb = "\u22BE";
const angrtvbd = "\u299D";
const angsph = "\u2222";
const angst = "\xC5";
const angzarr = "\u237C";
const Aogon = "\u0104";
const aogon = "\u0105";
const Aopf = "\u{1D538}";
const aopf = "\u{1D552}";
const apacir = "\u2A6F";
const ap = "\u2248";
const apE = "\u2A70";
const ape = "\u224A";
const apid = "\u224B";
const apos$1 = "'";
const ApplyFunction = "\u2061";
const approx = "\u2248";
const approxeq = "\u224A";
const Aring$1 = "\xC5";
const aring$1 = "\xE5";
const Ascr = "\u{1D49C}";
const ascr = "\u{1D4B6}";
const Assign = "\u2254";
const ast = "*";
const asymp = "\u2248";
const asympeq = "\u224D";
const Atilde$1 = "\xC3";
const atilde$1 = "\xE3";
const Auml$1 = "\xC4";
const auml$1 = "\xE4";
const awconint = "\u2233";
const awint = "\u2A11";
const backcong = "\u224C";
const backepsilon = "\u03F6";
const backprime = "\u2035";
const backsim = "\u223D";
const backsimeq = "\u22CD";
const Backslash = "\u2216";
const Barv = "\u2AE7";
const barvee = "\u22BD";
const barwed = "\u2305";
const Barwed = "\u2306";
const barwedge = "\u2305";
const bbrk = "\u23B5";
const bbrktbrk = "\u23B6";
const bcong = "\u224C";
const Bcy = "\u0411";
const bcy = "\u0431";
const bdquo = "\u201E";
const becaus = "\u2235";
const because = "\u2235";
const Because = "\u2235";
const bemptyv = "\u29B0";
const bepsi = "\u03F6";
const bernou = "\u212C";
const Bernoullis = "\u212C";
const Beta = "\u0392";
const beta = "\u03B2";
const beth = "\u2136";
const between = "\u226C";
const Bfr = "\u{1D505}";
const bfr = "\u{1D51F}";
const bigcap = "\u22C2";
const bigcirc = "\u25EF";
const bigcup = "\u22C3";
const bigodot = "\u2A00";
const bigoplus = "\u2A01";
const bigotimes = "\u2A02";
const bigsqcup = "\u2A06";
const bigstar = "\u2605";
const bigtriangledown = "\u25BD";
const bigtriangleup = "\u25B3";
const biguplus = "\u2A04";
const bigvee = "\u22C1";
const bigwedge = "\u22C0";
const bkarow = "\u290D";
const blacklozenge = "\u29EB";
const blacksquare = "\u25AA";
const blacktriangle = "\u25B4";
const blacktriangledown = "\u25BE";
const blacktriangleleft = "\u25C2";
const blacktriangleright = "\u25B8";
const blank = "\u2423";
const blk12 = "\u2592";
const blk14 = "\u2591";
const blk34 = "\u2593";
const block2 = "\u2588";
const bne = "=\u20E5";
const bnequiv = "\u2261\u20E5";
const bNot = "\u2AED";
const bnot = "\u2310";
const Bopf = "\u{1D539}";
const bopf = "\u{1D553}";
const bot = "\u22A5";
const bottom$1 = "\u22A5";
const bowtie = "\u22C8";
const boxbox = "\u29C9";
const boxdl = "\u2510";
const boxdL = "\u2555";
const boxDl = "\u2556";
const boxDL = "\u2557";
const boxdr = "\u250C";
const boxdR = "\u2552";
const boxDr = "\u2553";
const boxDR = "\u2554";
const boxh = "\u2500";
const boxH = "\u2550";
const boxhd = "\u252C";
const boxHd = "\u2564";
const boxhD = "\u2565";
const boxHD = "\u2566";
const boxhu = "\u2534";
const boxHu = "\u2567";
const boxhU = "\u2568";
const boxHU = "\u2569";
const boxminus = "\u229F";
const boxplus = "\u229E";
const boxtimes = "\u22A0";
const boxul = "\u2518";
const boxuL = "\u255B";
const boxUl = "\u255C";
const boxUL = "\u255D";
const boxur = "\u2514";
const boxuR = "\u2558";
const boxUr = "\u2559";
const boxUR = "\u255A";
const boxv = "\u2502";
const boxV = "\u2551";
const boxvh = "\u253C";
const boxvH = "\u256A";
const boxVh = "\u256B";
const boxVH = "\u256C";
const boxvl = "\u2524";
const boxvL = "\u2561";
const boxVl = "\u2562";
const boxVL = "\u2563";
const boxvr = "\u251C";
const boxvR = "\u255E";
const boxVr = "\u255F";
const boxVR = "\u2560";
const bprime = "\u2035";
const breve = "\u02D8";
const Breve = "\u02D8";
const brvbar$1 = "\xA6";
const bscr = "\u{1D4B7}";
const Bscr = "\u212C";
const bsemi = "\u204F";
const bsim = "\u223D";
const bsime = "\u22CD";
const bsolb = "\u29C5";
const bsol = "\\";
const bsolhsub = "\u27C8";
const bull = "\u2022";
const bullet = "\u2022";
const bump = "\u224E";
const bumpE = "\u2AAE";
const bumpe = "\u224F";
const Bumpeq = "\u224E";
const bumpeq = "\u224F";
const Cacute = "\u0106";
const cacute = "\u0107";
const capand = "\u2A44";
const capbrcup = "\u2A49";
const capcap = "\u2A4B";
const cap = "\u2229";
const Cap = "\u22D2";
const capcup = "\u2A47";
const capdot = "\u2A40";
const CapitalDifferentialD = "\u2145";
const caps = "\u2229\uFE00";
const caret = "\u2041";
const caron = "\u02C7";
const Cayleys = "\u212D";
const ccaps = "\u2A4D";
const Ccaron = "\u010C";
const ccaron = "\u010D";
const Ccedil$1 = "\xC7";
const ccedil$1 = "\xE7";
const Ccirc = "\u0108";
const ccirc = "\u0109";
const Cconint = "\u2230";
const ccups = "\u2A4C";
const ccupssm = "\u2A50";
const Cdot = "\u010A";
const cdot = "\u010B";
const cedil$1 = "\xB8";
const Cedilla = "\xB8";
const cemptyv = "\u29B2";
const cent$1 = "\xA2";
const centerdot = "\xB7";
const CenterDot = "\xB7";
const cfr = "\u{1D520}";
const Cfr = "\u212D";
const CHcy = "\u0427";
const chcy = "\u0447";
const check = "\u2713";
const checkmark = "\u2713";
const Chi = "\u03A7";
const chi = "\u03C7";
const circ = "\u02C6";
const circeq = "\u2257";
const circlearrowleft = "\u21BA";
const circlearrowright = "\u21BB";
const circledast = "\u229B";
const circledcirc = "\u229A";
const circleddash = "\u229D";
const CircleDot = "\u2299";
const circledR = "\xAE";
const circledS = "\u24C8";
const CircleMinus = "\u2296";
const CirclePlus = "\u2295";
const CircleTimes = "\u2297";
const cir = "\u25CB";
const cirE = "\u29C3";
const cire = "\u2257";
const cirfnint = "\u2A10";
const cirmid = "\u2AEF";
const cirscir = "\u29C2";
const ClockwiseContourIntegral = "\u2232";
const CloseCurlyDoubleQuote = "\u201D";
const CloseCurlyQuote = "\u2019";
const clubs = "\u2663";
const clubsuit = "\u2663";
const colon = ":";
const Colon = "\u2237";
const Colone = "\u2A74";
const colone = "\u2254";
const coloneq = "\u2254";
const comma = ",";
const commat = "@";
const comp = "\u2201";
const compfn = "\u2218";
const complement = "\u2201";
const complexes = "\u2102";
const cong = "\u2245";
const congdot = "\u2A6D";
const Congruent = "\u2261";
const conint = "\u222E";
const Conint = "\u222F";
const ContourIntegral = "\u222E";
const copf = "\u{1D554}";
const Copf = "\u2102";
const coprod = "\u2210";
const Coproduct = "\u2210";
const copy$1 = "\xA9";
const COPY$1 = "\xA9";
const copysr = "\u2117";
const CounterClockwiseContourIntegral = "\u2233";
const crarr = "\u21B5";
const cross = "\u2717";
const Cross = "\u2A2F";
const Cscr = "\u{1D49E}";
const cscr = "\u{1D4B8}";
const csub = "\u2ACF";
const csube = "\u2AD1";
const csup = "\u2AD0";
const csupe = "\u2AD2";
const ctdot = "\u22EF";
const cudarrl = "\u2938";
const cudarrr = "\u2935";
const cuepr = "\u22DE";
const cuesc = "\u22DF";
const cularr = "\u21B6";
const cularrp = "\u293D";
const cupbrcap = "\u2A48";
const cupcap = "\u2A46";
const CupCap = "\u224D";
const cup = "\u222A";
const Cup = "\u22D3";
const cupcup = "\u2A4A";
const cupdot = "\u228D";
const cupor = "\u2A45";
const cups = "\u222A\uFE00";
const curarr = "\u21B7";
const curarrm = "\u293C";
const curlyeqprec = "\u22DE";
const curlyeqsucc = "\u22DF";
const curlyvee = "\u22CE";
const curlywedge = "\u22CF";
const curren$1 = "\xA4";
const curvearrowleft = "\u21B6";
const curvearrowright = "\u21B7";
const cuvee = "\u22CE";
const cuwed = "\u22CF";
const cwconint = "\u2232";
const cwint = "\u2231";
const cylcty = "\u232D";
const dagger = "\u2020";
const Dagger = "\u2021";
const daleth = "\u2138";
const darr = "\u2193";
const Darr = "\u21A1";
const dArr = "\u21D3";
const dash = "\u2010";
const Dashv = "\u2AE4";
const dashv = "\u22A3";
const dbkarow = "\u290F";
const dblac = "\u02DD";
const Dcaron = "\u010E";
const dcaron = "\u010F";
const Dcy = "\u0414";
const dcy = "\u0434";
const ddagger = "\u2021";
const ddarr = "\u21CA";
const DD = "\u2145";
const dd = "\u2146";
const DDotrahd = "\u2911";
const ddotseq = "\u2A77";
const deg$1 = "\xB0";
const Del = "\u2207";
const Delta = "\u0394";
const delta = "\u03B4";
const demptyv = "\u29B1";
const dfisht = "\u297F";
const Dfr = "\u{1D507}";
const dfr = "\u{1D521}";
const dHar = "\u2965";
const dharl = "\u21C3";
const dharr = "\u21C2";
const DiacriticalAcute = "\xB4";
const DiacriticalDot = "\u02D9";
const DiacriticalDoubleAcute = "\u02DD";
const DiacriticalGrave = "`";
const DiacriticalTilde = "\u02DC";
const diam = "\u22C4";
const diamond = "\u22C4";
const Diamond = "\u22C4";
const diamondsuit = "\u2666";
const diams = "\u2666";
const die = "\xA8";
const DifferentialD = "\u2146";
const digamma = "\u03DD";
const disin = "\u22F2";
const div = "\xF7";
const divide$1 = "\xF7";
const divideontimes = "\u22C7";
const divonx = "\u22C7";
const DJcy = "\u0402";
const djcy = "\u0452";
const dlcorn = "\u231E";
const dlcrop = "\u230D";
const dollar = "$";
const Dopf = "\u{1D53B}";
const dopf = "\u{1D555}";
const Dot = "\xA8";
const dot = "\u02D9";
const DotDot = "\u20DC";
const doteq = "\u2250";
const doteqdot = "\u2251";
const DotEqual = "\u2250";
const dotminus = "\u2238";
const dotplus = "\u2214";
const dotsquare = "\u22A1";
const doublebarwedge = "\u2306";
const DoubleContourIntegral = "\u222F";
const DoubleDot = "\xA8";
const DoubleDownArrow = "\u21D3";
const DoubleLeftArrow = "\u21D0";
const DoubleLeftRightArrow = "\u21D4";
const DoubleLeftTee = "\u2AE4";
const DoubleLongLeftArrow = "\u27F8";
const DoubleLongLeftRightArrow = "\u27FA";
const DoubleLongRightArrow = "\u27F9";
const DoubleRightArrow = "\u21D2";
const DoubleRightTee = "\u22A8";
const DoubleUpArrow = "\u21D1";
const DoubleUpDownArrow = "\u21D5";
const DoubleVerticalBar = "\u2225";
const DownArrowBar = "\u2913";
const downarrow = "\u2193";
const DownArrow = "\u2193";
const Downarrow = "\u21D3";
const DownArrowUpArrow = "\u21F5";
const DownBreve = "\u0311";
const downdownarrows = "\u21CA";
const downharpoonleft = "\u21C3";
const downharpoonright = "\u21C2";
const DownLeftRightVector = "\u2950";
const DownLeftTeeVector = "\u295E";
const DownLeftVectorBar = "\u2956";
const DownLeftVector = "\u21BD";
const DownRightTeeVector = "\u295F";
const DownRightVectorBar = "\u2957";
const DownRightVector = "\u21C1";
const DownTeeArrow = "\u21A7";
const DownTee = "\u22A4";
const drbkarow = "\u2910";
const drcorn = "\u231F";
const drcrop = "\u230C";
const Dscr = "\u{1D49F}";
const dscr = "\u{1D4B9}";
const DScy = "\u0405";
const dscy = "\u0455";
const dsol = "\u29F6";
const Dstrok = "\u0110";
const dstrok = "\u0111";
const dtdot = "\u22F1";
const dtri = "\u25BF";
const dtrif = "\u25BE";
const duarr = "\u21F5";
const duhar = "\u296F";
const dwangle = "\u29A6";
const DZcy = "\u040F";
const dzcy = "\u045F";
const dzigrarr = "\u27FF";
const Eacute$1 = "\xC9";
const eacute$1 = "\xE9";
const easter = "\u2A6E";
const Ecaron = "\u011A";
const ecaron = "\u011B";
const Ecirc$1 = "\xCA";
const ecirc$1 = "\xEA";
const ecir = "\u2256";
const ecolon = "\u2255";
const Ecy = "\u042D";
const ecy = "\u044D";
const eDDot = "\u2A77";
const Edot = "\u0116";
const edot = "\u0117";
const eDot = "\u2251";
const ee = "\u2147";
const efDot = "\u2252";
const Efr = "\u{1D508}";
const efr = "\u{1D522}";
const eg = "\u2A9A";
const Egrave$1 = "\xC8";
const egrave$1 = "\xE8";
const egs = "\u2A96";
const egsdot = "\u2A98";
const el = "\u2A99";
const Element$2 = "\u2208";
const elinters = "\u23E7";
const ell = "\u2113";
const els = "\u2A95";
const elsdot = "\u2A97";
const Emacr = "\u0112";
const emacr = "\u0113";
const empty = "\u2205";
const emptyset = "\u2205";
const EmptySmallSquare = "\u25FB";
const emptyv = "\u2205";
const EmptyVerySmallSquare = "\u25AB";
const emsp13 = "\u2004";
const emsp14 = "\u2005";
const emsp = "\u2003";
const ENG = "\u014A";
const eng = "\u014B";
const ensp = "\u2002";
const Eogon = "\u0118";
const eogon = "\u0119";
const Eopf = "\u{1D53C}";
const eopf = "\u{1D556}";
const epar = "\u22D5";
const eparsl = "\u29E3";
const eplus = "\u2A71";
const epsi = "\u03B5";
const Epsilon = "\u0395";
const epsilon = "\u03B5";
const epsiv = "\u03F5";
const eqcirc = "\u2256";
const eqcolon = "\u2255";
const eqsim = "\u2242";
const eqslantgtr = "\u2A96";
const eqslantless = "\u2A95";
const Equal = "\u2A75";
const equals = "=";
const EqualTilde = "\u2242";
const equest = "\u225F";
const Equilibrium = "\u21CC";
const equiv = "\u2261";
const equivDD = "\u2A78";
const eqvparsl = "\u29E5";
const erarr = "\u2971";
const erDot = "\u2253";
const escr = "\u212F";
const Escr = "\u2130";
const esdot = "\u2250";
const Esim = "\u2A73";
const esim = "\u2242";
const Eta = "\u0397";
const eta = "\u03B7";
const ETH$1 = "\xD0";
const eth$1 = "\xF0";
const Euml$1 = "\xCB";
const euml$1 = "\xEB";
const euro = "\u20AC";
const excl = "!";
const exist = "\u2203";
const Exists = "\u2203";
const expectation = "\u2130";
const exponentiale = "\u2147";
const ExponentialE = "\u2147";
const fallingdotseq = "\u2252";
const Fcy = "\u0424";
const fcy = "\u0444";
const female = "\u2640";
const ffilig = "\uFB03";
const fflig = "\uFB00";
const ffllig = "\uFB04";
const Ffr = "\u{1D509}";
const ffr = "\u{1D523}";
const filig = "\uFB01";
const FilledSmallSquare = "\u25FC";
const FilledVerySmallSquare = "\u25AA";
const fjlig = "fj";
const flat = "\u266D";
const fllig = "\uFB02";
const fltns = "\u25B1";
const fnof = "\u0192";
const Fopf = "\u{1D53D}";
const fopf = "\u{1D557}";
const forall = "\u2200";
const ForAll = "\u2200";
const fork = "\u22D4";
const forkv = "\u2AD9";
const Fouriertrf = "\u2131";
const fpartint = "\u2A0D";
const frac12$1 = "\xBD";
const frac13 = "\u2153";
const frac14$1 = "\xBC";
const frac15 = "\u2155";
const frac16 = "\u2159";
const frac18 = "\u215B";
const frac23 = "\u2154";
const frac25 = "\u2156";
const frac34$1 = "\xBE";
const frac35 = "\u2157";
const frac38 = "\u215C";
const frac45 = "\u2158";
const frac56 = "\u215A";
const frac58 = "\u215D";
const frac78 = "\u215E";
const frasl = "\u2044";
const frown = "\u2322";
const fscr = "\u{1D4BB}";
const Fscr = "\u2131";
const gacute = "\u01F5";
const Gamma = "\u0393";
const gamma = "\u03B3";
const Gammad = "\u03DC";
const gammad = "\u03DD";
const gap = "\u2A86";
const Gbreve = "\u011E";
const gbreve = "\u011F";
const Gcedil = "\u0122";
const Gcirc = "\u011C";
const gcirc = "\u011D";
const Gcy = "\u0413";
const gcy = "\u0433";
const Gdot = "\u0120";
const gdot = "\u0121";
const ge = "\u2265";
const gE = "\u2267";
const gEl = "\u2A8C";
const gel = "\u22DB";
const geq = "\u2265";
const geqq = "\u2267";
const geqslant = "\u2A7E";
const gescc = "\u2AA9";
const ges = "\u2A7E";
const gesdot = "\u2A80";
const gesdoto = "\u2A82";
const gesdotol = "\u2A84";
const gesl = "\u22DB\uFE00";
const gesles = "\u2A94";
const Gfr = "\u{1D50A}";
const gfr = "\u{1D524}";
const gg = "\u226B";
const Gg = "\u22D9";
const ggg = "\u22D9";
const gimel = "\u2137";
const GJcy = "\u0403";
const gjcy = "\u0453";
const gla = "\u2AA5";
const gl = "\u2277";
const glE = "\u2A92";
const glj = "\u2AA4";
const gnap = "\u2A8A";
const gnapprox = "\u2A8A";
const gne = "\u2A88";
const gnE = "\u2269";
const gneq = "\u2A88";
const gneqq = "\u2269";
const gnsim = "\u22E7";
const Gopf = "\u{1D53E}";
const gopf = "\u{1D558}";
const grave = "`";
const GreaterEqual = "\u2265";
const GreaterEqualLess = "\u22DB";
const GreaterFullEqual = "\u2267";
const GreaterGreater = "\u2AA2";
const GreaterLess = "\u2277";
const GreaterSlantEqual = "\u2A7E";
const GreaterTilde = "\u2273";
const Gscr = "\u{1D4A2}";
const gscr = "\u210A";
const gsim = "\u2273";
const gsime = "\u2A8E";
const gsiml = "\u2A90";
const gtcc = "\u2AA7";
const gtcir = "\u2A7A";
const gt$2 = ">";
const GT$1 = ">";
const Gt = "\u226B";
const gtdot = "\u22D7";
const gtlPar = "\u2995";
const gtquest = "\u2A7C";
const gtrapprox = "\u2A86";
const gtrarr = "\u2978";
const gtrdot = "\u22D7";
const gtreqless = "\u22DB";
const gtreqqless = "\u2A8C";
const gtrless = "\u2277";
const gtrsim = "\u2273";
const gvertneqq = "\u2269\uFE00";
const gvnE = "\u2269\uFE00";
const Hacek = "\u02C7";
const hairsp = "\u200A";
const half = "\xBD";
const hamilt = "\u210B";
const HARDcy = "\u042A";
const hardcy = "\u044A";
const harrcir = "\u2948";
const harr = "\u2194";
const hArr = "\u21D4";
const harrw = "\u21AD";
const Hat = "^";
const hbar = "\u210F";
const Hcirc = "\u0124";
const hcirc = "\u0125";
const hearts = "\u2665";
const heartsuit = "\u2665";
const hellip = "\u2026";
const hercon = "\u22B9";
const hfr = "\u{1D525}";
const Hfr = "\u210C";
const HilbertSpace = "\u210B";
const hksearow = "\u2925";
const hkswarow = "\u2926";
const hoarr = "\u21FF";
const homtht = "\u223B";
const hookleftarrow = "\u21A9";
const hookrightarrow = "\u21AA";
const hopf = "\u{1D559}";
const Hopf = "\u210D";
const horbar = "\u2015";
const HorizontalLine = "\u2500";
const hscr = "\u{1D4BD}";
const Hscr = "\u210B";
const hslash = "\u210F";
const Hstrok = "\u0126";
const hstrok = "\u0127";
const HumpDownHump = "\u224E";
const HumpEqual = "\u224F";
const hybull = "\u2043";
const hyphen = "\u2010";
const Iacute$1 = "\xCD";
const iacute$1 = "\xED";
const ic = "\u2063";
const Icirc$1 = "\xCE";
const icirc$1 = "\xEE";
const Icy = "\u0418";
const icy = "\u0438";
const Idot = "\u0130";
const IEcy = "\u0415";
const iecy = "\u0435";
const iexcl$1 = "\xA1";
const iff = "\u21D4";
const ifr = "\u{1D526}";
const Ifr = "\u2111";
const Igrave$1 = "\xCC";
const igrave$1 = "\xEC";
const ii = "\u2148";
const iiiint = "\u2A0C";
const iiint = "\u222D";
const iinfin = "\u29DC";
const iiota = "\u2129";
const IJlig = "\u0132";
const ijlig = "\u0133";
const Imacr = "\u012A";
const imacr = "\u012B";
const image2 = "\u2111";
const ImaginaryI = "\u2148";
const imagline = "\u2110";
const imagpart = "\u2111";
const imath = "\u0131";
const Im = "\u2111";
const imof = "\u22B7";
const imped = "\u01B5";
const Implies = "\u21D2";
const incare = "\u2105";
const infin = "\u221E";
const infintie = "\u29DD";
const inodot = "\u0131";
const intcal = "\u22BA";
const int = "\u222B";
const Int = "\u222C";
const integers = "\u2124";
const Integral = "\u222B";
const intercal = "\u22BA";
const Intersection = "\u22C2";
const intlarhk = "\u2A17";
const intprod = "\u2A3C";
const InvisibleComma = "\u2063";
const InvisibleTimes = "\u2062";
const IOcy = "\u0401";
const iocy = "\u0451";
const Iogon = "\u012E";
const iogon = "\u012F";
const Iopf = "\u{1D540}";
const iopf = "\u{1D55A}";
const Iota = "\u0399";
const iota = "\u03B9";
const iprod = "\u2A3C";
const iquest$1 = "\xBF";
const iscr = "\u{1D4BE}";
const Iscr = "\u2110";
const isin = "\u2208";
const isindot = "\u22F5";
const isinE = "\u22F9";
const isins = "\u22F4";
const isinsv = "\u22F3";
const isinv = "\u2208";
const it = "\u2062";
const Itilde = "\u0128";
const itilde = "\u0129";
const Iukcy = "\u0406";
const iukcy = "\u0456";
const Iuml$1 = "\xCF";
const iuml$1 = "\xEF";
const Jcirc = "\u0134";
const jcirc = "\u0135";
const Jcy = "\u0419";
const jcy = "\u0439";
const Jfr = "\u{1D50D}";
const jfr = "\u{1D527}";
const jmath = "\u0237";
const Jopf = "\u{1D541}";
const jopf = "\u{1D55B}";
const Jscr = "\u{1D4A5}";
const jscr = "\u{1D4BF}";
const Jsercy = "\u0408";
const jsercy = "\u0458";
const Jukcy = "\u0404";
const jukcy = "\u0454";
const Kappa = "\u039A";
const kappa = "\u03BA";
const kappav = "\u03F0";
const Kcedil = "\u0136";
const kcedil = "\u0137";
const Kcy = "\u041A";
const kcy = "\u043A";
const Kfr = "\u{1D50E}";
const kfr = "\u{1D528}";
const kgreen = "\u0138";
const KHcy = "\u0425";
const khcy = "\u0445";
const KJcy = "\u040C";
const kjcy = "\u045C";
const Kopf = "\u{1D542}";
const kopf = "\u{1D55C}";
const Kscr = "\u{1D4A6}";
const kscr = "\u{1D4C0}";
const lAarr = "\u21DA";
const Lacute = "\u0139";
const lacute = "\u013A";
const laemptyv = "\u29B4";
const lagran = "\u2112";
const Lambda = "\u039B";
const lambda = "\u03BB";
const lang = "\u27E8";
const Lang = "\u27EA";
const langd = "\u2991";
const langle = "\u27E8";
const lap = "\u2A85";
const Laplacetrf = "\u2112";
const laquo$1 = "\xAB";
const larrb = "\u21E4";
const larrbfs = "\u291F";
const larr = "\u2190";
const Larr = "\u219E";
const lArr = "\u21D0";
const larrfs = "\u291D";
const larrhk = "\u21A9";
const larrlp = "\u21AB";
const larrpl = "\u2939";
const larrsim = "\u2973";
const larrtl = "\u21A2";
const latail = "\u2919";
const lAtail = "\u291B";
const lat = "\u2AAB";
const late = "\u2AAD";
const lates = "\u2AAD\uFE00";
const lbarr = "\u290C";
const lBarr = "\u290E";
const lbbrk = "\u2772";
const lbrace = "{";
const lbrack = "[";
const lbrke = "\u298B";
const lbrksld = "\u298F";
const lbrkslu = "\u298D";
const Lcaron = "\u013D";
const lcaron = "\u013E";
const Lcedil = "\u013B";
const lcedil = "\u013C";
const lceil = "\u2308";
const lcub = "{";
const Lcy = "\u041B";
const lcy = "\u043B";
const ldca = "\u2936";
const ldquo = "\u201C";
const ldquor = "\u201E";
const ldrdhar = "\u2967";
const ldrushar = "\u294B";
const ldsh = "\u21B2";
const le = "\u2264";
const lE = "\u2266";
const LeftAngleBracket = "\u27E8";
const LeftArrowBar = "\u21E4";
const leftarrow = "\u2190";
const LeftArrow = "\u2190";
const Leftarrow = "\u21D0";
const LeftArrowRightArrow = "\u21C6";
const leftarrowtail = "\u21A2";
const LeftCeiling = "\u2308";
const LeftDoubleBracket = "\u27E6";
const LeftDownTeeVector = "\u2961";
const LeftDownVectorBar = "\u2959";
const LeftDownVector = "\u21C3";
const LeftFloor = "\u230A";
const leftharpoondown = "\u21BD";
const leftharpoonup = "\u21BC";
const leftleftarrows = "\u21C7";
const leftrightarrow = "\u2194";
const LeftRightArrow = "\u2194";
const Leftrightarrow = "\u21D4";
const leftrightarrows = "\u21C6";
const leftrightharpoons = "\u21CB";
const leftrightsquigarrow = "\u21AD";
const LeftRightVector = "\u294E";
const LeftTeeArrow = "\u21A4";
const LeftTee = "\u22A3";
const LeftTeeVector = "\u295A";
const leftthreetimes = "\u22CB";
const LeftTriangleBar = "\u29CF";
const LeftTriangle = "\u22B2";
const LeftTriangleEqual = "\u22B4";
const LeftUpDownVector = "\u2951";
const LeftUpTeeVector = "\u2960";
const LeftUpVectorBar = "\u2958";
const LeftUpVector = "\u21BF";
const LeftVectorBar = "\u2952";
const LeftVector = "\u21BC";
const lEg = "\u2A8B";
const leg = "\u22DA";
const leq = "\u2264";
const leqq = "\u2266";
const leqslant = "\u2A7D";
const lescc = "\u2AA8";
const les = "\u2A7D";
const lesdot = "\u2A7F";
const lesdoto = "\u2A81";
const lesdotor = "\u2A83";
const lesg = "\u22DA\uFE00";
const lesges = "\u2A93";
const lessapprox = "\u2A85";
const lessdot = "\u22D6";
const lesseqgtr = "\u22DA";
const lesseqqgtr = "\u2A8B";
const LessEqualGreater = "\u22DA";
const LessFullEqual = "\u2266";
const LessGreater = "\u2276";
const lessgtr = "\u2276";
const LessLess = "\u2AA1";
const lesssim = "\u2272";
const LessSlantEqual = "\u2A7D";
const LessTilde = "\u2272";
const lfisht = "\u297C";
const lfloor = "\u230A";
const Lfr = "\u{1D50F}";
const lfr = "\u{1D529}";
const lg = "\u2276";
const lgE = "\u2A91";
const lHar = "\u2962";
const lhard = "\u21BD";
const lharu = "\u21BC";
const lharul = "\u296A";
const lhblk = "\u2584";
const LJcy = "\u0409";
const ljcy = "\u0459";
const llarr = "\u21C7";
const ll = "\u226A";
const Ll = "\u22D8";
const llcorner = "\u231E";
const Lleftarrow = "\u21DA";
const llhard = "\u296B";
const lltri = "\u25FA";
const Lmidot = "\u013F";
const lmidot = "\u0140";
const lmoustache = "\u23B0";
const lmoust = "\u23B0";
const lnap = "\u2A89";
const lnapprox = "\u2A89";
const lne = "\u2A87";
const lnE = "\u2268";
const lneq = "\u2A87";
const lneqq = "\u2268";
const lnsim = "\u22E6";
const loang = "\u27EC";
const loarr = "\u21FD";
const lobrk = "\u27E6";
const longleftarrow = "\u27F5";
const LongLeftArrow = "\u27F5";
const Longleftarrow = "\u27F8";
const longleftrightarrow = "\u27F7";
const LongLeftRightArrow = "\u27F7";
const Longleftrightarrow = "\u27FA";
const longmapsto = "\u27FC";
const longrightarrow = "\u27F6";
const LongRightArrow = "\u27F6";
const Longrightarrow = "\u27F9";
const looparrowleft = "\u21AB";
const looparrowright = "\u21AC";
const lopar = "\u2985";
const Lopf = "\u{1D543}";
const lopf = "\u{1D55D}";
const loplus = "\u2A2D";
const lotimes = "\u2A34";
const lowast = "\u2217";
const lowbar = "_";
const LowerLeftArrow = "\u2199";
const LowerRightArrow = "\u2198";
const loz = "\u25CA";
const lozenge = "\u25CA";
const lozf = "\u29EB";
const lpar = "(";
const lparlt = "\u2993";
const lrarr = "\u21C6";
const lrcorner = "\u231F";
const lrhar = "\u21CB";
const lrhard = "\u296D";
const lrm = "\u200E";
const lrtri = "\u22BF";
const lsaquo = "\u2039";
const lscr = "\u{1D4C1}";
const Lscr = "\u2112";
const lsh = "\u21B0";
const Lsh = "\u21B0";
const lsim = "\u2272";
const lsime = "\u2A8D";
const lsimg = "\u2A8F";
const lsqb = "[";
const lsquo = "\u2018";
const lsquor = "\u201A";
const Lstrok = "\u0141";
const lstrok = "\u0142";
const ltcc = "\u2AA6";
const ltcir = "\u2A79";
const lt$2 = "<";
const LT$1 = "<";
const Lt = "\u226A";
const ltdot = "\u22D6";
const lthree = "\u22CB";
const ltimes = "\u22C9";
const ltlarr = "\u2976";
const ltquest = "\u2A7B";
const ltri = "\u25C3";
const ltrie = "\u22B4";
const ltrif = "\u25C2";
const ltrPar = "\u2996";
const lurdshar = "\u294A";
const luruhar = "\u2966";
const lvertneqq = "\u2268\uFE00";
const lvnE = "\u2268\uFE00";
const macr$1 = "\xAF";
const male = "\u2642";
const malt = "\u2720";
const maltese = "\u2720";
const map = "\u21A6";
const mapsto = "\u21A6";
const mapstodown = "\u21A7";
const mapstoleft = "\u21A4";
const mapstoup = "\u21A5";
const marker = "\u25AE";
const mcomma = "\u2A29";
const Mcy = "\u041C";
const mcy = "\u043C";
const mdash = "\u2014";
const mDDot = "\u223A";
const measuredangle = "\u2221";
const MediumSpace = "\u205F";
const Mellintrf = "\u2133";
const Mfr = "\u{1D510}";
const mfr = "\u{1D52A}";
const mho = "\u2127";
const micro$1 = "\xB5";
const midast = "*";
const midcir = "\u2AF0";
const mid = "\u2223";
const middot$1 = "\xB7";
const minusb = "\u229F";
const minus = "\u2212";
const minusd = "\u2238";
const minusdu = "\u2A2A";
const MinusPlus = "\u2213";
const mlcp = "\u2ADB";
const mldr = "\u2026";
const mnplus = "\u2213";
const models = "\u22A7";
const Mopf = "\u{1D544}";
const mopf = "\u{1D55E}";
const mp = "\u2213";
const mscr = "\u{1D4C2}";
const Mscr = "\u2133";
const mstpos = "\u223E";
const Mu = "\u039C";
const mu = "\u03BC";
const multimap = "\u22B8";
const mumap = "\u22B8";
const nabla = "\u2207";
const Nacute = "\u0143";
const nacute = "\u0144";
const nang = "\u2220\u20D2";
const nap = "\u2249";
const napE = "\u2A70\u0338";
const napid = "\u224B\u0338";
const napos = "\u0149";
const napprox = "\u2249";
const natural = "\u266E";
const naturals = "\u2115";
const natur = "\u266E";
const nbsp$1 = "\xA0";
const nbump = "\u224E\u0338";
const nbumpe = "\u224F\u0338";
const ncap = "\u2A43";
const Ncaron = "\u0147";
const ncaron = "\u0148";
const Ncedil = "\u0145";
const ncedil = "\u0146";
const ncong = "\u2247";
const ncongdot = "\u2A6D\u0338";
const ncup = "\u2A42";
const Ncy = "\u041D";
const ncy = "\u043D";
const ndash = "\u2013";
const nearhk = "\u2924";
const nearr = "\u2197";
const neArr = "\u21D7";
const nearrow = "\u2197";
const ne = "\u2260";
const nedot = "\u2250\u0338";
const NegativeMediumSpace = "\u200B";
const NegativeThickSpace = "\u200B";
const NegativeThinSpace = "\u200B";
const NegativeVeryThinSpace = "\u200B";
const nequiv = "\u2262";
const nesear = "\u2928";
const nesim = "\u2242\u0338";
const NestedGreaterGreater = "\u226B";
const NestedLessLess = "\u226A";
const NewLine = "\n";
const nexist = "\u2204";
const nexists = "\u2204";
const Nfr = "\u{1D511}";
const nfr = "\u{1D52B}";
const ngE = "\u2267\u0338";
const nge = "\u2271";
const ngeq = "\u2271";
const ngeqq = "\u2267\u0338";
const ngeqslant = "\u2A7E\u0338";
const nges = "\u2A7E\u0338";
const nGg = "\u22D9\u0338";
const ngsim = "\u2275";
const nGt = "\u226B\u20D2";
const ngt = "\u226F";
const ngtr = "\u226F";
const nGtv = "\u226B\u0338";
const nharr = "\u21AE";
const nhArr = "\u21CE";
const nhpar = "\u2AF2";
const ni = "\u220B";
const nis = "\u22FC";
const nisd = "\u22FA";
const niv = "\u220B";
const NJcy = "\u040A";
const njcy = "\u045A";
const nlarr = "\u219A";
const nlArr = "\u21CD";
const nldr = "\u2025";
const nlE = "\u2266\u0338";
const nle = "\u2270";
const nleftarrow = "\u219A";
const nLeftarrow = "\u21CD";
const nleftrightarrow = "\u21AE";
const nLeftrightarrow = "\u21CE";
const nleq = "\u2270";
const nleqq = "\u2266\u0338";
const nleqslant = "\u2A7D\u0338";
const nles = "\u2A7D\u0338";
const nless = "\u226E";
const nLl = "\u22D8\u0338";
const nlsim = "\u2274";
const nLt = "\u226A\u20D2";
const nlt = "\u226E";
const nltri = "\u22EA";
const nltrie = "\u22EC";
const nLtv = "\u226A\u0338";
const nmid = "\u2224";
const NoBreak = "\u2060";
const NonBreakingSpace = "\xA0";
const nopf = "\u{1D55F}";
const Nopf = "\u2115";
const Not = "\u2AEC";
const not$1 = "\xAC";
const NotCongruent = "\u2262";
const NotCupCap = "\u226D";
const NotDoubleVerticalBar = "\u2226";
const NotElement = "\u2209";
const NotEqual = "\u2260";
const NotEqualTilde = "\u2242\u0338";
const NotExists = "\u2204";
const NotGreater = "\u226F";
const NotGreaterEqual = "\u2271";
const NotGreaterFullEqual = "\u2267\u0338";
const NotGreaterGreater = "\u226B\u0338";
const NotGreaterLess = "\u2279";
const NotGreaterSlantEqual = "\u2A7E\u0338";
const NotGreaterTilde = "\u2275";
const NotHumpDownHump = "\u224E\u0338";
const NotHumpEqual = "\u224F\u0338";
const notin = "\u2209";
const notindot = "\u22F5\u0338";
const notinE = "\u22F9\u0338";
const notinva = "\u2209";
const notinvb = "\u22F7";
const notinvc = "\u22F6";
const NotLeftTriangleBar = "\u29CF\u0338";
const NotLeftTriangle = "\u22EA";
const NotLeftTriangleEqual = "\u22EC";
const NotLess = "\u226E";
const NotLessEqual = "\u2270";
const NotLessGreater = "\u2278";
const NotLessLess = "\u226A\u0338";
const NotLessSlantEqual = "\u2A7D\u0338";
const NotLessTilde = "\u2274";
const NotNestedGreaterGreater = "\u2AA2\u0338";
const NotNestedLessLess = "\u2AA1\u0338";
const notni = "\u220C";
const notniva = "\u220C";
const notnivb = "\u22FE";
const notnivc = "\u22FD";
const NotPrecedes = "\u2280";
const NotPrecedesEqual = "\u2AAF\u0338";
const NotPrecedesSlantEqual = "\u22E0";
const NotReverseElement = "\u220C";
const NotRightTriangleBar = "\u29D0\u0338";
const NotRightTriangle = "\u22EB";
const NotRightTriangleEqual = "\u22ED";
const NotSquareSubset = "\u228F\u0338";
const NotSquareSubsetEqual = "\u22E2";
const NotSquareSuperset = "\u2290\u0338";
const NotSquareSupersetEqual = "\u22E3";
const NotSubset = "\u2282\u20D2";
const NotSubsetEqual = "\u2288";
const NotSucceeds = "\u2281";
const NotSucceedsEqual = "\u2AB0\u0338";
const NotSucceedsSlantEqual = "\u22E1";
const NotSucceedsTilde = "\u227F\u0338";
const NotSuperset = "\u2283\u20D2";
const NotSupersetEqual = "\u2289";
const NotTilde = "\u2241";
const NotTildeEqual = "\u2244";
const NotTildeFullEqual = "\u2247";
const NotTildeTilde = "\u2249";
const NotVerticalBar = "\u2224";
const nparallel = "\u2226";
const npar = "\u2226";
const nparsl = "\u2AFD\u20E5";
const npart = "\u2202\u0338";
const npolint = "\u2A14";
const npr = "\u2280";
const nprcue = "\u22E0";
const nprec = "\u2280";
const npreceq = "\u2AAF\u0338";
const npre = "\u2AAF\u0338";
const nrarrc = "\u2933\u0338";
const nrarr = "\u219B";
const nrArr = "\u21CF";
const nrarrw = "\u219D\u0338";
const nrightarrow = "\u219B";
const nRightarrow = "\u21CF";
const nrtri = "\u22EB";
const nrtrie = "\u22ED";
const nsc = "\u2281";
const nsccue = "\u22E1";
const nsce = "\u2AB0\u0338";
const Nscr = "\u{1D4A9}";
const nscr = "\u{1D4C3}";
const nshortmid = "\u2224";
const nshortparallel = "\u2226";
const nsim = "\u2241";
const nsime = "\u2244";
const nsimeq = "\u2244";
const nsmid = "\u2224";
const nspar = "\u2226";
const nsqsube = "\u22E2";
const nsqsupe = "\u22E3";
const nsub = "\u2284";
const nsubE = "\u2AC5\u0338";
const nsube = "\u2288";
const nsubset = "\u2282\u20D2";
const nsubseteq = "\u2288";
const nsubseteqq = "\u2AC5\u0338";
const nsucc = "\u2281";
const nsucceq = "\u2AB0\u0338";
const nsup = "\u2285";
const nsupE = "\u2AC6\u0338";
const nsupe = "\u2289";
const nsupset = "\u2283\u20D2";
const nsupseteq = "\u2289";
const nsupseteqq = "\u2AC6\u0338";
const ntgl = "\u2279";
const Ntilde$1 = "\xD1";
const ntilde$1 = "\xF1";
const ntlg = "\u2278";
const ntriangleleft = "\u22EA";
const ntrianglelefteq = "\u22EC";
const ntriangleright = "\u22EB";
const ntrianglerighteq = "\u22ED";
const Nu = "\u039D";
const nu = "\u03BD";
const num = "#";
const numero = "\u2116";
const numsp = "\u2007";
const nvap = "\u224D\u20D2";
const nvdash = "\u22AC";
const nvDash = "\u22AD";
const nVdash = "\u22AE";
const nVDash = "\u22AF";
const nvge = "\u2265\u20D2";
const nvgt = ">\u20D2";
const nvHarr = "\u2904";
const nvinfin = "\u29DE";
const nvlArr = "\u2902";
const nvle = "\u2264\u20D2";
const nvlt = "<\u20D2";
const nvltrie = "\u22B4\u20D2";
const nvrArr = "\u2903";
const nvrtrie = "\u22B5\u20D2";
const nvsim = "\u223C\u20D2";
const nwarhk = "\u2923";
const nwarr = "\u2196";
const nwArr = "\u21D6";
const nwarrow = "\u2196";
const nwnear = "\u2927";
const Oacute$1 = "\xD3";
const oacute$1 = "\xF3";
const oast = "\u229B";
const Ocirc$1 = "\xD4";
const ocirc$1 = "\xF4";
const ocir = "\u229A";
const Ocy = "\u041E";
const ocy = "\u043E";
const odash = "\u229D";
const Odblac = "\u0150";
const odblac = "\u0151";
const odiv = "\u2A38";
const odot = "\u2299";
const odsold = "\u29BC";
const OElig = "\u0152";
const oelig = "\u0153";
const ofcir = "\u29BF";
const Ofr = "\u{1D512}";
const ofr = "\u{1D52C}";
const ogon = "\u02DB";
const Ograve$1 = "\xD2";
const ograve$1 = "\xF2";
const ogt = "\u29C1";
const ohbar = "\u29B5";
const ohm = "\u03A9";
const oint = "\u222E";
const olarr = "\u21BA";
const olcir = "\u29BE";
const olcross = "\u29BB";
const oline = "\u203E";
const olt = "\u29C0";
const Omacr = "\u014C";
const omacr = "\u014D";
const Omega = "\u03A9";
const omega = "\u03C9";
const Omicron = "\u039F";
const omicron = "\u03BF";
const omid = "\u29B6";
const ominus = "\u2296";
const Oopf = "\u{1D546}";
const oopf = "\u{1D560}";
const opar = "\u29B7";
const OpenCurlyDoubleQuote = "\u201C";
const OpenCurlyQuote = "\u2018";
const operp = "\u29B9";
const oplus = "\u2295";
const orarr = "\u21BB";
const Or = "\u2A54";
const or = "\u2228";
const ord = "\u2A5D";
const order = "\u2134";
const orderof = "\u2134";
const ordf$1 = "\xAA";
const ordm$1 = "\xBA";
const origof = "\u22B6";
const oror = "\u2A56";
const orslope = "\u2A57";
const orv = "\u2A5B";
const oS = "\u24C8";
const Oscr = "\u{1D4AA}";
const oscr = "\u2134";
const Oslash$1 = "\xD8";
const oslash$1 = "\xF8";
const osol = "\u2298";
const Otilde$1 = "\xD5";
const otilde$1 = "\xF5";
const otimesas = "\u2A36";
const Otimes = "\u2A37";
const otimes = "\u2297";
const Ouml$1 = "\xD6";
const ouml$1 = "\xF6";
const ovbar = "\u233D";
const OverBar = "\u203E";
const OverBrace = "\u23DE";
const OverBracket = "\u23B4";
const OverParenthesis = "\u23DC";
const para$1 = "\xB6";
const parallel = "\u2225";
const par = "\u2225";
const parsim = "\u2AF3";
const parsl = "\u2AFD";
const part = "\u2202";
const PartialD = "\u2202";
const Pcy = "\u041F";
const pcy = "\u043F";
const percnt = "%";
const period = ".";
const permil = "\u2030";
const perp = "\u22A5";
const pertenk = "\u2031";
const Pfr = "\u{1D513}";
const pfr = "\u{1D52D}";
const Phi = "\u03A6";
const phi = "\u03C6";
const phiv = "\u03D5";
const phmmat = "\u2133";
const phone = "\u260E";
const Pi = "\u03A0";
const pi = "\u03C0";
const pitchfork = "\u22D4";
const piv = "\u03D6";
const planck = "\u210F";
const planckh = "\u210E";
const plankv = "\u210F";
const plusacir = "\u2A23";
const plusb = "\u229E";
const pluscir = "\u2A22";
const plus = "+";
const plusdo = "\u2214";
const plusdu = "\u2A25";
const pluse = "\u2A72";
const PlusMinus = "\xB1";
const plusmn$1 = "\xB1";
const plussim = "\u2A26";
const plustwo = "\u2A27";
const pm = "\xB1";
const Poincareplane = "\u210C";
const pointint = "\u2A15";
const popf = "\u{1D561}";
const Popf = "\u2119";
const pound$1 = "\xA3";
const prap = "\u2AB7";
const Pr = "\u2ABB";
const pr = "\u227A";
const prcue = "\u227C";
const precapprox = "\u2AB7";
const prec = "\u227A";
const preccurlyeq = "\u227C";
const Precedes = "\u227A";
const PrecedesEqual = "\u2AAF";
const PrecedesSlantEqual = "\u227C";
const PrecedesTilde = "\u227E";
const preceq = "\u2AAF";
const precnapprox = "\u2AB9";
const precneqq = "\u2AB5";
const precnsim = "\u22E8";
const pre = "\u2AAF";
const prE = "\u2AB3";
const precsim = "\u227E";
const prime = "\u2032";
const Prime = "\u2033";
const primes = "\u2119";
const prnap = "\u2AB9";
const prnE = "\u2AB5";
const prnsim = "\u22E8";
const prod = "\u220F";
const Product = "\u220F";
const profalar = "\u232E";
const profline = "\u2312";
const profsurf = "\u2313";
const prop = "\u221D";
const Proportional = "\u221D";
const Proportion = "\u2237";
const propto = "\u221D";
const prsim = "\u227E";
const prurel = "\u22B0";
const Pscr = "\u{1D4AB}";
const pscr = "\u{1D4C5}";
const Psi = "\u03A8";
const psi = "\u03C8";
const puncsp = "\u2008";
const Qfr = "\u{1D514}";
const qfr = "\u{1D52E}";
const qint = "\u2A0C";
const qopf = "\u{1D562}";
const Qopf = "\u211A";
const qprime = "\u2057";
const Qscr = "\u{1D4AC}";
const qscr = "\u{1D4C6}";
const quaternions = "\u210D";
const quatint = "\u2A16";
const quest = "?";
const questeq = "\u225F";
const quot$2 = '"';
const QUOT$1 = '"';
const rAarr = "\u21DB";
const race = "\u223D\u0331";
const Racute = "\u0154";
const racute = "\u0155";
const radic = "\u221A";
const raemptyv = "\u29B3";
const rang = "\u27E9";
const Rang = "\u27EB";
const rangd = "\u2992";
const range$1 = "\u29A5";
const rangle = "\u27E9";
const raquo$1 = "\xBB";
const rarrap = "\u2975";
const rarrb = "\u21E5";
const rarrbfs = "\u2920";
const rarrc = "\u2933";
const rarr = "\u2192";
const Rarr = "\u21A0";
const rArr = "\u21D2";
const rarrfs = "\u291E";
const rarrhk = "\u21AA";
const rarrlp = "\u21AC";
const rarrpl = "\u2945";
const rarrsim = "\u2974";
const Rarrtl = "\u2916";
const rarrtl = "\u21A3";
const rarrw = "\u219D";
const ratail = "\u291A";
const rAtail = "\u291C";
const ratio = "\u2236";
const rationals = "\u211A";
const rbarr = "\u290D";
const rBarr = "\u290F";
const RBarr = "\u2910";
const rbbrk = "\u2773";
const rbrace = "}";
const rbrack = "]";
const rbrke = "\u298C";
const rbrksld = "\u298E";
const rbrkslu = "\u2990";
const Rcaron = "\u0158";
const rcaron = "\u0159";
const Rcedil = "\u0156";
const rcedil = "\u0157";
const rceil = "\u2309";
const rcub = "}";
const Rcy = "\u0420";
const rcy = "\u0440";
const rdca = "\u2937";
const rdldhar = "\u2969";
const rdquo = "\u201D";
const rdquor = "\u201D";
const rdsh = "\u21B3";
const real = "\u211C";
const realine = "\u211B";
const realpart = "\u211C";
const reals = "\u211D";
const Re = "\u211C";
const rect = "\u25AD";
const reg$1 = "\xAE";
const REG$1 = "\xAE";
const ReverseElement = "\u220B";
const ReverseEquilibrium = "\u21CB";
const ReverseUpEquilibrium = "\u296F";
const rfisht = "\u297D";
const rfloor = "\u230B";
const rfr = "\u{1D52F}";
const Rfr = "\u211C";
const rHar = "\u2964";
const rhard = "\u21C1";
const rharu = "\u21C0";
const rharul = "\u296C";
const Rho = "\u03A1";
const rho = "\u03C1";
const rhov = "\u03F1";
const RightAngleBracket = "\u27E9";
const RightArrowBar = "\u21E5";
const rightarrow = "\u2192";
const RightArrow = "\u2192";
const Rightarrow = "\u21D2";
const RightArrowLeftArrow = "\u21C4";
const rightarrowtail = "\u21A3";
const RightCeiling = "\u2309";
const RightDoubleBracket = "\u27E7";
const RightDownTeeVector = "\u295D";
const RightDownVectorBar = "\u2955";
const RightDownVector = "\u21C2";
const RightFloor = "\u230B";
const rightharpoondown = "\u21C1";
const rightharpoonup = "\u21C0";
const rightleftarrows = "\u21C4";
const rightleftharpoons = "\u21CC";
const rightrightarrows = "\u21C9";
const rightsquigarrow = "\u219D";
const RightTeeArrow = "\u21A6";
const RightTee = "\u22A2";
const RightTeeVector = "\u295B";
const rightthreetimes = "\u22CC";
const RightTriangleBar = "\u29D0";
const RightTriangle = "\u22B3";
const RightTriangleEqual = "\u22B5";
const RightUpDownVector = "\u294F";
const RightUpTeeVector = "\u295C";
const RightUpVectorBar = "\u2954";
const RightUpVector = "\u21BE";
const RightVectorBar = "\u2953";
const RightVector = "\u21C0";
const ring = "\u02DA";
const risingdotseq = "\u2253";
const rlarr = "\u21C4";
const rlhar = "\u21CC";
const rlm = "\u200F";
const rmoustache = "\u23B1";
const rmoust = "\u23B1";
const rnmid = "\u2AEE";
const roang = "\u27ED";
const roarr = "\u21FE";
const robrk = "\u27E7";
const ropar = "\u2986";
const ropf = "\u{1D563}";
const Ropf = "\u211D";
const roplus = "\u2A2E";
const rotimes = "\u2A35";
const RoundImplies = "\u2970";
const rpar = ")";
const rpargt = "\u2994";
const rppolint = "\u2A12";
const rrarr = "\u21C9";
const Rrightarrow = "\u21DB";
const rsaquo = "\u203A";
const rscr = "\u{1D4C7}";
const Rscr = "\u211B";
const rsh = "\u21B1";
const Rsh = "\u21B1";
const rsqb = "]";
const rsquo = "\u2019";
const rsquor = "\u2019";
const rthree = "\u22CC";
const rtimes = "\u22CA";
const rtri = "\u25B9";
const rtrie = "\u22B5";
const rtrif = "\u25B8";
const rtriltri = "\u29CE";
const RuleDelayed = "\u29F4";
const ruluhar = "\u2968";
const rx = "\u211E";
const Sacute = "\u015A";
const sacute = "\u015B";
const sbquo = "\u201A";
const scap = "\u2AB8";
const Scaron = "\u0160";
const scaron = "\u0161";
const Sc = "\u2ABC";
const sc = "\u227B";
const sccue = "\u227D";
const sce = "\u2AB0";
const scE = "\u2AB4";
const Scedil = "\u015E";
const scedil = "\u015F";
const Scirc = "\u015C";
const scirc = "\u015D";
const scnap = "\u2ABA";
const scnE = "\u2AB6";
const scnsim = "\u22E9";
const scpolint = "\u2A13";
const scsim = "\u227F";
const Scy = "\u0421";
const scy = "\u0441";
const sdotb = "\u22A1";
const sdot = "\u22C5";
const sdote = "\u2A66";
const searhk = "\u2925";
const searr = "\u2198";
const seArr = "\u21D8";
const searrow = "\u2198";
const sect$1 = "\xA7";
const semi = ";";
const seswar = "\u2929";
const setminus = "\u2216";
const setmn = "\u2216";
const sext = "\u2736";
const Sfr = "\u{1D516}";
const sfr = "\u{1D530}";
const sfrown = "\u2322";
const sharp = "\u266F";
const SHCHcy = "\u0429";
const shchcy = "\u0449";
const SHcy = "\u0428";
const shcy = "\u0448";
const ShortDownArrow = "\u2193";
const ShortLeftArrow = "\u2190";
const shortmid = "\u2223";
const shortparallel = "\u2225";
const ShortRightArrow = "\u2192";
const ShortUpArrow = "\u2191";
const shy$1 = "\xAD";
const Sigma = "\u03A3";
const sigma = "\u03C3";
const sigmaf = "\u03C2";
const sigmav = "\u03C2";
const sim = "\u223C";
const simdot = "\u2A6A";
const sime = "\u2243";
const simeq = "\u2243";
const simg = "\u2A9E";
const simgE = "\u2AA0";
const siml = "\u2A9D";
const simlE = "\u2A9F";
const simne = "\u2246";
const simplus = "\u2A24";
const simrarr = "\u2972";
const slarr = "\u2190";
const SmallCircle = "\u2218";
const smallsetminus = "\u2216";
const smashp = "\u2A33";
const smeparsl = "\u29E4";
const smid = "\u2223";
const smile = "\u2323";
const smt = "\u2AAA";
const smte = "\u2AAC";
const smtes = "\u2AAC\uFE00";
const SOFTcy = "\u042C";
const softcy = "\u044C";
const solbar = "\u233F";
const solb = "\u29C4";
const sol = "/";
const Sopf = "\u{1D54A}";
const sopf = "\u{1D564}";
const spades = "\u2660";
const spadesuit = "\u2660";
const spar = "\u2225";
const sqcap = "\u2293";
const sqcaps = "\u2293\uFE00";
const sqcup = "\u2294";
const sqcups = "\u2294\uFE00";
const Sqrt = "\u221A";
const sqsub = "\u228F";
const sqsube = "\u2291";
const sqsubset = "\u228F";
const sqsubseteq = "\u2291";
const sqsup = "\u2290";
const sqsupe = "\u2292";
const sqsupset = "\u2290";
const sqsupseteq = "\u2292";
const square = "\u25A1";
const Square = "\u25A1";
const SquareIntersection = "\u2293";
const SquareSubset = "\u228F";
const SquareSubsetEqual = "\u2291";
const SquareSuperset = "\u2290";
const SquareSupersetEqual = "\u2292";
const SquareUnion = "\u2294";
const squarf = "\u25AA";
const squ = "\u25A1";
const squf = "\u25AA";
const srarr = "\u2192";
const Sscr = "\u{1D4AE}";
const sscr = "\u{1D4C8}";
const ssetmn = "\u2216";
const ssmile = "\u2323";
const sstarf = "\u22C6";
const Star = "\u22C6";
const star = "\u2606";
const starf = "\u2605";
const straightepsilon = "\u03F5";
const straightphi = "\u03D5";
const strns = "\xAF";
const sub = "\u2282";
const Sub = "\u22D0";
const subdot = "\u2ABD";
const subE = "\u2AC5";
const sube = "\u2286";
const subedot = "\u2AC3";
const submult = "\u2AC1";
const subnE = "\u2ACB";
const subne = "\u228A";
const subplus = "\u2ABF";
const subrarr = "\u2979";
const subset = "\u2282";
const Subset = "\u22D0";
const subseteq = "\u2286";
const subseteqq = "\u2AC5";
const SubsetEqual = "\u2286";
const subsetneq = "\u228A";
const subsetneqq = "\u2ACB";
const subsim = "\u2AC7";
const subsub = "\u2AD5";
const subsup = "\u2AD3";
const succapprox = "\u2AB8";
const succ = "\u227B";
const succcurlyeq = "\u227D";
const Succeeds = "\u227B";
const SucceedsEqual = "\u2AB0";
const SucceedsSlantEqual = "\u227D";
const SucceedsTilde = "\u227F";
const succeq = "\u2AB0";
const succnapprox = "\u2ABA";
const succneqq = "\u2AB6";
const succnsim = "\u22E9";
const succsim = "\u227F";
const SuchThat = "\u220B";
const sum = "\u2211";
const Sum = "\u2211";
const sung = "\u266A";
const sup1$1 = "\xB9";
const sup2$1 = "\xB2";
const sup3$1 = "\xB3";
const sup = "\u2283";
const Sup = "\u22D1";
const supdot = "\u2ABE";
const supdsub = "\u2AD8";
const supE = "\u2AC6";
const supe = "\u2287";
const supedot = "\u2AC4";
const Superset = "\u2283";
const SupersetEqual = "\u2287";
const suphsol = "\u27C9";
const suphsub = "\u2AD7";
const suplarr = "\u297B";
const supmult = "\u2AC2";
const supnE = "\u2ACC";
const supne = "\u228B";
const supplus = "\u2AC0";
const supset = "\u2283";
const Supset = "\u22D1";
const supseteq = "\u2287";
const supseteqq = "\u2AC6";
const supsetneq = "\u228B";
const supsetneqq = "\u2ACC";
const supsim = "\u2AC8";
const supsub = "\u2AD4";
const supsup = "\u2AD6";
const swarhk = "\u2926";
const swarr = "\u2199";
const swArr = "\u21D9";
const swarrow = "\u2199";
const swnwar = "\u292A";
const szlig$1 = "\xDF";
const Tab = "	";
const target = "\u2316";
const Tau = "\u03A4";
const tau = "\u03C4";
const tbrk = "\u23B4";
const Tcaron = "\u0164";
const tcaron = "\u0165";
const Tcedil = "\u0162";
const tcedil = "\u0163";
const Tcy = "\u0422";
const tcy = "\u0442";
const tdot = "\u20DB";
const telrec = "\u2315";
const Tfr = "\u{1D517}";
const tfr = "\u{1D531}";
const there4 = "\u2234";
const therefore = "\u2234";
const Therefore = "\u2234";
const Theta = "\u0398";
const theta = "\u03B8";
const thetasym = "\u03D1";
const thetav = "\u03D1";
const thickapprox = "\u2248";
const thicksim = "\u223C";
const ThickSpace = "\u205F\u200A";
const ThinSpace = "\u2009";
const thinsp = "\u2009";
const thkap = "\u2248";
const thksim = "\u223C";
const THORN$1 = "\xDE";
const thorn$1 = "\xFE";
const tilde = "\u02DC";
const Tilde = "\u223C";
const TildeEqual = "\u2243";
const TildeFullEqual = "\u2245";
const TildeTilde = "\u2248";
const timesbar = "\u2A31";
const timesb = "\u22A0";
const times$1 = "\xD7";
const timesd = "\u2A30";
const tint = "\u222D";
const toea = "\u2928";
const topbot = "\u2336";
const topcir = "\u2AF1";
const top$1 = "\u22A4";
const Topf = "\u{1D54B}";
const topf = "\u{1D565}";
const topfork = "\u2ADA";
const tosa = "\u2929";
const tprime = "\u2034";
const trade = "\u2122";
const TRADE = "\u2122";
const triangle = "\u25B5";
const triangledown = "\u25BF";
const triangleleft = "\u25C3";
const trianglelefteq = "\u22B4";
const triangleq = "\u225C";
const triangleright = "\u25B9";
const trianglerighteq = "\u22B5";
const tridot = "\u25EC";
const trie = "\u225C";
const triminus = "\u2A3A";
const TripleDot = "\u20DB";
const triplus = "\u2A39";
const trisb = "\u29CD";
const tritime = "\u2A3B";
const trpezium = "\u23E2";
const Tscr = "\u{1D4AF}";
const tscr = "\u{1D4C9}";
const TScy = "\u0426";
const tscy = "\u0446";
const TSHcy = "\u040B";
const tshcy = "\u045B";
const Tstrok = "\u0166";
const tstrok = "\u0167";
const twixt = "\u226C";
const twoheadleftarrow = "\u219E";
const twoheadrightarrow = "\u21A0";
const Uacute$1 = "\xDA";
const uacute$1 = "\xFA";
const uarr = "\u2191";
const Uarr = "\u219F";
const uArr = "\u21D1";
const Uarrocir = "\u2949";
const Ubrcy = "\u040E";
const ubrcy = "\u045E";
const Ubreve = "\u016C";
const ubreve = "\u016D";
const Ucirc$1 = "\xDB";
const ucirc$1 = "\xFB";
const Ucy = "\u0423";
const ucy = "\u0443";
const udarr = "\u21C5";
const Udblac = "\u0170";
const udblac = "\u0171";
const udhar = "\u296E";
const ufisht = "\u297E";
const Ufr = "\u{1D518}";
const ufr = "\u{1D532}";
const Ugrave$1 = "\xD9";
const ugrave$1 = "\xF9";
const uHar = "\u2963";
const uharl = "\u21BF";
const uharr = "\u21BE";
const uhblk = "\u2580";
const ulcorn = "\u231C";
const ulcorner = "\u231C";
const ulcrop = "\u230F";
const ultri = "\u25F8";
const Umacr = "\u016A";
const umacr = "\u016B";
const uml$1 = "\xA8";
const UnderBar = "_";
const UnderBrace = "\u23DF";
const UnderBracket = "\u23B5";
const UnderParenthesis = "\u23DD";
const Union = "\u22C3";
const UnionPlus = "\u228E";
const Uogon = "\u0172";
const uogon = "\u0173";
const Uopf = "\u{1D54C}";
const uopf = "\u{1D566}";
const UpArrowBar = "\u2912";
const uparrow = "\u2191";
const UpArrow = "\u2191";
const Uparrow = "\u21D1";
const UpArrowDownArrow = "\u21C5";
const updownarrow = "\u2195";
const UpDownArrow = "\u2195";
const Updownarrow = "\u21D5";
const UpEquilibrium = "\u296E";
const upharpoonleft = "\u21BF";
const upharpoonright = "\u21BE";
const uplus = "\u228E";
const UpperLeftArrow = "\u2196";
const UpperRightArrow = "\u2197";
const upsi = "\u03C5";
const Upsi = "\u03D2";
const upsih = "\u03D2";
const Upsilon = "\u03A5";
const upsilon = "\u03C5";
const UpTeeArrow = "\u21A5";
const UpTee = "\u22A5";
const upuparrows = "\u21C8";
const urcorn = "\u231D";
const urcorner = "\u231D";
const urcrop = "\u230E";
const Uring = "\u016E";
const uring = "\u016F";
const urtri = "\u25F9";
const Uscr = "\u{1D4B0}";
const uscr = "\u{1D4CA}";
const utdot = "\u22F0";
const Utilde = "\u0168";
const utilde = "\u0169";
const utri = "\u25B5";
const utrif = "\u25B4";
const uuarr = "\u21C8";
const Uuml$1 = "\xDC";
const uuml$1 = "\xFC";
const uwangle = "\u29A7";
const vangrt = "\u299C";
const varepsilon = "\u03F5";
const varkappa = "\u03F0";
const varnothing = "\u2205";
const varphi = "\u03D5";
const varpi = "\u03D6";
const varpropto = "\u221D";
const varr = "\u2195";
const vArr = "\u21D5";
const varrho = "\u03F1";
const varsigma = "\u03C2";
const varsubsetneq = "\u228A\uFE00";
const varsubsetneqq = "\u2ACB\uFE00";
const varsupsetneq = "\u228B\uFE00";
const varsupsetneqq = "\u2ACC\uFE00";
const vartheta = "\u03D1";
const vartriangleleft = "\u22B2";
const vartriangleright = "\u22B3";
const vBar = "\u2AE8";
const Vbar = "\u2AEB";
const vBarv = "\u2AE9";
const Vcy = "\u0412";
const vcy = "\u0432";
const vdash = "\u22A2";
const vDash = "\u22A8";
const Vdash = "\u22A9";
const VDash = "\u22AB";
const Vdashl = "\u2AE6";
const veebar = "\u22BB";
const vee = "\u2228";
const Vee = "\u22C1";
const veeeq = "\u225A";
const vellip = "\u22EE";
const verbar = "|";
const Verbar = "\u2016";
const vert = "|";
const Vert = "\u2016";
const VerticalBar = "\u2223";
const VerticalLine = "|";
const VerticalSeparator = "\u2758";
const VerticalTilde = "\u2240";
const VeryThinSpace = "\u200A";
const Vfr = "\u{1D519}";
const vfr = "\u{1D533}";
const vltri = "\u22B2";
const vnsub = "\u2282\u20D2";
const vnsup = "\u2283\u20D2";
const Vopf = "\u{1D54D}";
const vopf = "\u{1D567}";
const vprop = "\u221D";
const vrtri = "\u22B3";
const Vscr = "\u{1D4B1}";
const vscr = "\u{1D4CB}";
const vsubnE = "\u2ACB\uFE00";
const vsubne = "\u228A\uFE00";
const vsupnE = "\u2ACC\uFE00";
const vsupne = "\u228B\uFE00";
const Vvdash = "\u22AA";
const vzigzag = "\u299A";
const Wcirc = "\u0174";
const wcirc = "\u0175";
const wedbar = "\u2A5F";
const wedge = "\u2227";
const Wedge = "\u22C0";
const wedgeq = "\u2259";
const weierp = "\u2118";
const Wfr = "\u{1D51A}";
const wfr = "\u{1D534}";
const Wopf = "\u{1D54E}";
const wopf = "\u{1D568}";
const wp = "\u2118";
const wr = "\u2240";
const wreath = "\u2240";
const Wscr = "\u{1D4B2}";
const wscr = "\u{1D4CC}";
const xcap = "\u22C2";
const xcirc = "\u25EF";
const xcup = "\u22C3";
const xdtri = "\u25BD";
const Xfr = "\u{1D51B}";
const xfr = "\u{1D535}";
const xharr = "\u27F7";
const xhArr = "\u27FA";
const Xi = "\u039E";
const xi = "\u03BE";
const xlarr = "\u27F5";
const xlArr = "\u27F8";
const xmap = "\u27FC";
const xnis = "\u22FB";
const xodot = "\u2A00";
const Xopf = "\u{1D54F}";
const xopf = "\u{1D569}";
const xoplus = "\u2A01";
const xotime = "\u2A02";
const xrarr = "\u27F6";
const xrArr = "\u27F9";
const Xscr = "\u{1D4B3}";
const xscr = "\u{1D4CD}";
const xsqcup = "\u2A06";
const xuplus = "\u2A04";
const xutri = "\u25B3";
const xvee = "\u22C1";
const xwedge = "\u22C0";
const Yacute$1 = "\xDD";
const yacute$1 = "\xFD";
const YAcy = "\u042F";
const yacy = "\u044F";
const Ycirc = "\u0176";
const ycirc = "\u0177";
const Ycy = "\u042B";
const ycy = "\u044B";
const yen$1 = "\xA5";
const Yfr = "\u{1D51C}";
const yfr = "\u{1D536}";
const YIcy = "\u0407";
const yicy = "\u0457";
const Yopf = "\u{1D550}";
const yopf = "\u{1D56A}";
const Yscr = "\u{1D4B4}";
const yscr = "\u{1D4CE}";
const YUcy = "\u042E";
const yucy = "\u044E";
const yuml$1 = "\xFF";
const Yuml = "\u0178";
const Zacute = "\u0179";
const zacute = "\u017A";
const Zcaron = "\u017D";
const zcaron = "\u017E";
const Zcy = "\u0417";
const zcy = "\u0437";
const Zdot = "\u017B";
const zdot = "\u017C";
const zeetrf = "\u2128";
const ZeroWidthSpace = "\u200B";
const Zeta = "\u0396";
const zeta = "\u03B6";
const zfr = "\u{1D537}";
const Zfr = "\u2128";
const ZHcy = "\u0416";
const zhcy = "\u0436";
const zigrarr = "\u21DD";
const zopf = "\u{1D56B}";
const Zopf = "\u2124";
const Zscr = "\u{1D4B5}";
const zscr = "\u{1D4CF}";
const zwj = "\u200D";
const zwnj = "\u200C";
var require$$1$1 = {
  Aacute: Aacute$1,
  aacute: aacute$1,
  Abreve,
  abreve,
  ac,
  acd,
  acE,
  Acirc: Acirc$1,
  acirc: acirc$1,
  acute: acute$1,
  Acy,
  acy,
  AElig: AElig$1,
  aelig: aelig$1,
  af,
  Afr,
  afr,
  Agrave: Agrave$1,
  agrave: agrave$1,
  alefsym,
  aleph,
  Alpha,
  alpha,
  Amacr,
  amacr,
  amalg,
  amp: amp$2,
  AMP: AMP$1,
  andand,
  And,
  and,
  andd,
  andslope,
  andv,
  ang,
  ange,
  angle,
  angmsdaa,
  angmsdab,
  angmsdac,
  angmsdad,
  angmsdae,
  angmsdaf,
  angmsdag,
  angmsdah,
  angmsd,
  angrt,
  angrtvb,
  angrtvbd,
  angsph,
  angst,
  angzarr,
  Aogon,
  aogon,
  Aopf,
  aopf,
  apacir,
  ap,
  apE,
  ape,
  apid,
  apos: apos$1,
  ApplyFunction,
  approx,
  approxeq,
  Aring: Aring$1,
  aring: aring$1,
  Ascr,
  ascr,
  Assign,
  ast,
  asymp,
  asympeq,
  Atilde: Atilde$1,
  atilde: atilde$1,
  Auml: Auml$1,
  auml: auml$1,
  awconint,
  awint,
  backcong,
  backepsilon,
  backprime,
  backsim,
  backsimeq,
  Backslash,
  Barv,
  barvee,
  barwed,
  Barwed,
  barwedge,
  bbrk,
  bbrktbrk,
  bcong,
  Bcy,
  bcy,
  bdquo,
  becaus,
  because,
  Because,
  bemptyv,
  bepsi,
  bernou,
  Bernoullis,
  Beta,
  beta,
  beth,
  between,
  Bfr,
  bfr,
  bigcap,
  bigcirc,
  bigcup,
  bigodot,
  bigoplus,
  bigotimes,
  bigsqcup,
  bigstar,
  bigtriangledown,
  bigtriangleup,
  biguplus,
  bigvee,
  bigwedge,
  bkarow,
  blacklozenge,
  blacksquare,
  blacktriangle,
  blacktriangledown,
  blacktriangleleft,
  blacktriangleright,
  blank,
  blk12,
  blk14,
  blk34,
  block: block2,
  bne,
  bnequiv,
  bNot,
  bnot,
  Bopf,
  bopf,
  bot,
  bottom: bottom$1,
  bowtie,
  boxbox,
  boxdl,
  boxdL,
  boxDl,
  boxDL,
  boxdr,
  boxdR,
  boxDr,
  boxDR,
  boxh,
  boxH,
  boxhd,
  boxHd,
  boxhD,
  boxHD,
  boxhu,
  boxHu,
  boxhU,
  boxHU,
  boxminus,
  boxplus,
  boxtimes,
  boxul,
  boxuL,
  boxUl,
  boxUL,
  boxur,
  boxuR,
  boxUr,
  boxUR,
  boxv,
  boxV,
  boxvh,
  boxvH,
  boxVh,
  boxVH,
  boxvl,
  boxvL,
  boxVl,
  boxVL,
  boxvr,
  boxvR,
  boxVr,
  boxVR,
  bprime,
  breve,
  Breve,
  brvbar: brvbar$1,
  bscr,
  Bscr,
  bsemi,
  bsim,
  bsime,
  bsolb,
  bsol,
  bsolhsub,
  bull,
  bullet,
  bump,
  bumpE,
  bumpe,
  Bumpeq,
  bumpeq,
  Cacute,
  cacute,
  capand,
  capbrcup,
  capcap,
  cap,
  Cap,
  capcup,
  capdot,
  CapitalDifferentialD,
  caps,
  caret,
  caron,
  Cayleys,
  ccaps,
  Ccaron,
  ccaron,
  Ccedil: Ccedil$1,
  ccedil: ccedil$1,
  Ccirc,
  ccirc,
  Cconint,
  ccups,
  ccupssm,
  Cdot,
  cdot,
  cedil: cedil$1,
  Cedilla,
  cemptyv,
  cent: cent$1,
  centerdot,
  CenterDot,
  cfr,
  Cfr,
  CHcy,
  chcy,
  check,
  checkmark,
  Chi,
  chi,
  circ,
  circeq,
  circlearrowleft,
  circlearrowright,
  circledast,
  circledcirc,
  circleddash,
  CircleDot,
  circledR,
  circledS,
  CircleMinus,
  CirclePlus,
  CircleTimes,
  cir,
  cirE,
  cire,
  cirfnint,
  cirmid,
  cirscir,
  ClockwiseContourIntegral,
  CloseCurlyDoubleQuote,
  CloseCurlyQuote,
  clubs,
  clubsuit,
  colon,
  Colon,
  Colone,
  colone,
  coloneq,
  comma,
  commat,
  comp,
  compfn,
  complement,
  complexes,
  cong,
  congdot,
  Congruent,
  conint,
  Conint,
  ContourIntegral,
  copf,
  Copf,
  coprod,
  Coproduct,
  copy: copy$1,
  COPY: COPY$1,
  copysr,
  CounterClockwiseContourIntegral,
  crarr,
  cross,
  Cross,
  Cscr,
  cscr,
  csub,
  csube,
  csup,
  csupe,
  ctdot,
  cudarrl,
  cudarrr,
  cuepr,
  cuesc,
  cularr,
  cularrp,
  cupbrcap,
  cupcap,
  CupCap,
  cup,
  Cup,
  cupcup,
  cupdot,
  cupor,
  cups,
  curarr,
  curarrm,
  curlyeqprec,
  curlyeqsucc,
  curlyvee,
  curlywedge,
  curren: curren$1,
  curvearrowleft,
  curvearrowright,
  cuvee,
  cuwed,
  cwconint,
  cwint,
  cylcty,
  dagger,
  Dagger,
  daleth,
  darr,
  Darr,
  dArr,
  dash,
  Dashv,
  dashv,
  dbkarow,
  dblac,
  Dcaron,
  dcaron,
  Dcy,
  dcy,
  ddagger,
  ddarr,
  DD,
  dd,
  DDotrahd,
  ddotseq,
  deg: deg$1,
  Del,
  Delta,
  delta,
  demptyv,
  dfisht,
  Dfr,
  dfr,
  dHar,
  dharl,
  dharr,
  DiacriticalAcute,
  DiacriticalDot,
  DiacriticalDoubleAcute,
  DiacriticalGrave,
  DiacriticalTilde,
  diam,
  diamond,
  Diamond,
  diamondsuit,
  diams,
  die,
  DifferentialD,
  digamma,
  disin,
  div,
  divide: divide$1,
  divideontimes,
  divonx,
  DJcy,
  djcy,
  dlcorn,
  dlcrop,
  dollar,
  Dopf,
  dopf,
  Dot,
  dot,
  DotDot,
  doteq,
  doteqdot,
  DotEqual,
  dotminus,
  dotplus,
  dotsquare,
  doublebarwedge,
  DoubleContourIntegral,
  DoubleDot,
  DoubleDownArrow,
  DoubleLeftArrow,
  DoubleLeftRightArrow,
  DoubleLeftTee,
  DoubleLongLeftArrow,
  DoubleLongLeftRightArrow,
  DoubleLongRightArrow,
  DoubleRightArrow,
  DoubleRightTee,
  DoubleUpArrow,
  DoubleUpDownArrow,
  DoubleVerticalBar,
  DownArrowBar,
  downarrow,
  DownArrow,
  Downarrow,
  DownArrowUpArrow,
  DownBreve,
  downdownarrows,
  downharpoonleft,
  downharpoonright,
  DownLeftRightVector,
  DownLeftTeeVector,
  DownLeftVectorBar,
  DownLeftVector,
  DownRightTeeVector,
  DownRightVectorBar,
  DownRightVector,
  DownTeeArrow,
  DownTee,
  drbkarow,
  drcorn,
  drcrop,
  Dscr,
  dscr,
  DScy,
  dscy,
  dsol,
  Dstrok,
  dstrok,
  dtdot,
  dtri,
  dtrif,
  duarr,
  duhar,
  dwangle,
  DZcy,
  dzcy,
  dzigrarr,
  Eacute: Eacute$1,
  eacute: eacute$1,
  easter,
  Ecaron,
  ecaron,
  Ecirc: Ecirc$1,
  ecirc: ecirc$1,
  ecir,
  ecolon,
  Ecy,
  ecy,
  eDDot,
  Edot,
  edot,
  eDot,
  ee,
  efDot,
  Efr,
  efr,
  eg,
  Egrave: Egrave$1,
  egrave: egrave$1,
  egs,
  egsdot,
  el,
  Element: Element$2,
  elinters,
  ell,
  els,
  elsdot,
  Emacr,
  emacr,
  empty,
  emptyset,
  EmptySmallSquare,
  emptyv,
  EmptyVerySmallSquare,
  emsp13,
  emsp14,
  emsp,
  ENG,
  eng,
  ensp,
  Eogon,
  eogon,
  Eopf,
  eopf,
  epar,
  eparsl,
  eplus,
  epsi,
  Epsilon,
  epsilon,
  epsiv,
  eqcirc,
  eqcolon,
  eqsim,
  eqslantgtr,
  eqslantless,
  Equal,
  equals,
  EqualTilde,
  equest,
  Equilibrium,
  equiv,
  equivDD,
  eqvparsl,
  erarr,
  erDot,
  escr,
  Escr,
  esdot,
  Esim,
  esim,
  Eta,
  eta,
  ETH: ETH$1,
  eth: eth$1,
  Euml: Euml$1,
  euml: euml$1,
  euro,
  excl,
  exist,
  Exists,
  expectation,
  exponentiale,
  ExponentialE,
  fallingdotseq,
  Fcy,
  fcy,
  female,
  ffilig,
  fflig,
  ffllig,
  Ffr,
  ffr,
  filig,
  FilledSmallSquare,
  FilledVerySmallSquare,
  fjlig,
  flat,
  fllig,
  fltns,
  fnof,
  Fopf,
  fopf,
  forall,
  ForAll,
  fork,
  forkv,
  Fouriertrf,
  fpartint,
  frac12: frac12$1,
  frac13,
  frac14: frac14$1,
  frac15,
  frac16,
  frac18,
  frac23,
  frac25,
  frac34: frac34$1,
  frac35,
  frac38,
  frac45,
  frac56,
  frac58,
  frac78,
  frasl,
  frown,
  fscr,
  Fscr,
  gacute,
  Gamma,
  gamma,
  Gammad,
  gammad,
  gap,
  Gbreve,
  gbreve,
  Gcedil,
  Gcirc,
  gcirc,
  Gcy,
  gcy,
  Gdot,
  gdot,
  ge,
  gE,
  gEl,
  gel,
  geq,
  geqq,
  geqslant,
  gescc,
  ges,
  gesdot,
  gesdoto,
  gesdotol,
  gesl,
  gesles,
  Gfr,
  gfr,
  gg,
  Gg,
  ggg,
  gimel,
  GJcy,
  gjcy,
  gla,
  gl,
  glE,
  glj,
  gnap,
  gnapprox,
  gne,
  gnE,
  gneq,
  gneqq,
  gnsim,
  Gopf,
  gopf,
  grave,
  GreaterEqual,
  GreaterEqualLess,
  GreaterFullEqual,
  GreaterGreater,
  GreaterLess,
  GreaterSlantEqual,
  GreaterTilde,
  Gscr,
  gscr,
  gsim,
  gsime,
  gsiml,
  gtcc,
  gtcir,
  gt: gt$2,
  GT: GT$1,
  Gt,
  gtdot,
  gtlPar,
  gtquest,
  gtrapprox,
  gtrarr,
  gtrdot,
  gtreqless,
  gtreqqless,
  gtrless,
  gtrsim,
  gvertneqq,
  gvnE,
  Hacek,
  hairsp,
  half,
  hamilt,
  HARDcy,
  hardcy,
  harrcir,
  harr,
  hArr,
  harrw,
  Hat,
  hbar,
  Hcirc,
  hcirc,
  hearts,
  heartsuit,
  hellip,
  hercon,
  hfr,
  Hfr,
  HilbertSpace,
  hksearow,
  hkswarow,
  hoarr,
  homtht,
  hookleftarrow,
  hookrightarrow,
  hopf,
  Hopf,
  horbar,
  HorizontalLine,
  hscr,
  Hscr,
  hslash,
  Hstrok,
  hstrok,
  HumpDownHump,
  HumpEqual,
  hybull,
  hyphen,
  Iacute: Iacute$1,
  iacute: iacute$1,
  ic,
  Icirc: Icirc$1,
  icirc: icirc$1,
  Icy,
  icy,
  Idot,
  IEcy,
  iecy,
  iexcl: iexcl$1,
  iff,
  ifr,
  Ifr,
  Igrave: Igrave$1,
  igrave: igrave$1,
  ii,
  iiiint,
  iiint,
  iinfin,
  iiota,
  IJlig,
  ijlig,
  Imacr,
  imacr,
  image: image2,
  ImaginaryI,
  imagline,
  imagpart,
  imath,
  Im,
  imof,
  imped,
  Implies,
  incare,
  "in": "\u2208",
  infin,
  infintie,
  inodot,
  intcal,
  int,
  Int,
  integers,
  Integral,
  intercal,
  Intersection,
  intlarhk,
  intprod,
  InvisibleComma,
  InvisibleTimes,
  IOcy,
  iocy,
  Iogon,
  iogon,
  Iopf,
  iopf,
  Iota,
  iota,
  iprod,
  iquest: iquest$1,
  iscr,
  Iscr,
  isin,
  isindot,
  isinE,
  isins,
  isinsv,
  isinv,
  it,
  Itilde,
  itilde,
  Iukcy,
  iukcy,
  Iuml: Iuml$1,
  iuml: iuml$1,
  Jcirc,
  jcirc,
  Jcy,
  jcy,
  Jfr,
  jfr,
  jmath,
  Jopf,
  jopf,
  Jscr,
  jscr,
  Jsercy,
  jsercy,
  Jukcy,
  jukcy,
  Kappa,
  kappa,
  kappav,
  Kcedil,
  kcedil,
  Kcy,
  kcy,
  Kfr,
  kfr,
  kgreen,
  KHcy,
  khcy,
  KJcy,
  kjcy,
  Kopf,
  kopf,
  Kscr,
  kscr,
  lAarr,
  Lacute,
  lacute,
  laemptyv,
  lagran,
  Lambda,
  lambda,
  lang,
  Lang,
  langd,
  langle,
  lap,
  Laplacetrf,
  laquo: laquo$1,
  larrb,
  larrbfs,
  larr,
  Larr,
  lArr,
  larrfs,
  larrhk,
  larrlp,
  larrpl,
  larrsim,
  larrtl,
  latail,
  lAtail,
  lat,
  late,
  lates,
  lbarr,
  lBarr,
  lbbrk,
  lbrace,
  lbrack,
  lbrke,
  lbrksld,
  lbrkslu,
  Lcaron,
  lcaron,
  Lcedil,
  lcedil,
  lceil,
  lcub,
  Lcy,
  lcy,
  ldca,
  ldquo,
  ldquor,
  ldrdhar,
  ldrushar,
  ldsh,
  le,
  lE,
  LeftAngleBracket,
  LeftArrowBar,
  leftarrow,
  LeftArrow,
  Leftarrow,
  LeftArrowRightArrow,
  leftarrowtail,
  LeftCeiling,
  LeftDoubleBracket,
  LeftDownTeeVector,
  LeftDownVectorBar,
  LeftDownVector,
  LeftFloor,
  leftharpoondown,
  leftharpoonup,
  leftleftarrows,
  leftrightarrow,
  LeftRightArrow,
  Leftrightarrow,
  leftrightarrows,
  leftrightharpoons,
  leftrightsquigarrow,
  LeftRightVector,
  LeftTeeArrow,
  LeftTee,
  LeftTeeVector,
  leftthreetimes,
  LeftTriangleBar,
  LeftTriangle,
  LeftTriangleEqual,
  LeftUpDownVector,
  LeftUpTeeVector,
  LeftUpVectorBar,
  LeftUpVector,
  LeftVectorBar,
  LeftVector,
  lEg,
  leg,
  leq,
  leqq,
  leqslant,
  lescc,
  les,
  lesdot,
  lesdoto,
  lesdotor,
  lesg,
  lesges,
  lessapprox,
  lessdot,
  lesseqgtr,
  lesseqqgtr,
  LessEqualGreater,
  LessFullEqual,
  LessGreater,
  lessgtr,
  LessLess,
  lesssim,
  LessSlantEqual,
  LessTilde,
  lfisht,
  lfloor,
  Lfr,
  lfr,
  lg,
  lgE,
  lHar,
  lhard,
  lharu,
  lharul,
  lhblk,
  LJcy,
  ljcy,
  llarr,
  ll,
  Ll,
  llcorner,
  Lleftarrow,
  llhard,
  lltri,
  Lmidot,
  lmidot,
  lmoustache,
  lmoust,
  lnap,
  lnapprox,
  lne,
  lnE,
  lneq,
  lneqq,
  lnsim,
  loang,
  loarr,
  lobrk,
  longleftarrow,
  LongLeftArrow,
  Longleftarrow,
  longleftrightarrow,
  LongLeftRightArrow,
  Longleftrightarrow,
  longmapsto,
  longrightarrow,
  LongRightArrow,
  Longrightarrow,
  looparrowleft,
  looparrowright,
  lopar,
  Lopf,
  lopf,
  loplus,
  lotimes,
  lowast,
  lowbar,
  LowerLeftArrow,
  LowerRightArrow,
  loz,
  lozenge,
  lozf,
  lpar,
  lparlt,
  lrarr,
  lrcorner,
  lrhar,
  lrhard,
  lrm,
  lrtri,
  lsaquo,
  lscr,
  Lscr,
  lsh,
  Lsh,
  lsim,
  lsime,
  lsimg,
  lsqb,
  lsquo,
  lsquor,
  Lstrok,
  lstrok,
  ltcc,
  ltcir,
  lt: lt$2,
  LT: LT$1,
  Lt,
  ltdot,
  lthree,
  ltimes,
  ltlarr,
  ltquest,
  ltri,
  ltrie,
  ltrif,
  ltrPar,
  lurdshar,
  luruhar,
  lvertneqq,
  lvnE,
  macr: macr$1,
  male,
  malt,
  maltese,
  "Map": "\u2905",
  map,
  mapsto,
  mapstodown,
  mapstoleft,
  mapstoup,
  marker,
  mcomma,
  Mcy,
  mcy,
  mdash,
  mDDot,
  measuredangle,
  MediumSpace,
  Mellintrf,
  Mfr,
  mfr,
  mho,
  micro: micro$1,
  midast,
  midcir,
  mid,
  middot: middot$1,
  minusb,
  minus,
  minusd,
  minusdu,
  MinusPlus,
  mlcp,
  mldr,
  mnplus,
  models,
  Mopf,
  mopf,
  mp,
  mscr,
  Mscr,
  mstpos,
  Mu,
  mu,
  multimap,
  mumap,
  nabla,
  Nacute,
  nacute,
  nang,
  nap,
  napE,
  napid,
  napos,
  napprox,
  natural,
  naturals,
  natur,
  nbsp: nbsp$1,
  nbump,
  nbumpe,
  ncap,
  Ncaron,
  ncaron,
  Ncedil,
  ncedil,
  ncong,
  ncongdot,
  ncup,
  Ncy,
  ncy,
  ndash,
  nearhk,
  nearr,
  neArr,
  nearrow,
  ne,
  nedot,
  NegativeMediumSpace,
  NegativeThickSpace,
  NegativeThinSpace,
  NegativeVeryThinSpace,
  nequiv,
  nesear,
  nesim,
  NestedGreaterGreater,
  NestedLessLess,
  NewLine,
  nexist,
  nexists,
  Nfr,
  nfr,
  ngE,
  nge,
  ngeq,
  ngeqq,
  ngeqslant,
  nges,
  nGg,
  ngsim,
  nGt,
  ngt,
  ngtr,
  nGtv,
  nharr,
  nhArr,
  nhpar,
  ni,
  nis,
  nisd,
  niv,
  NJcy,
  njcy,
  nlarr,
  nlArr,
  nldr,
  nlE,
  nle,
  nleftarrow,
  nLeftarrow,
  nleftrightarrow,
  nLeftrightarrow,
  nleq,
  nleqq,
  nleqslant,
  nles,
  nless,
  nLl,
  nlsim,
  nLt,
  nlt,
  nltri,
  nltrie,
  nLtv,
  nmid,
  NoBreak,
  NonBreakingSpace,
  nopf,
  Nopf,
  Not,
  not: not$1,
  NotCongruent,
  NotCupCap,
  NotDoubleVerticalBar,
  NotElement,
  NotEqual,
  NotEqualTilde,
  NotExists,
  NotGreater,
  NotGreaterEqual,
  NotGreaterFullEqual,
  NotGreaterGreater,
  NotGreaterLess,
  NotGreaterSlantEqual,
  NotGreaterTilde,
  NotHumpDownHump,
  NotHumpEqual,
  notin,
  notindot,
  notinE,
  notinva,
  notinvb,
  notinvc,
  NotLeftTriangleBar,
  NotLeftTriangle,
  NotLeftTriangleEqual,
  NotLess,
  NotLessEqual,
  NotLessGreater,
  NotLessLess,
  NotLessSlantEqual,
  NotLessTilde,
  NotNestedGreaterGreater,
  NotNestedLessLess,
  notni,
  notniva,
  notnivb,
  notnivc,
  NotPrecedes,
  NotPrecedesEqual,
  NotPrecedesSlantEqual,
  NotReverseElement,
  NotRightTriangleBar,
  NotRightTriangle,
  NotRightTriangleEqual,
  NotSquareSubset,
  NotSquareSubsetEqual,
  NotSquareSuperset,
  NotSquareSupersetEqual,
  NotSubset,
  NotSubsetEqual,
  NotSucceeds,
  NotSucceedsEqual,
  NotSucceedsSlantEqual,
  NotSucceedsTilde,
  NotSuperset,
  NotSupersetEqual,
  NotTilde,
  NotTildeEqual,
  NotTildeFullEqual,
  NotTildeTilde,
  NotVerticalBar,
  nparallel,
  npar,
  nparsl,
  npart,
  npolint,
  npr,
  nprcue,
  nprec,
  npreceq,
  npre,
  nrarrc,
  nrarr,
  nrArr,
  nrarrw,
  nrightarrow,
  nRightarrow,
  nrtri,
  nrtrie,
  nsc,
  nsccue,
  nsce,
  Nscr,
  nscr,
  nshortmid,
  nshortparallel,
  nsim,
  nsime,
  nsimeq,
  nsmid,
  nspar,
  nsqsube,
  nsqsupe,
  nsub,
  nsubE,
  nsube,
  nsubset,
  nsubseteq,
  nsubseteqq,
  nsucc,
  nsucceq,
  nsup,
  nsupE,
  nsupe,
  nsupset,
  nsupseteq,
  nsupseteqq,
  ntgl,
  Ntilde: Ntilde$1,
  ntilde: ntilde$1,
  ntlg,
  ntriangleleft,
  ntrianglelefteq,
  ntriangleright,
  ntrianglerighteq,
  Nu,
  nu,
  num,
  numero,
  numsp,
  nvap,
  nvdash,
  nvDash,
  nVdash,
  nVDash,
  nvge,
  nvgt,
  nvHarr,
  nvinfin,
  nvlArr,
  nvle,
  nvlt,
  nvltrie,
  nvrArr,
  nvrtrie,
  nvsim,
  nwarhk,
  nwarr,
  nwArr,
  nwarrow,
  nwnear,
  Oacute: Oacute$1,
  oacute: oacute$1,
  oast,
  Ocirc: Ocirc$1,
  ocirc: ocirc$1,
  ocir,
  Ocy,
  ocy,
  odash,
  Odblac,
  odblac,
  odiv,
  odot,
  odsold,
  OElig,
  oelig,
  ofcir,
  Ofr,
  ofr,
  ogon,
  Ograve: Ograve$1,
  ograve: ograve$1,
  ogt,
  ohbar,
  ohm,
  oint,
  olarr,
  olcir,
  olcross,
  oline,
  olt,
  Omacr,
  omacr,
  Omega,
  omega,
  Omicron,
  omicron,
  omid,
  ominus,
  Oopf,
  oopf,
  opar,
  OpenCurlyDoubleQuote,
  OpenCurlyQuote,
  operp,
  oplus,
  orarr,
  Or,
  or,
  ord,
  order,
  orderof,
  ordf: ordf$1,
  ordm: ordm$1,
  origof,
  oror,
  orslope,
  orv,
  oS,
  Oscr,
  oscr,
  Oslash: Oslash$1,
  oslash: oslash$1,
  osol,
  Otilde: Otilde$1,
  otilde: otilde$1,
  otimesas,
  Otimes,
  otimes,
  Ouml: Ouml$1,
  ouml: ouml$1,
  ovbar,
  OverBar,
  OverBrace,
  OverBracket,
  OverParenthesis,
  para: para$1,
  parallel,
  par,
  parsim,
  parsl,
  part,
  PartialD,
  Pcy,
  pcy,
  percnt,
  period,
  permil,
  perp,
  pertenk,
  Pfr,
  pfr,
  Phi,
  phi,
  phiv,
  phmmat,
  phone,
  Pi,
  pi,
  pitchfork,
  piv,
  planck,
  planckh,
  plankv,
  plusacir,
  plusb,
  pluscir,
  plus,
  plusdo,
  plusdu,
  pluse,
  PlusMinus,
  plusmn: plusmn$1,
  plussim,
  plustwo,
  pm,
  Poincareplane,
  pointint,
  popf,
  Popf,
  pound: pound$1,
  prap,
  Pr,
  pr,
  prcue,
  precapprox,
  prec,
  preccurlyeq,
  Precedes,
  PrecedesEqual,
  PrecedesSlantEqual,
  PrecedesTilde,
  preceq,
  precnapprox,
  precneqq,
  precnsim,
  pre,
  prE,
  precsim,
  prime,
  Prime,
  primes,
  prnap,
  prnE,
  prnsim,
  prod,
  Product,
  profalar,
  profline,
  profsurf,
  prop,
  Proportional,
  Proportion,
  propto,
  prsim,
  prurel,
  Pscr,
  pscr,
  Psi,
  psi,
  puncsp,
  Qfr,
  qfr,
  qint,
  qopf,
  Qopf,
  qprime,
  Qscr,
  qscr,
  quaternions,
  quatint,
  quest,
  questeq,
  quot: quot$2,
  QUOT: QUOT$1,
  rAarr,
  race,
  Racute,
  racute,
  radic,
  raemptyv,
  rang,
  Rang,
  rangd,
  range: range$1,
  rangle,
  raquo: raquo$1,
  rarrap,
  rarrb,
  rarrbfs,
  rarrc,
  rarr,
  Rarr,
  rArr,
  rarrfs,
  rarrhk,
  rarrlp,
  rarrpl,
  rarrsim,
  Rarrtl,
  rarrtl,
  rarrw,
  ratail,
  rAtail,
  ratio,
  rationals,
  rbarr,
  rBarr,
  RBarr,
  rbbrk,
  rbrace,
  rbrack,
  rbrke,
  rbrksld,
  rbrkslu,
  Rcaron,
  rcaron,
  Rcedil,
  rcedil,
  rceil,
  rcub,
  Rcy,
  rcy,
  rdca,
  rdldhar,
  rdquo,
  rdquor,
  rdsh,
  real,
  realine,
  realpart,
  reals,
  Re,
  rect,
  reg: reg$1,
  REG: REG$1,
  ReverseElement,
  ReverseEquilibrium,
  ReverseUpEquilibrium,
  rfisht,
  rfloor,
  rfr,
  Rfr,
  rHar,
  rhard,
  rharu,
  rharul,
  Rho,
  rho,
  rhov,
  RightAngleBracket,
  RightArrowBar,
  rightarrow,
  RightArrow,
  Rightarrow,
  RightArrowLeftArrow,
  rightarrowtail,
  RightCeiling,
  RightDoubleBracket,
  RightDownTeeVector,
  RightDownVectorBar,
  RightDownVector,
  RightFloor,
  rightharpoondown,
  rightharpoonup,
  rightleftarrows,
  rightleftharpoons,
  rightrightarrows,
  rightsquigarrow,
  RightTeeArrow,
  RightTee,
  RightTeeVector,
  rightthreetimes,
  RightTriangleBar,
  RightTriangle,
  RightTriangleEqual,
  RightUpDownVector,
  RightUpTeeVector,
  RightUpVectorBar,
  RightUpVector,
  RightVectorBar,
  RightVector,
  ring,
  risingdotseq,
  rlarr,
  rlhar,
  rlm,
  rmoustache,
  rmoust,
  rnmid,
  roang,
  roarr,
  robrk,
  ropar,
  ropf,
  Ropf,
  roplus,
  rotimes,
  RoundImplies,
  rpar,
  rpargt,
  rppolint,
  rrarr,
  Rrightarrow,
  rsaquo,
  rscr,
  Rscr,
  rsh,
  Rsh,
  rsqb,
  rsquo,
  rsquor,
  rthree,
  rtimes,
  rtri,
  rtrie,
  rtrif,
  rtriltri,
  RuleDelayed,
  ruluhar,
  rx,
  Sacute,
  sacute,
  sbquo,
  scap,
  Scaron,
  scaron,
  Sc,
  sc,
  sccue,
  sce,
  scE,
  Scedil,
  scedil,
  Scirc,
  scirc,
  scnap,
  scnE,
  scnsim,
  scpolint,
  scsim,
  Scy,
  scy,
  sdotb,
  sdot,
  sdote,
  searhk,
  searr,
  seArr,
  searrow,
  sect: sect$1,
  semi,
  seswar,
  setminus,
  setmn,
  sext,
  Sfr,
  sfr,
  sfrown,
  sharp,
  SHCHcy,
  shchcy,
  SHcy,
  shcy,
  ShortDownArrow,
  ShortLeftArrow,
  shortmid,
  shortparallel,
  ShortRightArrow,
  ShortUpArrow,
  shy: shy$1,
  Sigma,
  sigma,
  sigmaf,
  sigmav,
  sim,
  simdot,
  sime,
  simeq,
  simg,
  simgE,
  siml,
  simlE,
  simne,
  simplus,
  simrarr,
  slarr,
  SmallCircle,
  smallsetminus,
  smashp,
  smeparsl,
  smid,
  smile,
  smt,
  smte,
  smtes,
  SOFTcy,
  softcy,
  solbar,
  solb,
  sol,
  Sopf,
  sopf,
  spades,
  spadesuit,
  spar,
  sqcap,
  sqcaps,
  sqcup,
  sqcups,
  Sqrt,
  sqsub,
  sqsube,
  sqsubset,
  sqsubseteq,
  sqsup,
  sqsupe,
  sqsupset,
  sqsupseteq,
  square,
  Square,
  SquareIntersection,
  SquareSubset,
  SquareSubsetEqual,
  SquareSuperset,
  SquareSupersetEqual,
  SquareUnion,
  squarf,
  squ,
  squf,
  srarr,
  Sscr,
  sscr,
  ssetmn,
  ssmile,
  sstarf,
  Star,
  star,
  starf,
  straightepsilon,
  straightphi,
  strns,
  sub,
  Sub,
  subdot,
  subE,
  sube,
  subedot,
  submult,
  subnE,
  subne,
  subplus,
  subrarr,
  subset,
  Subset,
  subseteq,
  subseteqq,
  SubsetEqual,
  subsetneq,
  subsetneqq,
  subsim,
  subsub,
  subsup,
  succapprox,
  succ,
  succcurlyeq,
  Succeeds,
  SucceedsEqual,
  SucceedsSlantEqual,
  SucceedsTilde,
  succeq,
  succnapprox,
  succneqq,
  succnsim,
  succsim,
  SuchThat,
  sum,
  Sum,
  sung,
  sup1: sup1$1,
  sup2: sup2$1,
  sup3: sup3$1,
  sup,
  Sup,
  supdot,
  supdsub,
  supE,
  supe,
  supedot,
  Superset,
  SupersetEqual,
  suphsol,
  suphsub,
  suplarr,
  supmult,
  supnE,
  supne,
  supplus,
  supset,
  Supset,
  supseteq,
  supseteqq,
  supsetneq,
  supsetneqq,
  supsim,
  supsub,
  supsup,
  swarhk,
  swarr,
  swArr,
  swarrow,
  swnwar,
  szlig: szlig$1,
  Tab,
  target,
  Tau,
  tau,
  tbrk,
  Tcaron,
  tcaron,
  Tcedil,
  tcedil,
  Tcy,
  tcy,
  tdot,
  telrec,
  Tfr,
  tfr,
  there4,
  therefore,
  Therefore,
  Theta,
  theta,
  thetasym,
  thetav,
  thickapprox,
  thicksim,
  ThickSpace,
  ThinSpace,
  thinsp,
  thkap,
  thksim,
  THORN: THORN$1,
  thorn: thorn$1,
  tilde,
  Tilde,
  TildeEqual,
  TildeFullEqual,
  TildeTilde,
  timesbar,
  timesb,
  times: times$1,
  timesd,
  tint,
  toea,
  topbot,
  topcir,
  top: top$1,
  Topf,
  topf,
  topfork,
  tosa,
  tprime,
  trade,
  TRADE,
  triangle,
  triangledown,
  triangleleft,
  trianglelefteq,
  triangleq,
  triangleright,
  trianglerighteq,
  tridot,
  trie,
  triminus,
  TripleDot,
  triplus,
  trisb,
  tritime,
  trpezium,
  Tscr,
  tscr,
  TScy,
  tscy,
  TSHcy,
  tshcy,
  Tstrok,
  tstrok,
  twixt,
  twoheadleftarrow,
  twoheadrightarrow,
  Uacute: Uacute$1,
  uacute: uacute$1,
  uarr,
  Uarr,
  uArr,
  Uarrocir,
  Ubrcy,
  ubrcy,
  Ubreve,
  ubreve,
  Ucirc: Ucirc$1,
  ucirc: ucirc$1,
  Ucy,
  ucy,
  udarr,
  Udblac,
  udblac,
  udhar,
  ufisht,
  Ufr,
  ufr,
  Ugrave: Ugrave$1,
  ugrave: ugrave$1,
  uHar,
  uharl,
  uharr,
  uhblk,
  ulcorn,
  ulcorner,
  ulcrop,
  ultri,
  Umacr,
  umacr,
  uml: uml$1,
  UnderBar,
  UnderBrace,
  UnderBracket,
  UnderParenthesis,
  Union,
  UnionPlus,
  Uogon,
  uogon,
  Uopf,
  uopf,
  UpArrowBar,
  uparrow,
  UpArrow,
  Uparrow,
  UpArrowDownArrow,
  updownarrow,
  UpDownArrow,
  Updownarrow,
  UpEquilibrium,
  upharpoonleft,
  upharpoonright,
  uplus,
  UpperLeftArrow,
  UpperRightArrow,
  upsi,
  Upsi,
  upsih,
  Upsilon,
  upsilon,
  UpTeeArrow,
  UpTee,
  upuparrows,
  urcorn,
  urcorner,
  urcrop,
  Uring,
  uring,
  urtri,
  Uscr,
  uscr,
  utdot,
  Utilde,
  utilde,
  utri,
  utrif,
  uuarr,
  Uuml: Uuml$1,
  uuml: uuml$1,
  uwangle,
  vangrt,
  varepsilon,
  varkappa,
  varnothing,
  varphi,
  varpi,
  varpropto,
  varr,
  vArr,
  varrho,
  varsigma,
  varsubsetneq,
  varsubsetneqq,
  varsupsetneq,
  varsupsetneqq,
  vartheta,
  vartriangleleft,
  vartriangleright,
  vBar,
  Vbar,
  vBarv,
  Vcy,
  vcy,
  vdash,
  vDash,
  Vdash,
  VDash,
  Vdashl,
  veebar,
  vee,
  Vee,
  veeeq,
  vellip,
  verbar,
  Verbar,
  vert,
  Vert,
  VerticalBar,
  VerticalLine,
  VerticalSeparator,
  VerticalTilde,
  VeryThinSpace,
  Vfr,
  vfr,
  vltri,
  vnsub,
  vnsup,
  Vopf,
  vopf,
  vprop,
  vrtri,
  Vscr,
  vscr,
  vsubnE,
  vsubne,
  vsupnE,
  vsupne,
  Vvdash,
  vzigzag,
  Wcirc,
  wcirc,
  wedbar,
  wedge,
  Wedge,
  wedgeq,
  weierp,
  Wfr,
  wfr,
  Wopf,
  wopf,
  wp,
  wr,
  wreath,
  Wscr,
  wscr,
  xcap,
  xcirc,
  xcup,
  xdtri,
  Xfr,
  xfr,
  xharr,
  xhArr,
  Xi,
  xi,
  xlarr,
  xlArr,
  xmap,
  xnis,
  xodot,
  Xopf,
  xopf,
  xoplus,
  xotime,
  xrarr,
  xrArr,
  Xscr,
  xscr,
  xsqcup,
  xuplus,
  xutri,
  xvee,
  xwedge,
  Yacute: Yacute$1,
  yacute: yacute$1,
  YAcy,
  yacy,
  Ycirc,
  ycirc,
  Ycy,
  ycy,
  yen: yen$1,
  Yfr,
  yfr,
  YIcy,
  yicy,
  Yopf,
  yopf,
  Yscr,
  yscr,
  YUcy,
  yucy,
  yuml: yuml$1,
  Yuml,
  Zacute,
  zacute,
  Zcaron,
  zcaron,
  Zcy,
  zcy,
  Zdot,
  zdot,
  zeetrf,
  ZeroWidthSpace,
  Zeta,
  zeta,
  zfr,
  Zfr,
  ZHcy,
  zhcy,
  zigrarr,
  zopf,
  Zopf,
  Zscr,
  zscr,
  zwj,
  zwnj
};
const Aacute = "\xC1";
const aacute = "\xE1";
const Acirc = "\xC2";
const acirc = "\xE2";
const acute = "\xB4";
const AElig = "\xC6";
const aelig = "\xE6";
const Agrave = "\xC0";
const agrave = "\xE0";
const amp$1 = "&";
const AMP = "&";
const Aring = "\xC5";
const aring = "\xE5";
const Atilde = "\xC3";
const atilde = "\xE3";
const Auml = "\xC4";
const auml = "\xE4";
const brvbar = "\xA6";
const Ccedil = "\xC7";
const ccedil = "\xE7";
const cedil = "\xB8";
const cent = "\xA2";
const copy = "\xA9";
const COPY = "\xA9";
const curren = "\xA4";
const deg = "\xB0";
const divide = "\xF7";
const Eacute = "\xC9";
const eacute = "\xE9";
const Ecirc = "\xCA";
const ecirc = "\xEA";
const Egrave = "\xC8";
const egrave = "\xE8";
const ETH = "\xD0";
const eth = "\xF0";
const Euml = "\xCB";
const euml = "\xEB";
const frac12 = "\xBD";
const frac14 = "\xBC";
const frac34 = "\xBE";
const gt$1 = ">";
const GT = ">";
const Iacute = "\xCD";
const iacute = "\xED";
const Icirc = "\xCE";
const icirc = "\xEE";
const iexcl = "\xA1";
const Igrave = "\xCC";
const igrave = "\xEC";
const iquest = "\xBF";
const Iuml = "\xCF";
const iuml = "\xEF";
const laquo = "\xAB";
const lt$1 = "<";
const LT = "<";
const macr = "\xAF";
const micro = "\xB5";
const middot = "\xB7";
const nbsp = "\xA0";
const not = "\xAC";
const Ntilde = "\xD1";
const ntilde = "\xF1";
const Oacute = "\xD3";
const oacute = "\xF3";
const Ocirc = "\xD4";
const ocirc = "\xF4";
const Ograve = "\xD2";
const ograve = "\xF2";
const ordf = "\xAA";
const ordm = "\xBA";
const Oslash = "\xD8";
const oslash = "\xF8";
const Otilde = "\xD5";
const otilde = "\xF5";
const Ouml = "\xD6";
const ouml = "\xF6";
const para = "\xB6";
const plusmn = "\xB1";
const pound = "\xA3";
const quot$1 = '"';
const QUOT = '"';
const raquo = "\xBB";
const reg = "\xAE";
const REG = "\xAE";
const sect = "\xA7";
const shy = "\xAD";
const sup1 = "\xB9";
const sup2 = "\xB2";
const sup3 = "\xB3";
const szlig = "\xDF";
const THORN = "\xDE";
const thorn = "\xFE";
const times = "\xD7";
const Uacute = "\xDA";
const uacute = "\xFA";
const Ucirc = "\xDB";
const ucirc = "\xFB";
const Ugrave = "\xD9";
const ugrave = "\xF9";
const uml = "\xA8";
const Uuml = "\xDC";
const uuml = "\xFC";
const Yacute = "\xDD";
const yacute = "\xFD";
const yen = "\xA5";
const yuml = "\xFF";
var require$$1 = {
  Aacute,
  aacute,
  Acirc,
  acirc,
  acute,
  AElig,
  aelig,
  Agrave,
  agrave,
  amp: amp$1,
  AMP,
  Aring,
  aring,
  Atilde,
  atilde,
  Auml,
  auml,
  brvbar,
  Ccedil,
  ccedil,
  cedil,
  cent,
  copy,
  COPY,
  curren,
  deg,
  divide,
  Eacute,
  eacute,
  Ecirc,
  ecirc,
  Egrave,
  egrave,
  ETH,
  eth,
  Euml,
  euml,
  frac12,
  frac14,
  frac34,
  gt: gt$1,
  GT,
  Iacute,
  iacute,
  Icirc,
  icirc,
  iexcl,
  Igrave,
  igrave,
  iquest,
  Iuml,
  iuml,
  laquo,
  lt: lt$1,
  LT,
  macr,
  micro,
  middot,
  nbsp,
  not,
  Ntilde,
  ntilde,
  Oacute,
  oacute,
  Ocirc,
  ocirc,
  Ograve,
  ograve,
  ordf,
  ordm,
  Oslash,
  oslash,
  Otilde,
  otilde,
  Ouml,
  ouml,
  para,
  plusmn,
  pound,
  quot: quot$1,
  QUOT,
  raquo,
  reg,
  REG,
  sect,
  shy,
  sup1,
  sup2,
  sup3,
  szlig,
  THORN,
  thorn,
  times,
  Uacute,
  uacute,
  Ucirc,
  ucirc,
  Ugrave,
  ugrave,
  uml,
  Uuml,
  uuml,
  Yacute,
  yacute,
  yen,
  yuml
};
const amp = "&";
const apos = "'";
const gt = ">";
const lt = "<";
const quot = '"';
var require$$0 = {
  amp,
  apos,
  gt,
  lt,
  quot
};
var __importDefault$5 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(Tokenizer$1, "__esModule", { value: true });
var decode_codepoint_1$1 = __importDefault$5(decode_codepoint);
var entities_json_1$2 = __importDefault$5(require$$1$1);
var legacy_json_1$1 = __importDefault$5(require$$1);
var xml_json_1$2 = __importDefault$5(require$$0);
function whitespace(c) {
  return c === " " || c === "\n" || c === "	" || c === "\f" || c === "\r";
}
function isASCIIAlpha(c) {
  return c >= "a" && c <= "z" || c >= "A" && c <= "Z";
}
function ifElseState(upper, SUCCESS, FAILURE) {
  var lower = upper.toLowerCase();
  if (upper === lower) {
    return function(t4, c) {
      if (c === lower) {
        t4._state = SUCCESS;
      } else {
        t4._state = FAILURE;
        t4._index--;
      }
    };
  }
  return function(t4, c) {
    if (c === lower || c === upper) {
      t4._state = SUCCESS;
    } else {
      t4._state = FAILURE;
      t4._index--;
    }
  };
}
function consumeSpecialNameChar(upper, NEXT_STATE) {
  var lower = upper.toLowerCase();
  return function(t4, c) {
    if (c === lower || c === upper) {
      t4._state = NEXT_STATE;
    } else {
      t4._state = 3;
      t4._index--;
    }
  };
}
var stateBeforeCdata1 = ifElseState("C", 24, 16);
var stateBeforeCdata2 = ifElseState("D", 25, 16);
var stateBeforeCdata3 = ifElseState("A", 26, 16);
var stateBeforeCdata4 = ifElseState("T", 27, 16);
var stateBeforeCdata5 = ifElseState("A", 28, 16);
var stateBeforeScript1 = consumeSpecialNameChar("R", 35);
var stateBeforeScript2 = consumeSpecialNameChar("I", 36);
var stateBeforeScript3 = consumeSpecialNameChar("P", 37);
var stateBeforeScript4 = consumeSpecialNameChar("T", 38);
var stateAfterScript1 = ifElseState("R", 40, 1);
var stateAfterScript2 = ifElseState("I", 41, 1);
var stateAfterScript3 = ifElseState("P", 42, 1);
var stateAfterScript4 = ifElseState("T", 43, 1);
var stateBeforeStyle1 = consumeSpecialNameChar("Y", 45);
var stateBeforeStyle2 = consumeSpecialNameChar("L", 46);
var stateBeforeStyle3 = consumeSpecialNameChar("E", 47);
var stateAfterStyle1 = ifElseState("Y", 49, 1);
var stateAfterStyle2 = ifElseState("L", 50, 1);
var stateAfterStyle3 = ifElseState("E", 51, 1);
var stateBeforeSpecialT = consumeSpecialNameChar("I", 54);
var stateBeforeTitle1 = consumeSpecialNameChar("T", 55);
var stateBeforeTitle2 = consumeSpecialNameChar("L", 56);
var stateBeforeTitle3 = consumeSpecialNameChar("E", 57);
var stateAfterSpecialTEnd = ifElseState("I", 58, 1);
var stateAfterTitle1 = ifElseState("T", 59, 1);
var stateAfterTitle2 = ifElseState("L", 60, 1);
var stateAfterTitle3 = ifElseState("E", 61, 1);
var stateBeforeEntity = ifElseState("#", 63, 64);
var stateBeforeNumericEntity = ifElseState("X", 66, 65);
var Tokenizer = function() {
  function Tokenizer2(options2, cbs) {
    var _a;
    this._state = 1;
    this.buffer = "";
    this.sectionStart = 0;
    this._index = 0;
    this.bufferOffset = 0;
    this.baseState = 1;
    this.special = 1;
    this.running = true;
    this.ended = false;
    this.cbs = cbs;
    this.xmlMode = !!(options2 === null || options2 === void 0 ? void 0 : options2.xmlMode);
    this.decodeEntities = (_a = options2 === null || options2 === void 0 ? void 0 : options2.decodeEntities) !== null && _a !== void 0 ? _a : true;
  }
  Tokenizer2.prototype.reset = function() {
    this._state = 1;
    this.buffer = "";
    this.sectionStart = 0;
    this._index = 0;
    this.bufferOffset = 0;
    this.baseState = 1;
    this.special = 1;
    this.running = true;
    this.ended = false;
  };
  Tokenizer2.prototype.write = function(chunk) {
    if (this.ended)
      this.cbs.onerror(Error(".write() after done!"));
    this.buffer += chunk;
    this.parse();
  };
  Tokenizer2.prototype.end = function(chunk) {
    if (this.ended)
      this.cbs.onerror(Error(".end() after done!"));
    if (chunk)
      this.write(chunk);
    this.ended = true;
    if (this.running)
      this.finish();
  };
  Tokenizer2.prototype.pause = function() {
    this.running = false;
  };
  Tokenizer2.prototype.resume = function() {
    this.running = true;
    if (this._index < this.buffer.length) {
      this.parse();
    }
    if (this.ended) {
      this.finish();
    }
  };
  Tokenizer2.prototype.getAbsoluteIndex = function() {
    return this.bufferOffset + this._index;
  };
  Tokenizer2.prototype.stateText = function(c) {
    if (c === "<") {
      if (this._index > this.sectionStart) {
        this.cbs.ontext(this.getSection());
      }
      this._state = 2;
      this.sectionStart = this._index;
    } else if (this.decodeEntities && c === "&" && (this.special === 1 || this.special === 4)) {
      if (this._index > this.sectionStart) {
        this.cbs.ontext(this.getSection());
      }
      this.baseState = 1;
      this._state = 62;
      this.sectionStart = this._index;
    }
  };
  Tokenizer2.prototype.isTagStartChar = function(c) {
    return isASCIIAlpha(c) || this.xmlMode && !whitespace(c) && c !== "/" && c !== ">";
  };
  Tokenizer2.prototype.stateBeforeTagName = function(c) {
    if (c === "/") {
      this._state = 5;
    } else if (c === "<") {
      this.cbs.ontext(this.getSection());
      this.sectionStart = this._index;
    } else if (c === ">" || this.special !== 1 || whitespace(c)) {
      this._state = 1;
    } else if (c === "!") {
      this._state = 15;
      this.sectionStart = this._index + 1;
    } else if (c === "?") {
      this._state = 17;
      this.sectionStart = this._index + 1;
    } else if (!this.isTagStartChar(c)) {
      this._state = 1;
    } else {
      this._state = !this.xmlMode && (c === "s" || c === "S") ? 32 : !this.xmlMode && (c === "t" || c === "T") ? 52 : 3;
      this.sectionStart = this._index;
    }
  };
  Tokenizer2.prototype.stateInTagName = function(c) {
    if (c === "/" || c === ">" || whitespace(c)) {
      this.emitToken("onopentagname");
      this._state = 8;
      this._index--;
    }
  };
  Tokenizer2.prototype.stateBeforeClosingTagName = function(c) {
    if (whitespace(c))
      ;
    else if (c === ">") {
      this._state = 1;
    } else if (this.special !== 1) {
      if (this.special !== 4 && (c === "s" || c === "S")) {
        this._state = 33;
      } else if (this.special === 4 && (c === "t" || c === "T")) {
        this._state = 53;
      } else {
        this._state = 1;
        this._index--;
      }
    } else if (!this.isTagStartChar(c)) {
      this._state = 20;
      this.sectionStart = this._index;
    } else {
      this._state = 6;
      this.sectionStart = this._index;
    }
  };
  Tokenizer2.prototype.stateInClosingTagName = function(c) {
    if (c === ">" || whitespace(c)) {
      this.emitToken("onclosetag");
      this._state = 7;
      this._index--;
    }
  };
  Tokenizer2.prototype.stateAfterClosingTagName = function(c) {
    if (c === ">") {
      this._state = 1;
      this.sectionStart = this._index + 1;
    }
  };
  Tokenizer2.prototype.stateBeforeAttributeName = function(c) {
    if (c === ">") {
      this.cbs.onopentagend();
      this._state = 1;
      this.sectionStart = this._index + 1;
    } else if (c === "/") {
      this._state = 4;
    } else if (!whitespace(c)) {
      this._state = 9;
      this.sectionStart = this._index;
    }
  };
  Tokenizer2.prototype.stateInSelfClosingTag = function(c) {
    if (c === ">") {
      this.cbs.onselfclosingtag();
      this._state = 1;
      this.sectionStart = this._index + 1;
      this.special = 1;
    } else if (!whitespace(c)) {
      this._state = 8;
      this._index--;
    }
  };
  Tokenizer2.prototype.stateInAttributeName = function(c) {
    if (c === "=" || c === "/" || c === ">" || whitespace(c)) {
      this.cbs.onattribname(this.getSection());
      this.sectionStart = -1;
      this._state = 10;
      this._index--;
    }
  };
  Tokenizer2.prototype.stateAfterAttributeName = function(c) {
    if (c === "=") {
      this._state = 11;
    } else if (c === "/" || c === ">") {
      this.cbs.onattribend(void 0);
      this._state = 8;
      this._index--;
    } else if (!whitespace(c)) {
      this.cbs.onattribend(void 0);
      this._state = 9;
      this.sectionStart = this._index;
    }
  };
  Tokenizer2.prototype.stateBeforeAttributeValue = function(c) {
    if (c === '"') {
      this._state = 12;
      this.sectionStart = this._index + 1;
    } else if (c === "'") {
      this._state = 13;
      this.sectionStart = this._index + 1;
    } else if (!whitespace(c)) {
      this._state = 14;
      this.sectionStart = this._index;
      this._index--;
    }
  };
  Tokenizer2.prototype.handleInAttributeValue = function(c, quote) {
    if (c === quote) {
      this.emitToken("onattribdata");
      this.cbs.onattribend(quote);
      this._state = 8;
    } else if (this.decodeEntities && c === "&") {
      this.emitToken("onattribdata");
      this.baseState = this._state;
      this._state = 62;
      this.sectionStart = this._index;
    }
  };
  Tokenizer2.prototype.stateInAttributeValueDoubleQuotes = function(c) {
    this.handleInAttributeValue(c, '"');
  };
  Tokenizer2.prototype.stateInAttributeValueSingleQuotes = function(c) {
    this.handleInAttributeValue(c, "'");
  };
  Tokenizer2.prototype.stateInAttributeValueNoQuotes = function(c) {
    if (whitespace(c) || c === ">") {
      this.emitToken("onattribdata");
      this.cbs.onattribend(null);
      this._state = 8;
      this._index--;
    } else if (this.decodeEntities && c === "&") {
      this.emitToken("onattribdata");
      this.baseState = this._state;
      this._state = 62;
      this.sectionStart = this._index;
    }
  };
  Tokenizer2.prototype.stateBeforeDeclaration = function(c) {
    this._state = c === "[" ? 23 : c === "-" ? 18 : 16;
  };
  Tokenizer2.prototype.stateInDeclaration = function(c) {
    if (c === ">") {
      this.cbs.ondeclaration(this.getSection());
      this._state = 1;
      this.sectionStart = this._index + 1;
    }
  };
  Tokenizer2.prototype.stateInProcessingInstruction = function(c) {
    if (c === ">") {
      this.cbs.onprocessinginstruction(this.getSection());
      this._state = 1;
      this.sectionStart = this._index + 1;
    }
  };
  Tokenizer2.prototype.stateBeforeComment = function(c) {
    if (c === "-") {
      this._state = 19;
      this.sectionStart = this._index + 1;
    } else {
      this._state = 16;
    }
  };
  Tokenizer2.prototype.stateInComment = function(c) {
    if (c === "-")
      this._state = 21;
  };
  Tokenizer2.prototype.stateInSpecialComment = function(c) {
    if (c === ">") {
      this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index));
      this._state = 1;
      this.sectionStart = this._index + 1;
    }
  };
  Tokenizer2.prototype.stateAfterComment1 = function(c) {
    if (c === "-") {
      this._state = 22;
    } else {
      this._state = 19;
    }
  };
  Tokenizer2.prototype.stateAfterComment2 = function(c) {
    if (c === ">") {
      this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2));
      this._state = 1;
      this.sectionStart = this._index + 1;
    } else if (c !== "-") {
      this._state = 19;
    }
  };
  Tokenizer2.prototype.stateBeforeCdata6 = function(c) {
    if (c === "[") {
      this._state = 29;
      this.sectionStart = this._index + 1;
    } else {
      this._state = 16;
      this._index--;
    }
  };
  Tokenizer2.prototype.stateInCdata = function(c) {
    if (c === "]")
      this._state = 30;
  };
  Tokenizer2.prototype.stateAfterCdata1 = function(c) {
    if (c === "]")
      this._state = 31;
    else
      this._state = 29;
  };
  Tokenizer2.prototype.stateAfterCdata2 = function(c) {
    if (c === ">") {
      this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2));
      this._state = 1;
      this.sectionStart = this._index + 1;
    } else if (c !== "]") {
      this._state = 29;
    }
  };
  Tokenizer2.prototype.stateBeforeSpecialS = function(c) {
    if (c === "c" || c === "C") {
      this._state = 34;
    } else if (c === "t" || c === "T") {
      this._state = 44;
    } else {
      this._state = 3;
      this._index--;
    }
  };
  Tokenizer2.prototype.stateBeforeSpecialSEnd = function(c) {
    if (this.special === 2 && (c === "c" || c === "C")) {
      this._state = 39;
    } else if (this.special === 3 && (c === "t" || c === "T")) {
      this._state = 48;
    } else
      this._state = 1;
  };
  Tokenizer2.prototype.stateBeforeSpecialLast = function(c, special) {
    if (c === "/" || c === ">" || whitespace(c)) {
      this.special = special;
    }
    this._state = 3;
    this._index--;
  };
  Tokenizer2.prototype.stateAfterSpecialLast = function(c, sectionStartOffset) {
    if (c === ">" || whitespace(c)) {
      this.special = 1;
      this._state = 6;
      this.sectionStart = this._index - sectionStartOffset;
      this._index--;
    } else
      this._state = 1;
  };
  Tokenizer2.prototype.parseFixedEntity = function(map2) {
    if (map2 === void 0) {
      map2 = this.xmlMode ? xml_json_1$2.default : entities_json_1$2.default;
    }
    if (this.sectionStart + 1 < this._index) {
      var entity3 = this.buffer.substring(this.sectionStart + 1, this._index);
      if (Object.prototype.hasOwnProperty.call(map2, entity3)) {
        this.emitPartial(map2[entity3]);
        this.sectionStart = this._index + 1;
      }
    }
  };
  Tokenizer2.prototype.parseLegacyEntity = function() {
    var start = this.sectionStart + 1;
    var limit = Math.min(this._index - start, 6);
    while (limit >= 2) {
      var entity3 = this.buffer.substr(start, limit);
      if (Object.prototype.hasOwnProperty.call(legacy_json_1$1.default, entity3)) {
        this.emitPartial(legacy_json_1$1.default[entity3]);
        this.sectionStart += limit + 1;
        return;
      }
      limit--;
    }
  };
  Tokenizer2.prototype.stateInNamedEntity = function(c) {
    if (c === ";") {
      this.parseFixedEntity();
      if (this.baseState === 1 && this.sectionStart + 1 < this._index && !this.xmlMode) {
        this.parseLegacyEntity();
      }
      this._state = this.baseState;
    } else if ((c < "0" || c > "9") && !isASCIIAlpha(c)) {
      if (this.xmlMode || this.sectionStart + 1 === this._index)
        ;
      else if (this.baseState !== 1) {
        if (c !== "=") {
          this.parseFixedEntity(legacy_json_1$1.default);
        }
      } else {
        this.parseLegacyEntity();
      }
      this._state = this.baseState;
      this._index--;
    }
  };
  Tokenizer2.prototype.decodeNumericEntity = function(offset, base2, strict) {
    var sectionStart = this.sectionStart + offset;
    if (sectionStart !== this._index) {
      var entity3 = this.buffer.substring(sectionStart, this._index);
      var parsed = parseInt(entity3, base2);
      this.emitPartial(decode_codepoint_1$1.default(parsed));
      this.sectionStart = strict ? this._index + 1 : this._index;
    }
    this._state = this.baseState;
  };
  Tokenizer2.prototype.stateInNumericEntity = function(c) {
    if (c === ";") {
      this.decodeNumericEntity(2, 10, true);
    } else if (c < "0" || c > "9") {
      if (!this.xmlMode) {
        this.decodeNumericEntity(2, 10, false);
      } else {
        this._state = this.baseState;
      }
      this._index--;
    }
  };
  Tokenizer2.prototype.stateInHexEntity = function(c) {
    if (c === ";") {
      this.decodeNumericEntity(3, 16, true);
    } else if ((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")) {
      if (!this.xmlMode) {
        this.decodeNumericEntity(3, 16, false);
      } else {
        this._state = this.baseState;
      }
      this._index--;
    }
  };
  Tokenizer2.prototype.cleanup = function() {
    if (this.sectionStart < 0) {
      this.buffer = "";
      this.bufferOffset += this._index;
      this._index = 0;
    } else if (this.running) {
      if (this._state === 1) {
        if (this.sectionStart !== this._index) {
          this.cbs.ontext(this.buffer.substr(this.sectionStart));
        }
        this.buffer = "";
        this.bufferOffset += this._index;
        this._index = 0;
      } else if (this.sectionStart === this._index) {
        this.buffer = "";
        this.bufferOffset += this._index;
        this._index = 0;
      } else {
        this.buffer = this.buffer.substr(this.sectionStart);
        this._index -= this.sectionStart;
        this.bufferOffset += this.sectionStart;
      }
      this.sectionStart = 0;
    }
  };
  Tokenizer2.prototype.parse = function() {
    while (this._index < this.buffer.length && this.running) {
      var c = this.buffer.charAt(this._index);
      if (this._state === 1) {
        this.stateText(c);
      } else if (this._state === 12) {
        this.stateInAttributeValueDoubleQuotes(c);
      } else if (this._state === 9) {
        this.stateInAttributeName(c);
      } else if (this._state === 19) {
        this.stateInComment(c);
      } else if (this._state === 20) {
        this.stateInSpecialComment(c);
      } else if (this._state === 8) {
        this.stateBeforeAttributeName(c);
      } else if (this._state === 3) {
        this.stateInTagName(c);
      } else if (this._state === 6) {
        this.stateInClosingTagName(c);
      } else if (this._state === 2) {
        this.stateBeforeTagName(c);
      } else if (this._state === 10) {
        this.stateAfterAttributeName(c);
      } else if (this._state === 13) {
        this.stateInAttributeValueSingleQuotes(c);
      } else if (this._state === 11) {
        this.stateBeforeAttributeValue(c);
      } else if (this._state === 5) {
        this.stateBeforeClosingTagName(c);
      } else if (this._state === 7) {
        this.stateAfterClosingTagName(c);
      } else if (this._state === 32) {
        this.stateBeforeSpecialS(c);
      } else if (this._state === 21) {
        this.stateAfterComment1(c);
      } else if (this._state === 14) {
        this.stateInAttributeValueNoQuotes(c);
      } else if (this._state === 4) {
        this.stateInSelfClosingTag(c);
      } else if (this._state === 16) {
        this.stateInDeclaration(c);
      } else if (this._state === 15) {
        this.stateBeforeDeclaration(c);
      } else if (this._state === 22) {
        this.stateAfterComment2(c);
      } else if (this._state === 18) {
        this.stateBeforeComment(c);
      } else if (this._state === 33) {
        this.stateBeforeSpecialSEnd(c);
      } else if (this._state === 53) {
        stateAfterSpecialTEnd(this, c);
      } else if (this._state === 39) {
        stateAfterScript1(this, c);
      } else if (this._state === 40) {
        stateAfterScript2(this, c);
      } else if (this._state === 41) {
        stateAfterScript3(this, c);
      } else if (this._state === 34) {
        stateBeforeScript1(this, c);
      } else if (this._state === 35) {
        stateBeforeScript2(this, c);
      } else if (this._state === 36) {
        stateBeforeScript3(this, c);
      } else if (this._state === 37) {
        stateBeforeScript4(this, c);
      } else if (this._state === 38) {
        this.stateBeforeSpecialLast(c, 2);
      } else if (this._state === 42) {
        stateAfterScript4(this, c);
      } else if (this._state === 43) {
        this.stateAfterSpecialLast(c, 6);
      } else if (this._state === 44) {
        stateBeforeStyle1(this, c);
      } else if (this._state === 29) {
        this.stateInCdata(c);
      } else if (this._state === 45) {
        stateBeforeStyle2(this, c);
      } else if (this._state === 46) {
        stateBeforeStyle3(this, c);
      } else if (this._state === 47) {
        this.stateBeforeSpecialLast(c, 3);
      } else if (this._state === 48) {
        stateAfterStyle1(this, c);
      } else if (this._state === 49) {
        stateAfterStyle2(this, c);
      } else if (this._state === 50) {
        stateAfterStyle3(this, c);
      } else if (this._state === 51) {
        this.stateAfterSpecialLast(c, 5);
      } else if (this._state === 52) {
        stateBeforeSpecialT(this, c);
      } else if (this._state === 54) {
        stateBeforeTitle1(this, c);
      } else if (this._state === 55) {
        stateBeforeTitle2(this, c);
      } else if (this._state === 56) {
        stateBeforeTitle3(this, c);
      } else if (this._state === 57) {
        this.stateBeforeSpecialLast(c, 4);
      } else if (this._state === 58) {
        stateAfterTitle1(this, c);
      } else if (this._state === 59) {
        stateAfterTitle2(this, c);
      } else if (this._state === 60) {
        stateAfterTitle3(this, c);
      } else if (this._state === 61) {
        this.stateAfterSpecialLast(c, 5);
      } else if (this._state === 17) {
        this.stateInProcessingInstruction(c);
      } else if (this._state === 64) {
        this.stateInNamedEntity(c);
      } else if (this._state === 23) {
        stateBeforeCdata1(this, c);
      } else if (this._state === 62) {
        stateBeforeEntity(this, c);
      } else if (this._state === 24) {
        stateBeforeCdata2(this, c);
      } else if (this._state === 25) {
        stateBeforeCdata3(this, c);
      } else if (this._state === 30) {
        this.stateAfterCdata1(c);
      } else if (this._state === 31) {
        this.stateAfterCdata2(c);
      } else if (this._state === 26) {
        stateBeforeCdata4(this, c);
      } else if (this._state === 27) {
        stateBeforeCdata5(this, c);
      } else if (this._state === 28) {
        this.stateBeforeCdata6(c);
      } else if (this._state === 66) {
        this.stateInHexEntity(c);
      } else if (this._state === 65) {
        this.stateInNumericEntity(c);
      } else if (this._state === 63) {
        stateBeforeNumericEntity(this, c);
      } else {
        this.cbs.onerror(Error("unknown _state"), this._state);
      }
      this._index++;
    }
    this.cleanup();
  };
  Tokenizer2.prototype.finish = function() {
    if (this.sectionStart < this._index) {
      this.handleTrailingData();
    }
    this.cbs.onend();
  };
  Tokenizer2.prototype.handleTrailingData = function() {
    var data3 = this.buffer.substr(this.sectionStart);
    if (this._state === 29 || this._state === 30 || this._state === 31) {
      this.cbs.oncdata(data3);
    } else if (this._state === 19 || this._state === 21 || this._state === 22) {
      this.cbs.oncomment(data3);
    } else if (this._state === 64 && !this.xmlMode) {
      this.parseLegacyEntity();
      if (this.sectionStart < this._index) {
        this._state = this.baseState;
        this.handleTrailingData();
      }
    } else if (this._state === 65 && !this.xmlMode) {
      this.decodeNumericEntity(2, 10, false);
      if (this.sectionStart < this._index) {
        this._state = this.baseState;
        this.handleTrailingData();
      }
    } else if (this._state === 66 && !this.xmlMode) {
      this.decodeNumericEntity(3, 16, false);
      if (this.sectionStart < this._index) {
        this._state = this.baseState;
        this.handleTrailingData();
      }
    } else if (this._state !== 3 && this._state !== 8 && this._state !== 11 && this._state !== 10 && this._state !== 9 && this._state !== 13 && this._state !== 12 && this._state !== 14 && this._state !== 6) {
      this.cbs.ontext(data3);
    }
  };
  Tokenizer2.prototype.getSection = function() {
    return this.buffer.substring(this.sectionStart, this._index);
  };
  Tokenizer2.prototype.emitToken = function(name) {
    this.cbs[name](this.getSection());
    this.sectionStart = -1;
  };
  Tokenizer2.prototype.emitPartial = function(value) {
    if (this.baseState !== 1) {
      this.cbs.onattribdata(value);
    } else {
      this.cbs.ontext(value);
    }
  };
  return Tokenizer2;
}();
Tokenizer$1.default = Tokenizer;
var __importDefault$4 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(Parser$3, "__esModule", { value: true });
Parser$3.Parser = void 0;
var Tokenizer_1 = __importDefault$4(Tokenizer$1);
var formTags = /* @__PURE__ */ new Set([
  "input",
  "option",
  "optgroup",
  "select",
  "button",
  "datalist",
  "textarea"
]);
var pTag = /* @__PURE__ */ new Set(["p"]);
var openImpliesClose = {
  tr: /* @__PURE__ */ new Set(["tr", "th", "td"]),
  th: /* @__PURE__ */ new Set(["th"]),
  td: /* @__PURE__ */ new Set(["thead", "th", "td"]),
  body: /* @__PURE__ */ new Set(["head", "link", "script"]),
  li: /* @__PURE__ */ new Set(["li"]),
  p: pTag,
  h1: pTag,
  h2: pTag,
  h3: pTag,
  h4: pTag,
  h5: pTag,
  h6: pTag,
  select: formTags,
  input: formTags,
  output: formTags,
  button: formTags,
  datalist: formTags,
  textarea: formTags,
  option: /* @__PURE__ */ new Set(["option"]),
  optgroup: /* @__PURE__ */ new Set(["optgroup", "option"]),
  dd: /* @__PURE__ */ new Set(["dt", "dd"]),
  dt: /* @__PURE__ */ new Set(["dt", "dd"]),
  address: pTag,
  article: pTag,
  aside: pTag,
  blockquote: pTag,
  details: pTag,
  div: pTag,
  dl: pTag,
  fieldset: pTag,
  figcaption: pTag,
  figure: pTag,
  footer: pTag,
  form: pTag,
  header: pTag,
  hr: pTag,
  main: pTag,
  nav: pTag,
  ol: pTag,
  pre: pTag,
  section: pTag,
  table: pTag,
  ul: pTag,
  rt: /* @__PURE__ */ new Set(["rt", "rp"]),
  rp: /* @__PURE__ */ new Set(["rt", "rp"]),
  tbody: /* @__PURE__ */ new Set(["thead", "tbody"]),
  tfoot: /* @__PURE__ */ new Set(["thead", "tbody"])
};
var voidElements = /* @__PURE__ */ new Set([
  "area",
  "base",
  "basefont",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
var foreignContextElements = /* @__PURE__ */ new Set(["math", "svg"]);
var htmlIntegrationElements = /* @__PURE__ */ new Set([
  "mi",
  "mo",
  "mn",
  "ms",
  "mtext",
  "annotation-xml",
  "foreignObject",
  "desc",
  "title"
]);
var reNameEnd = /\s|\//;
var Parser$2 = function() {
  function Parser2(cbs, options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    var _a, _b, _c, _d, _e;
    this.startIndex = 0;
    this.endIndex = null;
    this.tagname = "";
    this.attribname = "";
    this.attribvalue = "";
    this.attribs = null;
    this.stack = [];
    this.foreignContext = [];
    this.options = options2;
    this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
    this.lowerCaseTagNames = (_a = options2.lowerCaseTags) !== null && _a !== void 0 ? _a : !options2.xmlMode;
    this.lowerCaseAttributeNames = (_b = options2.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options2.xmlMode;
    this.tokenizer = new ((_c = options2.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1.default)(this.options, this);
    (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);
  }
  Parser2.prototype.updatePosition = function(initialOffset) {
    if (this.endIndex === null) {
      if (this.tokenizer.sectionStart <= initialOffset) {
        this.startIndex = 0;
      } else {
        this.startIndex = this.tokenizer.sectionStart - initialOffset;
      }
    } else {
      this.startIndex = this.endIndex + 1;
    }
    this.endIndex = this.tokenizer.getAbsoluteIndex();
  };
  Parser2.prototype.ontext = function(data3) {
    var _a, _b;
    this.updatePosition(1);
    this.endIndex--;
    (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data3);
  };
  Parser2.prototype.onopentagname = function(name) {
    var _a, _b;
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    this.tagname = name;
    if (!this.options.xmlMode && Object.prototype.hasOwnProperty.call(openImpliesClose, name)) {
      var el2 = void 0;
      while (this.stack.length > 0 && openImpliesClose[name].has(el2 = this.stack[this.stack.length - 1])) {
        this.onclosetag(el2);
      }
    }
    if (this.options.xmlMode || !voidElements.has(name)) {
      this.stack.push(name);
      if (foreignContextElements.has(name)) {
        this.foreignContext.push(true);
      } else if (htmlIntegrationElements.has(name)) {
        this.foreignContext.push(false);
      }
    }
    (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, name);
    if (this.cbs.onopentag)
      this.attribs = {};
  };
  Parser2.prototype.onopentagend = function() {
    var _a, _b;
    this.updatePosition(1);
    if (this.attribs) {
      (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs);
      this.attribs = null;
    }
    if (!this.options.xmlMode && this.cbs.onclosetag && voidElements.has(this.tagname)) {
      this.cbs.onclosetag(this.tagname);
    }
    this.tagname = "";
  };
  Parser2.prototype.onclosetag = function(name) {
    this.updatePosition(1);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {
      this.foreignContext.pop();
    }
    if (this.stack.length && (this.options.xmlMode || !voidElements.has(name))) {
      var pos = this.stack.lastIndexOf(name);
      if (pos !== -1) {
        if (this.cbs.onclosetag) {
          pos = this.stack.length - pos;
          while (pos--) {
            this.cbs.onclosetag(this.stack.pop());
          }
        } else
          this.stack.length = pos;
      } else if (name === "p" && !this.options.xmlMode) {
        this.onopentagname(name);
        this.closeCurrentTag();
      }
    } else if (!this.options.xmlMode && (name === "br" || name === "p")) {
      this.onopentagname(name);
      this.closeCurrentTag();
    }
  };
  Parser2.prototype.onselfclosingtag = function() {
    if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {
      this.closeCurrentTag();
    } else {
      this.onopentagend();
    }
  };
  Parser2.prototype.closeCurrentTag = function() {
    var _a, _b;
    var name = this.tagname;
    this.onopentagend();
    if (this.stack[this.stack.length - 1] === name) {
      (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name);
      this.stack.pop();
    }
  };
  Parser2.prototype.onattribname = function(name) {
    if (this.lowerCaseAttributeNames) {
      name = name.toLowerCase();
    }
    this.attribname = name;
  };
  Parser2.prototype.onattribdata = function(value) {
    this.attribvalue += value;
  };
  Parser2.prototype.onattribend = function(quote) {
    var _a, _b;
    (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote);
    if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
      this.attribs[this.attribname] = this.attribvalue;
    }
    this.attribname = "";
    this.attribvalue = "";
  };
  Parser2.prototype.getInstructionName = function(value) {
    var idx = value.search(reNameEnd);
    var name = idx < 0 ? value : value.substr(0, idx);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    return name;
  };
  Parser2.prototype.ondeclaration = function(value) {
    if (this.cbs.onprocessinginstruction) {
      var name_1 = this.getInstructionName(value);
      this.cbs.onprocessinginstruction("!" + name_1, "!" + value);
    }
  };
  Parser2.prototype.onprocessinginstruction = function(value) {
    if (this.cbs.onprocessinginstruction) {
      var name_2 = this.getInstructionName(value);
      this.cbs.onprocessinginstruction("?" + name_2, "?" + value);
    }
  };
  Parser2.prototype.oncomment = function(value) {
    var _a, _b, _c, _d;
    this.updatePosition(4);
    (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
  };
  Parser2.prototype.oncdata = function(value) {
    var _a, _b, _c, _d, _e, _f;
    this.updatePosition(1);
    if (this.options.xmlMode || this.options.recognizeCDATA) {
      (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);
      (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
      (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
    } else {
      this.oncomment("[CDATA[" + value + "]]");
    }
  };
  Parser2.prototype.onerror = function(err) {
    var _a, _b;
    (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  };
  Parser2.prototype.onend = function() {
    var _a, _b;
    if (this.cbs.onclosetag) {
      for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i]))
        ;
    }
    (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);
  };
  Parser2.prototype.reset = function() {
    var _a, _b, _c, _d;
    (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);
    this.tokenizer.reset();
    this.tagname = "";
    this.attribname = "";
    this.attribs = null;
    this.stack = [];
    (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
  };
  Parser2.prototype.parseComplete = function(data3) {
    this.reset();
    this.end(data3);
  };
  Parser2.prototype.write = function(chunk) {
    this.tokenizer.write(chunk);
  };
  Parser2.prototype.end = function(chunk) {
    this.tokenizer.end(chunk);
  };
  Parser2.prototype.pause = function() {
    this.tokenizer.pause();
  };
  Parser2.prototype.resume = function() {
    this.tokenizer.resume();
  };
  Parser2.prototype.parseChunk = function(chunk) {
    this.write(chunk);
  };
  Parser2.prototype.done = function(chunk) {
    this.end(chunk);
  };
  return Parser2;
}();
Parser$3.Parser = Parser$2;
var lib$4 = {};
var lib$3 = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;
  var ElementType2;
  (function(ElementType3) {
    ElementType3["Root"] = "root";
    ElementType3["Text"] = "text";
    ElementType3["Directive"] = "directive";
    ElementType3["Comment"] = "comment";
    ElementType3["Script"] = "script";
    ElementType3["Style"] = "style";
    ElementType3["Tag"] = "tag";
    ElementType3["CDATA"] = "cdata";
    ElementType3["Doctype"] = "doctype";
  })(ElementType2 = exports.ElementType || (exports.ElementType = {}));
  function isTag2(elem) {
    return elem.type === ElementType2.Tag || elem.type === ElementType2.Script || elem.type === ElementType2.Style;
  }
  exports.isTag = isTag2;
  exports.Root = ElementType2.Root;
  exports.Text = ElementType2.Text;
  exports.Directive = ElementType2.Directive;
  exports.Comment = ElementType2.Comment;
  exports.Script = ElementType2.Script;
  exports.Style = ElementType2.Style;
  exports.Tag = ElementType2.Tag;
  exports.CDATA = ElementType2.CDATA;
  exports.Doctype = ElementType2.Doctype;
})(lib$3);
var node = {};
var __extends$1 = commonjsGlobal$1 && commonjsGlobal$1.__extends || function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p))
          d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __assign$1 = commonjsGlobal$1 && commonjsGlobal$1.__assign || function() {
  __assign$1 = Object.assign || function(t4) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t4[p] = s[p];
    }
    return t4;
  };
  return __assign$1.apply(this, arguments);
};
Object.defineProperty(node, "__esModule", { value: true });
node.cloneNode = node.hasChildren = node.isDocument = node.isDirective = node.isComment = node.isText = node.isCDATA = node.isTag = node.Element = node.Document = node.NodeWithChildren = node.ProcessingInstruction = node.Comment = node.Text = node.DataNode = node.Node = void 0;
var domelementtype_1$1 = lib$3;
var nodeTypes = /* @__PURE__ */ new Map([
  [domelementtype_1$1.ElementType.Tag, 1],
  [domelementtype_1$1.ElementType.Script, 1],
  [domelementtype_1$1.ElementType.Style, 1],
  [domelementtype_1$1.ElementType.Directive, 1],
  [domelementtype_1$1.ElementType.Text, 3],
  [domelementtype_1$1.ElementType.CDATA, 4],
  [domelementtype_1$1.ElementType.Comment, 8],
  [domelementtype_1$1.ElementType.Root, 9]
]);
var Node$6 = function() {
  function Node2(type) {
    this.type = type;
    this.parent = null;
    this.prev = null;
    this.next = null;
    this.startIndex = null;
    this.endIndex = null;
  }
  Object.defineProperty(Node2.prototype, "nodeType", {
    get: function() {
      var _a;
      return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Node2.prototype, "parentNode", {
    get: function() {
      return this.parent;
    },
    set: function(parent) {
      this.parent = parent;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Node2.prototype, "previousSibling", {
    get: function() {
      return this.prev;
    },
    set: function(prev) {
      this.prev = prev;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Node2.prototype, "nextSibling", {
    get: function() {
      return this.next;
    },
    set: function(next2) {
      this.next = next2;
    },
    enumerable: false,
    configurable: true
  });
  Node2.prototype.cloneNode = function(recursive) {
    if (recursive === void 0) {
      recursive = false;
    }
    return cloneNode$1(this, recursive);
  };
  return Node2;
}();
node.Node = Node$6;
var DataNode = function(_super) {
  __extends$1(DataNode2, _super);
  function DataNode2(type, data3) {
    var _this = _super.call(this, type) || this;
    _this.data = data3;
    return _this;
  }
  Object.defineProperty(DataNode2.prototype, "nodeValue", {
    get: function() {
      return this.data;
    },
    set: function(data3) {
      this.data = data3;
    },
    enumerable: false,
    configurable: true
  });
  return DataNode2;
}(Node$6);
node.DataNode = DataNode;
var Text = function(_super) {
  __extends$1(Text2, _super);
  function Text2(data3) {
    return _super.call(this, domelementtype_1$1.ElementType.Text, data3) || this;
  }
  return Text2;
}(DataNode);
node.Text = Text;
var Comment$5 = function(_super) {
  __extends$1(Comment2, _super);
  function Comment2(data3) {
    return _super.call(this, domelementtype_1$1.ElementType.Comment, data3) || this;
  }
  return Comment2;
}(DataNode);
node.Comment = Comment$5;
var ProcessingInstruction = function(_super) {
  __extends$1(ProcessingInstruction2, _super);
  function ProcessingInstruction2(name, data3) {
    var _this = _super.call(this, domelementtype_1$1.ElementType.Directive, data3) || this;
    _this.name = name;
    return _this;
  }
  return ProcessingInstruction2;
}(DataNode);
node.ProcessingInstruction = ProcessingInstruction;
var NodeWithChildren = function(_super) {
  __extends$1(NodeWithChildren2, _super);
  function NodeWithChildren2(type, children) {
    var _this = _super.call(this, type) || this;
    _this.children = children;
    return _this;
  }
  Object.defineProperty(NodeWithChildren2.prototype, "firstChild", {
    get: function() {
      var _a;
      return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(NodeWithChildren2.prototype, "lastChild", {
    get: function() {
      return this.children.length > 0 ? this.children[this.children.length - 1] : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(NodeWithChildren2.prototype, "childNodes", {
    get: function() {
      return this.children;
    },
    set: function(children) {
      this.children = children;
    },
    enumerable: false,
    configurable: true
  });
  return NodeWithChildren2;
}(Node$6);
node.NodeWithChildren = NodeWithChildren;
var Document$4 = function(_super) {
  __extends$1(Document2, _super);
  function Document2(children) {
    return _super.call(this, domelementtype_1$1.ElementType.Root, children) || this;
  }
  return Document2;
}(NodeWithChildren);
node.Document = Document$4;
var Element$1 = function(_super) {
  __extends$1(Element2, _super);
  function Element2(name, attribs, children, type) {
    if (children === void 0) {
      children = [];
    }
    if (type === void 0) {
      type = name === "script" ? domelementtype_1$1.ElementType.Script : name === "style" ? domelementtype_1$1.ElementType.Style : domelementtype_1$1.ElementType.Tag;
    }
    var _this = _super.call(this, type, children) || this;
    _this.name = name;
    _this.attribs = attribs;
    return _this;
  }
  Object.defineProperty(Element2.prototype, "tagName", {
    get: function() {
      return this.name;
    },
    set: function(name) {
      this.name = name;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Element2.prototype, "attributes", {
    get: function() {
      var _this = this;
      return Object.keys(this.attribs).map(function(name) {
        var _a, _b;
        return {
          name,
          value: _this.attribs[name],
          namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
          prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
        };
      });
    },
    enumerable: false,
    configurable: true
  });
  return Element2;
}(NodeWithChildren);
node.Element = Element$1;
function isTag(node2) {
  return (0, domelementtype_1$1.isTag)(node2);
}
node.isTag = isTag;
function isCDATA(node2) {
  return node2.type === domelementtype_1$1.ElementType.CDATA;
}
node.isCDATA = isCDATA;
function isText(node2) {
  return node2.type === domelementtype_1$1.ElementType.Text;
}
node.isText = isText;
function isComment(node2) {
  return node2.type === domelementtype_1$1.ElementType.Comment;
}
node.isComment = isComment;
function isDirective(node2) {
  return node2.type === domelementtype_1$1.ElementType.Directive;
}
node.isDirective = isDirective;
function isDocument(node2) {
  return node2.type === domelementtype_1$1.ElementType.Root;
}
node.isDocument = isDocument;
function hasChildren(node2) {
  return Object.prototype.hasOwnProperty.call(node2, "children");
}
node.hasChildren = hasChildren;
function cloneNode$1(node2, recursive) {
  if (recursive === void 0) {
    recursive = false;
  }
  var result2;
  if (isText(node2)) {
    result2 = new Text(node2.data);
  } else if (isComment(node2)) {
    result2 = new Comment$5(node2.data);
  } else if (isTag(node2)) {
    var children = recursive ? cloneChildren(node2.children) : [];
    var clone_1 = new Element$1(node2.name, __assign$1({}, node2.attribs), children);
    children.forEach(function(child2) {
      return child2.parent = clone_1;
    });
    if (node2.namespace != null) {
      clone_1.namespace = node2.namespace;
    }
    if (node2["x-attribsNamespace"]) {
      clone_1["x-attribsNamespace"] = __assign$1({}, node2["x-attribsNamespace"]);
    }
    if (node2["x-attribsPrefix"]) {
      clone_1["x-attribsPrefix"] = __assign$1({}, node2["x-attribsPrefix"]);
    }
    result2 = clone_1;
  } else if (isCDATA(node2)) {
    var children = recursive ? cloneChildren(node2.children) : [];
    var clone_2 = new NodeWithChildren(domelementtype_1$1.ElementType.CDATA, children);
    children.forEach(function(child2) {
      return child2.parent = clone_2;
    });
    result2 = clone_2;
  } else if (isDocument(node2)) {
    var children = recursive ? cloneChildren(node2.children) : [];
    var clone_3 = new Document$4(children);
    children.forEach(function(child2) {
      return child2.parent = clone_3;
    });
    if (node2["x-mode"]) {
      clone_3["x-mode"] = node2["x-mode"];
    }
    result2 = clone_3;
  } else if (isDirective(node2)) {
    var instruction = new ProcessingInstruction(node2.name, node2.data);
    if (node2["x-name"] != null) {
      instruction["x-name"] = node2["x-name"];
      instruction["x-publicId"] = node2["x-publicId"];
      instruction["x-systemId"] = node2["x-systemId"];
    }
    result2 = instruction;
  } else {
    throw new Error("Not implemented yet: ".concat(node2.type));
  }
  result2.startIndex = node2.startIndex;
  result2.endIndex = node2.endIndex;
  if (node2.sourceCodeLocation != null) {
    result2.sourceCodeLocation = node2.sourceCodeLocation;
  }
  return result2;
}
node.cloneNode = cloneNode$1;
function cloneChildren(childs) {
  var children = childs.map(function(child2) {
    return cloneNode$1(child2, true);
  });
  for (var i = 1; i < children.length; i++) {
    children[i].prev = children[i - 1];
    children[i - 1].next = children[i];
  }
  return children;
}
(function(exports) {
  var __createBinding2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(o3, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m2, k);
    if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() {
        return m2[k];
      } };
    }
    Object.defineProperty(o3, k2, desc);
  } : function(o3, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o3[k2] = m2[k];
  });
  var __exportStar = commonjsGlobal$1 && commonjsGlobal$1.__exportStar || function(m2, exports2) {
    for (var p in m2)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding2(exports2, m2, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.DomHandler = void 0;
  var domelementtype_12 = lib$3;
  var node_12 = node;
  __exportStar(node, exports);
  var reWhitespace = /\s+/g;
  var defaultOpts = {
    normalizeWhitespace: false,
    withStartIndices: false,
    withEndIndices: false,
    xmlMode: false
  };
  var DomHandler = function() {
    function DomHandler2(callback, options2, elementCB) {
      this.dom = [];
      this.root = new node_12.Document(this.dom);
      this.done = false;
      this.tagStack = [this.root];
      this.lastNode = null;
      this.parser = null;
      if (typeof options2 === "function") {
        elementCB = options2;
        options2 = defaultOpts;
      }
      if (typeof callback === "object") {
        options2 = callback;
        callback = void 0;
      }
      this.callback = callback !== null && callback !== void 0 ? callback : null;
      this.options = options2 !== null && options2 !== void 0 ? options2 : defaultOpts;
      this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
    }
    DomHandler2.prototype.onparserinit = function(parser2) {
      this.parser = parser2;
    };
    DomHandler2.prototype.onreset = function() {
      this.dom = [];
      this.root = new node_12.Document(this.dom);
      this.done = false;
      this.tagStack = [this.root];
      this.lastNode = null;
      this.parser = null;
    };
    DomHandler2.prototype.onend = function() {
      if (this.done)
        return;
      this.done = true;
      this.parser = null;
      this.handleCallback(null);
    };
    DomHandler2.prototype.onerror = function(error2) {
      this.handleCallback(error2);
    };
    DomHandler2.prototype.onclosetag = function() {
      this.lastNode = null;
      var elem = this.tagStack.pop();
      if (this.options.withEndIndices) {
        elem.endIndex = this.parser.endIndex;
      }
      if (this.elementCB)
        this.elementCB(elem);
    };
    DomHandler2.prototype.onopentag = function(name, attribs) {
      var type = this.options.xmlMode ? domelementtype_12.ElementType.Tag : void 0;
      var element = new node_12.Element(name, attribs, void 0, type);
      this.addNode(element);
      this.tagStack.push(element);
    };
    DomHandler2.prototype.ontext = function(data3) {
      var normalizeWhitespace = this.options.normalizeWhitespace;
      var lastNode = this.lastNode;
      if (lastNode && lastNode.type === domelementtype_12.ElementType.Text) {
        if (normalizeWhitespace) {
          lastNode.data = (lastNode.data + data3).replace(reWhitespace, " ");
        } else {
          lastNode.data += data3;
        }
        if (this.options.withEndIndices) {
          lastNode.endIndex = this.parser.endIndex;
        }
      } else {
        if (normalizeWhitespace) {
          data3 = data3.replace(reWhitespace, " ");
        }
        var node2 = new node_12.Text(data3);
        this.addNode(node2);
        this.lastNode = node2;
      }
    };
    DomHandler2.prototype.oncomment = function(data3) {
      if (this.lastNode && this.lastNode.type === domelementtype_12.ElementType.Comment) {
        this.lastNode.data += data3;
        return;
      }
      var node2 = new node_12.Comment(data3);
      this.addNode(node2);
      this.lastNode = node2;
    };
    DomHandler2.prototype.oncommentend = function() {
      this.lastNode = null;
    };
    DomHandler2.prototype.oncdatastart = function() {
      var text3 = new node_12.Text("");
      var node2 = new node_12.NodeWithChildren(domelementtype_12.ElementType.CDATA, [text3]);
      this.addNode(node2);
      text3.parent = node2;
      this.lastNode = text3;
    };
    DomHandler2.prototype.oncdataend = function() {
      this.lastNode = null;
    };
    DomHandler2.prototype.onprocessinginstruction = function(name, data3) {
      var node2 = new node_12.ProcessingInstruction(name, data3);
      this.addNode(node2);
    };
    DomHandler2.prototype.handleCallback = function(error2) {
      if (typeof this.callback === "function") {
        this.callback(error2, this.dom);
      } else if (error2) {
        throw error2;
      }
    };
    DomHandler2.prototype.addNode = function(node2) {
      var parent = this.tagStack[this.tagStack.length - 1];
      var previousSibling = parent.children[parent.children.length - 1];
      if (this.options.withStartIndices) {
        node2.startIndex = this.parser.startIndex;
      }
      if (this.options.withEndIndices) {
        node2.endIndex = this.parser.endIndex;
      }
      parent.children.push(node2);
      if (previousSibling) {
        node2.prev = previousSibling;
        previousSibling.next = node2;
      }
      node2.parent = parent;
      this.lastNode = null;
    };
    return DomHandler2;
  }();
  exports.DomHandler = DomHandler;
  exports.default = DomHandler;
})(lib$4);
var FeedHandler$1 = {};
var lib$2 = {};
var stringify$5 = {};
var lib$1 = {};
var lib = {};
var decode = {};
var __importDefault$3 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(decode, "__esModule", { value: true });
decode.decodeHTML = decode.decodeHTMLStrict = decode.decodeXML = void 0;
var entities_json_1$1 = __importDefault$3(require$$1$1);
var legacy_json_1 = __importDefault$3(require$$1);
var xml_json_1$1 = __importDefault$3(require$$0);
var decode_codepoint_1 = __importDefault$3(decode_codepoint);
var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
decode.decodeXML = getStrictDecoder(xml_json_1$1.default);
decode.decodeHTMLStrict = getStrictDecoder(entities_json_1$1.default);
function getStrictDecoder(map2) {
  var replace3 = getReplacer(map2);
  return function(str) {
    return String(str).replace(strictEntityRe, replace3);
  };
}
var sorter = function(a2, b2) {
  return a2 < b2 ? 1 : -1;
};
decode.decodeHTML = function() {
  var legacy2 = Object.keys(legacy_json_1.default).sort(sorter);
  var keys = Object.keys(entities_json_1$1.default).sort(sorter);
  for (var i = 0, j = 0; i < keys.length; i++) {
    if (legacy2[j] === keys[i]) {
      keys[i] += ";?";
      j++;
    } else {
      keys[i] += ";";
    }
  }
  var re2 = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
  var replace3 = getReplacer(entities_json_1$1.default);
  function replacer(str) {
    if (str.substr(-1) !== ";")
      str += ";";
    return replace3(str);
  }
  return function(str) {
    return String(str).replace(re2, replacer);
  };
}();
function getReplacer(map2) {
  return function replace3(str) {
    if (str.charAt(1) === "#") {
      var secondChar = str.charAt(2);
      if (secondChar === "X" || secondChar === "x") {
        return decode_codepoint_1.default(parseInt(str.substr(3), 16));
      }
      return decode_codepoint_1.default(parseInt(str.substr(2), 10));
    }
    return map2[str.slice(1, -1)] || str;
  };
}
var encode = {};
var __importDefault$2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(encode, "__esModule", { value: true });
encode.escapeUTF8 = encode.escape = encode.encodeNonAsciiHTML = encode.encodeHTML = encode.encodeXML = void 0;
var xml_json_1 = __importDefault$2(require$$0);
var inverseXML = getInverseObj(xml_json_1.default);
var xmlReplacer = getInverseReplacer(inverseXML);
encode.encodeXML = getASCIIEncoder(inverseXML);
var entities_json_1 = __importDefault$2(require$$1$1);
var inverseHTML = getInverseObj(entities_json_1.default);
var htmlReplacer = getInverseReplacer(inverseHTML);
encode.encodeHTML = getInverse(inverseHTML, htmlReplacer);
encode.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
function getInverseObj(obj) {
  return Object.keys(obj).sort().reduce(function(inverse, name) {
    inverse[obj[name]] = "&" + name + ";";
    return inverse;
  }, {});
}
function getInverseReplacer(inverse) {
  var single = [];
  var multiple = [];
  for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
    var k = _a[_i];
    if (k.length === 1) {
      single.push("\\" + k);
    } else {
      multiple.push(k);
    }
  }
  single.sort();
  for (var start = 0; start < single.length - 1; start++) {
    var end2 = start;
    while (end2 < single.length - 1 && single[end2].charCodeAt(1) + 1 === single[end2 + 1].charCodeAt(1)) {
      end2 += 1;
    }
    var count = 1 + end2 - start;
    if (count < 3)
      continue;
    single.splice(start, count, single[start] + "-" + single[end2]);
  }
  multiple.unshift("[" + single.join("") + "]");
  return new RegExp(multiple.join("|"), "g");
}
var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
var getCodePoint = String.prototype.codePointAt != null ? function(str) {
  return str.codePointAt(0);
} : function(c) {
  return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
};
function singleCharReplacer(c) {
  return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
}
function getInverse(inverse, re2) {
  return function(data3) {
    return data3.replace(re2, function(name) {
      return inverse[name];
    }).replace(reNonASCII, singleCharReplacer);
  };
}
var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
function escape2(data3) {
  return data3.replace(reEscapeChars, singleCharReplacer);
}
encode.escape = escape2;
function escapeUTF8(data3) {
  return data3.replace(xmlReplacer, singleCharReplacer);
}
encode.escapeUTF8 = escapeUTF8;
function getASCIIEncoder(obj) {
  return function(data3) {
    return data3.replace(reEscapeChars, function(c) {
      return obj[c] || singleCharReplacer(c);
    });
  };
}
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
  var decode_12 = decode;
  var encode_12 = encode;
  function decode$12(data3, level) {
    return (!level || level <= 0 ? decode_12.decodeXML : decode_12.decodeHTML)(data3);
  }
  exports.decode = decode$12;
  function decodeStrict(data3, level) {
    return (!level || level <= 0 ? decode_12.decodeXML : decode_12.decodeHTMLStrict)(data3);
  }
  exports.decodeStrict = decodeStrict;
  function encode$12(data3, level) {
    return (!level || level <= 0 ? encode_12.encodeXML : encode_12.encodeHTML)(data3);
  }
  exports.encode = encode$12;
  var encode_2 = encode;
  Object.defineProperty(exports, "encodeXML", { enumerable: true, get: function() {
    return encode_2.encodeXML;
  } });
  Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: function() {
    return encode_2.encodeHTML;
  } });
  Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: function() {
    return encode_2.encodeNonAsciiHTML;
  } });
  Object.defineProperty(exports, "escape", { enumerable: true, get: function() {
    return encode_2.escape;
  } });
  Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: function() {
    return encode_2.escapeUTF8;
  } });
  Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: function() {
    return encode_2.encodeHTML;
  } });
  Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: function() {
    return encode_2.encodeHTML;
  } });
  var decode_2 = decode;
  Object.defineProperty(exports, "decodeXML", { enumerable: true, get: function() {
    return decode_2.decodeXML;
  } });
  Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: function() {
    return decode_2.decodeHTML;
  } });
  Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: function() {
    return decode_2.decodeHTMLStrict;
  } });
  Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: function() {
    return decode_2.decodeHTML;
  } });
  Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: function() {
    return decode_2.decodeHTML;
  } });
  Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: function() {
    return decode_2.decodeHTMLStrict;
  } });
  Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: function() {
    return decode_2.decodeHTMLStrict;
  } });
  Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: function() {
    return decode_2.decodeXML;
  } });
})(lib);
var foreignNames = {};
Object.defineProperty(foreignNames, "__esModule", { value: true });
foreignNames.attributeNames = foreignNames.elementNames = void 0;
foreignNames.elementNames = /* @__PURE__ */ new Map([
  ["altglyph", "altGlyph"],
  ["altglyphdef", "altGlyphDef"],
  ["altglyphitem", "altGlyphItem"],
  ["animatecolor", "animateColor"],
  ["animatemotion", "animateMotion"],
  ["animatetransform", "animateTransform"],
  ["clippath", "clipPath"],
  ["feblend", "feBlend"],
  ["fecolormatrix", "feColorMatrix"],
  ["fecomponenttransfer", "feComponentTransfer"],
  ["fecomposite", "feComposite"],
  ["feconvolvematrix", "feConvolveMatrix"],
  ["fediffuselighting", "feDiffuseLighting"],
  ["fedisplacementmap", "feDisplacementMap"],
  ["fedistantlight", "feDistantLight"],
  ["fedropshadow", "feDropShadow"],
  ["feflood", "feFlood"],
  ["fefunca", "feFuncA"],
  ["fefuncb", "feFuncB"],
  ["fefuncg", "feFuncG"],
  ["fefuncr", "feFuncR"],
  ["fegaussianblur", "feGaussianBlur"],
  ["feimage", "feImage"],
  ["femerge", "feMerge"],
  ["femergenode", "feMergeNode"],
  ["femorphology", "feMorphology"],
  ["feoffset", "feOffset"],
  ["fepointlight", "fePointLight"],
  ["fespecularlighting", "feSpecularLighting"],
  ["fespotlight", "feSpotLight"],
  ["fetile", "feTile"],
  ["feturbulence", "feTurbulence"],
  ["foreignobject", "foreignObject"],
  ["glyphref", "glyphRef"],
  ["lineargradient", "linearGradient"],
  ["radialgradient", "radialGradient"],
  ["textpath", "textPath"]
]);
foreignNames.attributeNames = /* @__PURE__ */ new Map([
  ["definitionurl", "definitionURL"],
  ["attributename", "attributeName"],
  ["attributetype", "attributeType"],
  ["basefrequency", "baseFrequency"],
  ["baseprofile", "baseProfile"],
  ["calcmode", "calcMode"],
  ["clippathunits", "clipPathUnits"],
  ["diffuseconstant", "diffuseConstant"],
  ["edgemode", "edgeMode"],
  ["filterunits", "filterUnits"],
  ["glyphref", "glyphRef"],
  ["gradienttransform", "gradientTransform"],
  ["gradientunits", "gradientUnits"],
  ["kernelmatrix", "kernelMatrix"],
  ["kernelunitlength", "kernelUnitLength"],
  ["keypoints", "keyPoints"],
  ["keysplines", "keySplines"],
  ["keytimes", "keyTimes"],
  ["lengthadjust", "lengthAdjust"],
  ["limitingconeangle", "limitingConeAngle"],
  ["markerheight", "markerHeight"],
  ["markerunits", "markerUnits"],
  ["markerwidth", "markerWidth"],
  ["maskcontentunits", "maskContentUnits"],
  ["maskunits", "maskUnits"],
  ["numoctaves", "numOctaves"],
  ["pathlength", "pathLength"],
  ["patterncontentunits", "patternContentUnits"],
  ["patterntransform", "patternTransform"],
  ["patternunits", "patternUnits"],
  ["pointsatx", "pointsAtX"],
  ["pointsaty", "pointsAtY"],
  ["pointsatz", "pointsAtZ"],
  ["preservealpha", "preserveAlpha"],
  ["preserveaspectratio", "preserveAspectRatio"],
  ["primitiveunits", "primitiveUnits"],
  ["refx", "refX"],
  ["refy", "refY"],
  ["repeatcount", "repeatCount"],
  ["repeatdur", "repeatDur"],
  ["requiredextensions", "requiredExtensions"],
  ["requiredfeatures", "requiredFeatures"],
  ["specularconstant", "specularConstant"],
  ["specularexponent", "specularExponent"],
  ["spreadmethod", "spreadMethod"],
  ["startoffset", "startOffset"],
  ["stddeviation", "stdDeviation"],
  ["stitchtiles", "stitchTiles"],
  ["surfacescale", "surfaceScale"],
  ["systemlanguage", "systemLanguage"],
  ["tablevalues", "tableValues"],
  ["targetx", "targetX"],
  ["targety", "targetY"],
  ["textlength", "textLength"],
  ["viewbox", "viewBox"],
  ["viewtarget", "viewTarget"],
  ["xchannelselector", "xChannelSelector"],
  ["ychannelselector", "yChannelSelector"],
  ["zoomandpan", "zoomAndPan"]
]);
var __assign = commonjsGlobal$1 && commonjsGlobal$1.__assign || function() {
  __assign = Object.assign || function(t4) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t4[p] = s[p];
    }
    return t4;
  };
  return __assign.apply(this, arguments);
};
var __createBinding$1 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(o3, m2, k, k2) {
  if (k2 === void 0)
    k2 = k;
  Object.defineProperty(o3, k2, { enumerable: true, get: function() {
    return m2[k];
  } });
} : function(o3, m2, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o3[k2] = m2[k];
});
var __setModuleDefault$1 = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(o3, v2) {
  Object.defineProperty(o3, "default", { enumerable: true, value: v2 });
} : function(o3, v2) {
  o3["default"] = v2;
});
var __importStar$1 = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result2 = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding$1(result2, mod, k);
  }
  __setModuleDefault$1(result2, mod);
  return result2;
};
Object.defineProperty(lib$1, "__esModule", { value: true });
var ElementType = __importStar$1(lib$3);
var entities_1 = lib;
var foreignNames_1 = foreignNames;
var unencodedElements = /* @__PURE__ */ new Set([
  "style",
  "script",
  "xmp",
  "iframe",
  "noembed",
  "noframes",
  "plaintext",
  "noscript"
]);
function formatAttributes(attributes, opts) {
  if (!attributes)
    return;
  return Object.keys(attributes).map(function(key2) {
    var _a, _b;
    var value = (_a = attributes[key2]) !== null && _a !== void 0 ? _a : "";
    if (opts.xmlMode === "foreign") {
      key2 = (_b = foreignNames_1.attributeNames.get(key2)) !== null && _b !== void 0 ? _b : key2;
    }
    if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
      return key2;
    }
    return key2 + '="' + (opts.decodeEntities !== false ? entities_1.encodeXML(value) : value.replace(/"/g, "&quot;")) + '"';
  }).join(" ");
}
var singleTag = /* @__PURE__ */ new Set([
  "area",
  "base",
  "basefont",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
function render36(node2, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var nodes = "length" in node2 ? node2 : [node2];
  var output = "";
  for (var i = 0; i < nodes.length; i++) {
    output += renderNode(nodes[i], options2);
  }
  return output;
}
lib$1.default = render36;
function renderNode(node2, options2) {
  switch (node2.type) {
    case ElementType.Root:
      return render36(node2.children, options2);
    case ElementType.Directive:
    case ElementType.Doctype:
      return renderDirective(node2);
    case ElementType.Comment:
      return renderComment(node2);
    case ElementType.CDATA:
      return renderCdata(node2);
    case ElementType.Script:
    case ElementType.Style:
    case ElementType.Tag:
      return renderTag(node2, options2);
    case ElementType.Text:
      return renderText(node2, options2);
  }
}
var foreignModeIntegrationPoints = /* @__PURE__ */ new Set([
  "mi",
  "mo",
  "mn",
  "ms",
  "mtext",
  "annotation-xml",
  "foreignObject",
  "desc",
  "title"
]);
var foreignElements = /* @__PURE__ */ new Set(["svg", "math"]);
function renderTag(elem, opts) {
  var _a;
  if (opts.xmlMode === "foreign") {
    elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
    if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
      opts = __assign(__assign({}, opts), { xmlMode: false });
    }
  }
  if (!opts.xmlMode && foreignElements.has(elem.name)) {
    opts = __assign(__assign({}, opts), { xmlMode: "foreign" });
  }
  var tag2 = "<" + elem.name;
  var attribs = formatAttributes(elem.attribs, opts);
  if (attribs) {
    tag2 += " " + attribs;
  }
  if (elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== false : opts.selfClosingTags && singleTag.has(elem.name))) {
    if (!opts.xmlMode)
      tag2 += " ";
    tag2 += "/>";
  } else {
    tag2 += ">";
    if (elem.children.length > 0) {
      tag2 += render36(elem.children, opts);
    }
    if (opts.xmlMode || !singleTag.has(elem.name)) {
      tag2 += "</" + elem.name + ">";
    }
  }
  return tag2;
}
function renderDirective(elem) {
  return "<" + elem.data + ">";
}
function renderText(elem, opts) {
  var data3 = elem.data || "";
  if (opts.decodeEntities !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {
    data3 = entities_1.encodeXML(data3);
  }
  return data3;
}
function renderCdata(elem) {
  return "<![CDATA[" + elem.children[0].data + "]]>";
}
function renderComment(elem) {
  return "<!--" + elem.data + "-->";
}
var __importDefault$1 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(stringify$5, "__esModule", { value: true });
stringify$5.innerText = stringify$5.textContent = stringify$5.getText = stringify$5.getInnerHTML = stringify$5.getOuterHTML = void 0;
var domhandler_1$5 = lib$4;
var dom_serializer_1 = __importDefault$1(lib$1);
var domelementtype_1 = lib$3;
function getOuterHTML(node2, options2) {
  return (0, dom_serializer_1.default)(node2, options2);
}
stringify$5.getOuterHTML = getOuterHTML;
function getInnerHTML(node2, options2) {
  return (0, domhandler_1$5.hasChildren)(node2) ? node2.children.map(function(node3) {
    return getOuterHTML(node3, options2);
  }).join("") : "";
}
stringify$5.getInnerHTML = getInnerHTML;
function getText(node2) {
  if (Array.isArray(node2))
    return node2.map(getText).join("");
  if ((0, domhandler_1$5.isTag)(node2))
    return node2.name === "br" ? "\n" : getText(node2.children);
  if ((0, domhandler_1$5.isCDATA)(node2))
    return getText(node2.children);
  if ((0, domhandler_1$5.isText)(node2))
    return node2.data;
  return "";
}
stringify$5.getText = getText;
function textContent(node2) {
  if (Array.isArray(node2))
    return node2.map(textContent).join("");
  if ((0, domhandler_1$5.hasChildren)(node2) && !(0, domhandler_1$5.isComment)(node2)) {
    return textContent(node2.children);
  }
  if ((0, domhandler_1$5.isText)(node2))
    return node2.data;
  return "";
}
stringify$5.textContent = textContent;
function innerText(node2) {
  if (Array.isArray(node2))
    return node2.map(innerText).join("");
  if ((0, domhandler_1$5.hasChildren)(node2) && (node2.type === domelementtype_1.ElementType.Tag || (0, domhandler_1$5.isCDATA)(node2))) {
    return innerText(node2.children);
  }
  if ((0, domhandler_1$5.isText)(node2))
    return node2.data;
  return "";
}
stringify$5.innerText = innerText;
var traversal = {};
Object.defineProperty(traversal, "__esModule", { value: true });
traversal.prevElementSibling = traversal.nextElementSibling = traversal.getName = traversal.hasAttrib = traversal.getAttributeValue = traversal.getSiblings = traversal.getParent = traversal.getChildren = void 0;
var domhandler_1$4 = lib$4;
var emptyArray = [];
function getChildren(elem) {
  var _a;
  return (_a = elem.children) !== null && _a !== void 0 ? _a : emptyArray;
}
traversal.getChildren = getChildren;
function getParent(elem) {
  return elem.parent || null;
}
traversal.getParent = getParent;
function getSiblings(elem) {
  var _a, _b;
  var parent = getParent(elem);
  if (parent != null)
    return getChildren(parent);
  var siblings = [elem];
  var prev = elem.prev, next2 = elem.next;
  while (prev != null) {
    siblings.unshift(prev);
    _a = prev, prev = _a.prev;
  }
  while (next2 != null) {
    siblings.push(next2);
    _b = next2, next2 = _b.next;
  }
  return siblings;
}
traversal.getSiblings = getSiblings;
function getAttributeValue(elem, name) {
  var _a;
  return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
}
traversal.getAttributeValue = getAttributeValue;
function hasAttrib(elem, name) {
  return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
}
traversal.hasAttrib = hasAttrib;
function getName(elem) {
  return elem.name;
}
traversal.getName = getName;
function nextElementSibling(elem) {
  var _a;
  var next2 = elem.next;
  while (next2 !== null && !(0, domhandler_1$4.isTag)(next2))
    _a = next2, next2 = _a.next;
  return next2;
}
traversal.nextElementSibling = nextElementSibling;
function prevElementSibling(elem) {
  var _a;
  var prev = elem.prev;
  while (prev !== null && !(0, domhandler_1$4.isTag)(prev))
    _a = prev, prev = _a.prev;
  return prev;
}
traversal.prevElementSibling = prevElementSibling;
var manipulation = {};
Object.defineProperty(manipulation, "__esModule", { value: true });
manipulation.prepend = manipulation.prependChild = manipulation.append = manipulation.appendChild = manipulation.replaceElement = manipulation.removeElement = void 0;
function removeElement(elem) {
  if (elem.prev)
    elem.prev.next = elem.next;
  if (elem.next)
    elem.next.prev = elem.prev;
  if (elem.parent) {
    var childs = elem.parent.children;
    childs.splice(childs.lastIndexOf(elem), 1);
  }
}
manipulation.removeElement = removeElement;
function replaceElement(elem, replacement) {
  var prev = replacement.prev = elem.prev;
  if (prev) {
    prev.next = replacement;
  }
  var next2 = replacement.next = elem.next;
  if (next2) {
    next2.prev = replacement;
  }
  var parent = replacement.parent = elem.parent;
  if (parent) {
    var childs = parent.children;
    childs[childs.lastIndexOf(elem)] = replacement;
  }
}
manipulation.replaceElement = replaceElement;
function appendChild(elem, child2) {
  removeElement(child2);
  child2.next = null;
  child2.parent = elem;
  if (elem.children.push(child2) > 1) {
    var sibling = elem.children[elem.children.length - 2];
    sibling.next = child2;
    child2.prev = sibling;
  } else {
    child2.prev = null;
  }
}
manipulation.appendChild = appendChild;
function append(elem, next2) {
  removeElement(next2);
  var parent = elem.parent;
  var currNext = elem.next;
  next2.next = currNext;
  next2.prev = elem;
  elem.next = next2;
  next2.parent = parent;
  if (currNext) {
    currNext.prev = next2;
    if (parent) {
      var childs = parent.children;
      childs.splice(childs.lastIndexOf(currNext), 0, next2);
    }
  } else if (parent) {
    parent.children.push(next2);
  }
}
manipulation.append = append;
function prependChild(elem, child2) {
  removeElement(child2);
  child2.parent = elem;
  child2.prev = null;
  if (elem.children.unshift(child2) !== 1) {
    var sibling = elem.children[1];
    sibling.prev = child2;
    child2.next = sibling;
  } else {
    child2.next = null;
  }
}
manipulation.prependChild = prependChild;
function prepend(elem, prev) {
  removeElement(prev);
  var parent = elem.parent;
  if (parent) {
    var childs = parent.children;
    childs.splice(childs.indexOf(elem), 0, prev);
  }
  if (elem.prev) {
    elem.prev.next = prev;
  }
  prev.parent = parent;
  prev.prev = elem.prev;
  prev.next = elem;
  elem.prev = prev;
}
manipulation.prepend = prepend;
var querying = {};
Object.defineProperty(querying, "__esModule", { value: true });
querying.findAll = querying.existsOne = querying.findOne = querying.findOneChild = querying.find = querying.filter = void 0;
var domhandler_1$3 = lib$4;
function filter$1(test2, node2, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }
  if (limit === void 0) {
    limit = Infinity;
  }
  if (!Array.isArray(node2))
    node2 = [node2];
  return find(test2, node2, recurse, limit);
}
querying.filter = filter$1;
function find(test2, nodes, recurse, limit) {
  var result2 = [];
  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
    var elem = nodes_1[_i];
    if (test2(elem)) {
      result2.push(elem);
      if (--limit <= 0)
        break;
    }
    if (recurse && (0, domhandler_1$3.hasChildren)(elem) && elem.children.length > 0) {
      var children = find(test2, elem.children, recurse, limit);
      result2.push.apply(result2, children);
      limit -= children.length;
      if (limit <= 0)
        break;
    }
  }
  return result2;
}
querying.find = find;
function findOneChild(test2, nodes) {
  return nodes.find(test2);
}
querying.findOneChild = findOneChild;
function findOne(test2, nodes, recurse) {
  if (recurse === void 0) {
    recurse = true;
  }
  var elem = null;
  for (var i = 0; i < nodes.length && !elem; i++) {
    var checked = nodes[i];
    if (!(0, domhandler_1$3.isTag)(checked)) {
      continue;
    } else if (test2(checked)) {
      elem = checked;
    } else if (recurse && checked.children.length > 0) {
      elem = findOne(test2, checked.children);
    }
  }
  return elem;
}
querying.findOne = findOne;
function existsOne(test2, nodes) {
  return nodes.some(function(checked) {
    return (0, domhandler_1$3.isTag)(checked) && (test2(checked) || checked.children.length > 0 && existsOne(test2, checked.children));
  });
}
querying.existsOne = existsOne;
function findAll(test2, nodes) {
  var _a;
  var result2 = [];
  var stack = nodes.filter(domhandler_1$3.isTag);
  var elem;
  while (elem = stack.shift()) {
    var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler_1$3.isTag);
    if (children && children.length > 0) {
      stack.unshift.apply(stack, children);
    }
    if (test2(elem))
      result2.push(elem);
  }
  return result2;
}
querying.findAll = findAll;
var legacy = {};
Object.defineProperty(legacy, "__esModule", { value: true });
legacy.getElementsByTagType = legacy.getElementsByTagName = legacy.getElementById = legacy.getElements = legacy.testElement = void 0;
var domhandler_1$2 = lib$4;
var querying_1 = querying;
var Checks = {
  tag_name: function(name) {
    if (typeof name === "function") {
      return function(elem) {
        return (0, domhandler_1$2.isTag)(elem) && name(elem.name);
      };
    } else if (name === "*") {
      return domhandler_1$2.isTag;
    }
    return function(elem) {
      return (0, domhandler_1$2.isTag)(elem) && elem.name === name;
    };
  },
  tag_type: function(type) {
    if (typeof type === "function") {
      return function(elem) {
        return type(elem.type);
      };
    }
    return function(elem) {
      return elem.type === type;
    };
  },
  tag_contains: function(data3) {
    if (typeof data3 === "function") {
      return function(elem) {
        return (0, domhandler_1$2.isText)(elem) && data3(elem.data);
      };
    }
    return function(elem) {
      return (0, domhandler_1$2.isText)(elem) && elem.data === data3;
    };
  }
};
function getAttribCheck(attrib, value) {
  if (typeof value === "function") {
    return function(elem) {
      return (0, domhandler_1$2.isTag)(elem) && value(elem.attribs[attrib]);
    };
  }
  return function(elem) {
    return (0, domhandler_1$2.isTag)(elem) && elem.attribs[attrib] === value;
  };
}
function combineFuncs(a2, b2) {
  return function(elem) {
    return a2(elem) || b2(elem);
  };
}
function compileTest(options2) {
  var funcs = Object.keys(options2).map(function(key2) {
    var value = options2[key2];
    return Object.prototype.hasOwnProperty.call(Checks, key2) ? Checks[key2](value) : getAttribCheck(key2, value);
  });
  return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
function testElement(options2, node2) {
  var test2 = compileTest(options2);
  return test2 ? test2(node2) : true;
}
legacy.testElement = testElement;
function getElements$1(options2, nodes, recurse, limit) {
  if (limit === void 0) {
    limit = Infinity;
  }
  var test2 = compileTest(options2);
  return test2 ? (0, querying_1.filter)(test2, nodes, recurse, limit) : [];
}
legacy.getElements = getElements$1;
function getElementById(id2, nodes, recurse) {
  if (recurse === void 0) {
    recurse = true;
  }
  if (!Array.isArray(nodes))
    nodes = [nodes];
  return (0, querying_1.findOne)(getAttribCheck("id", id2), nodes, recurse);
}
legacy.getElementById = getElementById;
function getElementsByTagName(tagName, nodes, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }
  if (limit === void 0) {
    limit = Infinity;
  }
  return (0, querying_1.filter)(Checks.tag_name(tagName), nodes, recurse, limit);
}
legacy.getElementsByTagName = getElementsByTagName;
function getElementsByTagType(type, nodes, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }
  if (limit === void 0) {
    limit = Infinity;
  }
  return (0, querying_1.filter)(Checks.tag_type(type), nodes, recurse, limit);
}
legacy.getElementsByTagType = getElementsByTagType;
var helpers = {};
Object.defineProperty(helpers, "__esModule", { value: true });
helpers.uniqueSort = helpers.compareDocumentPosition = helpers.removeSubsets = void 0;
var domhandler_1$1 = lib$4;
function removeSubsets(nodes) {
  var idx = nodes.length;
  while (--idx >= 0) {
    var node2 = nodes[idx];
    if (idx > 0 && nodes.lastIndexOf(node2, idx - 1) >= 0) {
      nodes.splice(idx, 1);
      continue;
    }
    for (var ancestor = node2.parent; ancestor; ancestor = ancestor.parent) {
      if (nodes.includes(ancestor)) {
        nodes.splice(idx, 1);
        break;
      }
    }
  }
  return nodes;
}
helpers.removeSubsets = removeSubsets;
function compareDocumentPosition(nodeA, nodeB) {
  var aParents = [];
  var bParents = [];
  if (nodeA === nodeB) {
    return 0;
  }
  var current = (0, domhandler_1$1.hasChildren)(nodeA) ? nodeA : nodeA.parent;
  while (current) {
    aParents.unshift(current);
    current = current.parent;
  }
  current = (0, domhandler_1$1.hasChildren)(nodeB) ? nodeB : nodeB.parent;
  while (current) {
    bParents.unshift(current);
    current = current.parent;
  }
  var maxIdx = Math.min(aParents.length, bParents.length);
  var idx = 0;
  while (idx < maxIdx && aParents[idx] === bParents[idx]) {
    idx++;
  }
  if (idx === 0) {
    return 1;
  }
  var sharedParent = aParents[idx - 1];
  var siblings = sharedParent.children;
  var aSibling = aParents[idx];
  var bSibling = bParents[idx];
  if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
    if (sharedParent === nodeB) {
      return 4 | 16;
    }
    return 4;
  }
  if (sharedParent === nodeA) {
    return 2 | 8;
  }
  return 2;
}
helpers.compareDocumentPosition = compareDocumentPosition;
function uniqueSort(nodes) {
  nodes = nodes.filter(function(node2, i, arr) {
    return !arr.includes(node2, i + 1);
  });
  nodes.sort(function(a2, b2) {
    var relative2 = compareDocumentPosition(a2, b2);
    if (relative2 & 2) {
      return -1;
    } else if (relative2 & 4) {
      return 1;
    }
    return 0;
  });
  return nodes;
}
helpers.uniqueSort = uniqueSort;
var feeds = {};
Object.defineProperty(feeds, "__esModule", { value: true });
feeds.getFeed = void 0;
var stringify_1$1 = stringify$5;
var legacy_1 = legacy;
function getFeed(doc) {
  var feedRoot = getOneElement$1(isValidFeed$1, doc);
  return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
}
feeds.getFeed = getFeed;
function getAtomFeed(feedRoot) {
  var _a;
  var childs = feedRoot.children;
  var feed = {
    type: "atom",
    items: (0, legacy_1.getElementsByTagName)("entry", childs).map(function(item2) {
      var _a2;
      var children = item2.children;
      var entry = { media: getMediaElements$1(children) };
      addConditionally$1(entry, "id", "id", children);
      addConditionally$1(entry, "title", "title", children);
      var href2 = (_a2 = getOneElement$1("link", children)) === null || _a2 === void 0 ? void 0 : _a2.attribs.href;
      if (href2) {
        entry.link = href2;
      }
      var description2 = fetch$1("summary", children) || fetch$1("content", children);
      if (description2) {
        entry.description = description2;
      }
      var pubDate = fetch$1("updated", children);
      if (pubDate) {
        entry.pubDate = new Date(pubDate);
      }
      return entry;
    })
  };
  addConditionally$1(feed, "id", "id", childs);
  addConditionally$1(feed, "title", "title", childs);
  var href = (_a = getOneElement$1("link", childs)) === null || _a === void 0 ? void 0 : _a.attribs.href;
  if (href) {
    feed.link = href;
  }
  addConditionally$1(feed, "description", "subtitle", childs);
  var updated = fetch$1("updated", childs);
  if (updated) {
    feed.updated = new Date(updated);
  }
  addConditionally$1(feed, "author", "email", childs, true);
  return feed;
}
function getRssFeed(feedRoot) {
  var _a, _b;
  var childs = (_b = (_a = getOneElement$1("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
  var feed = {
    type: feedRoot.name.substr(0, 3),
    id: "",
    items: (0, legacy_1.getElementsByTagName)("item", feedRoot.children).map(function(item2) {
      var children = item2.children;
      var entry = { media: getMediaElements$1(children) };
      addConditionally$1(entry, "id", "guid", children);
      addConditionally$1(entry, "title", "title", children);
      addConditionally$1(entry, "link", "link", children);
      addConditionally$1(entry, "description", "description", children);
      var pubDate = fetch$1("pubDate", children);
      if (pubDate)
        entry.pubDate = new Date(pubDate);
      return entry;
    })
  };
  addConditionally$1(feed, "title", "title", childs);
  addConditionally$1(feed, "link", "link", childs);
  addConditionally$1(feed, "description", "description", childs);
  var updated = fetch$1("lastBuildDate", childs);
  if (updated) {
    feed.updated = new Date(updated);
  }
  addConditionally$1(feed, "author", "managingEditor", childs, true);
  return feed;
}
var MEDIA_KEYS_STRING = ["url", "type", "lang"];
var MEDIA_KEYS_INT = [
  "fileSize",
  "bitrate",
  "framerate",
  "samplingrate",
  "channels",
  "duration",
  "height",
  "width"
];
function getMediaElements$1(where) {
  return (0, legacy_1.getElementsByTagName)("media:content", where).map(function(elem) {
    var attribs = elem.attribs;
    var media = {
      medium: attribs.medium,
      isDefault: !!attribs.isDefault
    };
    for (var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++) {
      var attrib = MEDIA_KEYS_STRING_1[_i];
      if (attribs[attrib]) {
        media[attrib] = attribs[attrib];
      }
    }
    for (var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++) {
      var attrib = MEDIA_KEYS_INT_1[_a];
      if (attribs[attrib]) {
        media[attrib] = parseInt(attribs[attrib], 10);
      }
    }
    if (attribs.expression) {
      media.expression = attribs.expression;
    }
    return media;
  });
}
function getOneElement$1(tagName, node2) {
  return (0, legacy_1.getElementsByTagName)(tagName, node2, true, 1)[0];
}
function fetch$1(tagName, where, recurse) {
  if (recurse === void 0) {
    recurse = false;
  }
  return (0, stringify_1$1.textContent)((0, legacy_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();
}
function addConditionally$1(obj, prop2, tagName, where, recurse) {
  if (recurse === void 0) {
    recurse = false;
  }
  var val = fetch$1(tagName, where, recurse);
  if (val)
    obj[prop2] = val;
}
function isValidFeed$1(value) {
  return value === "rss" || value === "feed" || value === "rdf:RDF";
}
(function(exports) {
  var __createBinding2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(o3, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o3, k2, { enumerable: true, get: function() {
      return m2[k];
    } });
  } : function(o3, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o3[k2] = m2[k];
  });
  var __exportStar = commonjsGlobal$1 && commonjsGlobal$1.__exportStar || function(m2, exports2) {
    for (var p in m2)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding2(exports2, m2, p);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
  __exportStar(stringify$5, exports);
  __exportStar(traversal, exports);
  __exportStar(manipulation, exports);
  __exportStar(querying, exports);
  __exportStar(legacy, exports);
  __exportStar(helpers, exports);
  __exportStar(feeds, exports);
  var domhandler_12 = lib$4;
  Object.defineProperty(exports, "isTag", { enumerable: true, get: function() {
    return domhandler_12.isTag;
  } });
  Object.defineProperty(exports, "isCDATA", { enumerable: true, get: function() {
    return domhandler_12.isCDATA;
  } });
  Object.defineProperty(exports, "isText", { enumerable: true, get: function() {
    return domhandler_12.isText;
  } });
  Object.defineProperty(exports, "isComment", { enumerable: true, get: function() {
    return domhandler_12.isComment;
  } });
  Object.defineProperty(exports, "isDocument", { enumerable: true, get: function() {
    return domhandler_12.isDocument;
  } });
  Object.defineProperty(exports, "hasChildren", { enumerable: true, get: function() {
    return domhandler_12.hasChildren;
  } });
})(lib$2);
var __extends = commonjsGlobal$1 && commonjsGlobal$1.__extends || function() {
  var extendStatics = function(d, b2) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
      d2.__proto__ = b3;
    } || function(d2, b3) {
      for (var p in b3)
        if (Object.prototype.hasOwnProperty.call(b3, p))
          d2[p] = b3[p];
    };
    return extendStatics(d, b2);
  };
  return function(d, b2) {
    if (typeof b2 !== "function" && b2 !== null)
      throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
    extendStatics(d, b2);
    function __() {
      this.constructor = d;
    }
    d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
  };
}();
var __createBinding = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(o3, m2, k, k2) {
  if (k2 === void 0)
    k2 = k;
  Object.defineProperty(o3, k2, { enumerable: true, get: function() {
    return m2[k];
  } });
} : function(o3, m2, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o3[k2] = m2[k];
});
var __setModuleDefault = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(o3, v2) {
  Object.defineProperty(o3, "default", { enumerable: true, value: v2 });
} : function(o3, v2) {
  o3["default"] = v2;
});
var __importStar = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result2 = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result2, mod, k);
  }
  __setModuleDefault(result2, mod);
  return result2;
};
var __importDefault = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(mod) {
  return mod && mod.__esModule ? mod : { "default": mod };
};
Object.defineProperty(FeedHandler$1, "__esModule", { value: true });
FeedHandler$1.parseFeed = FeedHandler$1.FeedHandler = void 0;
var domhandler_1 = __importDefault(lib$4);
var DomUtils = __importStar(lib$2);
var Parser_1 = Parser$3;
var FeedItemMediaMedium;
(function(FeedItemMediaMedium2) {
  FeedItemMediaMedium2[FeedItemMediaMedium2["image"] = 0] = "image";
  FeedItemMediaMedium2[FeedItemMediaMedium2["audio"] = 1] = "audio";
  FeedItemMediaMedium2[FeedItemMediaMedium2["video"] = 2] = "video";
  FeedItemMediaMedium2[FeedItemMediaMedium2["document"] = 3] = "document";
  FeedItemMediaMedium2[FeedItemMediaMedium2["executable"] = 4] = "executable";
})(FeedItemMediaMedium || (FeedItemMediaMedium = {}));
var FeedItemMediaExpression;
(function(FeedItemMediaExpression2) {
  FeedItemMediaExpression2[FeedItemMediaExpression2["sample"] = 0] = "sample";
  FeedItemMediaExpression2[FeedItemMediaExpression2["full"] = 1] = "full";
  FeedItemMediaExpression2[FeedItemMediaExpression2["nonstop"] = 2] = "nonstop";
})(FeedItemMediaExpression || (FeedItemMediaExpression = {}));
var FeedHandler = function(_super) {
  __extends(FeedHandler2, _super);
  function FeedHandler2(callback, options2) {
    var _this = this;
    if (typeof callback === "object") {
      callback = void 0;
      options2 = callback;
    }
    _this = _super.call(this, callback, options2) || this;
    return _this;
  }
  FeedHandler2.prototype.onend = function() {
    var _a, _b;
    var feedRoot = getOneElement(isValidFeed, this.dom);
    if (!feedRoot) {
      this.handleCallback(new Error("couldn't find root of feed"));
      return;
    }
    var feed = {};
    if (feedRoot.name === "feed") {
      var childs = feedRoot.children;
      feed.type = "atom";
      addConditionally(feed, "id", "id", childs);
      addConditionally(feed, "title", "title", childs);
      var href = getAttribute("href", getOneElement("link", childs));
      if (href) {
        feed.link = href;
      }
      addConditionally(feed, "description", "subtitle", childs);
      var updated = fetch("updated", childs);
      if (updated) {
        feed.updated = new Date(updated);
      }
      addConditionally(feed, "author", "email", childs, true);
      feed.items = getElements("entry", childs).map(function(item2) {
        var entry = {};
        var children = item2.children;
        addConditionally(entry, "id", "id", children);
        addConditionally(entry, "title", "title", children);
        var href2 = getAttribute("href", getOneElement("link", children));
        if (href2) {
          entry.link = href2;
        }
        var description2 = fetch("summary", children) || fetch("content", children);
        if (description2) {
          entry.description = description2;
        }
        var pubDate = fetch("updated", children);
        if (pubDate) {
          entry.pubDate = new Date(pubDate);
        }
        entry.media = getMediaElements(children);
        return entry;
      });
    } else {
      var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
      feed.type = feedRoot.name.substr(0, 3);
      feed.id = "";
      addConditionally(feed, "title", "title", childs);
      addConditionally(feed, "link", "link", childs);
      addConditionally(feed, "description", "description", childs);
      var updated = fetch("lastBuildDate", childs);
      if (updated) {
        feed.updated = new Date(updated);
      }
      addConditionally(feed, "author", "managingEditor", childs, true);
      feed.items = getElements("item", feedRoot.children).map(function(item2) {
        var entry = {};
        var children = item2.children;
        addConditionally(entry, "id", "guid", children);
        addConditionally(entry, "title", "title", children);
        addConditionally(entry, "link", "link", children);
        addConditionally(entry, "description", "description", children);
        var pubDate = fetch("pubDate", children);
        if (pubDate)
          entry.pubDate = new Date(pubDate);
        entry.media = getMediaElements(children);
        return entry;
      });
    }
    this.feed = feed;
    this.handleCallback(null);
  };
  return FeedHandler2;
}(domhandler_1.default);
FeedHandler$1.FeedHandler = FeedHandler;
function getMediaElements(where) {
  return getElements("media:content", where).map(function(elem) {
    var media = {
      medium: elem.attribs.medium,
      isDefault: !!elem.attribs.isDefault
    };
    if (elem.attribs.url) {
      media.url = elem.attribs.url;
    }
    if (elem.attribs.fileSize) {
      media.fileSize = parseInt(elem.attribs.fileSize, 10);
    }
    if (elem.attribs.type) {
      media.type = elem.attribs.type;
    }
    if (elem.attribs.expression) {
      media.expression = elem.attribs.expression;
    }
    if (elem.attribs.bitrate) {
      media.bitrate = parseInt(elem.attribs.bitrate, 10);
    }
    if (elem.attribs.framerate) {
      media.framerate = parseInt(elem.attribs.framerate, 10);
    }
    if (elem.attribs.samplingrate) {
      media.samplingrate = parseInt(elem.attribs.samplingrate, 10);
    }
    if (elem.attribs.channels) {
      media.channels = parseInt(elem.attribs.channels, 10);
    }
    if (elem.attribs.duration) {
      media.duration = parseInt(elem.attribs.duration, 10);
    }
    if (elem.attribs.height) {
      media.height = parseInt(elem.attribs.height, 10);
    }
    if (elem.attribs.width) {
      media.width = parseInt(elem.attribs.width, 10);
    }
    if (elem.attribs.lang) {
      media.lang = elem.attribs.lang;
    }
    return media;
  });
}
function getElements(tagName, where) {
  return DomUtils.getElementsByTagName(tagName, where, true);
}
function getOneElement(tagName, node2) {
  return DomUtils.getElementsByTagName(tagName, node2, true, 1)[0];
}
function fetch(tagName, where, recurse) {
  if (recurse === void 0) {
    recurse = false;
  }
  return DomUtils.getText(DomUtils.getElementsByTagName(tagName, where, recurse, 1)).trim();
}
function getAttribute(name, elem) {
  if (!elem) {
    return null;
  }
  var attribs = elem.attribs;
  return attribs[name];
}
function addConditionally(obj, prop2, what, where, recurse) {
  if (recurse === void 0) {
    recurse = false;
  }
  var tmp = fetch(what, where, recurse);
  if (tmp)
    obj[prop2] = tmp;
}
function isValidFeed(value) {
  return value === "rss" || value === "feed" || value === "rdf:RDF";
}
function parseFeed(feed, options2) {
  if (options2 === void 0) {
    options2 = { xmlMode: true };
  }
  var handler2 = new FeedHandler(options2);
  new Parser_1.Parser(handler2, options2).end(feed);
  return handler2.feed;
}
FeedHandler$1.parseFeed = parseFeed;
(function(exports) {
  var __createBinding2 = commonjsGlobal$1 && commonjsGlobal$1.__createBinding || (Object.create ? function(o3, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o3, k2, { enumerable: true, get: function() {
      return m2[k];
    } });
  } : function(o3, m2, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o3[k2] = m2[k];
  });
  var __setModuleDefault2 = commonjsGlobal$1 && commonjsGlobal$1.__setModuleDefault || (Object.create ? function(o3, v2) {
    Object.defineProperty(o3, "default", { enumerable: true, value: v2 });
  } : function(o3, v2) {
    o3["default"] = v2;
  });
  var __importStar2 = commonjsGlobal$1 && commonjsGlobal$1.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result2 = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding2(result2, mod, k);
    }
    __setModuleDefault2(result2, mod);
    return result2;
  };
  var __exportStar = commonjsGlobal$1 && commonjsGlobal$1.__exportStar || function(m2, exports2) {
    for (var p in m2)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
        __createBinding2(exports2, m2, p);
  };
  var __importDefault2 = commonjsGlobal$1 && commonjsGlobal$1.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;
  var Parser_12 = Parser$3;
  Object.defineProperty(exports, "Parser", { enumerable: true, get: function() {
    return Parser_12.Parser;
  } });
  var domhandler_12 = lib$4;
  Object.defineProperty(exports, "DomHandler", { enumerable: true, get: function() {
    return domhandler_12.DomHandler;
  } });
  Object.defineProperty(exports, "DefaultHandler", { enumerable: true, get: function() {
    return domhandler_12.DomHandler;
  } });
  function parseDocument(data3, options2) {
    var handler2 = new domhandler_12.DomHandler(void 0, options2);
    new Parser_12.Parser(handler2, options2).end(data3);
    return handler2.root;
  }
  exports.parseDocument = parseDocument;
  function parseDOM(data3, options2) {
    return parseDocument(data3, options2).children;
  }
  exports.parseDOM = parseDOM;
  function createDomStream(cb, options2, elementCb) {
    var handler2 = new domhandler_12.DomHandler(cb, options2, elementCb);
    return new Parser_12.Parser(handler2, options2);
  }
  exports.createDomStream = createDomStream;
  var Tokenizer_12 = Tokenizer$1;
  Object.defineProperty(exports, "Tokenizer", { enumerable: true, get: function() {
    return __importDefault2(Tokenizer_12).default;
  } });
  var ElementType2 = __importStar2(lib$3);
  exports.ElementType = ElementType2;
  __exportStar(FeedHandler$1, exports);
  exports.DomUtils = __importStar2(lib$2);
  var FeedHandler_1 = FeedHandler$1;
  Object.defineProperty(exports, "RssHandler", { enumerable: true, get: function() {
    return FeedHandler_1.FeedHandler;
  } });
})(lib$5);
var escapeStringRegexp$1 = (string) => {
  if (typeof string !== "string") {
    throw new TypeError("Expected a string");
  }
  return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
};
var isPlainObject$2 = {};
Object.defineProperty(isPlainObject$2, "__esModule", { value: true });
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
function isObject(o3) {
  return Object.prototype.toString.call(o3) === "[object Object]";
}
function isPlainObject$1(o3) {
  var ctor, prot;
  if (isObject(o3) === false)
    return false;
  ctor = o3.constructor;
  if (ctor === void 0)
    return true;
  prot = ctor.prototype;
  if (isObject(prot) === false)
    return false;
  if (prot.hasOwnProperty("isPrototypeOf") === false) {
    return false;
  }
  return true;
}
isPlainObject$2.isPlainObject = isPlainObject$1;
var isMergeableObject2 = function isMergeableObject3(value) {
  return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
  return !!value && typeof value === "object";
}
function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
}
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options2) {
  return options2.clone !== false && options2.isMergeableObject(value) ? deepmerge$1(emptyTarget(value), value, options2) : value;
}
function defaultArrayMerge(target2, source, options2) {
  return target2.concat(source).map(function(element) {
    return cloneUnlessOtherwiseSpecified(element, options2);
  });
}
function getMergeFunction(key2, options2) {
  if (!options2.customMerge) {
    return deepmerge$1;
  }
  var customMerge = options2.customMerge(key2);
  return typeof customMerge === "function" ? customMerge : deepmerge$1;
}
function getEnumerableOwnPropertySymbols(target2) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target2).filter(function(symbol) {
    return target2.propertyIsEnumerable(symbol);
  }) : [];
}
function getKeys(target2) {
  return Object.keys(target2).concat(getEnumerableOwnPropertySymbols(target2));
}
function propertyIsOnObject(object, property) {
  try {
    return property in object;
  } catch (_2) {
    return false;
  }
}
function propertyIsUnsafe(target2, key2) {
  return propertyIsOnObject(target2, key2) && !(Object.hasOwnProperty.call(target2, key2) && Object.propertyIsEnumerable.call(target2, key2));
}
function mergeObject(target2, source, options2) {
  var destination = {};
  if (options2.isMergeableObject(target2)) {
    getKeys(target2).forEach(function(key2) {
      destination[key2] = cloneUnlessOtherwiseSpecified(target2[key2], options2);
    });
  }
  getKeys(source).forEach(function(key2) {
    if (propertyIsUnsafe(target2, key2)) {
      return;
    }
    if (propertyIsOnObject(target2, key2) && options2.isMergeableObject(source[key2])) {
      destination[key2] = getMergeFunction(key2, options2)(target2[key2], source[key2], options2);
    } else {
      destination[key2] = cloneUnlessOtherwiseSpecified(source[key2], options2);
    }
  });
  return destination;
}
function deepmerge$1(target2, source, options2) {
  options2 = options2 || {};
  options2.arrayMerge = options2.arrayMerge || defaultArrayMerge;
  options2.isMergeableObject = options2.isMergeableObject || isMergeableObject2;
  options2.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target2);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options2);
  } else if (sourceIsArray) {
    return options2.arrayMerge(target2, source, options2);
  } else {
    return mergeObject(target2, source, options2);
  }
}
deepmerge$1.all = function deepmergeAll2(array, options2) {
  if (!Array.isArray(array)) {
    throw new Error("first argument should be an array");
  }
  return array.reduce(function(prev, next2) {
    return deepmerge$1(prev, next2, options2);
  }, {});
};
var deepmerge_1 = deepmerge$1;
var cjs = deepmerge_1;
var parseSrcset$1 = { exports: {} };
(function(module) {
  (function(root2, factory2) {
    if (module.exports) {
      module.exports = factory2();
    } else {
      root2.parseSrcset = factory2();
    }
  })(commonjsGlobal$1, function() {
    return function(input2) {
      function isSpace2(c2) {
        return c2 === " " || c2 === "	" || c2 === "\n" || c2 === "\f" || c2 === "\r";
      }
      function collectCharacters(regEx) {
        var chars, match2 = regEx.exec(input2.substring(pos));
        if (match2) {
          chars = match2[0];
          pos += chars.length;
          return chars;
        }
      }
      var inputLength = input2.length, regexLeadingSpaces = /^[ \t\n\r\u000c]+/, regexLeadingCommasOrSpaces = /^[, \t\n\r\u000c]+/, regexLeadingNotSpaces = /^[^ \t\n\r\u000c]+/, regexTrailingCommas = /[,]+$/, regexNonNegativeInteger = /^\d+$/, regexFloatingPoint = /^-?(?:[0-9]+|[0-9]*\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/, url, descriptors, currentDescriptor, state, c, pos = 0, candidates = [];
      while (true) {
        collectCharacters(regexLeadingCommasOrSpaces);
        if (pos >= inputLength) {
          return candidates;
        }
        url = collectCharacters(regexLeadingNotSpaces);
        descriptors = [];
        if (url.slice(-1) === ",") {
          url = url.replace(regexTrailingCommas, "");
          parseDescriptors();
        } else {
          tokenize2();
        }
      }
      function tokenize2() {
        collectCharacters(regexLeadingSpaces);
        currentDescriptor = "";
        state = "in descriptor";
        while (true) {
          c = input2.charAt(pos);
          if (state === "in descriptor") {
            if (isSpace2(c)) {
              if (currentDescriptor) {
                descriptors.push(currentDescriptor);
                currentDescriptor = "";
                state = "after descriptor";
              }
            } else if (c === ",") {
              pos += 1;
              if (currentDescriptor) {
                descriptors.push(currentDescriptor);
              }
              parseDescriptors();
              return;
            } else if (c === "(") {
              currentDescriptor = currentDescriptor + c;
              state = "in parens";
            } else if (c === "") {
              if (currentDescriptor) {
                descriptors.push(currentDescriptor);
              }
              parseDescriptors();
              return;
            } else {
              currentDescriptor = currentDescriptor + c;
            }
          } else if (state === "in parens") {
            if (c === ")") {
              currentDescriptor = currentDescriptor + c;
              state = "in descriptor";
            } else if (c === "") {
              descriptors.push(currentDescriptor);
              parseDescriptors();
              return;
            } else {
              currentDescriptor = currentDescriptor + c;
            }
          } else if (state === "after descriptor") {
            if (isSpace2(c))
              ;
            else if (c === "") {
              parseDescriptors();
              return;
            } else {
              state = "in descriptor";
              pos -= 1;
            }
          }
          pos += 1;
        }
      }
      function parseDescriptors() {
        var pError = false, w2, d, h, i, candidate = {}, desc, lastChar, value, intVal, floatVal;
        for (i = 0; i < descriptors.length; i++) {
          desc = descriptors[i];
          lastChar = desc[desc.length - 1];
          value = desc.substring(0, desc.length - 1);
          intVal = parseInt(value, 10);
          floatVal = parseFloat(value);
          if (regexNonNegativeInteger.test(value) && lastChar === "w") {
            if (w2 || d) {
              pError = true;
            }
            if (intVal === 0) {
              pError = true;
            } else {
              w2 = intVal;
            }
          } else if (regexFloatingPoint.test(value) && lastChar === "x") {
            if (w2 || d || h) {
              pError = true;
            }
            if (floatVal < 0) {
              pError = true;
            } else {
              d = floatVal;
            }
          } else if (regexNonNegativeInteger.test(value) && lastChar === "h") {
            if (h || d) {
              pError = true;
            }
            if (intVal === 0) {
              pError = true;
            } else {
              h = intVal;
            }
          } else {
            pError = true;
          }
        }
        if (!pError) {
          candidate.url = url;
          if (w2) {
            candidate.w = w2;
          }
          if (d) {
            candidate.d = d;
          }
          if (h) {
            candidate.h = h;
          }
          candidates.push(candidate);
        } else if (console && console.log) {
          console.log("Invalid srcset descriptor found in '" + input2 + "' at '" + desc + "'.");
        }
      }
    };
  });
})(parseSrcset$1);
var picocolors_browser = { exports: {} };
var x = String;
var create = function() {
  return { isColorSupported: false, reset: x, bold: x, dim: x, italic: x, underline: x, inverse: x, hidden: x, strikethrough: x, black: x, red: x, green: x, yellow: x, blue: x, magenta: x, cyan: x, white: x, gray: x, bgBlack: x, bgRed: x, bgGreen: x, bgYellow: x, bgBlue: x, bgMagenta: x, bgCyan: x, bgWhite: x };
};
picocolors_browser.exports = create();
picocolors_browser.exports.createColors = create;
var __viteBrowserExternal = {};
var __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  "default": __viteBrowserExternal
}, Symbol.toStringTag, { value: "Module" }));
var require$$2 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
let pico = picocolors_browser.exports;
let terminalHighlight$1 = require$$2;
class CssSyntaxError$3 extends Error {
  constructor(message2, line, column, source, file, plugin2) {
    super(message2);
    this.name = "CssSyntaxError";
    this.reason = message2;
    if (file) {
      this.file = file;
    }
    if (source) {
      this.source = source;
    }
    if (plugin2) {
      this.plugin = plugin2;
    }
    if (typeof line !== "undefined" && typeof column !== "undefined") {
      if (typeof line === "number") {
        this.line = line;
        this.column = column;
      } else {
        this.line = line.line;
        this.column = line.column;
        this.endLine = column.line;
        this.endColumn = column.column;
      }
    }
    this.setMessage();
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, CssSyntaxError$3);
    }
  }
  setMessage() {
    this.message = this.plugin ? this.plugin + ": " : "";
    this.message += this.file ? this.file : "<css input>";
    if (typeof this.line !== "undefined") {
      this.message += ":" + this.line + ":" + this.column;
    }
    this.message += ": " + this.reason;
  }
  showSourceCode(color) {
    if (!this.source)
      return "";
    let css2 = this.source;
    if (color == null)
      color = pico.isColorSupported;
    if (terminalHighlight$1) {
      if (color)
        css2 = terminalHighlight$1(css2);
    }
    let lines = css2.split(/\r?\n/);
    let start = Math.max(this.line - 3, 0);
    let end2 = Math.min(this.line + 2, lines.length);
    let maxWidth = String(end2).length;
    let mark, aside;
    if (color) {
      let { bold: bold2, red, gray } = pico.createColors(true);
      mark = (text3) => bold2(red(text3));
      aside = (text3) => gray(text3);
    } else {
      mark = aside = (str) => str;
    }
    return lines.slice(start, end2).map((line, index2) => {
      let number = start + 1 + index2;
      let gutter = " " + (" " + number).slice(-maxWidth) + " | ";
      if (number === this.line) {
        let spacing = aside(gutter.replace(/\d/g, " ")) + line.slice(0, this.column - 1).replace(/[^\t]/g, " ");
        return mark(">") + aside(gutter) + line + "\n " + spacing + mark("^");
      }
      return " " + aside(gutter) + line;
    }).join("\n");
  }
  toString() {
    let code3 = this.showSourceCode();
    if (code3) {
      code3 = "\n\n" + code3 + "\n";
    }
    return this.name + ": " + this.message + code3;
  }
}
var cssSyntaxError = CssSyntaxError$3;
CssSyntaxError$3.default = CssSyntaxError$3;
var symbols = {};
symbols.isClean = Symbol("isClean");
symbols.my = Symbol("my");
const DEFAULT_RAW = {
  colon: ": ",
  indent: "    ",
  beforeDecl: "\n",
  beforeRule: "\n",
  beforeOpen: " ",
  beforeClose: "\n",
  beforeComment: "\n",
  after: "\n",
  emptyBody: "",
  commentLeft: " ",
  commentRight: " ",
  semicolon: false
};
function capitalize2(str) {
  return str[0].toUpperCase() + str.slice(1);
}
class Stringifier$2 {
  constructor(builder) {
    this.builder = builder;
  }
  stringify(node2, semicolon) {
    if (!this[node2.type]) {
      throw new Error(
        "Unknown AST node type " + node2.type + ". Maybe you need to change PostCSS stringifier."
      );
    }
    this[node2.type](node2, semicolon);
  }
  document(node2) {
    this.body(node2);
  }
  root(node2) {
    this.body(node2);
    if (node2.raws.after)
      this.builder(node2.raws.after);
  }
  comment(node2) {
    let left2 = this.raw(node2, "left", "commentLeft");
    let right2 = this.raw(node2, "right", "commentRight");
    this.builder("/*" + left2 + node2.text + right2 + "*/", node2);
  }
  decl(node2, semicolon) {
    let between2 = this.raw(node2, "between", "colon");
    let string = node2.prop + between2 + this.rawValue(node2, "value");
    if (node2.important) {
      string += node2.raws.important || " !important";
    }
    if (semicolon)
      string += ";";
    this.builder(string, node2);
  }
  rule(node2) {
    this.block(node2, this.rawValue(node2, "selector"));
    if (node2.raws.ownSemicolon) {
      this.builder(node2.raws.ownSemicolon, node2, "end");
    }
  }
  atrule(node2, semicolon) {
    let name = "@" + node2.name;
    let params = node2.params ? this.rawValue(node2, "params") : "";
    if (typeof node2.raws.afterName !== "undefined") {
      name += node2.raws.afterName;
    } else if (params) {
      name += " ";
    }
    if (node2.nodes) {
      this.block(node2, name + params);
    } else {
      let end2 = (node2.raws.between || "") + (semicolon ? ";" : "");
      this.builder(name + params + end2, node2);
    }
  }
  body(node2) {
    let last = node2.nodes.length - 1;
    while (last > 0) {
      if (node2.nodes[last].type !== "comment")
        break;
      last -= 1;
    }
    let semicolon = this.raw(node2, "semicolon");
    for (let i = 0; i < node2.nodes.length; i++) {
      let child2 = node2.nodes[i];
      let before = this.raw(child2, "before");
      if (before)
        this.builder(before);
      this.stringify(child2, last !== i || semicolon);
    }
  }
  block(node2, start) {
    let between2 = this.raw(node2, "between", "beforeOpen");
    this.builder(start + between2 + "{", node2, "start");
    let after;
    if (node2.nodes && node2.nodes.length) {
      this.body(node2);
      after = this.raw(node2, "after");
    } else {
      after = this.raw(node2, "after", "emptyBody");
    }
    if (after)
      this.builder(after);
    this.builder("}", node2, "end");
  }
  raw(node2, own, detect) {
    let value;
    if (!detect)
      detect = own;
    if (own) {
      value = node2.raws[own];
      if (typeof value !== "undefined")
        return value;
    }
    let parent = node2.parent;
    if (detect === "before") {
      if (!parent || parent.type === "root" && parent.first === node2) {
        return "";
      }
      if (parent && parent.type === "document") {
        return "";
      }
    }
    if (!parent)
      return DEFAULT_RAW[detect];
    let root2 = node2.root();
    if (!root2.rawCache)
      root2.rawCache = {};
    if (typeof root2.rawCache[detect] !== "undefined") {
      return root2.rawCache[detect];
    }
    if (detect === "before" || detect === "after") {
      return this.beforeAfter(node2, detect);
    } else {
      let method = "raw" + capitalize2(detect);
      if (this[method]) {
        value = this[method](root2, node2);
      } else {
        root2.walk((i) => {
          value = i.raws[own];
          if (typeof value !== "undefined")
            return false;
        });
      }
    }
    if (typeof value === "undefined")
      value = DEFAULT_RAW[detect];
    root2.rawCache[detect] = value;
    return value;
  }
  rawSemicolon(root2) {
    let value;
    root2.walk((i) => {
      if (i.nodes && i.nodes.length && i.last.type === "decl") {
        value = i.raws.semicolon;
        if (typeof value !== "undefined")
          return false;
      }
    });
    return value;
  }
  rawEmptyBody(root2) {
    let value;
    root2.walk((i) => {
      if (i.nodes && i.nodes.length === 0) {
        value = i.raws.after;
        if (typeof value !== "undefined")
          return false;
      }
    });
    return value;
  }
  rawIndent(root2) {
    if (root2.raws.indent)
      return root2.raws.indent;
    let value;
    root2.walk((i) => {
      let p = i.parent;
      if (p && p !== root2 && p.parent && p.parent === root2) {
        if (typeof i.raws.before !== "undefined") {
          let parts = i.raws.before.split("\n");
          value = parts[parts.length - 1];
          value = value.replace(/\S/g, "");
          return false;
        }
      }
    });
    return value;
  }
  rawBeforeComment(root2, node2) {
    let value;
    root2.walkComments((i) => {
      if (typeof i.raws.before !== "undefined") {
        value = i.raws.before;
        if (value.includes("\n")) {
          value = value.replace(/[^\n]+$/, "");
        }
        return false;
      }
    });
    if (typeof value === "undefined") {
      value = this.raw(node2, null, "beforeDecl");
    } else if (value) {
      value = value.replace(/\S/g, "");
    }
    return value;
  }
  rawBeforeDecl(root2, node2) {
    let value;
    root2.walkDecls((i) => {
      if (typeof i.raws.before !== "undefined") {
        value = i.raws.before;
        if (value.includes("\n")) {
          value = value.replace(/[^\n]+$/, "");
        }
        return false;
      }
    });
    if (typeof value === "undefined") {
      value = this.raw(node2, null, "beforeRule");
    } else if (value) {
      value = value.replace(/\S/g, "");
    }
    return value;
  }
  rawBeforeRule(root2) {
    let value;
    root2.walk((i) => {
      if (i.nodes && (i.parent !== root2 || root2.first !== i)) {
        if (typeof i.raws.before !== "undefined") {
          value = i.raws.before;
          if (value.includes("\n")) {
            value = value.replace(/[^\n]+$/, "");
          }
          return false;
        }
      }
    });
    if (value)
      value = value.replace(/\S/g, "");
    return value;
  }
  rawBeforeClose(root2) {
    let value;
    root2.walk((i) => {
      if (i.nodes && i.nodes.length > 0) {
        if (typeof i.raws.after !== "undefined") {
          value = i.raws.after;
          if (value.includes("\n")) {
            value = value.replace(/[^\n]+$/, "");
          }
          return false;
        }
      }
    });
    if (value)
      value = value.replace(/\S/g, "");
    return value;
  }
  rawBeforeOpen(root2) {
    let value;
    root2.walk((i) => {
      if (i.type !== "decl") {
        value = i.raws.between;
        if (typeof value !== "undefined")
          return false;
      }
    });
    return value;
  }
  rawColon(root2) {
    let value;
    root2.walkDecls((i) => {
      if (typeof i.raws.between !== "undefined") {
        value = i.raws.between.replace(/[^\s:]/g, "");
        return false;
      }
    });
    return value;
  }
  beforeAfter(node2, detect) {
    let value;
    if (node2.type === "decl") {
      value = this.raw(node2, null, "beforeDecl");
    } else if (node2.type === "comment") {
      value = this.raw(node2, null, "beforeComment");
    } else if (detect === "before") {
      value = this.raw(node2, null, "beforeRule");
    } else {
      value = this.raw(node2, null, "beforeClose");
    }
    let buf = node2.parent;
    let depth = 0;
    while (buf && buf.type !== "root") {
      depth += 1;
      buf = buf.parent;
    }
    if (value.includes("\n")) {
      let indent2 = this.raw(node2, null, "indent");
      if (indent2.length) {
        for (let step = 0; step < depth; step++)
          value += indent2;
      }
    }
    return value;
  }
  rawValue(node2, prop2) {
    let value = node2[prop2];
    let raw = node2.raws[prop2];
    if (raw && raw.value === value) {
      return raw.raw;
    }
    return value;
  }
}
var stringifier = Stringifier$2;
Stringifier$2.default = Stringifier$2;
let Stringifier$1 = stringifier;
function stringify$4(node2, builder) {
  let str = new Stringifier$1(builder);
  str.stringify(node2);
}
var stringify_1 = stringify$4;
stringify$4.default = stringify$4;
let { isClean: isClean$2, my: my$2 } = symbols;
let CssSyntaxError$2 = cssSyntaxError;
let Stringifier = stringifier;
let stringify$3 = stringify_1;
function cloneNode(obj, parent) {
  let cloned = new obj.constructor();
  for (let i in obj) {
    if (!Object.prototype.hasOwnProperty.call(obj, i)) {
      continue;
    }
    if (i === "proxyCache")
      continue;
    let value = obj[i];
    let type = typeof value;
    if (i === "parent" && type === "object") {
      if (parent)
        cloned[i] = parent;
    } else if (i === "source") {
      cloned[i] = value;
    } else if (Array.isArray(value)) {
      cloned[i] = value.map((j) => cloneNode(j, cloned));
    } else {
      if (type === "object" && value !== null)
        value = cloneNode(value);
      cloned[i] = value;
    }
  }
  return cloned;
}
class Node$5 {
  constructor(defaults = {}) {
    this.raws = {};
    this[isClean$2] = false;
    this[my$2] = true;
    for (let name in defaults) {
      if (name === "nodes") {
        this.nodes = [];
        for (let node2 of defaults[name]) {
          if (typeof node2.clone === "function") {
            this.append(node2.clone());
          } else {
            this.append(node2);
          }
        }
      } else {
        this[name] = defaults[name];
      }
    }
  }
  error(message2, opts = {}) {
    if (this.source) {
      let { start, end: end2 } = this.rangeBy(opts);
      return this.source.input.error(
        message2,
        { line: start.line, column: start.column },
        { line: end2.line, column: end2.column },
        opts
      );
    }
    return new CssSyntaxError$2(message2);
  }
  warn(result2, text3, opts) {
    let data3 = { node: this };
    for (let i in opts)
      data3[i] = opts[i];
    return result2.warn(text3, data3);
  }
  remove() {
    if (this.parent) {
      this.parent.removeChild(this);
    }
    this.parent = void 0;
    return this;
  }
  toString(stringifier2 = stringify$3) {
    if (stringifier2.stringify)
      stringifier2 = stringifier2.stringify;
    let result2 = "";
    stringifier2(this, (i) => {
      result2 += i;
    });
    return result2;
  }
  assign(overrides = {}) {
    for (let name in overrides) {
      this[name] = overrides[name];
    }
    return this;
  }
  clone(overrides = {}) {
    let cloned = cloneNode(this);
    for (let name in overrides) {
      cloned[name] = overrides[name];
    }
    return cloned;
  }
  cloneBefore(overrides = {}) {
    let cloned = this.clone(overrides);
    this.parent.insertBefore(this, cloned);
    return cloned;
  }
  cloneAfter(overrides = {}) {
    let cloned = this.clone(overrides);
    this.parent.insertAfter(this, cloned);
    return cloned;
  }
  replaceWith(...nodes) {
    if (this.parent) {
      let bookmark2 = this;
      let foundSelf = false;
      for (let node2 of nodes) {
        if (node2 === this) {
          foundSelf = true;
        } else if (foundSelf) {
          this.parent.insertAfter(bookmark2, node2);
          bookmark2 = node2;
        } else {
          this.parent.insertBefore(bookmark2, node2);
        }
      }
      if (!foundSelf) {
        this.remove();
      }
    }
    return this;
  }
  next() {
    if (!this.parent)
      return void 0;
    let index2 = this.parent.index(this);
    return this.parent.nodes[index2 + 1];
  }
  prev() {
    if (!this.parent)
      return void 0;
    let index2 = this.parent.index(this);
    return this.parent.nodes[index2 - 1];
  }
  before(add2) {
    this.parent.insertBefore(this, add2);
    return this;
  }
  after(add2) {
    this.parent.insertAfter(this, add2);
    return this;
  }
  root() {
    let result2 = this;
    while (result2.parent && result2.parent.type !== "document") {
      result2 = result2.parent;
    }
    return result2;
  }
  raw(prop2, defaultType) {
    let str = new Stringifier();
    return str.raw(this, prop2, defaultType);
  }
  cleanRaws(keepBetween) {
    delete this.raws.before;
    delete this.raws.after;
    if (!keepBetween)
      delete this.raws.between;
  }
  toJSON(_2, inputs) {
    let fixed = {};
    let emitInputs = inputs == null;
    inputs = inputs || /* @__PURE__ */ new Map();
    let inputsNextIndex = 0;
    for (let name in this) {
      if (!Object.prototype.hasOwnProperty.call(this, name)) {
        continue;
      }
      if (name === "parent" || name === "proxyCache")
        continue;
      let value = this[name];
      if (Array.isArray(value)) {
        fixed[name] = value.map((i) => {
          if (typeof i === "object" && i.toJSON) {
            return i.toJSON(null, inputs);
          } else {
            return i;
          }
        });
      } else if (typeof value === "object" && value.toJSON) {
        fixed[name] = value.toJSON(null, inputs);
      } else if (name === "source") {
        let inputId = inputs.get(value.input);
        if (inputId == null) {
          inputId = inputsNextIndex;
          inputs.set(value.input, inputsNextIndex);
          inputsNextIndex++;
        }
        fixed[name] = {
          inputId,
          start: value.start,
          end: value.end
        };
      } else {
        fixed[name] = value;
      }
    }
    if (emitInputs) {
      fixed.inputs = [...inputs.keys()].map((input2) => input2.toJSON());
    }
    return fixed;
  }
  positionInside(index2) {
    let string = this.toString();
    let column = this.source.start.column;
    let line = this.source.start.line;
    for (let i = 0; i < index2; i++) {
      if (string[i] === "\n") {
        column = 1;
        line += 1;
      } else {
        column += 1;
      }
    }
    return { line, column };
  }
  positionBy(opts) {
    let pos = this.source.start;
    if (opts.index) {
      pos = this.positionInside(opts.index);
    } else if (opts.word) {
      let index2 = this.toString().indexOf(opts.word);
      if (index2 !== -1)
        pos = this.positionInside(index2);
    }
    return pos;
  }
  rangeBy(opts) {
    let start = {
      line: this.source.start.line,
      column: this.source.start.column
    };
    let end2 = this.source.end ? {
      line: this.source.end.line,
      column: this.source.end.column + 1
    } : {
      line: start.line,
      column: start.column + 1
    };
    if (opts.word) {
      let index2 = this.toString().indexOf(opts.word);
      if (index2 !== -1) {
        start = this.positionInside(index2);
        end2 = this.positionInside(index2 + opts.word.length);
      }
    } else {
      if (opts.start) {
        start = {
          line: opts.start.line,
          column: opts.start.column
        };
      } else if (opts.index) {
        start = this.positionInside(opts.index);
      }
      if (opts.end) {
        end2 = {
          line: opts.end.line,
          column: opts.end.column
        };
      } else if (opts.endIndex) {
        end2 = this.positionInside(opts.endIndex);
      } else if (opts.index) {
        end2 = this.positionInside(opts.index + 1);
      }
    }
    if (end2.line < start.line || end2.line === start.line && end2.column <= start.column) {
      end2 = { line: start.line, column: start.column + 1 };
    }
    return { start, end: end2 };
  }
  getProxyProcessor() {
    return {
      set(node2, prop2, value) {
        if (node2[prop2] === value)
          return true;
        node2[prop2] = value;
        if (prop2 === "prop" || prop2 === "value" || prop2 === "name" || prop2 === "params" || prop2 === "important" || prop2 === "text") {
          node2.markDirty();
        }
        return true;
      },
      get(node2, prop2) {
        if (prop2 === "proxyOf") {
          return node2;
        } else if (prop2 === "root") {
          return () => node2.root().toProxy();
        } else {
          return node2[prop2];
        }
      }
    };
  }
  toProxy() {
    if (!this.proxyCache) {
      this.proxyCache = new Proxy(this, this.getProxyProcessor());
    }
    return this.proxyCache;
  }
  addToError(error2) {
    error2.postcssNode = this;
    if (error2.stack && this.source && /\n\s{4}at /.test(error2.stack)) {
      let s = this.source;
      error2.stack = error2.stack.replace(
        /\n\s{4}at /,
        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`
      );
    }
    return error2;
  }
  markDirty() {
    if (this[isClean$2]) {
      this[isClean$2] = false;
      let next2 = this;
      while (next2 = next2.parent) {
        next2[isClean$2] = false;
      }
    }
  }
  get proxyOf() {
    return this;
  }
}
var node_1 = Node$5;
Node$5.default = Node$5;
let Node$4 = node_1;
class Declaration$4 extends Node$4 {
  constructor(defaults) {
    if (defaults && typeof defaults.value !== "undefined" && typeof defaults.value !== "string") {
      defaults = { ...defaults, value: String(defaults.value) };
    }
    super(defaults);
    this.type = "decl";
  }
  get variable() {
    return this.prop.startsWith("--") || this.prop[0] === "$";
  }
}
var declaration = Declaration$4;
Declaration$4.default = Declaration$4;
let urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
let customAlphabet = (alphabet, defaultSize = 21) => {
  return (size = defaultSize) => {
    let id2 = "";
    let i = size;
    while (i--) {
      id2 += alphabet[Math.random() * alphabet.length | 0];
    }
    return id2;
  };
};
let nanoid$1 = (size = 21) => {
  let id2 = "";
  let i = size;
  while (i--) {
    id2 += urlAlphabet[Math.random() * 64 | 0];
  }
  return id2;
};
var nonSecure = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  nanoid: nanoid$1,
  customAlphabet
}, Symbol.toStringTag, { value: "Module" }));
var require$$3 = /* @__PURE__ */ getAugmentedNamespace(nonSecure);
let { SourceMapConsumer: SourceMapConsumer$2, SourceMapGenerator: SourceMapGenerator$2 } = require$$2;
let { existsSync, readFileSync } = require$$2;
let { dirname: dirname$1, join } = require$$2;
function fromBase64(str) {
  if (Buffer) {
    return Buffer.from(str, "base64").toString();
  } else {
    return window.atob(str);
  }
}
class PreviousMap$2 {
  constructor(css2, opts) {
    if (opts.map === false)
      return;
    this.loadAnnotation(css2);
    this.inline = this.startWith(this.annotation, "data:");
    let prev = opts.map ? opts.map.prev : void 0;
    let text3 = this.loadMap(opts.from, prev);
    if (!this.mapFile && opts.from) {
      this.mapFile = opts.from;
    }
    if (this.mapFile)
      this.root = dirname$1(this.mapFile);
    if (text3)
      this.text = text3;
  }
  consumer() {
    if (!this.consumerCache) {
      this.consumerCache = new SourceMapConsumer$2(this.text);
    }
    return this.consumerCache;
  }
  withContent() {
    return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);
  }
  startWith(string, start) {
    if (!string)
      return false;
    return string.substr(0, start.length) === start;
  }
  getAnnotationURL(sourceMapString) {
    return sourceMapString.replace(/^\/\*\s*# sourceMappingURL=/, "").trim();
  }
  loadAnnotation(css2) {
    let comments = css2.match(/\/\*\s*# sourceMappingURL=/gm);
    if (!comments)
      return;
    let start = css2.lastIndexOf(comments.pop());
    let end2 = css2.indexOf("*/", start);
    if (start > -1 && end2 > -1) {
      this.annotation = this.getAnnotationURL(css2.substring(start, end2));
    }
  }
  decodeInline(text3) {
    let baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
    let baseUri = /^data:application\/json;base64,/;
    let charsetUri = /^data:application\/json;charset=utf-?8,/;
    let uri = /^data:application\/json,/;
    if (charsetUri.test(text3) || uri.test(text3)) {
      return decodeURIComponent(text3.substr(RegExp.lastMatch.length));
    }
    if (baseCharsetUri.test(text3) || baseUri.test(text3)) {
      return fromBase64(text3.substr(RegExp.lastMatch.length));
    }
    let encoding = text3.match(/data:application\/json;([^,]+),/)[1];
    throw new Error("Unsupported source map encoding " + encoding);
  }
  loadFile(path) {
    this.root = dirname$1(path);
    if (existsSync(path)) {
      this.mapFile = path;
      return readFileSync(path, "utf-8").toString().trim();
    }
  }
  loadMap(file, prev) {
    if (prev === false)
      return false;
    if (prev) {
      if (typeof prev === "string") {
        return prev;
      } else if (typeof prev === "function") {
        let prevPath = prev(file);
        if (prevPath) {
          let map2 = this.loadFile(prevPath);
          if (!map2) {
            throw new Error(
              "Unable to load previous source map: " + prevPath.toString()
            );
          }
          return map2;
        }
      } else if (prev instanceof SourceMapConsumer$2) {
        return SourceMapGenerator$2.fromSourceMap(prev).toString();
      } else if (prev instanceof SourceMapGenerator$2) {
        return prev.toString();
      } else if (this.isMap(prev)) {
        return JSON.stringify(prev);
      } else {
        throw new Error(
          "Unsupported previous source map format: " + prev.toString()
        );
      }
    } else if (this.inline) {
      return this.decodeInline(this.annotation);
    } else if (this.annotation) {
      let map2 = this.annotation;
      if (file)
        map2 = join(dirname$1(file), map2);
      return this.loadFile(map2);
    }
  }
  isMap(map2) {
    if (typeof map2 !== "object")
      return false;
    return typeof map2.mappings === "string" || typeof map2._mappings === "string" || Array.isArray(map2.sections);
  }
}
var previousMap = PreviousMap$2;
PreviousMap$2.default = PreviousMap$2;
let { SourceMapConsumer: SourceMapConsumer$1, SourceMapGenerator: SourceMapGenerator$1 } = require$$2;
let { fileURLToPath, pathToFileURL: pathToFileURL$1 } = require$$2;
let { resolve: resolve$1, isAbsolute } = require$$2;
let { nanoid } = require$$3;
let terminalHighlight = require$$2;
let CssSyntaxError$1 = cssSyntaxError;
let PreviousMap$1 = previousMap;
let fromOffsetCache = Symbol("fromOffsetCache");
let sourceMapAvailable$1 = Boolean(SourceMapConsumer$1 && SourceMapGenerator$1);
let pathAvailable$1 = Boolean(resolve$1 && isAbsolute);
class Input$4 {
  constructor(css2, opts = {}) {
    if (css2 === null || typeof css2 === "undefined" || typeof css2 === "object" && !css2.toString) {
      throw new Error(`PostCSS received ${css2} instead of CSS string`);
    }
    this.css = css2.toString();
    if (this.css[0] === "\uFEFF" || this.css[0] === "\uFFFE") {
      this.hasBOM = true;
      this.css = this.css.slice(1);
    } else {
      this.hasBOM = false;
    }
    if (opts.from) {
      if (!pathAvailable$1 || /^\w+:\/\//.test(opts.from) || isAbsolute(opts.from)) {
        this.file = opts.from;
      } else {
        this.file = resolve$1(opts.from);
      }
    }
    if (pathAvailable$1 && sourceMapAvailable$1) {
      let map2 = new PreviousMap$1(this.css, opts);
      if (map2.text) {
        this.map = map2;
        let file = map2.consumer().file;
        if (!this.file && file)
          this.file = this.mapResolve(file);
      }
    }
    if (!this.file) {
      this.id = "<input css " + nanoid(6) + ">";
    }
    if (this.map)
      this.map.file = this.from;
  }
  fromOffset(offset) {
    let lastLine, lineToIndex;
    if (!this[fromOffsetCache]) {
      let lines = this.css.split("\n");
      lineToIndex = new Array(lines.length);
      let prevIndex = 0;
      for (let i = 0, l = lines.length; i < l; i++) {
        lineToIndex[i] = prevIndex;
        prevIndex += lines[i].length + 1;
      }
      this[fromOffsetCache] = lineToIndex;
    } else {
      lineToIndex = this[fromOffsetCache];
    }
    lastLine = lineToIndex[lineToIndex.length - 1];
    let min = 0;
    if (offset >= lastLine) {
      min = lineToIndex.length - 1;
    } else {
      let max = lineToIndex.length - 2;
      let mid2;
      while (min < max) {
        mid2 = min + (max - min >> 1);
        if (offset < lineToIndex[mid2]) {
          max = mid2 - 1;
        } else if (offset >= lineToIndex[mid2 + 1]) {
          min = mid2 + 1;
        } else {
          min = mid2;
          break;
        }
      }
    }
    return {
      line: min + 1,
      col: offset - lineToIndex[min] + 1
    };
  }
  error(message2, line, column, opts = {}) {
    let result2, endLine, endColumn;
    if (line && typeof line === "object") {
      let start = line;
      let end2 = column;
      if (typeof line.offset === "number") {
        let pos = this.fromOffset(start.offset);
        line = pos.line;
        column = pos.col;
      } else {
        line = start.line;
        column = start.column;
      }
      if (typeof end2.offset === "number") {
        let pos = this.fromOffset(end2.offset);
        endLine = pos.line;
        endColumn = pos.col;
      } else {
        endLine = end2.line;
        endColumn = end2.column;
      }
    } else if (!column) {
      let pos = this.fromOffset(line);
      line = pos.line;
      column = pos.col;
    }
    let origin = this.origin(line, column, endLine, endColumn);
    if (origin) {
      result2 = new CssSyntaxError$1(
        message2,
        origin.endLine === void 0 ? origin.line : { line: origin.line, column: origin.column },
        origin.endLine === void 0 ? origin.column : { line: origin.endLine, column: origin.endColumn },
        origin.source,
        origin.file,
        opts.plugin
      );
    } else {
      result2 = new CssSyntaxError$1(
        message2,
        endLine === void 0 ? line : { line, column },
        endLine === void 0 ? column : { line: endLine, column: endColumn },
        this.css,
        this.file,
        opts.plugin
      );
    }
    result2.input = { line, column, endLine, endColumn, source: this.css };
    if (this.file) {
      if (pathToFileURL$1) {
        result2.input.url = pathToFileURL$1(this.file).toString();
      }
      result2.input.file = this.file;
    }
    return result2;
  }
  origin(line, column, endLine, endColumn) {
    if (!this.map)
      return false;
    let consumer = this.map.consumer();
    let from = consumer.originalPositionFor({ line, column });
    if (!from.source)
      return false;
    let to;
    if (typeof endLine === "number") {
      to = consumer.originalPositionFor({ line: endLine, column: endColumn });
    }
    let fromUrl;
    if (isAbsolute(from.source)) {
      fromUrl = pathToFileURL$1(from.source);
    } else {
      fromUrl = new URL(
        from.source,
        this.map.consumer().sourceRoot || pathToFileURL$1(this.map.mapFile)
      );
    }
    let result2 = {
      url: fromUrl.toString(),
      line: from.line,
      column: from.column,
      endLine: to && to.line,
      endColumn: to && to.column
    };
    if (fromUrl.protocol === "file:") {
      if (fileURLToPath) {
        result2.file = fileURLToPath(fromUrl);
      } else {
        throw new Error(`file: protocol is not available in this PostCSS build`);
      }
    }
    let source = consumer.sourceContentFor(from.source);
    if (source)
      result2.source = source;
    return result2;
  }
  mapResolve(file) {
    if (/^\w+:\/\//.test(file)) {
      return file;
    }
    return resolve$1(this.map.consumer().sourceRoot || this.map.root || ".", file);
  }
  get from() {
    return this.file || this.id;
  }
  toJSON() {
    let json = {};
    for (let name of ["hasBOM", "css", "file", "id"]) {
      if (this[name] != null) {
        json[name] = this[name];
      }
    }
    if (this.map) {
      json.map = { ...this.map };
      if (json.map.consumerCache) {
        json.map.consumerCache = void 0;
      }
    }
    return json;
  }
}
var input$1 = Input$4;
Input$4.default = Input$4;
if (terminalHighlight && terminalHighlight.registerInput) {
  terminalHighlight.registerInput(Input$4);
}
let { SourceMapConsumer, SourceMapGenerator } = require$$2;
let { dirname, resolve, relative, sep } = require$$2;
let { pathToFileURL } = require$$2;
let Input$3 = input$1;
let sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
let pathAvailable = Boolean(dirname && resolve && relative && sep);
class MapGenerator$2 {
  constructor(stringify2, root2, opts, cssString) {
    this.stringify = stringify2;
    this.mapOpts = opts.map || {};
    this.root = root2;
    this.opts = opts;
    this.css = cssString;
    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;
  }
  isMap() {
    if (typeof this.opts.map !== "undefined") {
      return !!this.opts.map;
    }
    return this.previous().length > 0;
  }
  previous() {
    if (!this.previousMaps) {
      this.previousMaps = [];
      if (this.root) {
        this.root.walk((node2) => {
          if (node2.source && node2.source.input.map) {
            let map2 = node2.source.input.map;
            if (!this.previousMaps.includes(map2)) {
              this.previousMaps.push(map2);
            }
          }
        });
      } else {
        let input2 = new Input$3(this.css, this.opts);
        if (input2.map)
          this.previousMaps.push(input2.map);
      }
    }
    return this.previousMaps;
  }
  isInline() {
    if (typeof this.mapOpts.inline !== "undefined") {
      return this.mapOpts.inline;
    }
    let annotation = this.mapOpts.annotation;
    if (typeof annotation !== "undefined" && annotation !== true) {
      return false;
    }
    if (this.previous().length) {
      return this.previous().some((i) => i.inline);
    }
    return true;
  }
  isSourcesContent() {
    if (typeof this.mapOpts.sourcesContent !== "undefined") {
      return this.mapOpts.sourcesContent;
    }
    if (this.previous().length) {
      return this.previous().some((i) => i.withContent());
    }
    return true;
  }
  clearAnnotation() {
    if (this.mapOpts.annotation === false)
      return;
    if (this.root) {
      let node2;
      for (let i = this.root.nodes.length - 1; i >= 0; i--) {
        node2 = this.root.nodes[i];
        if (node2.type !== "comment")
          continue;
        if (node2.text.indexOf("# sourceMappingURL=") === 0) {
          this.root.removeChild(i);
        }
      }
    } else if (this.css) {
      this.css = this.css.replace(/(\n)?\/\*#[\S\s]*?\*\/$/gm, "");
    }
  }
  setSourcesContent() {
    let already = {};
    if (this.root) {
      this.root.walk((node2) => {
        if (node2.source) {
          let from = node2.source.input.from;
          if (from && !already[from]) {
            already[from] = true;
            let fromUrl = this.usesFileUrls ? this.toFileUrl(from) : this.toUrl(this.path(from));
            this.map.setSourceContent(fromUrl, node2.source.input.css);
          }
        }
      });
    } else if (this.css) {
      let from = this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>";
      this.map.setSourceContent(from, this.css);
    }
  }
  applyPrevMaps() {
    for (let prev of this.previous()) {
      let from = this.toUrl(this.path(prev.file));
      let root2 = prev.root || dirname(prev.file);
      let map2;
      if (this.mapOpts.sourcesContent === false) {
        map2 = new SourceMapConsumer(prev.text);
        if (map2.sourcesContent) {
          map2.sourcesContent = map2.sourcesContent.map(() => null);
        }
      } else {
        map2 = prev.consumer();
      }
      this.map.applySourceMap(map2, from, this.toUrl(this.path(root2)));
    }
  }
  isAnnotation() {
    if (this.isInline()) {
      return true;
    }
    if (typeof this.mapOpts.annotation !== "undefined") {
      return this.mapOpts.annotation;
    }
    if (this.previous().length) {
      return this.previous().some((i) => i.annotation);
    }
    return true;
  }
  toBase64(str) {
    if (Buffer) {
      return Buffer.from(str).toString("base64");
    } else {
      return window.btoa(unescape(encodeURIComponent(str)));
    }
  }
  addAnnotation() {
    let content2;
    if (this.isInline()) {
      content2 = "data:application/json;base64," + this.toBase64(this.map.toString());
    } else if (typeof this.mapOpts.annotation === "string") {
      content2 = this.mapOpts.annotation;
    } else if (typeof this.mapOpts.annotation === "function") {
      content2 = this.mapOpts.annotation(this.opts.to, this.root);
    } else {
      content2 = this.outputFile() + ".map";
    }
    let eol = "\n";
    if (this.css.includes("\r\n"))
      eol = "\r\n";
    this.css += eol + "/*# sourceMappingURL=" + content2 + " */";
  }
  outputFile() {
    if (this.opts.to) {
      return this.path(this.opts.to);
    } else if (this.opts.from) {
      return this.path(this.opts.from);
    } else {
      return "to.css";
    }
  }
  generateMap() {
    if (this.root) {
      this.generateString();
    } else if (this.previous().length === 1) {
      let prev = this.previous()[0].consumer();
      prev.file = this.outputFile();
      this.map = SourceMapGenerator.fromSourceMap(prev);
    } else {
      this.map = new SourceMapGenerator({ file: this.outputFile() });
      this.map.addMapping({
        source: this.opts.from ? this.toUrl(this.path(this.opts.from)) : "<no source>",
        generated: { line: 1, column: 0 },
        original: { line: 1, column: 0 }
      });
    }
    if (this.isSourcesContent())
      this.setSourcesContent();
    if (this.root && this.previous().length > 0)
      this.applyPrevMaps();
    if (this.isAnnotation())
      this.addAnnotation();
    if (this.isInline()) {
      return [this.css];
    } else {
      return [this.css, this.map];
    }
  }
  path(file) {
    if (file.indexOf("<") === 0)
      return file;
    if (/^\w+:\/\//.test(file))
      return file;
    if (this.mapOpts.absolute)
      return file;
    let from = this.opts.to ? dirname(this.opts.to) : ".";
    if (typeof this.mapOpts.annotation === "string") {
      from = dirname(resolve(from, this.mapOpts.annotation));
    }
    file = relative(from, file);
    return file;
  }
  toUrl(path) {
    if (sep === "\\") {
      path = path.replace(/\\/g, "/");
    }
    return encodeURI(path).replace(/[#?]/g, encodeURIComponent);
  }
  toFileUrl(path) {
    if (pathToFileURL) {
      return pathToFileURL(path).toString();
    } else {
      throw new Error(
        "`map.absolute` option is not available in this PostCSS build"
      );
    }
  }
  sourcePath(node2) {
    if (this.mapOpts.from) {
      return this.toUrl(this.mapOpts.from);
    } else if (this.usesFileUrls) {
      return this.toFileUrl(node2.source.input.from);
    } else {
      return this.toUrl(this.path(node2.source.input.from));
    }
  }
  generateString() {
    this.css = "";
    this.map = new SourceMapGenerator({ file: this.outputFile() });
    let line = 1;
    let column = 1;
    let noSource = "<no source>";
    let mapping = {
      source: "",
      generated: { line: 0, column: 0 },
      original: { line: 0, column: 0 }
    };
    let lines, last;
    this.stringify(this.root, (str, node2, type) => {
      this.css += str;
      if (node2 && type !== "end") {
        mapping.generated.line = line;
        mapping.generated.column = column - 1;
        if (node2.source && node2.source.start) {
          mapping.source = this.sourcePath(node2);
          mapping.original.line = node2.source.start.line;
          mapping.original.column = node2.source.start.column - 1;
          this.map.addMapping(mapping);
        } else {
          mapping.source = noSource;
          mapping.original.line = 1;
          mapping.original.column = 0;
          this.map.addMapping(mapping);
        }
      }
      lines = str.match(/\n/g);
      if (lines) {
        line += lines.length;
        last = str.lastIndexOf("\n");
        column = str.length - last;
      } else {
        column += str.length;
      }
      if (node2 && type !== "start") {
        let p = node2.parent || { raws: {} };
        if (node2.type !== "decl" || node2 !== p.last || p.raws.semicolon) {
          if (node2.source && node2.source.end) {
            mapping.source = this.sourcePath(node2);
            mapping.original.line = node2.source.end.line;
            mapping.original.column = node2.source.end.column - 1;
            mapping.generated.line = line;
            mapping.generated.column = column - 2;
            this.map.addMapping(mapping);
          } else {
            mapping.source = noSource;
            mapping.original.line = 1;
            mapping.original.column = 0;
            mapping.generated.line = line;
            mapping.generated.column = column - 1;
            this.map.addMapping(mapping);
          }
        }
      }
    });
  }
  generate() {
    this.clearAnnotation();
    if (pathAvailable && sourceMapAvailable && this.isMap()) {
      return this.generateMap();
    } else {
      let result2 = "";
      this.stringify(this.root, (i) => {
        result2 += i;
      });
      return [result2];
    }
  }
}
var mapGenerator = MapGenerator$2;
let Node$3 = node_1;
class Comment$4 extends Node$3 {
  constructor(defaults) {
    super(defaults);
    this.type = "comment";
  }
}
var comment = Comment$4;
Comment$4.default = Comment$4;
let { isClean: isClean$1, my: my$1 } = symbols;
let Declaration$3 = declaration;
let Comment$3 = comment;
let Node$2 = node_1;
let parse$4, Rule$4, AtRule$4, Root$6;
function cleanSource(nodes) {
  return nodes.map((i) => {
    if (i.nodes)
      i.nodes = cleanSource(i.nodes);
    delete i.source;
    return i;
  });
}
function markDirtyUp(node2) {
  node2[isClean$1] = false;
  if (node2.proxyOf.nodes) {
    for (let i of node2.proxyOf.nodes) {
      markDirtyUp(i);
    }
  }
}
class Container$8 extends Node$2 {
  push(child2) {
    child2.parent = this;
    this.proxyOf.nodes.push(child2);
    return this;
  }
  each(callback) {
    if (!this.proxyOf.nodes)
      return void 0;
    let iterator = this.getIterator();
    let index2, result2;
    while (this.indexes[iterator] < this.proxyOf.nodes.length) {
      index2 = this.indexes[iterator];
      result2 = callback(this.proxyOf.nodes[index2], index2);
      if (result2 === false)
        break;
      this.indexes[iterator] += 1;
    }
    delete this.indexes[iterator];
    return result2;
  }
  walk(callback) {
    return this.each((child2, i) => {
      let result2;
      try {
        result2 = callback(child2, i);
      } catch (e) {
        throw child2.addToError(e);
      }
      if (result2 !== false && child2.walk) {
        result2 = child2.walk(callback);
      }
      return result2;
    });
  }
  walkDecls(prop2, callback) {
    if (!callback) {
      callback = prop2;
      return this.walk((child2, i) => {
        if (child2.type === "decl") {
          return callback(child2, i);
        }
      });
    }
    if (prop2 instanceof RegExp) {
      return this.walk((child2, i) => {
        if (child2.type === "decl" && prop2.test(child2.prop)) {
          return callback(child2, i);
        }
      });
    }
    return this.walk((child2, i) => {
      if (child2.type === "decl" && child2.prop === prop2) {
        return callback(child2, i);
      }
    });
  }
  walkRules(selector, callback) {
    if (!callback) {
      callback = selector;
      return this.walk((child2, i) => {
        if (child2.type === "rule") {
          return callback(child2, i);
        }
      });
    }
    if (selector instanceof RegExp) {
      return this.walk((child2, i) => {
        if (child2.type === "rule" && selector.test(child2.selector)) {
          return callback(child2, i);
        }
      });
    }
    return this.walk((child2, i) => {
      if (child2.type === "rule" && child2.selector === selector) {
        return callback(child2, i);
      }
    });
  }
  walkAtRules(name, callback) {
    if (!callback) {
      callback = name;
      return this.walk((child2, i) => {
        if (child2.type === "atrule") {
          return callback(child2, i);
        }
      });
    }
    if (name instanceof RegExp) {
      return this.walk((child2, i) => {
        if (child2.type === "atrule" && name.test(child2.name)) {
          return callback(child2, i);
        }
      });
    }
    return this.walk((child2, i) => {
      if (child2.type === "atrule" && child2.name === name) {
        return callback(child2, i);
      }
    });
  }
  walkComments(callback) {
    return this.walk((child2, i) => {
      if (child2.type === "comment") {
        return callback(child2, i);
      }
    });
  }
  append(...children) {
    for (let child2 of children) {
      let nodes = this.normalize(child2, this.last);
      for (let node2 of nodes)
        this.proxyOf.nodes.push(node2);
    }
    this.markDirty();
    return this;
  }
  prepend(...children) {
    children = children.reverse();
    for (let child2 of children) {
      let nodes = this.normalize(child2, this.first, "prepend").reverse();
      for (let node2 of nodes)
        this.proxyOf.nodes.unshift(node2);
      for (let id2 in this.indexes) {
        this.indexes[id2] = this.indexes[id2] + nodes.length;
      }
    }
    this.markDirty();
    return this;
  }
  cleanRaws(keepBetween) {
    super.cleanRaws(keepBetween);
    if (this.nodes) {
      for (let node2 of this.nodes)
        node2.cleanRaws(keepBetween);
    }
  }
  insertBefore(exist2, add2) {
    let existIndex = this.index(exist2);
    let type = exist2 === 0 ? "prepend" : false;
    let nodes = this.normalize(add2, this.proxyOf.nodes[existIndex], type).reverse();
    existIndex = this.index(exist2);
    for (let node2 of nodes)
      this.proxyOf.nodes.splice(existIndex, 0, node2);
    let index2;
    for (let id2 in this.indexes) {
      index2 = this.indexes[id2];
      if (existIndex <= index2) {
        this.indexes[id2] = index2 + nodes.length;
      }
    }
    this.markDirty();
    return this;
  }
  insertAfter(exist2, add2) {
    let existIndex = this.index(exist2);
    let nodes = this.normalize(add2, this.proxyOf.nodes[existIndex]).reverse();
    existIndex = this.index(exist2);
    for (let node2 of nodes)
      this.proxyOf.nodes.splice(existIndex + 1, 0, node2);
    let index2;
    for (let id2 in this.indexes) {
      index2 = this.indexes[id2];
      if (existIndex < index2) {
        this.indexes[id2] = index2 + nodes.length;
      }
    }
    this.markDirty();
    return this;
  }
  removeChild(child2) {
    child2 = this.index(child2);
    this.proxyOf.nodes[child2].parent = void 0;
    this.proxyOf.nodes.splice(child2, 1);
    let index2;
    for (let id2 in this.indexes) {
      index2 = this.indexes[id2];
      if (index2 >= child2) {
        this.indexes[id2] = index2 - 1;
      }
    }
    this.markDirty();
    return this;
  }
  removeAll() {
    for (let node2 of this.proxyOf.nodes)
      node2.parent = void 0;
    this.proxyOf.nodes = [];
    this.markDirty();
    return this;
  }
  replaceValues(pattern, opts, callback) {
    if (!callback) {
      callback = opts;
      opts = {};
    }
    this.walkDecls((decl) => {
      if (opts.props && !opts.props.includes(decl.prop))
        return;
      if (opts.fast && !decl.value.includes(opts.fast))
        return;
      decl.value = decl.value.replace(pattern, callback);
    });
    this.markDirty();
    return this;
  }
  every(condition) {
    return this.nodes.every(condition);
  }
  some(condition) {
    return this.nodes.some(condition);
  }
  index(child2) {
    if (typeof child2 === "number")
      return child2;
    if (child2.proxyOf)
      child2 = child2.proxyOf;
    return this.proxyOf.nodes.indexOf(child2);
  }
  get first() {
    if (!this.proxyOf.nodes)
      return void 0;
    return this.proxyOf.nodes[0];
  }
  get last() {
    if (!this.proxyOf.nodes)
      return void 0;
    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];
  }
  normalize(nodes, sample) {
    if (typeof nodes === "string") {
      nodes = cleanSource(parse$4(nodes).nodes);
    } else if (Array.isArray(nodes)) {
      nodes = nodes.slice(0);
      for (let i of nodes) {
        if (i.parent)
          i.parent.removeChild(i, "ignore");
      }
    } else if (nodes.type === "root" && this.type !== "document") {
      nodes = nodes.nodes.slice(0);
      for (let i of nodes) {
        if (i.parent)
          i.parent.removeChild(i, "ignore");
      }
    } else if (nodes.type) {
      nodes = [nodes];
    } else if (nodes.prop) {
      if (typeof nodes.value === "undefined") {
        throw new Error("Value field is missed in node creation");
      } else if (typeof nodes.value !== "string") {
        nodes.value = String(nodes.value);
      }
      nodes = [new Declaration$3(nodes)];
    } else if (nodes.selector) {
      nodes = [new Rule$4(nodes)];
    } else if (nodes.name) {
      nodes = [new AtRule$4(nodes)];
    } else if (nodes.text) {
      nodes = [new Comment$3(nodes)];
    } else {
      throw new Error("Unknown node type in node creation");
    }
    let processed = nodes.map((i) => {
      if (!i[my$1])
        Container$8.rebuild(i);
      i = i.proxyOf;
      if (i.parent)
        i.parent.removeChild(i);
      if (i[isClean$1])
        markDirtyUp(i);
      if (typeof i.raws.before === "undefined") {
        if (sample && typeof sample.raws.before !== "undefined") {
          i.raws.before = sample.raws.before.replace(/\S/g, "");
        }
      }
      i.parent = this.proxyOf;
      return i;
    });
    return processed;
  }
  getProxyProcessor() {
    return {
      set(node2, prop2, value) {
        if (node2[prop2] === value)
          return true;
        node2[prop2] = value;
        if (prop2 === "name" || prop2 === "params" || prop2 === "selector") {
          node2.markDirty();
        }
        return true;
      },
      get(node2, prop2) {
        if (prop2 === "proxyOf") {
          return node2;
        } else if (!node2[prop2]) {
          return node2[prop2];
        } else if (prop2 === "each" || typeof prop2 === "string" && prop2.startsWith("walk")) {
          return (...args) => {
            return node2[prop2](
              ...args.map((i) => {
                if (typeof i === "function") {
                  return (child2, index2) => i(child2.toProxy(), index2);
                } else {
                  return i;
                }
              })
            );
          };
        } else if (prop2 === "every" || prop2 === "some") {
          return (cb) => {
            return node2[prop2](
              (child2, ...other) => cb(child2.toProxy(), ...other)
            );
          };
        } else if (prop2 === "root") {
          return () => node2.root().toProxy();
        } else if (prop2 === "nodes") {
          return node2.nodes.map((i) => i.toProxy());
        } else if (prop2 === "first" || prop2 === "last") {
          return node2[prop2].toProxy();
        } else {
          return node2[prop2];
        }
      }
    };
  }
  getIterator() {
    if (!this.lastEach)
      this.lastEach = 0;
    if (!this.indexes)
      this.indexes = {};
    this.lastEach += 1;
    let iterator = this.lastEach;
    this.indexes[iterator] = 0;
    return iterator;
  }
}
Container$8.registerParse = (dependant) => {
  parse$4 = dependant;
};
Container$8.registerRule = (dependant) => {
  Rule$4 = dependant;
};
Container$8.registerAtRule = (dependant) => {
  AtRule$4 = dependant;
};
Container$8.registerRoot = (dependant) => {
  Root$6 = dependant;
};
var container$4 = Container$8;
Container$8.default = Container$8;
Container$8.rebuild = (node2) => {
  if (node2.type === "atrule") {
    Object.setPrototypeOf(node2, AtRule$4.prototype);
  } else if (node2.type === "rule") {
    Object.setPrototypeOf(node2, Rule$4.prototype);
  } else if (node2.type === "decl") {
    Object.setPrototypeOf(node2, Declaration$3.prototype);
  } else if (node2.type === "comment") {
    Object.setPrototypeOf(node2, Comment$3.prototype);
  } else if (node2.type === "root") {
    Object.setPrototypeOf(node2, Root$6.prototype);
  }
  node2[my$1] = true;
  if (node2.nodes) {
    node2.nodes.forEach((child2) => {
      Container$8.rebuild(child2);
    });
  }
};
let Container$7 = container$4;
let LazyResult$4, Processor$3;
class Document$3 extends Container$7 {
  constructor(defaults) {
    super({ type: "document", ...defaults });
    if (!this.nodes) {
      this.nodes = [];
    }
  }
  toResult(opts = {}) {
    let lazy = new LazyResult$4(new Processor$3(), this, opts);
    return lazy.stringify();
  }
}
Document$3.registerLazyResult = (dependant) => {
  LazyResult$4 = dependant;
};
Document$3.registerProcessor = (dependant) => {
  Processor$3 = dependant;
};
var document$1 = Document$3;
Document$3.default = Document$3;
class Warning$2 {
  constructor(text3, opts = {}) {
    this.type = "warning";
    this.text = text3;
    if (opts.node && opts.node.source) {
      let range3 = opts.node.rangeBy(opts);
      this.line = range3.start.line;
      this.column = range3.start.column;
      this.endLine = range3.end.line;
      this.endColumn = range3.end.column;
    }
    for (let opt in opts)
      this[opt] = opts[opt];
  }
  toString() {
    if (this.node) {
      return this.node.error(this.text, {
        plugin: this.plugin,
        index: this.index,
        word: this.word
      }).message;
    }
    if (this.plugin) {
      return this.plugin + ": " + this.text;
    }
    return this.text;
  }
}
var warning$1 = Warning$2;
Warning$2.default = Warning$2;
let Warning$1 = warning$1;
class Result$3 {
  constructor(processor2, root2, opts) {
    this.processor = processor2;
    this.messages = [];
    this.root = root2;
    this.opts = opts;
    this.css = void 0;
    this.map = void 0;
  }
  toString() {
    return this.css;
  }
  warn(text3, opts = {}) {
    if (!opts.plugin) {
      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
        opts.plugin = this.lastPlugin.postcssPlugin;
      }
    }
    let warning2 = new Warning$1(text3, opts);
    this.messages.push(warning2);
    return warning2;
  }
  warnings() {
    return this.messages.filter((i) => i.type === "warning");
  }
  get content() {
    return this.css;
  }
}
var result = Result$3;
Result$3.default = Result$3;
const SINGLE_QUOTE = "'".charCodeAt(0);
const DOUBLE_QUOTE = '"'.charCodeAt(0);
const BACKSLASH = "\\".charCodeAt(0);
const SLASH = "/".charCodeAt(0);
const NEWLINE = "\n".charCodeAt(0);
const SPACE = " ".charCodeAt(0);
const FEED = "\f".charCodeAt(0);
const TAB = "	".charCodeAt(0);
const CR = "\r".charCodeAt(0);
const OPEN_SQUARE = "[".charCodeAt(0);
const CLOSE_SQUARE = "]".charCodeAt(0);
const OPEN_PARENTHESES = "(".charCodeAt(0);
const CLOSE_PARENTHESES = ")".charCodeAt(0);
const OPEN_CURLY = "{".charCodeAt(0);
const CLOSE_CURLY = "}".charCodeAt(0);
const SEMICOLON = ";".charCodeAt(0);
const ASTERISK = "*".charCodeAt(0);
const COLON = ":".charCodeAt(0);
const AT = "@".charCodeAt(0);
const RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
const RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
const RE_BAD_BRACKET = /.[\n"'(/\\]/;
const RE_HEX_ESCAPE = /[\da-f]/i;
var tokenize = function tokenizer(input2, options2 = {}) {
  let css2 = input2.css.valueOf();
  let ignore = options2.ignoreErrors;
  let code3, next2, quote, content2, escape3;
  let escaped, escapePos, prev, n, currentToken;
  let length = css2.length;
  let pos = 0;
  let buffer = [];
  let returned = [];
  function position() {
    return pos;
  }
  function unclosed(what) {
    throw input2.error("Unclosed " + what, pos);
  }
  function endOfFile() {
    return returned.length === 0 && pos >= length;
  }
  function nextToken(opts) {
    if (returned.length)
      return returned.pop();
    if (pos >= length)
      return;
    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;
    code3 = css2.charCodeAt(pos);
    switch (code3) {
      case NEWLINE:
      case SPACE:
      case TAB:
      case CR:
      case FEED: {
        next2 = pos;
        do {
          next2 += 1;
          code3 = css2.charCodeAt(next2);
        } while (code3 === SPACE || code3 === NEWLINE || code3 === TAB || code3 === CR || code3 === FEED);
        currentToken = ["space", css2.slice(pos, next2)];
        pos = next2 - 1;
        break;
      }
      case OPEN_SQUARE:
      case CLOSE_SQUARE:
      case OPEN_CURLY:
      case CLOSE_CURLY:
      case COLON:
      case SEMICOLON:
      case CLOSE_PARENTHESES: {
        let controlChar = String.fromCharCode(code3);
        currentToken = [controlChar, controlChar, pos];
        break;
      }
      case OPEN_PARENTHESES: {
        prev = buffer.length ? buffer.pop()[1] : "";
        n = css2.charCodeAt(pos + 1);
        if (prev === "url" && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {
          next2 = pos;
          do {
            escaped = false;
            next2 = css2.indexOf(")", next2 + 1);
            if (next2 === -1) {
              if (ignore || ignoreUnclosed) {
                next2 = pos;
                break;
              } else {
                unclosed("bracket");
              }
            }
            escapePos = next2;
            while (css2.charCodeAt(escapePos - 1) === BACKSLASH) {
              escapePos -= 1;
              escaped = !escaped;
            }
          } while (escaped);
          currentToken = ["brackets", css2.slice(pos, next2 + 1), pos, next2];
          pos = next2;
        } else {
          next2 = css2.indexOf(")", pos + 1);
          content2 = css2.slice(pos, next2 + 1);
          if (next2 === -1 || RE_BAD_BRACKET.test(content2)) {
            currentToken = ["(", "(", pos];
          } else {
            currentToken = ["brackets", content2, pos, next2];
            pos = next2;
          }
        }
        break;
      }
      case SINGLE_QUOTE:
      case DOUBLE_QUOTE: {
        quote = code3 === SINGLE_QUOTE ? "'" : '"';
        next2 = pos;
        do {
          escaped = false;
          next2 = css2.indexOf(quote, next2 + 1);
          if (next2 === -1) {
            if (ignore || ignoreUnclosed) {
              next2 = pos + 1;
              break;
            } else {
              unclosed("string");
            }
          }
          escapePos = next2;
          while (css2.charCodeAt(escapePos - 1) === BACKSLASH) {
            escapePos -= 1;
            escaped = !escaped;
          }
        } while (escaped);
        currentToken = ["string", css2.slice(pos, next2 + 1), pos, next2];
        pos = next2;
        break;
      }
      case AT: {
        RE_AT_END.lastIndex = pos + 1;
        RE_AT_END.test(css2);
        if (RE_AT_END.lastIndex === 0) {
          next2 = css2.length - 1;
        } else {
          next2 = RE_AT_END.lastIndex - 2;
        }
        currentToken = ["at-word", css2.slice(pos, next2 + 1), pos, next2];
        pos = next2;
        break;
      }
      case BACKSLASH: {
        next2 = pos;
        escape3 = true;
        while (css2.charCodeAt(next2 + 1) === BACKSLASH) {
          next2 += 1;
          escape3 = !escape3;
        }
        code3 = css2.charCodeAt(next2 + 1);
        if (escape3 && code3 !== SLASH && code3 !== SPACE && code3 !== NEWLINE && code3 !== TAB && code3 !== CR && code3 !== FEED) {
          next2 += 1;
          if (RE_HEX_ESCAPE.test(css2.charAt(next2))) {
            while (RE_HEX_ESCAPE.test(css2.charAt(next2 + 1))) {
              next2 += 1;
            }
            if (css2.charCodeAt(next2 + 1) === SPACE) {
              next2 += 1;
            }
          }
        }
        currentToken = ["word", css2.slice(pos, next2 + 1), pos, next2];
        pos = next2;
        break;
      }
      default: {
        if (code3 === SLASH && css2.charCodeAt(pos + 1) === ASTERISK) {
          next2 = css2.indexOf("*/", pos + 2) + 1;
          if (next2 === 0) {
            if (ignore || ignoreUnclosed) {
              next2 = css2.length;
            } else {
              unclosed("comment");
            }
          }
          currentToken = ["comment", css2.slice(pos, next2 + 1), pos, next2];
          pos = next2;
        } else {
          RE_WORD_END.lastIndex = pos + 1;
          RE_WORD_END.test(css2);
          if (RE_WORD_END.lastIndex === 0) {
            next2 = css2.length - 1;
          } else {
            next2 = RE_WORD_END.lastIndex - 2;
          }
          currentToken = ["word", css2.slice(pos, next2 + 1), pos, next2];
          buffer.push(currentToken);
          pos = next2;
        }
        break;
      }
    }
    pos++;
    return currentToken;
  }
  function back2(token2) {
    returned.push(token2);
  }
  return {
    back: back2,
    nextToken,
    endOfFile,
    position
  };
};
let Container$6 = container$4;
class AtRule$3 extends Container$6 {
  constructor(defaults) {
    super(defaults);
    this.type = "atrule";
  }
  append(...children) {
    if (!this.proxyOf.nodes)
      this.nodes = [];
    return super.append(...children);
  }
  prepend(...children) {
    if (!this.proxyOf.nodes)
      this.nodes = [];
    return super.prepend(...children);
  }
}
var atRule = AtRule$3;
AtRule$3.default = AtRule$3;
Container$6.registerAtRule(AtRule$3);
let Container$5 = container$4;
let LazyResult$3, Processor$2;
class Root$5 extends Container$5 {
  constructor(defaults) {
    super(defaults);
    this.type = "root";
    if (!this.nodes)
      this.nodes = [];
  }
  removeChild(child2, ignore) {
    let index2 = this.index(child2);
    if (!ignore && index2 === 0 && this.nodes.length > 1) {
      this.nodes[1].raws.before = this.nodes[index2].raws.before;
    }
    return super.removeChild(child2);
  }
  normalize(child2, sample, type) {
    let nodes = super.normalize(child2);
    if (sample) {
      if (type === "prepend") {
        if (this.nodes.length > 1) {
          sample.raws.before = this.nodes[1].raws.before;
        } else {
          delete sample.raws.before;
        }
      } else if (this.first !== sample) {
        for (let node2 of nodes) {
          node2.raws.before = sample.raws.before;
        }
      }
    }
    return nodes;
  }
  toResult(opts = {}) {
    let lazy = new LazyResult$3(new Processor$2(), this, opts);
    return lazy.stringify();
  }
}
Root$5.registerLazyResult = (dependant) => {
  LazyResult$3 = dependant;
};
Root$5.registerProcessor = (dependant) => {
  Processor$2 = dependant;
};
var root = Root$5;
Root$5.default = Root$5;
Container$5.registerRoot(Root$5);
let list$2 = {
  split(string, separators, last) {
    let array = [];
    let current = "";
    let split = false;
    let func = 0;
    let inQuote = false;
    let prevQuote = "";
    let escape3 = false;
    for (let letter of string) {
      if (escape3) {
        escape3 = false;
      } else if (letter === "\\") {
        escape3 = true;
      } else if (inQuote) {
        if (letter === prevQuote) {
          inQuote = false;
        }
      } else if (letter === '"' || letter === "'") {
        inQuote = true;
        prevQuote = letter;
      } else if (letter === "(") {
        func += 1;
      } else if (letter === ")") {
        if (func > 0)
          func -= 1;
      } else if (func === 0) {
        if (separators.includes(letter))
          split = true;
      }
      if (split) {
        if (current !== "")
          array.push(current.trim());
        current = "";
        split = false;
      } else {
        current += letter;
      }
    }
    if (last || current !== "")
      array.push(current.trim());
    return array;
  },
  space(string) {
    let spaces = [" ", "\n", "	"];
    return list$2.split(string, spaces);
  },
  comma(string) {
    return list$2.split(string, [","], true);
  }
};
var list_1 = list$2;
list$2.default = list$2;
let Container$4 = container$4;
let list$1 = list_1;
class Rule$3 extends Container$4 {
  constructor(defaults) {
    super(defaults);
    this.type = "rule";
    if (!this.nodes)
      this.nodes = [];
  }
  get selectors() {
    return list$1.comma(this.selector);
  }
  set selectors(values) {
    let match2 = this.selector ? this.selector.match(/,\s*/) : null;
    let sep2 = match2 ? match2[0] : "," + this.raw("between", "beforeOpen");
    this.selector = values.join(sep2);
  }
}
var rule = Rule$3;
Rule$3.default = Rule$3;
Container$4.registerRule(Rule$3);
let Declaration$2 = declaration;
let tokenizer2 = tokenize;
let Comment$2 = comment;
let AtRule$2 = atRule;
let Root$4 = root;
let Rule$2 = rule;
const SAFE_COMMENT_NEIGHBOR = {
  empty: true,
  space: true
};
function findLastWithPosition(tokens) {
  for (let i = tokens.length - 1; i >= 0; i--) {
    let token2 = tokens[i];
    let pos = token2[3] || token2[2];
    if (pos)
      return pos;
  }
}
class Parser$1 {
  constructor(input2) {
    this.input = input2;
    this.root = new Root$4();
    this.current = this.root;
    this.spaces = "";
    this.semicolon = false;
    this.customProperty = false;
    this.createTokenizer();
    this.root.source = { input: input2, start: { offset: 0, line: 1, column: 1 } };
  }
  createTokenizer() {
    this.tokenizer = tokenizer2(this.input);
  }
  parse() {
    let token2;
    while (!this.tokenizer.endOfFile()) {
      token2 = this.tokenizer.nextToken();
      switch (token2[0]) {
        case "space":
          this.spaces += token2[1];
          break;
        case ";":
          this.freeSemicolon(token2);
          break;
        case "}":
          this.end(token2);
          break;
        case "comment":
          this.comment(token2);
          break;
        case "at-word":
          this.atrule(token2);
          break;
        case "{":
          this.emptyRule(token2);
          break;
        default:
          this.other(token2);
          break;
      }
    }
    this.endFile();
  }
  comment(token2) {
    let node2 = new Comment$2();
    this.init(node2, token2[2]);
    node2.source.end = this.getPosition(token2[3] || token2[2]);
    let text3 = token2[1].slice(2, -2);
    if (/^\s*$/.test(text3)) {
      node2.text = "";
      node2.raws.left = text3;
      node2.raws.right = "";
    } else {
      let match2 = text3.match(/^(\s*)([^]*\S)(\s*)$/);
      node2.text = match2[2];
      node2.raws.left = match2[1];
      node2.raws.right = match2[3];
    }
  }
  emptyRule(token2) {
    let node2 = new Rule$2();
    this.init(node2, token2[2]);
    node2.selector = "";
    node2.raws.between = "";
    this.current = node2;
  }
  other(start) {
    let end2 = false;
    let type = null;
    let colon2 = false;
    let bracket = null;
    let brackets = [];
    let customProperty = start[1].startsWith("--");
    let tokens = [];
    let token2 = start;
    while (token2) {
      type = token2[0];
      tokens.push(token2);
      if (type === "(" || type === "[") {
        if (!bracket)
          bracket = token2;
        brackets.push(type === "(" ? ")" : "]");
      } else if (customProperty && colon2 && type === "{") {
        if (!bracket)
          bracket = token2;
        brackets.push("}");
      } else if (brackets.length === 0) {
        if (type === ";") {
          if (colon2) {
            this.decl(tokens, customProperty);
            return;
          } else {
            break;
          }
        } else if (type === "{") {
          this.rule(tokens);
          return;
        } else if (type === "}") {
          this.tokenizer.back(tokens.pop());
          end2 = true;
          break;
        } else if (type === ":") {
          colon2 = true;
        }
      } else if (type === brackets[brackets.length - 1]) {
        brackets.pop();
        if (brackets.length === 0)
          bracket = null;
      }
      token2 = this.tokenizer.nextToken();
    }
    if (this.tokenizer.endOfFile())
      end2 = true;
    if (brackets.length > 0)
      this.unclosedBracket(bracket);
    if (end2 && colon2) {
      if (!customProperty) {
        while (tokens.length) {
          token2 = tokens[tokens.length - 1][0];
          if (token2 !== "space" && token2 !== "comment")
            break;
          this.tokenizer.back(tokens.pop());
        }
      }
      this.decl(tokens, customProperty);
    } else {
      this.unknownWord(tokens);
    }
  }
  rule(tokens) {
    tokens.pop();
    let node2 = new Rule$2();
    this.init(node2, tokens[0][2]);
    node2.raws.between = this.spacesAndCommentsFromEnd(tokens);
    this.raw(node2, "selector", tokens);
    this.current = node2;
  }
  decl(tokens, customProperty) {
    let node2 = new Declaration$2();
    this.init(node2, tokens[0][2]);
    let last = tokens[tokens.length - 1];
    if (last[0] === ";") {
      this.semicolon = true;
      tokens.pop();
    }
    node2.source.end = this.getPosition(
      last[3] || last[2] || findLastWithPosition(tokens)
    );
    while (tokens[0][0] !== "word") {
      if (tokens.length === 1)
        this.unknownWord(tokens);
      node2.raws.before += tokens.shift()[1];
    }
    node2.source.start = this.getPosition(tokens[0][2]);
    node2.prop = "";
    while (tokens.length) {
      let type = tokens[0][0];
      if (type === ":" || type === "space" || type === "comment") {
        break;
      }
      node2.prop += tokens.shift()[1];
    }
    node2.raws.between = "";
    let token2;
    while (tokens.length) {
      token2 = tokens.shift();
      if (token2[0] === ":") {
        node2.raws.between += token2[1];
        break;
      } else {
        if (token2[0] === "word" && /\w/.test(token2[1])) {
          this.unknownWord([token2]);
        }
        node2.raws.between += token2[1];
      }
    }
    if (node2.prop[0] === "_" || node2.prop[0] === "*") {
      node2.raws.before += node2.prop[0];
      node2.prop = node2.prop.slice(1);
    }
    let firstSpaces = [];
    let next2;
    while (tokens.length) {
      next2 = tokens[0][0];
      if (next2 !== "space" && next2 !== "comment")
        break;
      firstSpaces.push(tokens.shift());
    }
    this.precheckMissedSemicolon(tokens);
    for (let i = tokens.length - 1; i >= 0; i--) {
      token2 = tokens[i];
      if (token2[1].toLowerCase() === "!important") {
        node2.important = true;
        let string = this.stringFrom(tokens, i);
        string = this.spacesFromEnd(tokens) + string;
        if (string !== " !important")
          node2.raws.important = string;
        break;
      } else if (token2[1].toLowerCase() === "important") {
        let cache = tokens.slice(0);
        let str = "";
        for (let j = i; j > 0; j--) {
          let type = cache[j][0];
          if (str.trim().indexOf("!") === 0 && type !== "space") {
            break;
          }
          str = cache.pop()[1] + str;
        }
        if (str.trim().indexOf("!") === 0) {
          node2.important = true;
          node2.raws.important = str;
          tokens = cache;
        }
      }
      if (token2[0] !== "space" && token2[0] !== "comment") {
        break;
      }
    }
    let hasWord = tokens.some((i) => i[0] !== "space" && i[0] !== "comment");
    if (hasWord) {
      node2.raws.between += firstSpaces.map((i) => i[1]).join("");
      firstSpaces = [];
    }
    this.raw(node2, "value", firstSpaces.concat(tokens), customProperty);
    if (node2.value.includes(":") && !customProperty) {
      this.checkMissedSemicolon(tokens);
    }
  }
  atrule(token2) {
    let node2 = new AtRule$2();
    node2.name = token2[1].slice(1);
    if (node2.name === "") {
      this.unnamedAtrule(node2, token2);
    }
    this.init(node2, token2[2]);
    let type;
    let prev;
    let shift;
    let last = false;
    let open2 = false;
    let params = [];
    let brackets = [];
    while (!this.tokenizer.endOfFile()) {
      token2 = this.tokenizer.nextToken();
      type = token2[0];
      if (type === "(" || type === "[") {
        brackets.push(type === "(" ? ")" : "]");
      } else if (type === "{" && brackets.length > 0) {
        brackets.push("}");
      } else if (type === brackets[brackets.length - 1]) {
        brackets.pop();
      }
      if (brackets.length === 0) {
        if (type === ";") {
          node2.source.end = this.getPosition(token2[2]);
          this.semicolon = true;
          break;
        } else if (type === "{") {
          open2 = true;
          break;
        } else if (type === "}") {
          if (params.length > 0) {
            shift = params.length - 1;
            prev = params[shift];
            while (prev && prev[0] === "space") {
              prev = params[--shift];
            }
            if (prev) {
              node2.source.end = this.getPosition(prev[3] || prev[2]);
            }
          }
          this.end(token2);
          break;
        } else {
          params.push(token2);
        }
      } else {
        params.push(token2);
      }
      if (this.tokenizer.endOfFile()) {
        last = true;
        break;
      }
    }
    node2.raws.between = this.spacesAndCommentsFromEnd(params);
    if (params.length) {
      node2.raws.afterName = this.spacesAndCommentsFromStart(params);
      this.raw(node2, "params", params);
      if (last) {
        token2 = params[params.length - 1];
        node2.source.end = this.getPosition(token2[3] || token2[2]);
        this.spaces = node2.raws.between;
        node2.raws.between = "";
      }
    } else {
      node2.raws.afterName = "";
      node2.params = "";
    }
    if (open2) {
      node2.nodes = [];
      this.current = node2;
    }
  }
  end(token2) {
    if (this.current.nodes && this.current.nodes.length) {
      this.current.raws.semicolon = this.semicolon;
    }
    this.semicolon = false;
    this.current.raws.after = (this.current.raws.after || "") + this.spaces;
    this.spaces = "";
    if (this.current.parent) {
      this.current.source.end = this.getPosition(token2[2]);
      this.current = this.current.parent;
    } else {
      this.unexpectedClose(token2);
    }
  }
  endFile() {
    if (this.current.parent)
      this.unclosedBlock();
    if (this.current.nodes && this.current.nodes.length) {
      this.current.raws.semicolon = this.semicolon;
    }
    this.current.raws.after = (this.current.raws.after || "") + this.spaces;
  }
  freeSemicolon(token2) {
    this.spaces += token2[1];
    if (this.current.nodes) {
      let prev = this.current.nodes[this.current.nodes.length - 1];
      if (prev && prev.type === "rule" && !prev.raws.ownSemicolon) {
        prev.raws.ownSemicolon = this.spaces;
        this.spaces = "";
      }
    }
  }
  getPosition(offset) {
    let pos = this.input.fromOffset(offset);
    return {
      offset,
      line: pos.line,
      column: pos.col
    };
  }
  init(node2, offset) {
    this.current.push(node2);
    node2.source = {
      start: this.getPosition(offset),
      input: this.input
    };
    node2.raws.before = this.spaces;
    this.spaces = "";
    if (node2.type !== "comment")
      this.semicolon = false;
  }
  raw(node2, prop2, tokens, customProperty) {
    let token2, type;
    let length = tokens.length;
    let value = "";
    let clean = true;
    let next2, prev;
    for (let i = 0; i < length; i += 1) {
      token2 = tokens[i];
      type = token2[0];
      if (type === "space" && i === length - 1 && !customProperty) {
        clean = false;
      } else if (type === "comment") {
        prev = tokens[i - 1] ? tokens[i - 1][0] : "empty";
        next2 = tokens[i + 1] ? tokens[i + 1][0] : "empty";
        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next2]) {
          if (value.slice(-1) === ",") {
            clean = false;
          } else {
            value += token2[1];
          }
        } else {
          clean = false;
        }
      } else {
        value += token2[1];
      }
    }
    if (!clean) {
      let raw = tokens.reduce((all, i) => all + i[1], "");
      node2.raws[prop2] = { value, raw };
    }
    node2[prop2] = value;
  }
  spacesAndCommentsFromEnd(tokens) {
    let lastTokenType;
    let spaces = "";
    while (tokens.length) {
      lastTokenType = tokens[tokens.length - 1][0];
      if (lastTokenType !== "space" && lastTokenType !== "comment")
        break;
      spaces = tokens.pop()[1] + spaces;
    }
    return spaces;
  }
  spacesAndCommentsFromStart(tokens) {
    let next2;
    let spaces = "";
    while (tokens.length) {
      next2 = tokens[0][0];
      if (next2 !== "space" && next2 !== "comment")
        break;
      spaces += tokens.shift()[1];
    }
    return spaces;
  }
  spacesFromEnd(tokens) {
    let lastTokenType;
    let spaces = "";
    while (tokens.length) {
      lastTokenType = tokens[tokens.length - 1][0];
      if (lastTokenType !== "space")
        break;
      spaces = tokens.pop()[1] + spaces;
    }
    return spaces;
  }
  stringFrom(tokens, from) {
    let result2 = "";
    for (let i = from; i < tokens.length; i++) {
      result2 += tokens[i][1];
    }
    tokens.splice(from, tokens.length - from);
    return result2;
  }
  colon(tokens) {
    let brackets = 0;
    let token2, type, prev;
    for (let [i, element] of tokens.entries()) {
      token2 = element;
      type = token2[0];
      if (type === "(") {
        brackets += 1;
      }
      if (type === ")") {
        brackets -= 1;
      }
      if (brackets === 0 && type === ":") {
        if (!prev) {
          this.doubleColon(token2);
        } else if (prev[0] === "word" && prev[1] === "progid") {
          continue;
        } else {
          return i;
        }
      }
      prev = token2;
    }
    return false;
  }
  unclosedBracket(bracket) {
    throw this.input.error(
      "Unclosed bracket",
      { offset: bracket[2] },
      { offset: bracket[2] + 1 }
    );
  }
  unknownWord(tokens) {
    throw this.input.error(
      "Unknown word",
      { offset: tokens[0][2] },
      { offset: tokens[0][2] + tokens[0][1].length }
    );
  }
  unexpectedClose(token2) {
    throw this.input.error(
      "Unexpected }",
      { offset: token2[2] },
      { offset: token2[2] + 1 }
    );
  }
  unclosedBlock() {
    let pos = this.current.source.start;
    throw this.input.error("Unclosed block", pos.line, pos.column);
  }
  doubleColon(token2) {
    throw this.input.error(
      "Double colon",
      { offset: token2[2] },
      { offset: token2[2] + token2[1].length }
    );
  }
  unnamedAtrule(node2, token2) {
    throw this.input.error(
      "At-rule without name",
      { offset: token2[2] },
      { offset: token2[2] + token2[1].length }
    );
  }
  precheckMissedSemicolon() {
  }
  checkMissedSemicolon(tokens) {
    let colon2 = this.colon(tokens);
    if (colon2 === false)
      return;
    let founded = 0;
    let token2;
    for (let j = colon2 - 1; j >= 0; j--) {
      token2 = tokens[j];
      if (token2[0] !== "space") {
        founded += 1;
        if (founded === 2)
          break;
      }
    }
    throw this.input.error(
      "Missed semicolon",
      token2[0] === "word" ? token2[3] + 1 : token2[2]
    );
  }
}
var parser = Parser$1;
let Container$3 = container$4;
let Parser = parser;
let Input$2 = input$1;
function parse$3(css2, opts) {
  let input2 = new Input$2(css2, opts);
  let parser2 = new Parser(input2);
  try {
    parser2.parse();
  } catch (e) {
    throw e;
  }
  return parser2.root;
}
var parse_1 = parse$3;
parse$3.default = parse$3;
Container$3.registerParse(parse$3);
let { isClean, my } = symbols;
let MapGenerator$1 = mapGenerator;
let stringify$2 = stringify_1;
let Container$2 = container$4;
let Document$2 = document$1;
let Result$2 = result;
let parse$2 = parse_1;
let Root$3 = root;
const TYPE_TO_CLASS_NAME = {
  document: "Document",
  root: "Root",
  atrule: "AtRule",
  rule: "Rule",
  decl: "Declaration",
  comment: "Comment"
};
const PLUGIN_PROPS = {
  postcssPlugin: true,
  prepare: true,
  Once: true,
  Document: true,
  Root: true,
  Declaration: true,
  Rule: true,
  AtRule: true,
  Comment: true,
  DeclarationExit: true,
  RuleExit: true,
  AtRuleExit: true,
  CommentExit: true,
  RootExit: true,
  DocumentExit: true,
  OnceExit: true
};
const NOT_VISITORS = {
  postcssPlugin: true,
  prepare: true,
  Once: true
};
const CHILDREN = 0;
function isPromise(obj) {
  return typeof obj === "object" && typeof obj.then === "function";
}
function getEvents(node2) {
  let key2 = false;
  let type = TYPE_TO_CLASS_NAME[node2.type];
  if (node2.type === "decl") {
    key2 = node2.prop.toLowerCase();
  } else if (node2.type === "atrule") {
    key2 = node2.name.toLowerCase();
  }
  if (key2 && node2.append) {
    return [
      type,
      type + "-" + key2,
      CHILDREN,
      type + "Exit",
      type + "Exit-" + key2
    ];
  } else if (key2) {
    return [type, type + "-" + key2, type + "Exit", type + "Exit-" + key2];
  } else if (node2.append) {
    return [type, CHILDREN, type + "Exit"];
  } else {
    return [type, type + "Exit"];
  }
}
function toStack(node2) {
  let events;
  if (node2.type === "document") {
    events = ["Document", CHILDREN, "DocumentExit"];
  } else if (node2.type === "root") {
    events = ["Root", CHILDREN, "RootExit"];
  } else {
    events = getEvents(node2);
  }
  return {
    node: node2,
    events,
    eventIndex: 0,
    visitors: [],
    visitorIndex: 0,
    iterator: 0
  };
}
function cleanMarks(node2) {
  node2[isClean] = false;
  if (node2.nodes)
    node2.nodes.forEach((i) => cleanMarks(i));
  return node2;
}
let postcss$1 = {};
class LazyResult$2 {
  constructor(processor2, css2, opts) {
    this.stringified = false;
    this.processed = false;
    let root2;
    if (typeof css2 === "object" && css2 !== null && (css2.type === "root" || css2.type === "document")) {
      root2 = cleanMarks(css2);
    } else if (css2 instanceof LazyResult$2 || css2 instanceof Result$2) {
      root2 = cleanMarks(css2.root);
      if (css2.map) {
        if (typeof opts.map === "undefined")
          opts.map = {};
        if (!opts.map.inline)
          opts.map.inline = false;
        opts.map.prev = css2.map;
      }
    } else {
      let parser2 = parse$2;
      if (opts.syntax)
        parser2 = opts.syntax.parse;
      if (opts.parser)
        parser2 = opts.parser;
      if (parser2.parse)
        parser2 = parser2.parse;
      try {
        root2 = parser2(css2, opts);
      } catch (error2) {
        this.processed = true;
        this.error = error2;
      }
      if (root2 && !root2[my]) {
        Container$2.rebuild(root2);
      }
    }
    this.result = new Result$2(processor2, root2, opts);
    this.helpers = { ...postcss$1, result: this.result, postcss: postcss$1 };
    this.plugins = this.processor.plugins.map((plugin2) => {
      if (typeof plugin2 === "object" && plugin2.prepare) {
        return { ...plugin2, ...plugin2.prepare(this.result) };
      } else {
        return plugin2;
      }
    });
  }
  get [Symbol.toStringTag]() {
    return "LazyResult";
  }
  get processor() {
    return this.result.processor;
  }
  get opts() {
    return this.result.opts;
  }
  get css() {
    return this.stringify().css;
  }
  get content() {
    return this.stringify().content;
  }
  get map() {
    return this.stringify().map;
  }
  get root() {
    return this.sync().root;
  }
  get messages() {
    return this.sync().messages;
  }
  warnings() {
    return this.sync().warnings();
  }
  toString() {
    return this.css;
  }
  then(onFulfilled, onRejected) {
    return this.async().then(onFulfilled, onRejected);
  }
  catch(onRejected) {
    return this.async().catch(onRejected);
  }
  finally(onFinally) {
    return this.async().then(onFinally, onFinally);
  }
  async() {
    if (this.error)
      return Promise.reject(this.error);
    if (this.processed)
      return Promise.resolve(this.result);
    if (!this.processing) {
      this.processing = this.runAsync();
    }
    return this.processing;
  }
  sync() {
    if (this.error)
      throw this.error;
    if (this.processed)
      return this.result;
    this.processed = true;
    if (this.processing) {
      throw this.getAsyncError();
    }
    for (let plugin2 of this.plugins) {
      let promise = this.runOnRoot(plugin2);
      if (isPromise(promise)) {
        throw this.getAsyncError();
      }
    }
    this.prepareVisitors();
    if (this.hasListener) {
      let root2 = this.result.root;
      while (!root2[isClean]) {
        root2[isClean] = true;
        this.walkSync(root2);
      }
      if (this.listeners.OnceExit) {
        if (root2.type === "document") {
          for (let subRoot of root2.nodes) {
            this.visitSync(this.listeners.OnceExit, subRoot);
          }
        } else {
          this.visitSync(this.listeners.OnceExit, root2);
        }
      }
    }
    return this.result;
  }
  stringify() {
    if (this.error)
      throw this.error;
    if (this.stringified)
      return this.result;
    this.stringified = true;
    this.sync();
    let opts = this.result.opts;
    let str = stringify$2;
    if (opts.syntax)
      str = opts.syntax.stringify;
    if (opts.stringifier)
      str = opts.stringifier;
    if (str.stringify)
      str = str.stringify;
    let map2 = new MapGenerator$1(str, this.result.root, this.result.opts);
    let data3 = map2.generate();
    this.result.css = data3[0];
    this.result.map = data3[1];
    return this.result;
  }
  walkSync(node2) {
    node2[isClean] = true;
    let events = getEvents(node2);
    for (let event of events) {
      if (event === CHILDREN) {
        if (node2.nodes) {
          node2.each((child2) => {
            if (!child2[isClean])
              this.walkSync(child2);
          });
        }
      } else {
        let visitors = this.listeners[event];
        if (visitors) {
          if (this.visitSync(visitors, node2.toProxy()))
            return;
        }
      }
    }
  }
  visitSync(visitors, node2) {
    for (let [plugin2, visitor] of visitors) {
      this.result.lastPlugin = plugin2;
      let promise;
      try {
        promise = visitor(node2, this.helpers);
      } catch (e) {
        throw this.handleError(e, node2.proxyOf);
      }
      if (node2.type !== "root" && node2.type !== "document" && !node2.parent) {
        return true;
      }
      if (isPromise(promise)) {
        throw this.getAsyncError();
      }
    }
  }
  runOnRoot(plugin2) {
    this.result.lastPlugin = plugin2;
    try {
      if (typeof plugin2 === "object" && plugin2.Once) {
        if (this.result.root.type === "document") {
          let roots = this.result.root.nodes.map(
            (root2) => plugin2.Once(root2, this.helpers)
          );
          if (isPromise(roots[0])) {
            return Promise.all(roots);
          }
          return roots;
        }
        return plugin2.Once(this.result.root, this.helpers);
      } else if (typeof plugin2 === "function") {
        return plugin2(this.result.root, this.result);
      }
    } catch (error2) {
      throw this.handleError(error2);
    }
  }
  getAsyncError() {
    throw new Error("Use process(css).then(cb) to work with async plugins");
  }
  handleError(error2, node2) {
    let plugin2 = this.result.lastPlugin;
    try {
      if (node2)
        node2.addToError(error2);
      this.error = error2;
      if (error2.name === "CssSyntaxError" && !error2.plugin) {
        error2.plugin = plugin2.postcssPlugin;
        error2.setMessage();
      } else if (plugin2.postcssVersion) {
        if (false)
          ;
      }
    } catch (err) {
      if (console && console.error)
        console.error(err);
    }
    return error2;
  }
  async runAsync() {
    this.plugin = 0;
    for (let i = 0; i < this.plugins.length; i++) {
      let plugin2 = this.plugins[i];
      let promise = this.runOnRoot(plugin2);
      if (isPromise(promise)) {
        try {
          await promise;
        } catch (error2) {
          throw this.handleError(error2);
        }
      }
    }
    this.prepareVisitors();
    if (this.hasListener) {
      let root2 = this.result.root;
      while (!root2[isClean]) {
        root2[isClean] = true;
        let stack = [toStack(root2)];
        while (stack.length > 0) {
          let promise = this.visitTick(stack);
          if (isPromise(promise)) {
            try {
              await promise;
            } catch (e) {
              let node2 = stack[stack.length - 1].node;
              throw this.handleError(e, node2);
            }
          }
        }
      }
      if (this.listeners.OnceExit) {
        for (let [plugin2, visitor] of this.listeners.OnceExit) {
          this.result.lastPlugin = plugin2;
          try {
            if (root2.type === "document") {
              let roots = root2.nodes.map(
                (subRoot) => visitor(subRoot, this.helpers)
              );
              await Promise.all(roots);
            } else {
              await visitor(root2, this.helpers);
            }
          } catch (e) {
            throw this.handleError(e);
          }
        }
      }
    }
    this.processed = true;
    return this.stringify();
  }
  prepareVisitors() {
    this.listeners = {};
    let add2 = (plugin2, type, cb) => {
      if (!this.listeners[type])
        this.listeners[type] = [];
      this.listeners[type].push([plugin2, cb]);
    };
    for (let plugin2 of this.plugins) {
      if (typeof plugin2 === "object") {
        for (let event in plugin2) {
          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {
            throw new Error(
              `Unknown event ${event} in ${plugin2.postcssPlugin}. Try to update PostCSS (${this.processor.version} now).`
            );
          }
          if (!NOT_VISITORS[event]) {
            if (typeof plugin2[event] === "object") {
              for (let filter2 in plugin2[event]) {
                if (filter2 === "*") {
                  add2(plugin2, event, plugin2[event][filter2]);
                } else {
                  add2(
                    plugin2,
                    event + "-" + filter2.toLowerCase(),
                    plugin2[event][filter2]
                  );
                }
              }
            } else if (typeof plugin2[event] === "function") {
              add2(plugin2, event, plugin2[event]);
            }
          }
        }
      }
    }
    this.hasListener = Object.keys(this.listeners).length > 0;
  }
  visitTick(stack) {
    let visit = stack[stack.length - 1];
    let { node: node2, visitors } = visit;
    if (node2.type !== "root" && node2.type !== "document" && !node2.parent) {
      stack.pop();
      return;
    }
    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
      let [plugin2, visitor] = visitors[visit.visitorIndex];
      visit.visitorIndex += 1;
      if (visit.visitorIndex === visitors.length) {
        visit.visitors = [];
        visit.visitorIndex = 0;
      }
      this.result.lastPlugin = plugin2;
      try {
        return visitor(node2.toProxy(), this.helpers);
      } catch (e) {
        throw this.handleError(e, node2);
      }
    }
    if (visit.iterator !== 0) {
      let iterator = visit.iterator;
      let child2;
      while (child2 = node2.nodes[node2.indexes[iterator]]) {
        node2.indexes[iterator] += 1;
        if (!child2[isClean]) {
          child2[isClean] = true;
          stack.push(toStack(child2));
          return;
        }
      }
      visit.iterator = 0;
      delete node2.indexes[iterator];
    }
    let events = visit.events;
    while (visit.eventIndex < events.length) {
      let event = events[visit.eventIndex];
      visit.eventIndex += 1;
      if (event === CHILDREN) {
        if (node2.nodes && node2.nodes.length) {
          node2[isClean] = true;
          visit.iterator = node2.getIterator();
        }
        return;
      } else if (this.listeners[event]) {
        visit.visitors = this.listeners[event];
        return;
      }
    }
    stack.pop();
  }
}
LazyResult$2.registerPostcss = (dependant) => {
  postcss$1 = dependant;
};
var lazyResult = LazyResult$2;
LazyResult$2.default = LazyResult$2;
Root$3.registerLazyResult(LazyResult$2);
Document$2.registerLazyResult(LazyResult$2);
let MapGenerator = mapGenerator;
let stringify$1 = stringify_1;
let parse$1 = parse_1;
const Result$1 = result;
class NoWorkResult$1 {
  constructor(processor2, css2, opts) {
    css2 = css2.toString();
    this.stringified = false;
    this._processor = processor2;
    this._css = css2;
    this._opts = opts;
    this._map = void 0;
    let root2;
    let str = stringify$1;
    this.result = new Result$1(this._processor, root2, this._opts);
    this.result.css = css2;
    let self2 = this;
    Object.defineProperty(this.result, "root", {
      get() {
        return self2.root;
      }
    });
    let map2 = new MapGenerator(str, root2, this._opts, css2);
    if (map2.isMap()) {
      let [generatedCSS, generatedMap] = map2.generate();
      if (generatedCSS) {
        this.result.css = generatedCSS;
      }
      if (generatedMap) {
        this.result.map = generatedMap;
      }
    }
  }
  get [Symbol.toStringTag]() {
    return "NoWorkResult";
  }
  get processor() {
    return this.result.processor;
  }
  get opts() {
    return this.result.opts;
  }
  get css() {
    return this.result.css;
  }
  get content() {
    return this.result.css;
  }
  get map() {
    return this.result.map;
  }
  get root() {
    if (this._root) {
      return this._root;
    }
    let root2;
    let parser2 = parse$1;
    try {
      root2 = parser2(this._css, this._opts);
    } catch (error2) {
      this.error = error2;
    }
    if (this.error) {
      throw this.error;
    } else {
      this._root = root2;
      return root2;
    }
  }
  get messages() {
    return [];
  }
  warnings() {
    return [];
  }
  toString() {
    return this._css;
  }
  then(onFulfilled, onRejected) {
    return this.async().then(onFulfilled, onRejected);
  }
  catch(onRejected) {
    return this.async().catch(onRejected);
  }
  finally(onFinally) {
    return this.async().then(onFinally, onFinally);
  }
  async() {
    if (this.error)
      return Promise.reject(this.error);
    return Promise.resolve(this.result);
  }
  sync() {
    if (this.error)
      throw this.error;
    return this.result;
  }
}
var noWorkResult = NoWorkResult$1;
NoWorkResult$1.default = NoWorkResult$1;
let NoWorkResult = noWorkResult;
let LazyResult$1 = lazyResult;
let Document$1 = document$1;
let Root$2 = root;
class Processor$1 {
  constructor(plugins = []) {
    this.version = "8.4.18";
    this.plugins = this.normalize(plugins);
  }
  use(plugin2) {
    this.plugins = this.plugins.concat(this.normalize([plugin2]));
    return this;
  }
  process(css2, opts = {}) {
    if (this.plugins.length === 0 && typeof opts.parser === "undefined" && typeof opts.stringifier === "undefined" && typeof opts.syntax === "undefined") {
      return new NoWorkResult(this, css2, opts);
    } else {
      return new LazyResult$1(this, css2, opts);
    }
  }
  normalize(plugins) {
    let normalized = [];
    for (let i of plugins) {
      if (i.postcss === true) {
        i = i();
      } else if (i.postcss) {
        i = i.postcss;
      }
      if (typeof i === "object" && Array.isArray(i.plugins)) {
        normalized = normalized.concat(i.plugins);
      } else if (typeof i === "object" && i.postcssPlugin) {
        normalized.push(i);
      } else if (typeof i === "function") {
        normalized.push(i);
      } else if (typeof i === "object" && (i.parse || i.stringify))
        ;
      else {
        throw new Error(i + " is not a PostCSS plugin");
      }
    }
    return normalized;
  }
}
var processor = Processor$1;
Processor$1.default = Processor$1;
Root$2.registerProcessor(Processor$1);
Document$1.registerProcessor(Processor$1);
let Declaration$1 = declaration;
let PreviousMap = previousMap;
let Comment$1 = comment;
let AtRule$1 = atRule;
let Input$1 = input$1;
let Root$1 = root;
let Rule$1 = rule;
function fromJSON$1(json, inputs) {
  if (Array.isArray(json))
    return json.map((n) => fromJSON$1(n));
  let { inputs: ownInputs, ...defaults } = json;
  if (ownInputs) {
    inputs = [];
    for (let input2 of ownInputs) {
      let inputHydrated = { ...input2, __proto__: Input$1.prototype };
      if (inputHydrated.map) {
        inputHydrated.map = {
          ...inputHydrated.map,
          __proto__: PreviousMap.prototype
        };
      }
      inputs.push(inputHydrated);
    }
  }
  if (defaults.nodes) {
    defaults.nodes = json.nodes.map((n) => fromJSON$1(n, inputs));
  }
  if (defaults.source) {
    let { inputId, ...source } = defaults.source;
    defaults.source = source;
    if (inputId != null) {
      defaults.source.input = inputs[inputId];
    }
  }
  if (defaults.type === "root") {
    return new Root$1(defaults);
  } else if (defaults.type === "decl") {
    return new Declaration$1(defaults);
  } else if (defaults.type === "rule") {
    return new Rule$1(defaults);
  } else if (defaults.type === "comment") {
    return new Comment$1(defaults);
  } else if (defaults.type === "atrule") {
    return new AtRule$1(defaults);
  } else {
    throw new Error("Unknown node type: " + json.type);
  }
}
var fromJSON_1 = fromJSON$1;
fromJSON$1.default = fromJSON$1;
let CssSyntaxError = cssSyntaxError;
let Declaration = declaration;
let LazyResult = lazyResult;
let Container$1 = container$4;
let Processor = processor;
let stringify = stringify_1;
let fromJSON = fromJSON_1;
let Document = document$1;
let Warning = warning$1;
let Comment = comment;
let AtRule = atRule;
let Result = result;
let Input = input$1;
let parse = parse_1;
let list2 = list_1;
let Rule = rule;
let Root = root;
let Node$1 = node_1;
function postcss(...plugins) {
  if (plugins.length === 1 && Array.isArray(plugins[0])) {
    plugins = plugins[0];
  }
  return new Processor(plugins);
}
postcss.plugin = function plugin(name, initializer) {
  let warningPrinted = false;
  function creator(...args) {
    if (console && console.warn && !warningPrinted) {
      warningPrinted = true;
      console.warn(
        name + ": postcss.plugin was deprecated. Migration guide:\nhttps://evilmartians.com/chronicles/postcss-8-plugin-migration"
      );
      if ({}.LANG && {}.LANG.startsWith("cn")) {
        console.warn(
          name + ": \u91CC\u9762 postcss.plugin \u88AB\u5F03\u7528. \u8FC1\u79FB\u6307\u5357:\nhttps://www.w3ctech.com/topic/2226"
        );
      }
    }
    let transformer = initializer(...args);
    transformer.postcssPlugin = name;
    transformer.postcssVersion = new Processor().version;
    return transformer;
  }
  let cache;
  Object.defineProperty(creator, "postcss", {
    get() {
      if (!cache)
        cache = creator();
      return cache;
    }
  });
  creator.process = function(css2, processOpts, pluginOpts) {
    return postcss([creator(pluginOpts)]).process(css2, processOpts);
  };
  return creator;
};
postcss.stringify = stringify;
postcss.parse = parse;
postcss.fromJSON = fromJSON;
postcss.list = list2;
postcss.comment = (defaults) => new Comment(defaults);
postcss.atRule = (defaults) => new AtRule(defaults);
postcss.decl = (defaults) => new Declaration(defaults);
postcss.rule = (defaults) => new Rule(defaults);
postcss.root = (defaults) => new Root(defaults);
postcss.document = (defaults) => new Document(defaults);
postcss.CssSyntaxError = CssSyntaxError;
postcss.Declaration = Declaration;
postcss.Container = Container$1;
postcss.Processor = Processor;
postcss.Document = Document;
postcss.Comment = Comment;
postcss.Warning = Warning;
postcss.AtRule = AtRule;
postcss.Result = Result;
postcss.Input = Input;
postcss.Rule = Rule;
postcss.Root = Root;
postcss.Node = Node$1;
LazyResult.registerPostcss(postcss);
var postcss_1 = postcss;
postcss.default = postcss;
const htmlparser = lib$5;
const escapeStringRegexp = escapeStringRegexp$1;
const { isPlainObject } = isPlainObject$2;
const deepmerge = cjs;
const parseSrcset = parseSrcset$1.exports;
const { parse: postcssParse } = postcss_1;
const mediaTags = [
  "img",
  "audio",
  "video",
  "picture",
  "svg",
  "object",
  "map",
  "iframe",
  "embed"
];
const vulnerableTags = ["script", "style"];
function each(obj, cb) {
  if (obj) {
    Object.keys(obj).forEach(function(key2) {
      cb(obj[key2], key2);
    });
  }
}
function has(obj, key2) {
  return {}.hasOwnProperty.call(obj, key2);
}
function filter(a2, cb) {
  const n = [];
  each(a2, function(v2) {
    if (cb(v2)) {
      n.push(v2);
    }
  });
  return n;
}
function isEmptyObject(obj) {
  for (const key2 in obj) {
    if (has(obj, key2)) {
      return false;
    }
  }
  return true;
}
function stringifySrcset(parsedSrcset) {
  return parsedSrcset.map(function(part2) {
    if (!part2.url) {
      throw new Error("URL missing");
    }
    return part2.url + (part2.w ? ` ${part2.w}w` : "") + (part2.h ? ` ${part2.h}h` : "") + (part2.d ? ` ${part2.d}x` : "");
  }).join(", ");
}
var sanitizeHtml_1 = sanitizeHtml;
const VALID_HTML_ATTRIBUTE_NAME = /^[^\0\t\n\f\r /<=>]+$/;
function sanitizeHtml(html, options2, _recursing) {
  if (html == null) {
    return "";
  }
  let result2 = "";
  let tempResult = "";
  function Frame(tag2, attribs) {
    const that = this;
    this.tag = tag2;
    this.attribs = attribs || {};
    this.tagPosition = result2.length;
    this.text = "";
    this.mediaChildren = [];
    this.updateParentNodeText = function() {
      if (stack.length) {
        const parentFrame = stack[stack.length - 1];
        parentFrame.text += that.text;
      }
    };
    this.updateParentNodeMediaChildren = function() {
      if (stack.length && mediaTags.includes(this.tag)) {
        const parentFrame = stack[stack.length - 1];
        parentFrame.mediaChildren.push(this.tag);
      }
    };
  }
  options2 = Object.assign({}, sanitizeHtml.defaults, options2);
  options2.parser = Object.assign({}, htmlParserDefaults, options2.parser);
  vulnerableTags.forEach(function(tag2) {
    if (options2.allowedTags && options2.allowedTags.indexOf(tag2) > -1 && !options2.allowVulnerableTags) {
      console.warn(`

\u26A0\uFE0F Your \`allowedTags\` option includes, \`${tag2}\`, which is inherently
vulnerable to XSS attacks. Please remove it from \`allowedTags\`.
Or, to disable this warning, add the \`allowVulnerableTags\` option
and ensure you are accounting for this risk.

`);
    }
  });
  const nonTextTagsArray = options2.nonTextTags || [
    "script",
    "style",
    "textarea",
    "option"
  ];
  let allowedAttributesMap;
  let allowedAttributesGlobMap;
  if (options2.allowedAttributes) {
    allowedAttributesMap = {};
    allowedAttributesGlobMap = {};
    each(options2.allowedAttributes, function(attributes, tag2) {
      allowedAttributesMap[tag2] = [];
      const globRegex = [];
      attributes.forEach(function(obj) {
        if (typeof obj === "string" && obj.indexOf("*") >= 0) {
          globRegex.push(escapeStringRegexp(obj).replace(/\\\*/g, ".*"));
        } else {
          allowedAttributesMap[tag2].push(obj);
        }
      });
      if (globRegex.length) {
        allowedAttributesGlobMap[tag2] = new RegExp("^(" + globRegex.join("|") + ")$");
      }
    });
  }
  const allowedClassesMap = {};
  const allowedClassesGlobMap = {};
  const allowedClassesRegexMap = {};
  each(options2.allowedClasses, function(classes, tag2) {
    if (allowedAttributesMap) {
      if (!has(allowedAttributesMap, tag2)) {
        allowedAttributesMap[tag2] = [];
      }
      allowedAttributesMap[tag2].push("class");
    }
    allowedClassesMap[tag2] = [];
    allowedClassesRegexMap[tag2] = [];
    const globRegex = [];
    classes.forEach(function(obj) {
      if (typeof obj === "string" && obj.indexOf("*") >= 0) {
        globRegex.push(escapeStringRegexp(obj).replace(/\\\*/g, ".*"));
      } else if (obj instanceof RegExp) {
        allowedClassesRegexMap[tag2].push(obj);
      } else {
        allowedClassesMap[tag2].push(obj);
      }
    });
    if (globRegex.length) {
      allowedClassesGlobMap[tag2] = new RegExp("^(" + globRegex.join("|") + ")$");
    }
  });
  const transformTagsMap = {};
  let transformTagsAll;
  each(options2.transformTags, function(transform2, tag2) {
    let transFun;
    if (typeof transform2 === "function") {
      transFun = transform2;
    } else if (typeof transform2 === "string") {
      transFun = sanitizeHtml.simpleTransform(transform2);
    }
    if (tag2 === "*") {
      transformTagsAll = transFun;
    } else {
      transformTagsMap[tag2] = transFun;
    }
  });
  let depth;
  let stack;
  let skipMap;
  let transformMap;
  let skipText;
  let skipTextDepth;
  let addedText = false;
  initializeState();
  const parser2 = new htmlparser.Parser({
    onopentag: function(name, attribs) {
      if (options2.enforceHtmlBoundary && name === "html") {
        initializeState();
      }
      if (skipText) {
        skipTextDepth++;
        return;
      }
      const frame = new Frame(name, attribs);
      stack.push(frame);
      let skip = false;
      const hasText = !!frame.text;
      let transformedTag;
      if (has(transformTagsMap, name)) {
        transformedTag = transformTagsMap[name](name, attribs);
        frame.attribs = attribs = transformedTag.attribs;
        if (transformedTag.text !== void 0) {
          frame.innerText = transformedTag.text;
        }
        if (name !== transformedTag.tagName) {
          frame.name = name = transformedTag.tagName;
          transformMap[depth] = transformedTag.tagName;
        }
      }
      if (transformTagsAll) {
        transformedTag = transformTagsAll(name, attribs);
        frame.attribs = attribs = transformedTag.attribs;
        if (name !== transformedTag.tagName) {
          frame.name = name = transformedTag.tagName;
          transformMap[depth] = transformedTag.tagName;
        }
      }
      if (options2.allowedTags && options2.allowedTags.indexOf(name) === -1 || options2.disallowedTagsMode === "recursiveEscape" && !isEmptyObject(skipMap) || options2.nestingLimit != null && depth >= options2.nestingLimit) {
        skip = true;
        skipMap[depth] = true;
        if (options2.disallowedTagsMode === "discard") {
          if (nonTextTagsArray.indexOf(name) !== -1) {
            skipText = true;
            skipTextDepth = 1;
          }
        }
        skipMap[depth] = true;
      }
      depth++;
      if (skip) {
        if (options2.disallowedTagsMode === "discard") {
          return;
        }
        tempResult = result2;
        result2 = "";
      }
      result2 += "<" + name;
      if (name === "script") {
        if (options2.allowedScriptHostnames || options2.allowedScriptDomains) {
          frame.innerText = "";
        }
      }
      if (!allowedAttributesMap || has(allowedAttributesMap, name) || allowedAttributesMap["*"]) {
        each(attribs, function(value, a2) {
          if (!VALID_HTML_ATTRIBUTE_NAME.test(a2)) {
            delete frame.attribs[a2];
            return;
          }
          let parsed;
          let passedAllowedAttributesMapCheck = false;
          if (!allowedAttributesMap || has(allowedAttributesMap, name) && allowedAttributesMap[name].indexOf(a2) !== -1 || allowedAttributesMap["*"] && allowedAttributesMap["*"].indexOf(a2) !== -1 || has(allowedAttributesGlobMap, name) && allowedAttributesGlobMap[name].test(a2) || allowedAttributesGlobMap["*"] && allowedAttributesGlobMap["*"].test(a2)) {
            passedAllowedAttributesMapCheck = true;
          } else if (allowedAttributesMap && allowedAttributesMap[name]) {
            for (const o3 of allowedAttributesMap[name]) {
              if (isPlainObject(o3) && o3.name && o3.name === a2) {
                passedAllowedAttributesMapCheck = true;
                let newValue = "";
                if (o3.multiple === true) {
                  const splitStrArray = value.split(" ");
                  for (const s of splitStrArray) {
                    if (o3.values.indexOf(s) !== -1) {
                      if (newValue === "") {
                        newValue = s;
                      } else {
                        newValue += " " + s;
                      }
                    }
                  }
                } else if (o3.values.indexOf(value) >= 0) {
                  newValue = value;
                }
                value = newValue;
              }
            }
          }
          if (passedAllowedAttributesMapCheck) {
            if (options2.allowedSchemesAppliedToAttributes.indexOf(a2) !== -1) {
              if (naughtyHref(name, value)) {
                delete frame.attribs[a2];
                return;
              }
            }
            if (name === "script" && a2 === "src") {
              let allowed = true;
              try {
                const parsed2 = new URL(value);
                if (options2.allowedScriptHostnames || options2.allowedScriptDomains) {
                  const allowedHostname = (options2.allowedScriptHostnames || []).find(function(hostname) {
                    return hostname === parsed2.hostname;
                  });
                  const allowedDomain = (options2.allowedScriptDomains || []).find(function(domain) {
                    return parsed2.hostname === domain || parsed2.hostname.endsWith(`.${domain}`);
                  });
                  allowed = allowedHostname || allowedDomain;
                }
              } catch (e) {
                allowed = false;
              }
              if (!allowed) {
                delete frame.attribs[a2];
                return;
              }
            }
            if (name === "iframe" && a2 === "src") {
              let allowed = true;
              try {
                value = value.replace(/^(\w+:)?\s*[\\/]\s*[\\/]/, "$1//");
                if (value.startsWith("relative:")) {
                  throw new Error("relative: exploit attempt");
                }
                let base2 = "relative://relative-site";
                for (let i = 0; i < 100; i++) {
                  base2 += `/${i}`;
                }
                const parsed2 = new URL(value, base2);
                const isRelativeUrl = parsed2 && parsed2.hostname === "relative-site" && parsed2.protocol === "relative:";
                if (isRelativeUrl) {
                  allowed = has(options2, "allowIframeRelativeUrls") ? options2.allowIframeRelativeUrls : !options2.allowedIframeHostnames && !options2.allowedIframeDomains;
                } else if (options2.allowedIframeHostnames || options2.allowedIframeDomains) {
                  const allowedHostname = (options2.allowedIframeHostnames || []).find(function(hostname) {
                    return hostname === parsed2.hostname;
                  });
                  const allowedDomain = (options2.allowedIframeDomains || []).find(function(domain) {
                    return parsed2.hostname === domain || parsed2.hostname.endsWith(`.${domain}`);
                  });
                  allowed = allowedHostname || allowedDomain;
                }
              } catch (e) {
                allowed = false;
              }
              if (!allowed) {
                delete frame.attribs[a2];
                return;
              }
            }
            if (a2 === "srcset") {
              try {
                parsed = parseSrcset(value);
                parsed.forEach(function(value2) {
                  if (naughtyHref("srcset", value2.url)) {
                    value2.evil = true;
                  }
                });
                parsed = filter(parsed, function(v2) {
                  return !v2.evil;
                });
                if (!parsed.length) {
                  delete frame.attribs[a2];
                  return;
                } else {
                  value = stringifySrcset(filter(parsed, function(v2) {
                    return !v2.evil;
                  }));
                  frame.attribs[a2] = value;
                }
              } catch (e) {
                delete frame.attribs[a2];
                return;
              }
            }
            if (a2 === "class") {
              const allowedSpecificClasses = allowedClassesMap[name];
              const allowedWildcardClasses = allowedClassesMap["*"];
              const allowedSpecificClassesGlob = allowedClassesGlobMap[name];
              const allowedSpecificClassesRegex = allowedClassesRegexMap[name];
              const allowedWildcardClassesGlob = allowedClassesGlobMap["*"];
              const allowedClassesGlobs = [
                allowedSpecificClassesGlob,
                allowedWildcardClassesGlob
              ].concat(allowedSpecificClassesRegex).filter(function(t4) {
                return t4;
              });
              if (allowedSpecificClasses && allowedWildcardClasses) {
                value = filterClasses(value, deepmerge(allowedSpecificClasses, allowedWildcardClasses), allowedClassesGlobs);
              } else {
                value = filterClasses(value, allowedSpecificClasses || allowedWildcardClasses, allowedClassesGlobs);
              }
              if (!value.length) {
                delete frame.attribs[a2];
                return;
              }
            }
            if (a2 === "style") {
              try {
                const abstractSyntaxTree = postcssParse(name + " {" + value + "}");
                const filteredAST = filterCss(abstractSyntaxTree, options2.allowedStyles);
                value = stringifyStyleAttributes(filteredAST);
                if (value.length === 0) {
                  delete frame.attribs[a2];
                  return;
                }
              } catch (e) {
                delete frame.attribs[a2];
                return;
              }
            }
            result2 += " " + a2;
            if (value && value.length) {
              result2 += '="' + escapeHtml2(value, true) + '"';
            }
          } else {
            delete frame.attribs[a2];
          }
        });
      }
      if (options2.selfClosing.indexOf(name) !== -1) {
        result2 += " />";
      } else {
        result2 += ">";
        if (frame.innerText && !hasText && !options2.textFilter) {
          result2 += escapeHtml2(frame.innerText);
          addedText = true;
        }
      }
      if (skip) {
        result2 = tempResult + escapeHtml2(result2);
        tempResult = "";
      }
    },
    ontext: function(text3) {
      if (skipText) {
        return;
      }
      const lastFrame = stack[stack.length - 1];
      let tag2;
      if (lastFrame) {
        tag2 = lastFrame.tag;
        text3 = lastFrame.innerText !== void 0 ? lastFrame.innerText : text3;
      }
      if (options2.disallowedTagsMode === "discard" && (tag2 === "script" || tag2 === "style")) {
        result2 += text3;
      } else {
        const escaped = escapeHtml2(text3, false);
        if (options2.textFilter && !addedText) {
          result2 += options2.textFilter(escaped, tag2);
        } else if (!addedText) {
          result2 += escaped;
        }
      }
      if (stack.length) {
        const frame = stack[stack.length - 1];
        frame.text += text3;
      }
    },
    onclosetag: function(name) {
      if (skipText) {
        skipTextDepth--;
        if (!skipTextDepth) {
          skipText = false;
        } else {
          return;
        }
      }
      const frame = stack.pop();
      if (!frame) {
        return;
      }
      skipText = options2.enforceHtmlBoundary ? name === "html" : false;
      depth--;
      const skip = skipMap[depth];
      if (skip) {
        delete skipMap[depth];
        if (options2.disallowedTagsMode === "discard") {
          frame.updateParentNodeText();
          return;
        }
        tempResult = result2;
        result2 = "";
      }
      if (transformMap[depth]) {
        name = transformMap[depth];
        delete transformMap[depth];
      }
      if (options2.exclusiveFilter && options2.exclusiveFilter(frame)) {
        result2 = result2.substr(0, frame.tagPosition);
        return;
      }
      frame.updateParentNodeMediaChildren();
      frame.updateParentNodeText();
      if (options2.selfClosing.indexOf(name) !== -1) {
        if (skip) {
          result2 = tempResult;
          tempResult = "";
        }
        return;
      }
      result2 += "</" + name + ">";
      if (skip) {
        result2 = tempResult + escapeHtml2(result2);
        tempResult = "";
      }
      addedText = false;
    }
  }, options2.parser);
  parser2.write(html);
  parser2.end();
  return result2;
  function initializeState() {
    result2 = "";
    depth = 0;
    stack = [];
    skipMap = {};
    transformMap = {};
    skipText = false;
    skipTextDepth = 0;
  }
  function escapeHtml2(s, quote) {
    if (typeof s !== "string") {
      s = s + "";
    }
    if (options2.parser.decodeEntities) {
      s = s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
      if (quote) {
        s = s.replace(/"/g, "&quot;");
      }
    }
    s = s.replace(/&(?![a-zA-Z0-9#]{1,20};)/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    if (quote) {
      s = s.replace(/"/g, "&quot;");
    }
    return s;
  }
  function naughtyHref(name, href) {
    href = href.replace(/[\x00-\x20]+/g, "");
    href = href.replace(/<!--.*?-->/g, "");
    const matches = href.match(/^([a-zA-Z][a-zA-Z0-9.\-+]*):/);
    if (!matches) {
      if (href.match(/^[/\\]{2}/)) {
        return !options2.allowProtocolRelative;
      }
      return false;
    }
    const scheme = matches[1].toLowerCase();
    if (has(options2.allowedSchemesByTag, name)) {
      return options2.allowedSchemesByTag[name].indexOf(scheme) === -1;
    }
    return !options2.allowedSchemes || options2.allowedSchemes.indexOf(scheme) === -1;
  }
  function filterCss(abstractSyntaxTree, allowedStyles) {
    if (!allowedStyles) {
      return abstractSyntaxTree;
    }
    const astRules = abstractSyntaxTree.nodes[0];
    let selectedRule;
    if (allowedStyles[astRules.selector] && allowedStyles["*"]) {
      selectedRule = deepmerge(
        allowedStyles[astRules.selector],
        allowedStyles["*"]
      );
    } else {
      selectedRule = allowedStyles[astRules.selector] || allowedStyles["*"];
    }
    if (selectedRule) {
      abstractSyntaxTree.nodes[0].nodes = astRules.nodes.reduce(filterDeclarations(selectedRule), []);
    }
    return abstractSyntaxTree;
  }
  function stringifyStyleAttributes(filteredAST) {
    return filteredAST.nodes[0].nodes.reduce(function(extractedAttributes, attrObject) {
      extractedAttributes.push(
        `${attrObject.prop}:${attrObject.value}${attrObject.important ? " !important" : ""}`
      );
      return extractedAttributes;
    }, []).join(";");
  }
  function filterDeclarations(selectedRule) {
    return function(allowedDeclarationsList, attributeObject) {
      if (has(selectedRule, attributeObject.prop)) {
        const matchesRegex = selectedRule[attributeObject.prop].some(function(regularExpression) {
          return regularExpression.test(attributeObject.value);
        });
        if (matchesRegex) {
          allowedDeclarationsList.push(attributeObject);
        }
      }
      return allowedDeclarationsList;
    };
  }
  function filterClasses(classes, allowed, allowedGlobs) {
    if (!allowed) {
      return classes;
    }
    classes = classes.split(/\s+/);
    return classes.filter(function(clss) {
      return allowed.indexOf(clss) !== -1 || allowedGlobs.some(function(glob) {
        return glob.test(clss);
      });
    }).join(" ");
  }
}
const htmlParserDefaults = {
  decodeEntities: true
};
sanitizeHtml.defaults = {
  allowedTags: [
    "address",
    "article",
    "aside",
    "footer",
    "header",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "hgroup",
    "main",
    "nav",
    "section",
    "blockquote",
    "dd",
    "div",
    "dl",
    "dt",
    "figcaption",
    "figure",
    "hr",
    "li",
    "main",
    "ol",
    "p",
    "pre",
    "ul",
    "a",
    "abbr",
    "b",
    "bdi",
    "bdo",
    "br",
    "cite",
    "code",
    "data",
    "dfn",
    "em",
    "i",
    "kbd",
    "mark",
    "q",
    "rb",
    "rp",
    "rt",
    "rtc",
    "ruby",
    "s",
    "samp",
    "small",
    "span",
    "strong",
    "sub",
    "sup",
    "time",
    "u",
    "var",
    "wbr",
    "caption",
    "col",
    "colgroup",
    "table",
    "tbody",
    "td",
    "tfoot",
    "th",
    "thead",
    "tr"
  ],
  disallowedTagsMode: "discard",
  allowedAttributes: {
    a: ["href", "name", "target"],
    img: ["src", "srcset", "alt", "title", "width", "height", "loading"]
  },
  selfClosing: ["img", "br", "hr", "area", "base", "basefont", "input", "link", "meta"],
  allowedSchemes: ["http", "https", "ftp", "mailto", "tel"],
  allowedSchemesByTag: {},
  allowedSchemesAppliedToAttributes: ["href", "src", "cite"],
  allowProtocolRelative: true,
  enforceHtmlBoundary: false
};
sanitizeHtml.simpleTransform = function(newTagName, newAttribs, merge2) {
  merge2 = merge2 === void 0 ? true : merge2;
  newAttribs = newAttribs || {};
  return function(tagName, attribs) {
    let attrib;
    if (merge2) {
      for (attrib in newAttribs) {
        attribs[attrib] = newAttribs[attrib];
      }
    } else {
      attribs = newAttribs;
    }
    return {
      tagName: newTagName,
      attribs
    };
  };
};
var sanitizeHtml$1 = sanitizeHtml_1;
var Locale = {
  methods: {
    t(...args) {
      return t2.apply(this, args);
    }
  }
};
function uid(baseId) {
  return `${baseId ? `${baseId}-` : ""}${Math.random().toString(36).substring(2, 11)}`;
}
var _sfc_main$c = Vue.extend({
  name: "n8n-notice",
  directives: {},
  mixins: [
    Locale
  ],
  props: {
    id: {
      type: String,
      default: () => uid("notice")
    },
    theme: {
      type: String,
      default: "warning"
    },
    content: {
      type: String,
      default: ""
    },
    fullContent: {
      type: String,
      default: ""
    }
  },
  components: {
    N8nText
  },
  data() {
    return {
      showFullContent: false
    };
  },
  computed: {
    classes() {
      return [
        "notice",
        this.$style.notice,
        this.$style[this.theme]
      ];
    },
    canTruncate() {
      return this.fullContent !== void 0;
    }
  },
  methods: {
    toggleExpanded() {
      this.showFullContent = !this.showFullContent;
    },
    sanitizeHtml(text3) {
      return sanitizeHtml$1(
        text3,
        {
          allowedAttributes: { a: ["data-key", "href", "target"] }
        }
      );
    },
    onClick(event) {
      if (!(event.target instanceof HTMLElement))
        return;
      if (event.target.localName !== "a")
        return;
      if (event.target.dataset && event.target.dataset.key) {
        event.stopPropagation();
        event.preventDefault();
        if (event.target.dataset.key === "show-less") {
          this.showFullContent = false;
        } else if (this.canTruncate && event.target.dataset.key === "toggle-expand") {
          this.showFullContent = !this.showFullContent;
        } else {
          this.$emit("action", event.target.dataset.key);
        }
      }
    }
  }
});
const notice = "_notice_e2gnm_1";
const warning = "_warning_e2gnm_18";
const danger = "_danger_e2gnm_23";
const success = "_success_e2gnm_28";
const info = "_info_e2gnm_33";
const expanded = "_expanded_e2gnm_38";
const truncated = "_truncated_e2gnm_43";
var style0$c = {
  notice,
  warning,
  danger,
  success,
  info,
  expanded,
  truncated
};
var _sfc_render$d = function render37() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: _vm.classes, attrs: { "id": _vm.id, "role": "alert" }, on: { "click": _vm.onClick } }, [_c("div", { staticClass: "notice-content" }, [_c("n8n-text", { attrs: { "size": "small", "compact": true } }, [_vm._t("default", function() {
    return [_c("span", { class: _vm.showFullContent ? _vm.$style["expanded"] : _vm.$style["truncated"], attrs: { "id": `${_vm.id}-content`, "role": "region" }, domProps: { "innerHTML": _vm._s(_vm.sanitizeHtml(_vm.showFullContent ? _vm.fullContent : _vm.content)) } })];
  })], 2)], 1)]);
};
var _sfc_staticRenderFns$d = [];
const __cssModules$c = {
  "$style": style0$c
};
function _sfc_injectStyles$c(ctx2) {
  for (var key2 in __cssModules$c) {
    this[key2] = __cssModules$c[key2];
  }
}
var __component__$d = /* @__PURE__ */ normalizeComponent(
  _sfc_main$c,
  _sfc_render$d,
  _sfc_staticRenderFns$d,
  false,
  _sfc_injectStyles$c,
  null,
  null,
  null
);
var N8nNotice = __component__$d.exports;
var popover = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 77);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    2: function(module2, exports) {
      module2.exports = dom;
    },
    3: function(module2, exports) {
      module2.exports = util$2;
    },
    5: function(module2, exports) {
      module2.exports = vuePopper;
    },
    7: function(module2, exports) {
      module2.exports = Vue;
    },
    77: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "span",
          [
            _c(
              "transition",
              {
                attrs: { name: _vm.transition },
                on: {
                  "after-enter": _vm.handleAfterEnter,
                  "after-leave": _vm.handleAfterLeave
                }
              },
              [
                _c(
                  "div",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: !_vm.disabled && _vm.showPopper,
                        expression: "!disabled && showPopper"
                      }
                    ],
                    ref: "popper",
                    staticClass: "el-popover el-popper",
                    class: [_vm.popperClass, _vm.content && "el-popover--plain"],
                    style: { width: _vm.width + "px" },
                    attrs: {
                      role: "tooltip",
                      id: _vm.tooltipId,
                      "aria-hidden": _vm.disabled || !_vm.showPopper ? "true" : "false"
                    }
                  },
                  [
                    _vm.title ? _c("div", {
                      staticClass: "el-popover__title",
                      domProps: { textContent: _vm._s(_vm.title) }
                    }) : _vm._e(),
                    _vm._t("default", [_vm._v(_vm._s(_vm.content))])
                  ],
                  2
                )
              ]
            ),
            _c(
              "span",
              { ref: "wrapper", staticClass: "el-popover__reference-wrapper" },
              [_vm._t("reference")],
              2
            )
          ],
          1
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var dom_ = __webpack_require__(2);
      var util_ = __webpack_require__(3);
      var mainvue_type_script_lang_js_ = {
        name: "ElPopover",
        mixins: [vue_popper_default.a],
        props: {
          trigger: {
            type: String,
            default: "click",
            validator: function validator5(value) {
              return ["click", "focus", "hover", "manual"].indexOf(value) > -1;
            }
          },
          openDelay: {
            type: Number,
            default: 0
          },
          closeDelay: {
            type: Number,
            default: 200
          },
          title: String,
          disabled: Boolean,
          content: String,
          reference: {},
          popperClass: String,
          width: {},
          visibleArrow: {
            default: true
          },
          arrowOffset: {
            type: Number,
            default: 0
          },
          transition: {
            type: String,
            default: "fade-in-linear"
          },
          tabindex: {
            type: Number,
            default: 0
          }
        },
        computed: {
          tooltipId: function tooltipId() {
            return "el-popover-" + Object(util_["generateId"])();
          }
        },
        watch: {
          showPopper: function showPopper2(val) {
            if (this.disabled) {
              return;
            }
            val ? this.$emit("show") : this.$emit("hide");
          }
        },
        mounted: function mounted2() {
          var _this = this;
          var reference3 = this.referenceElm = this.reference || this.$refs.reference;
          var popper2 = this.popper || this.$refs.popper;
          if (!reference3 && this.$refs.wrapper.children) {
            reference3 = this.referenceElm = this.$refs.wrapper.children[0];
          }
          if (reference3) {
            Object(dom_["addClass"])(reference3, "el-popover__reference");
            reference3.setAttribute("aria-describedby", this.tooltipId);
            reference3.setAttribute("tabindex", this.tabindex);
            popper2.setAttribute("tabindex", 0);
            if (this.trigger !== "click") {
              Object(dom_["on"])(reference3, "focusin", function() {
                _this.handleFocus();
                var instance = reference3.__vue__;
                if (instance && typeof instance.focus === "function") {
                  instance.focus();
                }
              });
              Object(dom_["on"])(popper2, "focusin", this.handleFocus);
              Object(dom_["on"])(reference3, "focusout", this.handleBlur);
              Object(dom_["on"])(popper2, "focusout", this.handleBlur);
            }
            Object(dom_["on"])(reference3, "keydown", this.handleKeydown);
            Object(dom_["on"])(reference3, "click", this.handleClick);
          }
          if (this.trigger === "click") {
            Object(dom_["on"])(reference3, "click", this.doToggle);
            Object(dom_["on"])(document, "click", this.handleDocumentClick);
          } else if (this.trigger === "hover") {
            Object(dom_["on"])(reference3, "mouseenter", this.handleMouseEnter);
            Object(dom_["on"])(popper2, "mouseenter", this.handleMouseEnter);
            Object(dom_["on"])(reference3, "mouseleave", this.handleMouseLeave);
            Object(dom_["on"])(popper2, "mouseleave", this.handleMouseLeave);
          } else if (this.trigger === "focus") {
            if (this.tabindex < 0) {
              console.warn("[Element Warn][Popover]a negative taindex means that the element cannot be focused by tab key");
            }
            if (reference3.querySelector("input, textarea")) {
              Object(dom_["on"])(reference3, "focusin", this.doShow);
              Object(dom_["on"])(reference3, "focusout", this.doClose);
            } else {
              Object(dom_["on"])(reference3, "mousedown", this.doShow);
              Object(dom_["on"])(reference3, "mouseup", this.doClose);
            }
          }
        },
        beforeDestroy: function beforeDestroy3() {
          this.cleanup();
        },
        deactivated: function deactivated2() {
          this.cleanup();
        },
        methods: {
          doToggle: function doToggle() {
            this.showPopper = !this.showPopper;
          },
          doShow: function doShow() {
            this.showPopper = true;
          },
          doClose: function doClose2() {
            this.showPopper = false;
          },
          handleFocus: function handleFocus() {
            Object(dom_["addClass"])(this.referenceElm, "focusing");
            if (this.trigger === "click" || this.trigger === "focus")
              this.showPopper = true;
          },
          handleClick: function handleClick() {
            Object(dom_["removeClass"])(this.referenceElm, "focusing");
          },
          handleBlur: function handleBlur() {
            Object(dom_["removeClass"])(this.referenceElm, "focusing");
            if (this.trigger === "click" || this.trigger === "focus")
              this.showPopper = false;
          },
          handleMouseEnter: function handleMouseEnter() {
            var _this2 = this;
            clearTimeout(this._timer);
            if (this.openDelay) {
              this._timer = setTimeout(function() {
                _this2.showPopper = true;
              }, this.openDelay);
            } else {
              this.showPopper = true;
            }
          },
          handleKeydown: function handleKeydown(ev) {
            if (ev.keyCode === 27 && this.trigger !== "manual") {
              this.doClose();
            }
          },
          handleMouseLeave: function handleMouseLeave() {
            var _this3 = this;
            clearTimeout(this._timer);
            if (this.closeDelay) {
              this._timer = setTimeout(function() {
                _this3.showPopper = false;
              }, this.closeDelay);
            } else {
              this.showPopper = false;
            }
          },
          handleDocumentClick: function handleDocumentClick(e) {
            var reference3 = this.reference || this.$refs.reference;
            var popper2 = this.popper || this.$refs.popper;
            if (!reference3 && this.$refs.wrapper.children) {
              reference3 = this.referenceElm = this.$refs.wrapper.children[0];
            }
            if (!this.$el || !reference3 || this.$el.contains(e.target) || reference3.contains(e.target) || !popper2 || popper2.contains(e.target))
              return;
            this.showPopper = false;
          },
          handleAfterEnter: function handleAfterEnter() {
            this.$emit("after-enter");
          },
          handleAfterLeave: function handleAfterLeave() {
            this.$emit("after-leave");
            this.doDestroy();
          },
          cleanup: function cleanup() {
            if (this.openDelay || this.closeDelay) {
              clearTimeout(this._timer);
            }
          }
        },
        destroyed: function destroyed() {
          var reference3 = this.reference;
          Object(dom_["off"])(reference3, "click", this.doToggle);
          Object(dom_["off"])(reference3, "mouseup", this.doClose);
          Object(dom_["off"])(reference3, "mousedown", this.doShow);
          Object(dom_["off"])(reference3, "focusin", this.doShow);
          Object(dom_["off"])(reference3, "focusout", this.doClose);
          Object(dom_["off"])(reference3, "mousedown", this.doShow);
          Object(dom_["off"])(reference3, "mouseup", this.doClose);
          Object(dom_["off"])(reference3, "mouseleave", this.handleMouseLeave);
          Object(dom_["off"])(reference3, "mouseenter", this.handleMouseEnter);
          Object(dom_["off"])(document, "click", this.handleDocumentClick);
        }
      };
      var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_mainvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/popover/src/main.vue";
      var main = component.exports;
      var getReference = function getReference2(el2, binding, vnode) {
        var _ref2 = binding.expression ? binding.value : binding.arg;
        var popper2 = vnode.context.$refs[_ref2];
        if (popper2) {
          if (Array.isArray(popper2)) {
            popper2[0].$refs.reference = el2;
          } else {
            popper2.$refs.reference = el2;
          }
        }
      };
      var directive = {
        bind: function bind2(el2, binding, vnode) {
          getReference(el2, binding, vnode);
        },
        inserted: function inserted(el2, binding, vnode) {
          getReference(el2, binding, vnode);
        }
      };
      var external_vue_ = __webpack_require__(7);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      external_vue_default.a.directive("popover", directive);
      main.install = function(Vue2) {
        Vue2.directive("popover", directive);
        Vue2.component(main.name, main);
      };
      main.directive = directive;
      __webpack_exports__["default"] = main;
    }
  });
})(popover);
var ElPopover = /* @__PURE__ */ getDefaultExportFromCjs(popover.exports);
ElPopover.name = "n8n-popover";
const _sfc_render$c = null;
const _sfc_staticRenderFns$c = null;
var __component__$c = /* @__PURE__ */ normalizeComponent(
  ElPopover,
  _sfc_render$c,
  _sfc_staticRenderFns$c,
  false,
  null,
  null,
  null,
  null
);
var N8nPopover = __component__$c.exports;
const pulseContainer = "_pulseContainer_10nxt_1";
const pulse = "_pulse_10nxt_1";
const pulse2 = "_pulse2_10nxt_17";
var style0$b = {
  pulseContainer,
  pulse,
  pulse2
};
const _sfc_main$b = Vue.extend({
  name: "n8n-pulse"
});
var _sfc_render$b = function render38() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: ["pulse", _vm.$style.pulseContainer] }, [_c("div", { class: _vm.$style.pulse }, [_c("div", { class: _vm.$style.pulse2 }, [_vm._t("default")], 2)])]);
};
var _sfc_staticRenderFns$b = [];
const __cssModules$b = {
  "$style": style0$b
};
function _sfc_injectStyles$b(ctx2) {
  for (var key2 in __cssModules$b) {
    this[key2] = __cssModules$b[key2];
  }
}
var __component__$b = /* @__PURE__ */ normalizeComponent(
  _sfc_main$b,
  _sfc_render$b,
  _sfc_staticRenderFns$b,
  false,
  _sfc_injectStyles$b,
  null,
  null,
  null
);
var N8nPulse = __component__$b.exports;
var _sfc_main$a = Vue.extend({
  name: "n8n-radio-button",
  props: {
    label: {
      type: String,
      required: true
    },
    value: {
      type: String,
      required: true
    },
    active: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["small", "medium"].includes(value)
    },
    disabled: {
      type: Boolean
    }
  }
});
const container$3 = "_container_1ine6_1";
const hoverable = "_hoverable_1ine6_7";
const button$1 = "_button_1ine6_7";
const active = "_active_1ine6_7";
const input = "_input_1ine6_11";
const disabled$2 = "_disabled_1ine6_30";
const medium = "_medium_1ine6_34";
const small = "_small_1ine6_40";
var style0$a = {
  container: container$3,
  hoverable,
  button: button$1,
  active,
  input,
  disabled: disabled$2,
  medium,
  small
};
var _sfc_render$a = function render39() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("label", { class: { "n8n-radio-button": true, [_vm.$style.container]: true, [_vm.$style.hoverable]: !this.disabled }, attrs: { "role": "radio", "tabindex": "-1", "aria-checked": "true" } }, [_c("input", { class: _vm.$style.input, attrs: { "type": "radio", "tabindex": "-1", "autocomplete": "off" }, domProps: { "value": _vm.value } }), _c("div", { class: { [_vm.$style.button]: true, [_vm.$style.active]: _vm.active, [_vm.$style[_vm.size]]: true, [_vm.$style.disabled]: _vm.disabled }, on: { "click": function($event) {
    return _vm.$emit("click");
  } } }, [_vm._v(_vm._s(_vm.label))])]);
};
var _sfc_staticRenderFns$a = [];
const __cssModules$a = {
  "$style": style0$a
};
function _sfc_injectStyles$a(ctx2) {
  for (var key2 in __cssModules$a) {
    this[key2] = __cssModules$a[key2];
  }
}
var __component__$a = /* @__PURE__ */ normalizeComponent(
  _sfc_main$a,
  _sfc_render$a,
  _sfc_staticRenderFns$a,
  false,
  _sfc_injectStyles$a,
  null,
  null,
  null
);
var RadioButton$1 = __component__$a.exports;
var _sfc_main$9 = Vue.extend({
  name: "n8n-radio-buttons",
  props: {
    value: {
      type: String
    },
    options: {},
    size: {
      type: String
    },
    disabled: {
      type: Boolean
    }
  },
  components: {
    RadioButton: RadioButton$1
  },
  methods: {
    onClick(option2) {
      if (this.disabled || option2.disabled) {
        return;
      }
      this.$emit("input", option2.value);
    }
  }
});
const radioGroup$1 = "_radioGroup_jiseo_1";
const disabled$1 = "_disabled_jiseo_11";
var style0$9 = {
  radioGroup: radioGroup$1,
  disabled: disabled$1
};
var _sfc_render$9 = function render40() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: { "n8n-radio-buttons": true, [_vm.$style.radioGroup]: true, [_vm.$style.disabled]: _vm.disabled }, attrs: { "role": "radiogroup" } }, _vm._l(_vm.options, function(option2) {
    return _c("RadioButton", _vm._b({ key: option2.value, attrs: { "active": _vm.value === option2.value, "size": _vm.size, "disabled": _vm.disabled || option2.disabled }, on: { "click": (e) => _vm.onClick(option2, e) } }, "RadioButton", option2, false));
  }), 1);
};
var _sfc_staticRenderFns$9 = [];
const __cssModules$9 = {
  "$style": style0$9
};
function _sfc_injectStyles$9(ctx2) {
  for (var key2 in __cssModules$9) {
    this[key2] = __cssModules$9[key2];
  }
}
var __component__$9 = /* @__PURE__ */ normalizeComponent(
  _sfc_main$9,
  _sfc_render$9,
  _sfc_staticRenderFns$9,
  false,
  _sfc_injectStyles$9,
  null,
  null,
  null
);
var N8nRadioButtons = __component__$9.exports;
function closestNumber(value, divisor) {
  const q = value / divisor;
  const n1 = divisor * q;
  const n2 = value * divisor > 0 ? divisor * (q + 1) : divisor * (q - 1);
  if (Math.abs(value - n1) < Math.abs(value - n2))
    return n1;
  return n2;
}
function getSize(min, virtual, gridSize) {
  const target2 = closestNumber(virtual, gridSize);
  if (target2 >= min && virtual > 0) {
    return target2;
  }
  return min;
}
const directionsCursorMaps = {
  right: "ew-resize",
  top: "ns-resize",
  bottom: "ns-resize",
  left: "ew-resize",
  topLeft: "nw-resize",
  topRight: "ne-resize",
  bottomLeft: "sw-resize",
  bottomRight: "se-resize"
};
var _sfc_main$8 = Vue.extend({
  name: "n8n-resize",
  props: {
    isResizingEnabled: {
      type: Boolean,
      default: true
    },
    height: {
      type: Number
    },
    width: {
      type: Number
    },
    minHeight: {
      type: Number
    },
    minWidth: {
      type: Number
    },
    scale: {
      type: Number,
      default: 1
    },
    gridSize: {
      type: Number
    },
    supportedDirections: {
      type: Array,
      default: () => []
    }
  },
  data() {
    return {
      directionsCursorMaps,
      dir: "",
      dHeight: 0,
      dWidth: 0,
      vHeight: 0,
      vWidth: 0,
      x: 0,
      y: 0
    };
  },
  computed: {
    enabledDirections() {
      const availableDirections = Object.keys(directionsCursorMaps);
      if (!this.isResizingEnabled)
        return [];
      if (this.supportedDirections.length === 0)
        return availableDirections;
      return this.supportedDirections;
    }
  },
  methods: {
    resizerMove(event) {
      event.preventDefault();
      event.stopPropagation();
      const targetResizer = event.target;
      if (targetResizer) {
        this.dir = targetResizer.dataset.dir.toLocaleLowerCase();
      }
      document.body.style.cursor = directionsCursorMaps[this.dir];
      this.x = event.pageX;
      this.y = event.pageY;
      this.dWidth = 0;
      this.dHeight = 0;
      this.vHeight = this.height;
      this.vWidth = this.width;
      window.addEventListener("mousemove", this.mouseMove);
      window.addEventListener("mouseup", this.mouseUp);
      this.$emit("resizestart");
    },
    mouseMove(event) {
      event.preventDefault();
      event.stopPropagation();
      let dWidth = 0;
      let dHeight = 0;
      let top2 = false;
      let left2 = false;
      if (this.dir.includes("right")) {
        dWidth = event.pageX - this.x;
      }
      if (this.dir.includes("left")) {
        dWidth = this.x - event.pageX;
        left2 = true;
      }
      if (this.dir.includes("top")) {
        dHeight = this.y - event.pageY;
        top2 = true;
      }
      if (this.dir.includes("bottom")) {
        dHeight = event.pageY - this.y;
      }
      const deltaWidth = (dWidth - this.dWidth) / this.scale;
      const deltaHeight = (dHeight - this.dHeight) / this.scale;
      this.vHeight = this.vHeight + deltaHeight;
      this.vWidth = this.vWidth + deltaWidth;
      const height = getSize(this.minHeight, this.vHeight, this.gridSize);
      const width = getSize(this.minWidth, this.vWidth, this.gridSize);
      const dX = left2 && width !== this.width ? -1 * (width - this.width) : 0;
      const dY = top2 && height !== this.height ? -1 * (height - this.height) : 0;
      const x2 = event.x;
      const y = event.y;
      const direction = this.dir;
      this.$emit("resize", { height, width, dX, dY, x: x2, y, direction });
      this.dHeight = dHeight;
      this.dWidth = dWidth;
    },
    mouseUp(event) {
      event.preventDefault();
      event.stopPropagation();
      this.$emit("resizeend");
      window.removeEventListener("mousemove", this.mouseMove);
      window.removeEventListener("mouseup", this.mouseUp);
      document.body.style.cursor = "unset";
      this.dir = "";
    }
  }
});
const resize = "_resize_87i2j_1";
const resizer = "_resizer_87i2j_8";
const right = "_right_87i2j_13";
const top = "_top_87i2j_21";
const bottom = "_bottom_87i2j_29";
const left = "_left_87i2j_37";
const topLeft = "_topLeft_87i2j_45";
const topRight = "_topRight_87i2j_53";
const bottomLeft = "_bottomLeft_87i2j_61";
const bottomRight = "_bottomRight_87i2j_69";
var style0$8 = {
  resize,
  resizer,
  right,
  top,
  bottom,
  left,
  topLeft,
  topRight,
  bottomLeft,
  bottomRight
};
var _sfc_render$8 = function render41() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: _vm.$style.resize }, [_vm._l(_vm.enabledDirections, function(direction) {
    return _c("div", { key: direction, class: [_vm.$style.resizer, _vm.$style[direction]], attrs: { "data-dir": direction }, on: { "mousedown": _vm.resizerMove } });
  }), _vm._t("default")], 2);
};
var _sfc_staticRenderFns$8 = [];
const __cssModules$8 = {
  "$style": style0$8
};
function _sfc_injectStyles$8(ctx2) {
  for (var key2 in __cssModules$8) {
    this[key2] = __cssModules$8[key2];
  }
}
var __component__$8 = /* @__PURE__ */ normalizeComponent(
  _sfc_main$8,
  _sfc_render$8,
  _sfc_staticRenderFns$8,
  false,
  _sfc_injectStyles$8,
  null,
  null,
  null
);
var ResizeWrapper = __component__$8.exports;
function mixins() {
  var mixins2 = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    mixins2[_i] = arguments[_i];
  }
  return Vue.extend({ mixins: mixins2 });
}
var _sfc_main$7 = mixins(Locale).extend({
  name: "n8n-sticky",
  props: {
    content: {
      type: String
    },
    height: {
      type: Number,
      default: 180
    },
    width: {
      type: Number,
      default: 240
    },
    minHeight: {
      type: Number,
      default: 80
    },
    minWidth: {
      type: Number,
      default: 150
    },
    scale: {
      type: Number,
      default: 1
    },
    gridSize: {
      type: Number,
      default: 20
    },
    id: {
      type: String,
      default: "0"
    },
    defaultText: {
      type: String
    },
    editMode: {
      type: Boolean,
      default: false
    },
    readOnly: {
      type: Boolean,
      default: false
    }
  },
  components: {
    N8nInput,
    N8nMarkdown,
    N8nResizeWrapper: ResizeWrapper,
    N8nText
  },
  data() {
    return {
      isResizing: false
    };
  },
  computed: {
    resHeight() {
      if (this.height < this.minHeight) {
        return this.minHeight;
      }
      return this.height;
    },
    resWidth() {
      if (this.width < this.minWidth) {
        return this.minWidth;
      }
      return this.width;
    },
    styles() {
      return {
        height: `${this.resHeight}px`,
        width: `${this.resWidth}px`
      };
    },
    shouldShowFooter() {
      return this.resHeight > 100 && this.resWidth > 155;
    }
  },
  methods: {
    onDoubleClick() {
      if (!this.readOnly) {
        this.$emit("edit", true);
      }
    },
    onInputBlur() {
      if (!this.isResizing) {
        this.$emit("edit", false);
      }
    },
    onInput(value) {
      this.$emit("input", value);
    },
    onMarkdownClick(link3, event) {
      this.$emit("markdown-click", link3, event);
    },
    onResize(values) {
      this.$emit("resize", values);
    },
    onResizeEnd(resizeEnd) {
      this.isResizing = false;
      this.$emit("resizeend", resizeEnd);
    },
    onResizeStart() {
      this.isResizing = true;
      this.$emit("resizestart");
    }
  },
  watch: {
    editMode(newMode, prevMode) {
      setTimeout(() => {
        if (newMode && !prevMode && this.$refs.input) {
          const textarea = this.$refs.input;
          if (this.defaultText === this.content) {
            textarea.select();
          }
          textarea.focus();
        }
      }, 100);
    }
  }
});
const sticky = "_sticky_11l71_1";
const clickable = "_clickable_11l71_8";
const wrapper = "_wrapper_11l71_12";
const footer = "_footer_11l71_30";
var style0$7 = {
  sticky,
  clickable,
  wrapper,
  footer
};
var Sticky_vue_vue_type_style_index_1_lang = "";
var _sfc_render$7 = function render42() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: { "n8n-sticky": true, [_vm.$style.sticky]: true, [_vm.$style.clickable]: !_vm.isResizing }, style: _vm.styles, on: { "keydown": function($event) {
    $event.preventDefault();
  } } }, [_c("n8n-resize-wrapper", { attrs: { "isResizingEnabled": !_vm.readOnly, "height": _vm.height, "width": _vm.width, "minHeight": _vm.minHeight, "minWidth": _vm.minWidth, "scale": _vm.scale, "gridSize": _vm.gridSize }, on: { "resizeend": _vm.onResizeEnd, "resize": _vm.onResize, "resizestart": _vm.onResizeStart } }, [[_c("div", { directives: [{ name: "show", rawName: "v-show", value: !_vm.editMode, expression: "!editMode" }], staticClass: "ph-no-capture", class: _vm.$style.wrapper, on: { "dblclick": function($event) {
    $event.stopPropagation();
    return _vm.onDoubleClick.apply(null, arguments);
  } } }, [_c("n8n-markdown", { attrs: { "theme": "sticky", "content": _vm.content, "withMultiBreaks": true }, on: { "markdown-click": _vm.onMarkdownClick } })], 1), _c("div", { directives: [{ name: "show", rawName: "v-show", value: _vm.editMode, expression: "editMode" }], staticClass: "sticky-textarea ph-no-capture", class: { "full-height": !_vm.shouldShowFooter }, on: { "click": function($event) {
    $event.stopPropagation();
  }, "mousedown": function($event) {
    $event.stopPropagation();
  }, "mouseup": function($event) {
    $event.stopPropagation();
  }, "keydown": [function($event) {
    if (!$event.type.indexOf("key") && _vm._k($event.keyCode, "esc", 27, $event.key, ["Esc", "Escape"]))
      return null;
    return _vm.onInputBlur.apply(null, arguments);
  }, function($event) {
    $event.stopPropagation();
  }], "wheel": function($event) {
    $event.stopPropagation();
  } } }, [_c("n8n-input", { ref: "input", attrs: { "value": _vm.content, "type": "textarea", "rows": 5 }, on: { "blur": _vm.onInputBlur, "input": _vm.onInput } })], 1), _vm.editMode && _vm.shouldShowFooter ? _c("div", { class: _vm.$style.footer }, [_c("n8n-text", { attrs: { "size": "xsmall", "aligh": "right" } }, [_c("span", { domProps: { "innerHTML": _vm._s(_vm.t("sticky.markdownHint")) } })])], 1) : _vm._e()]], 2)], 1);
};
var _sfc_staticRenderFns$7 = [];
const __cssModules$7 = {
  "$style": style0$7
};
function _sfc_injectStyles$7(ctx2) {
  for (var key2 in __cssModules$7) {
    this[key2] = __cssModules$7[key2];
  }
}
var __component__$7 = /* @__PURE__ */ normalizeComponent(
  _sfc_main$7,
  _sfc_render$7,
  _sfc_staticRenderFns$7,
  false,
  _sfc_injectStyles$7,
  null,
  null,
  null
);
var Sticky = __component__$7.exports;
var _sfc_main$6 = Vue.extend({
  name: "N8nTabs",
  components: {
    N8nIcon
  },
  mounted() {
    const container2 = this.$refs.tabs;
    if (container2) {
      container2.addEventListener("scroll", (event) => {
        const width2 = container2.clientWidth;
        const scrollWidth2 = container2.scrollWidth;
        this.scrollPosition = event.srcElement.scrollLeft;
        this.canScrollRight = scrollWidth2 - width2 > this.scrollPosition;
      });
      this.resizeObserver = new ResizeObserver(() => {
        const width2 = container2.clientWidth;
        const scrollWidth2 = container2.scrollWidth;
        this.canScrollRight = scrollWidth2 - width2 > this.scrollPosition;
      });
      this.resizeObserver.observe(container2);
      const width = container2.clientWidth;
      const scrollWidth = container2.scrollWidth;
      this.canScrollRight = scrollWidth - width > this.scrollPosition;
    }
  },
  destroyed() {
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }
  },
  data() {
    return {
      scrollPosition: 0,
      canScrollRight: false,
      resizeObserver: null
    };
  },
  props: {
    value: {},
    options: {}
  },
  methods: {
    handleTooltipClick(tab2, event) {
      this.$emit("tooltipClick", tab2, event);
    },
    handleTabClick(tab2) {
      this.$emit("input", tab2);
    },
    scrollLeft() {
      this.scroll(-50);
    },
    scrollRight() {
      this.scroll(50);
    },
    scroll(left2) {
      const container2 = this.$refs.tabs;
      if (container2) {
        container2.scrollBy({ left: left2, top: 0, behavior: "smooth" });
      }
    }
  }
});
const container$2 = "_container_1ekfh_1";
const tabs$1 = "_tabs_1ekfh_8";
const tab = "_tab_1ekfh_8";
const activeTab = "_activeTab_1ekfh_36";
const alignRight = "_alignRight_1ekfh_41";
const link2 = "_link_1ekfh_45";
const external = "_external_1ekfh_52";
const button = "_button_1ekfh_60";
const back = "_back_1ekfh_71 _tab_1ekfh_8 _button_1ekfh_60";
const next = "_next_1ekfh_77 _tab_1ekfh_8 _button_1ekfh_60";
var style0$6 = {
  container: container$2,
  tabs: tabs$1,
  tab,
  activeTab,
  alignRight,
  link: link2,
  external,
  button,
  back,
  next
};
var _sfc_render$6 = function render43() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: ["n8n-tabs", _vm.$style.container] }, [_vm.scrollPosition > 0 ? _c("div", { class: _vm.$style.back, on: { "click": _vm.scrollLeft } }, [_c("n8n-icon", { attrs: { "icon": "chevron-left", "size": "small" } })], 1) : _vm._e(), _vm.canScrollRight ? _c("div", { class: _vm.$style.next, on: { "click": _vm.scrollRight } }, [_c("n8n-icon", { attrs: { "icon": "chevron-right", "size": "small" } })], 1) : _vm._e(), _c("div", { ref: "tabs", class: _vm.$style.tabs }, _vm._l(_vm.options, function(option2) {
    return _c("div", { key: option2.value, class: { [_vm.$style.alignRight]: option2.align === "right" }, attrs: { "id": option2.value } }, [_c("n8n-tooltip", { attrs: { "disabled": !option2.tooltip, "placement": "bottom" } }, [_c("div", { attrs: { "slot": "content" }, domProps: { "innerHTML": _vm._s(option2.tooltip) }, on: { "click": function($event) {
      return _vm.handleTooltipClick(option2.value, $event);
    } }, slot: "content" }), option2.href ? _c("a", { class: [_vm.$style.link, _vm.$style.tab], attrs: { "target": "_blank", "href": option2.href }, on: { "click": () => _vm.handleTabClick(option2.value) } }, [_c("div", [_vm._v(" " + _vm._s(option2.label) + " "), _c("span", { class: _vm.$style.external }, [_c("n8n-icon", { attrs: { "icon": "external-link-alt", "size": "small" } })], 1)])]) : _c("div", { class: { [_vm.$style.tab]: true, [_vm.$style.activeTab]: _vm.value === option2.value }, on: { "click": () => _vm.handleTabClick(option2.value) } }, [option2.icon ? _c("n8n-icon", { attrs: { "icon": option2.icon, "size": "medium" } }) : _vm._e(), option2.label ? _c("span", [_vm._v(_vm._s(option2.label))]) : _vm._e()], 1)])], 1);
  }), 0)]);
};
var _sfc_staticRenderFns$6 = [];
const __cssModules$6 = {
  "$style": style0$6
};
function _sfc_injectStyles$6(ctx2) {
  for (var key2 in __cssModules$6) {
    this[key2] = __cssModules$6[key2];
  }
}
var __component__$6 = /* @__PURE__ */ normalizeComponent(
  _sfc_main$6,
  _sfc_render$6,
  _sfc_staticRenderFns$6,
  false,
  _sfc_injectStyles$6,
  null,
  null,
  null
);
var N8nTabs = __component__$6.exports;
var _sfc_main$5 = Vue.extend({
  name: "n8n-tag",
  props: {
    text: {
      type: String
    }
  }
});
const tag = "_tag_1og6h_1";
var style0$5 = {
  tag
};
var _sfc_render$5 = function render44() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("span", _vm._g({ class: ["n8n-tag", _vm.$style.tag] }, _vm.$listeners), [_vm._v(" " + _vm._s(_vm.text) + " ")]);
};
var _sfc_staticRenderFns$5 = [];
const __cssModules$5 = {
  "$style": style0$5
};
function _sfc_injectStyles$5(ctx2) {
  for (var key2 in __cssModules$5) {
    this[key2] = __cssModules$5[key2];
  }
}
var __component__$5 = /* @__PURE__ */ normalizeComponent(
  _sfc_main$5,
  _sfc_render$5,
  _sfc_staticRenderFns$5,
  false,
  _sfc_injectStyles$5,
  null,
  null,
  null
);
var Tag = __component__$5.exports;
var _sfc_main$4 = mixins(Locale).extend({
  name: "n8n-tags",
  components: {
    N8nTag: Tag,
    N8nLink
  },
  data() {
    return {
      showAll: false
    };
  },
  props: {
    tags: {
      type: Array,
      default: () => []
    },
    truncate: {
      type: Boolean,
      default: false
    },
    truncateAt: {
      type: Number,
      default: 3
    }
  },
  computed: {
    visibleTags() {
      if (this.truncate && !this.showAll && this.tags.length > this.truncateAt) {
        return this.tags.slice(0, this.truncateAt);
      }
      return this.tags;
    },
    hiddenTagsLength() {
      return this.tags.length - this.truncateAt;
    }
  }
});
const tags = "_tags_zu6kb_1";
var style0$4 = {
  tags
};
var _sfc_render$4 = function render45() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { class: ["n8n-tags", _vm.$style.tags] }, [_vm._l(_vm.visibleTags, function(tag2) {
    return _c("n8n-tag", { key: tag2.id, attrs: { "text": tag2.name }, on: { "click": function($event) {
      return _vm.$emit("click", tag2.id, $event);
    } } });
  }), _vm.truncate && !_vm.showAll && _vm.hiddenTagsLength > 0 ? _c("n8n-link", { attrs: { "theme": "text", "underline": "", "size": "small" }, on: { "click": function($event) {
    $event.stopPropagation();
    $event.preventDefault();
    _vm.showAll = true;
  } } }, [_vm._v(" " + _vm._s(_vm.t("tags.showMore", _vm.hiddenTagsLength)) + " ")]) : _vm._e()], 2);
};
var _sfc_staticRenderFns$4 = [];
const __cssModules$4 = {
  "$style": style0$4
};
function _sfc_injectStyles$4(ctx2) {
  for (var key2 in __cssModules$4) {
    this[key2] = __cssModules$4[key2];
  }
}
var __component__$4 = /* @__PURE__ */ normalizeComponent(
  _sfc_main$4,
  _sfc_render$4,
  _sfc_staticRenderFns$4,
  false,
  _sfc_injectStyles$4,
  null,
  null,
  null
);
var Tags = __component__$4.exports;
var _sfc_main$3 = Vue.extend({
  name: "n8n-tree",
  components: {},
  props: {
    value: {},
    path: {
      type: Array,
      default: () => []
    },
    depth: {
      type: Number,
      default: 0
    },
    nodeClass: {
      type: String
    }
  },
  methods: {
    isSimple(data3) {
      if (data3 === null || data3 === void 0) {
        return true;
      }
      if (typeof data3 === "object" && Object.keys(data3).length === 0) {
        return true;
      }
      if (Array.isArray(data3) && data3.length === 0) {
        return true;
      }
      return typeof data3 !== "object";
    },
    getPath(key2) {
      if (Array.isArray(this.value)) {
        return [...this.path, parseInt(key2, 10)];
      }
      return [...this.path, key2];
    }
  }
});
const indent = "_indent_1y4uu_1";
const simple = "_simple_1y4uu_5";
var style0$3 = {
  indent,
  simple
};
var _sfc_render$3 = function render46() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { staticClass: "n8n-tree" }, _vm._l(Object.keys(_vm.value || {}), function(label2, i) {
    return _c("div", { key: i, class: { [_vm.nodeClass]: !!_vm.nodeClass, [_vm.$style.indent]: _vm.depth > 0 } }, [_vm.isSimple(_vm.value[label2]) ? _c("div", { class: _vm.$style.simple }, [_vm.$scopedSlots.label ? _vm._t("label", null, { "label": label2, "path": _vm.getPath(label2) }) : _c("span", [_vm._v(_vm._s(label2))]), _c("span", [_vm._v(":")]), _vm.$scopedSlots.value ? _vm._t("value", null, { "value": _vm.value[label2] }) : _c("span", [_vm._v(_vm._s(_vm.value[label2]))])], 2) : _c("div", [_vm.$scopedSlots.label ? _vm._t("label", null, { "label": label2, "path": _vm.getPath(label2) }) : _c("span", [_vm._v(_vm._s(label2))]), _c("n8n-tree", { attrs: { "path": _vm.getPath(label2), "depth": _vm.depth + 1, "value": _vm.value[label2], "nodeClass": _vm.nodeClass }, scopedSlots: _vm._u([_vm._l(_vm.$scopedSlots, function(index2, name) {
      return { key: name, fn: function(data3) {
        return [_vm._t(name, null, null, data3)];
      } };
    })], null, true) })], 2)]);
  }), 0);
};
var _sfc_staticRenderFns$3 = [];
const __cssModules$3 = {
  "$style": style0$3
};
function _sfc_injectStyles$3(ctx2) {
  for (var key2 in __cssModules$3) {
    this[key2] = __cssModules$3[key2];
  }
}
var __component__$3 = /* @__PURE__ */ normalizeComponent(
  _sfc_main$3,
  _sfc_render$3,
  _sfc_staticRenderFns$3,
  false,
  _sfc_injectStyles$3,
  null,
  null,
  null
);
var Tree = __component__$3.exports;
var _sfc_main$2 = mixins(Locale).extend({
  name: "n8n-users-info",
  components: {
    N8nAvatar,
    N8nText,
    N8nBadge
  },
  props: {
    firstName: {
      type: String
    },
    lastName: {
      type: String
    },
    email: {
      type: String
    },
    isPendingUser: {
      type: Boolean
    },
    isCurrentUser: {
      type: Boolean
    },
    disabled: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    classes() {
      return {
        [this.$style.container]: true,
        [this.$style.disabled]: this.disabled
      };
    }
  }
});
const container$1 = "_container_1sski_1";
const avatarContainer = "_avatarContainer_1sski_6";
const infoContainer = "_infoContainer_1sski_13";
const pendingUser = "_pendingUser_1sski_21";
const pendingBadge = "_pendingBadge_1sski_28";
const disabled = "_disabled_1sski_32";
var style0$2 = {
  container: container$1,
  avatarContainer,
  infoContainer,
  pendingUser,
  pendingBadge,
  disabled
};
var _sfc_render$2 = function render47() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", { staticClass: "ph-no-capture", class: _vm.classes }, [_c("div", { class: _vm.$style.avatarContainer }, [_c("n8n-avatar", { attrs: { "firstName": _vm.firstName, "lastName": _vm.lastName } })], 1), _vm.isPendingUser ? _c("div", { class: _vm.$style.pendingUser }, [_c("n8n-text", { attrs: { "bold": true } }, [_vm._v(_vm._s(_vm.email))]), _c("span", { class: _vm.$style.pendingBadge }, [_c("n8n-badge", { attrs: { "bold": true } }, [_vm._v("Pending")])], 1)], 1) : _c("div", { class: _vm.$style.infoContainer }, [_c("div", [_c("n8n-text", { attrs: { "bold": true, "color": "text-dark" } }, [_vm._v(_vm._s(_vm.firstName) + " " + _vm._s(_vm.lastName) + " " + _vm._s(_vm.isCurrentUser ? this.t("nds.userInfo.you") : ""))])], 1), _c("div", [_c("n8n-text", { attrs: { "size": "small", "color": "text-light" } }, [_vm._v(_vm._s(_vm.email))])], 1)])]);
};
var _sfc_staticRenderFns$2 = [];
const __cssModules$2 = {
  "$style": style0$2
};
function _sfc_injectStyles$2(ctx2) {
  for (var key2 in __cssModules$2) {
    this[key2] = __cssModules$2[key2];
  }
}
var __component__$2 = /* @__PURE__ */ normalizeComponent(
  _sfc_main$2,
  _sfc_render$2,
  _sfc_staticRenderFns$2,
  false,
  _sfc_injectStyles$2,
  null,
  null,
  null
);
var N8nUserInfo = __component__$2.exports;
var _sfc_main$1 = mixins(Locale).extend({
  name: "n8n-user-select",
  components: {
    N8nUserInfo,
    ElSelect: Select,
    ElOption: Option
  },
  props: {
    users: {
      type: Array,
      default() {
        return [];
      }
    },
    value: {
      type: String,
      default: ""
    },
    ignoreIds: {
      type: Array,
      default() {
        return [];
      },
      validator: (ids) => !ids.find((id2) => typeof id2 !== "string")
    },
    currentUserId: {
      type: String
    },
    placeholder: {
      type: String,
      default: () => t2("nds.userSelect.selectUser")
    },
    size: {
      type: String,
      validator: (value) => ["mini", "small", "large"].includes(value)
    }
  },
  data() {
    return {
      filter: ""
    };
  },
  computed: {
    fitleredUsers() {
      return this.users.filter((user) => {
        if (user.isPendingUser || !user.email) {
          return false;
        }
        if (this.ignoreIds && this.ignoreIds.includes(user.id)) {
          return false;
        }
        if (user.fullName) {
          const match2 = user.fullName.toLowerCase().includes(this.filter.toLowerCase());
          if (match2) {
            return true;
          }
        }
        return user.email.includes(this.filter);
      });
    },
    sortedUsers() {
      return [...this.fitleredUsers].sort((a2, b2) => {
        if (a2.lastName && b2.lastName && a2.lastName !== b2.lastName) {
          return a2.lastName > b2.lastName ? 1 : -1;
        }
        if (a2.firstName && b2.firstName && a2.firstName !== b2.firstName) {
          return a2.firstName > b2.firstName ? 1 : -1;
        }
        if (!a2.email || !b2.email) {
          throw new Error("Expected all users to have email");
        }
        return a2.email > b2.email ? 1 : -1;
      });
    }
  },
  methods: {
    setFilter(value) {
      this.filter = value;
    },
    onChange(value) {
      this.$emit("input", value);
    },
    onBlur() {
      this.$emit("blur");
    },
    onFocus() {
      this.$emit("focus");
    },
    getLabel(user) {
      if (!user.fullName) {
        return user.email;
      }
      return `${user.fullName} (${user.email})`;
    }
  }
});
const itemContainer$1 = "_itemContainer_1bkhy_1";
const limitPopperWidth = "_limitPopperWidth_1bkhy_6";
var style0$1 = {
  itemContainer: itemContainer$1,
  limitPopperWidth
};
var _sfc_render$1 = function render48() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("n8n-select", { attrs: { "value": _vm.value, "filterable": true, "filterMethod": _vm.setFilter, "placeholder": _vm.placeholder, "default-first-option": true, "popper-append-to-body": true, "popper-class": _vm.$style.limitPopperWidth, "noDataText": _vm.t("nds.userSelect.noMatchingUsers"), "size": _vm.size }, on: { "change": _vm.onChange, "blur": _vm.onBlur, "focus": _vm.onFocus }, scopedSlots: _vm._u([_vm.$slots.prefix ? { key: "prefix", fn: function() {
    return [_vm._t("prefix")];
  }, proxy: true } : null], null, true) }, _vm._l(_vm.sortedUsers, function(user) {
    return _c("n8n-option", { key: user.id, class: _vm.$style.itemContainer, attrs: { "value": user.id, "label": _vm.getLabel(user), "disabled": user.disabled } }, [_c("n8n-user-info", _vm._b({ attrs: { "isCurrentUser": _vm.currentUserId === user.id } }, "n8n-user-info", user, false))], 1);
  }), 1);
};
var _sfc_staticRenderFns$1 = [];
const __cssModules$1 = {
  "$style": style0$1
};
function _sfc_injectStyles$1(ctx2) {
  for (var key2 in __cssModules$1) {
    this[key2] = __cssModules$1[key2];
  }
}
var __component__$1 = /* @__PURE__ */ normalizeComponent(
  _sfc_main$1,
  _sfc_render$1,
  _sfc_staticRenderFns$1,
  false,
  _sfc_injectStyles$1,
  null,
  null,
  null
);
var N8nUserSelect = __component__$1.exports;
var _sfc_main = mixins(Locale).extend({
  name: "n8n-users-list",
  components: {
    N8nActionToggle,
    N8nBadge,
    N8nUserInfo
  },
  props: {
    readonly: {
      type: Boolean,
      default: false
    },
    users: {
      type: Array,
      required: true,
      default() {
        return [];
      }
    },
    currentUserId: {
      type: String
    },
    deleteLabel: {
      type: String,
      default: () => t2("nds.usersList.deleteUser")
    },
    reinviteLabel: {
      type: String,
      default: () => t2("nds.usersList.reinviteUser")
    }
  },
  computed: {
    sortedUsers() {
      return [...this.users].sort((a2, b2) => {
        if (!a2.email || !b2.email) {
          throw new Error("Expected all users to have email");
        }
        if (a2.isPendingUser && b2.isPendingUser) {
          return a2.email > b2.email ? 1 : -1;
        }
        if (a2.isPendingUser) {
          return -1;
        }
        if (b2.isPendingUser) {
          return 1;
        }
        if (a2.isOwner) {
          return -1;
        }
        if (b2.isOwner) {
          return 1;
        }
        if (a2.lastName && b2.lastName && a2.firstName && b2.firstName) {
          if (a2.lastName !== b2.lastName) {
            return a2.lastName > b2.lastName ? 1 : -1;
          }
          if (a2.firstName !== b2.firstName) {
            return a2.firstName > b2.firstName ? 1 : -1;
          }
        }
        return a2.email > b2.email ? 1 : -1;
      });
    }
  },
  methods: {
    getActions(user) {
      const DELETE = {
        label: this.deleteLabel,
        value: "delete"
      };
      const REINVITE = {
        label: this.reinviteLabel,
        value: "reinvite"
      };
      if (user.isOwner) {
        return [];
      }
      if (user.firstName) {
        return [
          DELETE
        ];
      } else {
        return [
          REINVITE,
          DELETE
        ];
      }
    },
    onUserAction(user, action) {
      if (action === "delete" || action === "reinvite") {
        this.$emit(action, user.id);
      }
    }
  }
});
const itemContainer = "_itemContainer_wgqkm_1";
const itemWithBorder = "_itemWithBorder_wgqkm_9 _itemContainer_wgqkm_1";
const badgeContainer = "_badgeContainer_wgqkm_14";
var style0 = {
  itemContainer,
  itemWithBorder,
  badgeContainer
};
var _sfc_render = function render49() {
  var _vm = this, _c = _vm._self._c;
  _vm._self._setupProxy;
  return _c("div", _vm._l(_vm.sortedUsers, function(user, i) {
    return _c("div", { key: user.id, staticClass: "ph-no-capture", class: i === _vm.sortedUsers.length - 1 ? _vm.$style.itemContainer : _vm.$style.itemWithBorder }, [_c("n8n-user-info", _vm._b({ attrs: { "isCurrentUser": _vm.currentUserId === user.id } }, "n8n-user-info", user, false)), _c("div", { class: _vm.$style.badgeContainer }, [user.isOwner ? _c("n8n-badge", { attrs: { "theme": "tertiary", "bold": "" } }, [_vm._v(" " + _vm._s(_vm.t("nds.auth.roles.owner")) + " ")]) : _vm._e(), !user.isOwner && !_vm.readonly && _vm.getActions(user).length > 0 ? _c("n8n-action-toggle", { attrs: { "placement": "bottom", "actions": _vm.getActions(user), "theme": "dark" }, on: { "action": (action) => _vm.onUserAction(user, action) } }) : _vm._e()], 1)], 1);
  }), 0);
};
var _sfc_staticRenderFns = [];
const __cssModules = {
  "$style": style0
};
function _sfc_injectStyles(ctx2) {
  for (var key2 in __cssModules) {
    this[key2] = __cssModules[key2];
  }
}
var __component__ = /* @__PURE__ */ normalizeComponent(
  _sfc_main,
  _sfc_render,
  _sfc_staticRenderFns,
  false,
  _sfc_injectStyles,
  null,
  null,
  null
);
var N8nUsersList = __component__.exports;
var n8nComponents = {
  install: (app, options2) => {
    app.component("n8n-info-accordion", N8nInfoAccordion);
    app.component("n8n-action-box", N8nActionBox);
    app.component("n8n-action-dropdown", N8nActionDropdown);
    app.component("n8n-action-toggle", N8nActionToggle);
    app.component("n8n-avatar", N8nAvatar);
    app.component("n8n-badge", N8nBadge);
    app.component("n8n-block-ui", N8nBlockUi);
    app.component("n8n-button", N8nButton);
    app.component("el-button", N8nElButton);
    app.component("n8n-callout", N8nCallout);
    app.component("n8n-card", N8nCard);
    app.component("n8n-form-box", N8nFormBox);
    app.component("n8n-form-inputs", N8nFormInputs);
    app.component("n8n-icon", N8nIcon);
    app.component("n8n-icon-button", IconButton);
    app.component("n8n-info-tip", InfoTip);
    app.component("n8n-input", N8nInput);
    app.component("n8n-input-label", N8nInputLabel);
    app.component("n8n-input-number", N8nInputNumber);
    app.component("n8n-loading", N8nLoading);
    app.component("n8n-heading", N8nHeading);
    app.component("n8n-link", N8nLink);
    app.component("n8n-markdown", N8nMarkdown);
    app.component("n8n-menu", N8nMenu);
    app.component("n8n-menu-item", N8nMenuItem);
    app.component("n8n-node-icon", N8nNodeIcon);
    app.component("n8n-notice", N8nNotice);
    app.component("n8n-option", N8nOption);
    app.component("n8n-popover", N8nPopover);
    app.component("n8n-pulse", N8nPulse);
    app.component("n8n-select", N8nSelect);
    app.component("n8n-spinner", Spinner);
    app.component("n8n-sticky", Sticky);
    app.component("n8n-radio-buttons", N8nRadioButtons);
    app.component("n8n-tags", Tags);
    app.component("n8n-tabs", N8nTabs);
    app.component("n8n-tag", Tag);
    app.component("n8n-text", N8nText);
    app.component("n8n-tooltip", N8nTooltip);
    app.component("n8n-user-info", N8nUserInfo);
    app.component("n8n-tree", Tree);
    app.component("n8n-users-list", N8nUsersList);
    app.component("n8n-user-select", N8nUserSelect);
    app.component("n8n-resize-wrapper", ResizeWrapper);
  }
};
var drawer = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 125);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    125: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-drawer-fade" },
            on: { "after-enter": _vm.afterEnter, "after-leave": _vm.afterLeave }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-drawer__wrapper",
                attrs: { tabindex: "-1" }
              },
              [
                _c(
                  "div",
                  {
                    staticClass: "el-drawer__container",
                    class: _vm.visible && "el-drawer__open",
                    attrs: { role: "document", tabindex: "-1" },
                    on: {
                      click: function($event) {
                        if ($event.target !== $event.currentTarget) {
                          return null;
                        }
                        return _vm.handleWrapperClick($event);
                      }
                    }
                  },
                  [
                    _c(
                      "div",
                      {
                        ref: "drawer",
                        staticClass: "el-drawer",
                        class: [_vm.direction, _vm.customClass],
                        style: _vm.isHorizontal ? "width: " + _vm.drawerSize : "height: " + _vm.drawerSize,
                        attrs: {
                          "aria-modal": "true",
                          "aria-labelledby": "el-drawer__title",
                          "aria-label": _vm.title,
                          role: "dialog",
                          tabindex: "-1"
                        }
                      },
                      [
                        _vm.withHeader ? _c(
                          "header",
                          {
                            staticClass: "el-drawer__header",
                            attrs: { id: "el-drawer__title" }
                          },
                          [
                            _vm._t("title", [
                              _c(
                                "span",
                                { attrs: { role: "heading", title: _vm.title } },
                                [_vm._v(_vm._s(_vm.title))]
                              )
                            ]),
                            _vm.showClose ? _c(
                              "button",
                              {
                                staticClass: "el-drawer__close-btn",
                                attrs: {
                                  "aria-label": "close " + (_vm.title || "drawer"),
                                  type: "button"
                                },
                                on: { click: _vm.closeDrawer }
                              },
                              [
                                _c("i", {
                                  staticClass: "el-dialog__close el-icon el-icon-close"
                                })
                              ]
                            ) : _vm._e()
                          ],
                          2
                        ) : _vm._e(),
                        _vm.rendered ? _c(
                          "section",
                          { staticClass: "el-drawer__body" },
                          [_vm._t("default")],
                          2
                        ) : _vm._e()
                      ]
                    )
                  ]
                )
              ]
            )
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var popup_ = __webpack_require__(13);
      var popup_default = /* @__PURE__ */ __webpack_require__.n(popup_);
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var mainvue_type_script_lang_js_ = {
        name: "ElDrawer",
        mixins: [popup_default.a, emitter_default.a],
        props: {
          appendToBody: {
            type: Boolean,
            default: false
          },
          beforeClose: {
            type: Function
          },
          customClass: {
            type: String,
            default: ""
          },
          closeOnPressEscape: {
            type: Boolean,
            default: true
          },
          destroyOnClose: {
            type: Boolean,
            default: false
          },
          modal: {
            type: Boolean,
            default: true
          },
          direction: {
            type: String,
            default: "rtl",
            validator: function validator5(val) {
              return ["ltr", "rtl", "ttb", "btt"].indexOf(val) !== -1;
            }
          },
          modalAppendToBody: {
            type: Boolean,
            default: true
          },
          showClose: {
            type: Boolean,
            default: true
          },
          size: {
            type: [Number, String],
            default: "30%"
          },
          title: {
            type: String,
            default: ""
          },
          visible: {
            type: Boolean
          },
          wrapperClosable: {
            type: Boolean,
            default: true
          },
          withHeader: {
            type: Boolean,
            default: true
          }
        },
        computed: {
          isHorizontal: function isHorizontal() {
            return this.direction === "rtl" || this.direction === "ltr";
          },
          drawerSize: function drawerSize() {
            return typeof this.size === "number" ? this.size + "px" : this.size;
          }
        },
        data: function data3() {
          return {
            closed: false,
            prevActiveElement: null
          };
        },
        watch: {
          visible: function visible3(val) {
            var _this = this;
            if (val) {
              this.closed = false;
              this.$emit("open");
              if (this.appendToBody) {
                document.body.appendChild(this.$el);
              }
              this.prevActiveElement = document.activeElement;
            } else {
              if (!this.closed) {
                this.$emit("close");
                if (this.destroyOnClose === true) {
                  this.rendered = false;
                }
              }
              this.$nextTick(function() {
                if (_this.prevActiveElement) {
                  _this.prevActiveElement.focus();
                }
              });
            }
          }
        },
        methods: {
          afterEnter: function afterEnter() {
            this.$emit("opened");
          },
          afterLeave: function afterLeave2() {
            this.$emit("closed");
          },
          hide: function hide(cancel) {
            if (cancel !== false) {
              this.$emit("update:visible", false);
              this.$emit("close");
              if (this.destroyOnClose === true) {
                this.rendered = false;
              }
              this.closed = true;
            }
          },
          handleWrapperClick: function handleWrapperClick() {
            if (this.wrapperClosable) {
              this.closeDrawer();
            }
          },
          closeDrawer: function closeDrawer() {
            if (typeof this.beforeClose === "function") {
              this.beforeClose(this.hide);
            } else {
              this.hide();
            }
          },
          handleClose: function handleClose() {
            this.closeDrawer();
          }
        },
        mounted: function mounted2() {
          if (this.visible) {
            this.rendered = true;
            this.open();
            if (this.appendToBody) {
              document.body.appendChild(this.$el);
            }
          }
        },
        destroyed: function destroyed() {
          if (this.appendToBody && this.$el && this.$el.parentNode) {
            this.$el.parentNode.removeChild(this.$el);
          }
        }
      };
      var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_mainvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/drawer/src/main.vue";
      var main = component.exports;
      main.install = function(Vue2) {
        Vue2.component(main.name, main);
      };
      __webpack_exports__["default"] = main;
    },
    13: function(module2, exports) {
      module2.exports = popup;
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    }
  });
})(drawer);
var Drawer = /* @__PURE__ */ getDefaultExportFromCjs(drawer.exports);
var dialog = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 81);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    11: function(module2, exports) {
      module2.exports = migrating;
    },
    13: function(module2, exports) {
      module2.exports = popup;
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    81: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "dialog-fade" },
            on: { "after-enter": _vm.afterEnter, "after-leave": _vm.afterLeave }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-dialog__wrapper",
                on: {
                  click: function($event) {
                    if ($event.target !== $event.currentTarget) {
                      return null;
                    }
                    return _vm.handleWrapperClick($event);
                  }
                }
              },
              [
                _c(
                  "div",
                  {
                    key: _vm.key,
                    ref: "dialog",
                    class: [
                      "el-dialog",
                      {
                        "is-fullscreen": _vm.fullscreen,
                        "el-dialog--center": _vm.center
                      },
                      _vm.customClass
                    ],
                    style: _vm.style,
                    attrs: {
                      role: "dialog",
                      "aria-modal": "true",
                      "aria-label": _vm.title || "dialog"
                    }
                  },
                  [
                    _c(
                      "div",
                      { staticClass: "el-dialog__header" },
                      [
                        _vm._t("title", [
                          _c("span", { staticClass: "el-dialog__title" }, [
                            _vm._v(_vm._s(_vm.title))
                          ])
                        ]),
                        _vm.showClose ? _c(
                          "button",
                          {
                            staticClass: "el-dialog__headerbtn",
                            attrs: { type: "button", "aria-label": "Close" },
                            on: { click: _vm.handleClose }
                          },
                          [
                            _c("i", {
                              staticClass: "el-dialog__close el-icon el-icon-close"
                            })
                          ]
                        ) : _vm._e()
                      ],
                      2
                    ),
                    _vm.rendered ? _c(
                      "div",
                      { staticClass: "el-dialog__body" },
                      [_vm._t("default")],
                      2
                    ) : _vm._e(),
                    _vm.$slots.footer ? _c(
                      "div",
                      { staticClass: "el-dialog__footer" },
                      [_vm._t("footer")],
                      2
                    ) : _vm._e()
                  ]
                )
              ]
            )
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var popup_ = __webpack_require__(13);
      var popup_default = /* @__PURE__ */ __webpack_require__.n(popup_);
      var migrating_ = __webpack_require__(11);
      var migrating_default = /* @__PURE__ */ __webpack_require__.n(migrating_);
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var componentvue_type_script_lang_js_ = {
        name: "ElDialog",
        mixins: [popup_default.a, emitter_default.a, migrating_default.a],
        props: {
          title: {
            type: String,
            default: ""
          },
          modal: {
            type: Boolean,
            default: true
          },
          modalAppendToBody: {
            type: Boolean,
            default: true
          },
          appendToBody: {
            type: Boolean,
            default: false
          },
          lockScroll: {
            type: Boolean,
            default: true
          },
          closeOnClickModal: {
            type: Boolean,
            default: true
          },
          closeOnPressEscape: {
            type: Boolean,
            default: true
          },
          showClose: {
            type: Boolean,
            default: true
          },
          width: String,
          fullscreen: Boolean,
          customClass: {
            type: String,
            default: ""
          },
          top: {
            type: String,
            default: "15vh"
          },
          beforeClose: Function,
          center: {
            type: Boolean,
            default: false
          },
          destroyOnClose: Boolean
        },
        data: function data3() {
          return {
            closed: false,
            key: 0
          };
        },
        watch: {
          visible: function visible3(val) {
            var _this = this;
            if (val) {
              this.closed = false;
              this.$emit("open");
              this.$el.addEventListener("scroll", this.updatePopper);
              this.$nextTick(function() {
                _this.$refs.dialog.scrollTop = 0;
              });
              if (this.appendToBody) {
                document.body.appendChild(this.$el);
              }
            } else {
              this.$el.removeEventListener("scroll", this.updatePopper);
              if (!this.closed)
                this.$emit("close");
              if (this.destroyOnClose) {
                this.$nextTick(function() {
                  _this.key++;
                });
              }
            }
          }
        },
        computed: {
          style: function style() {
            var style2 = {};
            if (!this.fullscreen) {
              style2.marginTop = this.top;
              if (this.width) {
                style2.width = this.width;
              }
            }
            return style2;
          }
        },
        methods: {
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "size": "size is removed."
              }
            };
          },
          handleWrapperClick: function handleWrapperClick() {
            if (!this.closeOnClickModal)
              return;
            this.handleClose();
          },
          handleClose: function handleClose() {
            if (typeof this.beforeClose === "function") {
              this.beforeClose(this.hide);
            } else {
              this.hide();
            }
          },
          hide: function hide(cancel) {
            if (cancel !== false) {
              this.$emit("update:visible", false);
              this.$emit("close");
              this.closed = true;
            }
          },
          updatePopper: function updatePopper2() {
            this.broadcast("ElSelectDropdown", "updatePopper");
            this.broadcast("ElDropdownMenu", "updatePopper");
          },
          afterEnter: function afterEnter() {
            this.$emit("opened");
          },
          afterLeave: function afterLeave2() {
            this.$emit("closed");
          }
        },
        mounted: function mounted2() {
          if (this.visible) {
            this.rendered = true;
            this.open();
            if (this.appendToBody) {
              document.body.appendChild(this.$el);
            }
          }
        },
        destroyed: function destroyed() {
          if (this.appendToBody && this.$el && this.$el.parentNode) {
            this.$el.parentNode.removeChild(this.$el);
          }
        }
      };
      var src_componentvue_type_script_lang_js_ = componentvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_componentvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/dialog/src/component.vue";
      var src_component = component.exports;
      src_component.install = function(Vue2) {
        Vue2.component(src_component.name, src_component);
      };
      __webpack_exports__["default"] = src_component;
    }
  });
})(dialog);
var Dialog = /* @__PURE__ */ getDefaultExportFromCjs(dialog.exports);
var radio = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 87);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    87: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "label",
          {
            staticClass: "el-radio",
            class: [
              _vm.border && _vm.radioSize ? "el-radio--" + _vm.radioSize : "",
              { "is-disabled": _vm.isDisabled },
              { "is-focus": _vm.focus },
              { "is-bordered": _vm.border },
              { "is-checked": _vm.model === _vm.label }
            ],
            attrs: {
              role: "radio",
              "aria-checked": _vm.model === _vm.label,
              "aria-disabled": _vm.isDisabled,
              tabindex: _vm.tabIndex
            },
            on: {
              keydown: function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])) {
                  return null;
                }
                $event.stopPropagation();
                $event.preventDefault();
                _vm.model = _vm.isDisabled ? _vm.model : _vm.label;
              }
            }
          },
          [
            _c(
              "span",
              {
                staticClass: "el-radio__input",
                class: {
                  "is-disabled": _vm.isDisabled,
                  "is-checked": _vm.model === _vm.label
                }
              },
              [
                _c("span", { staticClass: "el-radio__inner" }),
                _c("input", {
                  directives: [
                    {
                      name: "model",
                      rawName: "v-model",
                      value: _vm.model,
                      expression: "model"
                    }
                  ],
                  ref: "radio",
                  staticClass: "el-radio__original",
                  attrs: {
                    type: "radio",
                    "aria-hidden": "true",
                    name: _vm.name,
                    disabled: _vm.isDisabled,
                    tabindex: "-1",
                    autocomplete: "off"
                  },
                  domProps: {
                    value: _vm.label,
                    checked: _vm._q(_vm.model, _vm.label)
                  },
                  on: {
                    focus: function($event) {
                      _vm.focus = true;
                    },
                    blur: function($event) {
                      _vm.focus = false;
                    },
                    change: [
                      function($event) {
                        _vm.model = _vm.label;
                      },
                      _vm.handleChange
                    ]
                  }
                })
              ]
            ),
            _c(
              "span",
              {
                staticClass: "el-radio__label",
                on: {
                  keydown: function($event) {
                    $event.stopPropagation();
                  }
                }
              },
              [
                _vm._t("default"),
                !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
              ],
              2
            )
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var radiovue_type_script_lang_js_ = {
        name: "ElRadio",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        componentName: "ElRadio",
        props: {
          value: {},
          label: {},
          disabled: Boolean,
          name: String,
          border: Boolean,
          size: String
        },
        data: function data3() {
          return {
            focus: false
          };
        },
        computed: {
          isGroup: function isGroup() {
            var parent = this.$parent;
            while (parent) {
              if (parent.$options.componentName !== "ElRadioGroup") {
                parent = parent.$parent;
              } else {
                this._radioGroup = parent;
                return true;
              }
            }
            return false;
          },
          model: {
            get: function get2() {
              return this.isGroup ? this._radioGroup.value : this.value;
            },
            set: function set3(val) {
              if (this.isGroup) {
                this.dispatch("ElRadioGroup", "input", [val]);
              } else {
                this.$emit("input", val);
              }
              this.$refs.radio && (this.$refs.radio.checked = this.model === this.label);
            }
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          radioSize: function radioSize() {
            var temRadioSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
            return this.isGroup ? this._radioGroup.radioGroupSize || temRadioSize : temRadioSize;
          },
          isDisabled: function isDisabled() {
            return this.isGroup ? this._radioGroup.disabled || this.disabled || (this.elForm || {}).disabled : this.disabled || (this.elForm || {}).disabled;
          },
          tabIndex: function tabIndex() {
            return this.isDisabled || this.isGroup && this.model !== this.label ? -1 : 0;
          }
        },
        methods: {
          handleChange: function handleChange() {
            var _this = this;
            this.$nextTick(function() {
              _this.$emit("change", _this.model);
              _this.isGroup && _this.dispatch("ElRadioGroup", "handleChange", _this.model);
            });
          }
        }
      };
      var src_radiovue_type_script_lang_js_ = radiovue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_radiovue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/radio/src/radio.vue";
      var src_radio = component.exports;
      src_radio.install = function(Vue2) {
        Vue2.component(src_radio.name, src_radio);
      };
      __webpack_exports__["default"] = src_radio;
    }
  });
})(radio);
var Radio = /* @__PURE__ */ getDefaultExportFromCjs(radio.exports);
var radioGroup = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 88);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    88: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          _vm._elTag,
          {
            tag: "component",
            staticClass: "el-radio-group",
            attrs: { role: "radiogroup" },
            on: { keydown: _vm.handleKeydown }
          },
          [_vm._t("default")],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var keyCode = Object.freeze({
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40
      });
      var radio_groupvue_type_script_lang_js_ = {
        name: "ElRadioGroup",
        componentName: "ElRadioGroup",
        inject: {
          elFormItem: {
            default: ""
          }
        },
        mixins: [emitter_default.a],
        props: {
          value: {},
          size: String,
          fill: String,
          textColor: String,
          disabled: Boolean
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          _elTag: function _elTag() {
            var tag2 = (this.$vnode.data || {}).tag;
            if (!tag2 || tag2 === "component")
              tag2 = "div";
            return tag2;
          },
          radioGroupSize: function radioGroupSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          }
        },
        created: function created() {
          var _this = this;
          this.$on("handleChange", function(value) {
            _this.$emit("change", value);
          });
        },
        mounted: function mounted2() {
          var radios = this.$el.querySelectorAll("[type=radio]");
          var firstLabel = this.$el.querySelectorAll("[role=radio]")[0];
          if (![].some.call(radios, function(radio2) {
            return radio2.checked;
          }) && firstLabel) {
            firstLabel.tabIndex = 0;
          }
        },
        methods: {
          handleKeydown: function handleKeydown(e) {
            var target2 = e.target;
            var className = target2.nodeName === "INPUT" ? "[type=radio]" : "[role=radio]";
            var radios = this.$el.querySelectorAll(className);
            var length = radios.length;
            var index2 = [].indexOf.call(radios, target2);
            var roleRadios = this.$el.querySelectorAll("[role=radio]");
            switch (e.keyCode) {
              case keyCode.LEFT:
              case keyCode.UP:
                e.stopPropagation();
                e.preventDefault();
                if (index2 === 0) {
                  roleRadios[length - 1].click();
                  roleRadios[length - 1].focus();
                } else {
                  roleRadios[index2 - 1].click();
                  roleRadios[index2 - 1].focus();
                }
                break;
              case keyCode.RIGHT:
              case keyCode.DOWN:
                if (index2 === length - 1) {
                  e.stopPropagation();
                  e.preventDefault();
                  roleRadios[0].click();
                  roleRadios[0].focus();
                } else {
                  roleRadios[index2 + 1].click();
                  roleRadios[index2 + 1].focus();
                }
                break;
            }
          }
        },
        watch: {
          value: function value(_value) {
            this.dispatch("ElFormItem", "el.form.change", [this.value]);
          }
        }
      };
      var src_radio_groupvue_type_script_lang_js_ = radio_groupvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_radio_groupvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/radio/src/radio-group.vue";
      var radio_group = component.exports;
      radio_group.install = function(Vue2) {
        Vue2.component(radio_group.name, radio_group);
      };
      __webpack_exports__["default"] = radio_group;
    }
  });
})(radioGroup);
var RadioGroup = /* @__PURE__ */ getDefaultExportFromCjs(radioGroup.exports);
var radioButton = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 89);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    89: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "label",
          {
            staticClass: "el-radio-button",
            class: [
              _vm.size ? "el-radio-button--" + _vm.size : "",
              { "is-active": _vm.value === _vm.label },
              { "is-disabled": _vm.isDisabled },
              { "is-focus": _vm.focus }
            ],
            attrs: {
              role: "radio",
              "aria-checked": _vm.value === _vm.label,
              "aria-disabled": _vm.isDisabled,
              tabindex: _vm.tabIndex
            },
            on: {
              keydown: function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])) {
                  return null;
                }
                $event.stopPropagation();
                $event.preventDefault();
                _vm.value = _vm.isDisabled ? _vm.value : _vm.label;
              }
            }
          },
          [
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.value,
                  expression: "value"
                }
              ],
              staticClass: "el-radio-button__orig-radio",
              attrs: {
                type: "radio",
                name: _vm.name,
                disabled: _vm.isDisabled,
                tabindex: "-1",
                autocomplete: "off"
              },
              domProps: { value: _vm.label, checked: _vm._q(_vm.value, _vm.label) },
              on: {
                change: [
                  function($event) {
                    _vm.value = _vm.label;
                  },
                  _vm.handleChange
                ],
                focus: function($event) {
                  _vm.focus = true;
                },
                blur: function($event) {
                  _vm.focus = false;
                }
              }
            }),
            _c(
              "span",
              {
                staticClass: "el-radio-button__inner",
                style: _vm.value === _vm.label ? _vm.activeStyle : null,
                on: {
                  keydown: function($event) {
                    $event.stopPropagation();
                  }
                }
              },
              [
                _vm._t("default"),
                !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
              ],
              2
            )
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var radio_buttonvue_type_script_lang_js_ = {
        name: "ElRadioButton",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        props: {
          label: {},
          disabled: Boolean,
          name: String
        },
        data: function data3() {
          return {
            focus: false
          };
        },
        computed: {
          value: {
            get: function get2() {
              return this._radioGroup.value;
            },
            set: function set3(value) {
              this._radioGroup.$emit("input", value);
            }
          },
          _radioGroup: function _radioGroup() {
            var parent = this.$parent;
            while (parent) {
              if (parent.$options.componentName !== "ElRadioGroup") {
                parent = parent.$parent;
              } else {
                return parent;
              }
            }
            return false;
          },
          activeStyle: function activeStyle() {
            return {
              backgroundColor: this._radioGroup.fill || "",
              borderColor: this._radioGroup.fill || "",
              boxShadow: this._radioGroup.fill ? "-1px 0 0 0 " + this._radioGroup.fill : "",
              color: this._radioGroup.textColor || ""
            };
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          size: function size() {
            return this._radioGroup.radioGroupSize || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          isDisabled: function isDisabled() {
            return this.disabled || this._radioGroup.disabled || (this.elForm || {}).disabled;
          },
          tabIndex: function tabIndex() {
            return this.isDisabled || this._radioGroup && this.value !== this.label ? -1 : 0;
          }
        },
        methods: {
          handleChange: function handleChange() {
            var _this = this;
            this.$nextTick(function() {
              _this.dispatch("ElRadioGroup", "handleChange", _this.value);
            });
          }
        }
      };
      var src_radio_buttonvue_type_script_lang_js_ = radio_buttonvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_radio_buttonvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/radio/src/radio-button.vue";
      var radio_button2 = component.exports;
      radio_button2.install = function(Vue2) {
        Vue2.component(radio_button2.name, radio_button2);
      };
      __webpack_exports__["default"] = radio_button2;
    }
  });
})(radioButton);
var RadioButton = /* @__PURE__ */ getDefaultExportFromCjs(radioButton.exports);
var _switch = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 93);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    11: function(module2, exports) {
      module2.exports = migrating;
    },
    22: function(module2, exports) {
      module2.exports = focus;
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    93: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-switch",
            class: { "is-disabled": _vm.switchDisabled, "is-checked": _vm.checked },
            attrs: {
              role: "switch",
              "aria-checked": _vm.checked,
              "aria-disabled": _vm.switchDisabled
            },
            on: {
              click: function($event) {
                $event.preventDefault();
                return _vm.switchValue($event);
              }
            }
          },
          [
            _c("input", {
              ref: "input",
              staticClass: "el-switch__input",
              attrs: {
                type: "checkbox",
                id: _vm.id,
                name: _vm.name,
                "true-value": _vm.activeValue,
                "false-value": _vm.inactiveValue,
                disabled: _vm.switchDisabled
              },
              on: {
                change: _vm.handleChange,
                keydown: function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                    return null;
                  }
                  return _vm.switchValue($event);
                }
              }
            }),
            _vm.inactiveIconClass || _vm.inactiveText ? _c(
              "span",
              {
                class: [
                  "el-switch__label",
                  "el-switch__label--left",
                  !_vm.checked ? "is-active" : ""
                ]
              },
              [
                _vm.inactiveIconClass ? _c("i", { class: [_vm.inactiveIconClass] }) : _vm._e(),
                !_vm.inactiveIconClass && _vm.inactiveText ? _c("span", { attrs: { "aria-hidden": _vm.checked } }, [
                  _vm._v(_vm._s(_vm.inactiveText))
                ]) : _vm._e()
              ]
            ) : _vm._e(),
            _c("span", {
              ref: "core",
              staticClass: "el-switch__core",
              style: { width: _vm.coreWidth + "px" }
            }),
            _vm.activeIconClass || _vm.activeText ? _c(
              "span",
              {
                class: [
                  "el-switch__label",
                  "el-switch__label--right",
                  _vm.checked ? "is-active" : ""
                ]
              },
              [
                _vm.activeIconClass ? _c("i", { class: [_vm.activeIconClass] }) : _vm._e(),
                !_vm.activeIconClass && _vm.activeText ? _c("span", { attrs: { "aria-hidden": !_vm.checked } }, [
                  _vm._v(_vm._s(_vm.activeText))
                ]) : _vm._e()
              ]
            ) : _vm._e()
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var focus_ = __webpack_require__(22);
      var focus_default = /* @__PURE__ */ __webpack_require__.n(focus_);
      var migrating_ = __webpack_require__(11);
      var migrating_default = /* @__PURE__ */ __webpack_require__.n(migrating_);
      var componentvue_type_script_lang_js_ = {
        name: "ElSwitch",
        mixins: [focus_default()("input"), migrating_default.a, emitter_default.a],
        inject: {
          elForm: {
            default: ""
          }
        },
        props: {
          value: {
            type: [Boolean, String, Number],
            default: false
          },
          disabled: {
            type: Boolean,
            default: false
          },
          width: {
            type: Number,
            default: 40
          },
          activeIconClass: {
            type: String,
            default: ""
          },
          inactiveIconClass: {
            type: String,
            default: ""
          },
          activeText: String,
          inactiveText: String,
          activeColor: {
            type: String,
            default: ""
          },
          inactiveColor: {
            type: String,
            default: ""
          },
          activeValue: {
            type: [Boolean, String, Number],
            default: true
          },
          inactiveValue: {
            type: [Boolean, String, Number],
            default: false
          },
          name: {
            type: String,
            default: ""
          },
          validateEvent: {
            type: Boolean,
            default: true
          },
          id: String
        },
        data: function data3() {
          return {
            coreWidth: this.width
          };
        },
        created: function created() {
          if (!~[this.activeValue, this.inactiveValue].indexOf(this.value)) {
            this.$emit("input", this.inactiveValue);
          }
        },
        computed: {
          checked: function checked() {
            return this.value === this.activeValue;
          },
          switchDisabled: function switchDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        watch: {
          checked: function checked() {
            this.$refs.input.checked = this.checked;
            if (this.activeColor || this.inactiveColor) {
              this.setBackgroundColor();
            }
            if (this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.change", [this.value]);
            }
          }
        },
        methods: {
          handleChange: function handleChange(event) {
            var _this = this;
            var val = this.checked ? this.inactiveValue : this.activeValue;
            this.$emit("input", val);
            this.$emit("change", val);
            this.$nextTick(function() {
              if (_this.$refs.input) {
                _this.$refs.input.checked = _this.checked;
              }
            });
          },
          setBackgroundColor: function setBackgroundColor() {
            var newColor = this.checked ? this.activeColor : this.inactiveColor;
            this.$refs.core.style.borderColor = newColor;
            this.$refs.core.style.backgroundColor = newColor;
          },
          switchValue: function switchValue() {
            !this.switchDisabled && this.handleChange();
          },
          getMigratingConfig: function getMigratingConfig2() {
            return {
              props: {
                "on-color": "on-color is renamed to active-color.",
                "off-color": "off-color is renamed to inactive-color.",
                "on-text": "on-text is renamed to active-text.",
                "off-text": "off-text is renamed to inactive-text.",
                "on-value": "on-value is renamed to active-value.",
                "off-value": "off-value is renamed to inactive-value.",
                "on-icon-class": "on-icon-class is renamed to active-icon-class.",
                "off-icon-class": "off-icon-class is renamed to inactive-icon-class."
              }
            };
          }
        },
        mounted: function mounted2() {
          this.coreWidth = this.width || 40;
          if (this.activeColor || this.inactiveColor) {
            this.setBackgroundColor();
          }
          this.$refs.input.checked = this.checked;
        }
      };
      var src_componentvue_type_script_lang_js_ = componentvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_componentvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/switch/src/component.vue";
      var src_component = component.exports;
      src_component.install = function(Vue2) {
        Vue2.component(src_component.name, src_component);
      };
      __webpack_exports__["default"] = src_component;
    }
  });
})(_switch);
var Switch = /* @__PURE__ */ getDefaultExportFromCjs(_switch.exports);
var optionGroup = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 94);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    94: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "ul",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-select-group__wrap"
          },
          [
            _c("li", { staticClass: "el-select-group__title" }, [
              _vm._v(_vm._s(_vm.label))
            ]),
            _c("li", [
              _c("ul", { staticClass: "el-select-group" }, [_vm._t("default")], 2)
            ])
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var option_groupvue_type_script_lang_js_ = {
        mixins: [emitter_default.a],
        name: "ElOptionGroup",
        componentName: "ElOptionGroup",
        props: {
          label: String,
          disabled: {
            type: Boolean,
            default: false
          }
        },
        data: function data3() {
          return {
            visible: true
          };
        },
        watch: {
          disabled: function disabled2(val) {
            this.broadcast("ElOption", "handleGroupDisabled", val);
          }
        },
        methods: {
          queryChange: function queryChange() {
            this.visible = this.$children && Array.isArray(this.$children) && this.$children.some(function(option2) {
              return option2.visible === true;
            });
          }
        },
        created: function created() {
          this.$on("queryChange", this.queryChange);
        },
        mounted: function mounted2() {
          if (this.disabled) {
            this.broadcast("ElOption", "handleGroupDisabled", this.disabled);
          }
        }
      };
      var src_option_groupvue_type_script_lang_js_ = option_groupvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_option_groupvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/select/src/option-group.vue";
      var option_group = component.exports;
      option_group.install = function(Vue2) {
        Vue2.component(option_group.name, option_group);
      };
      __webpack_exports__["default"] = option_group;
    }
  });
})(optionGroup);
var OptionGroup = /* @__PURE__ */ getDefaultExportFromCjs(optionGroup.exports);
var pagination = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 73);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    10: function(module2, exports) {
      module2.exports = input$2.exports;
    },
    3: function(module2, exports) {
      module2.exports = util$2;
    },
    44: function(module2, exports) {
      module2.exports = select.exports;
    },
    45: function(module2, exports) {
      module2.exports = option.exports;
    },
    6: function(module2, exports) {
      module2.exports = locale;
    },
    73: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "ul",
          { staticClass: "el-pager", on: { click: _vm.onPagerClick } },
          [
            _vm.pageCount > 0 ? _c(
              "li",
              {
                staticClass: "number",
                class: { active: _vm.currentPage === 1, disabled: _vm.disabled }
              },
              [_vm._v("1")]
            ) : _vm._e(),
            _vm.showPrevMore ? _c("li", {
              staticClass: "el-icon more btn-quickprev",
              class: [_vm.quickprevIconClass, { disabled: _vm.disabled }],
              on: {
                mouseenter: function($event) {
                  _vm.onMouseenter("left");
                },
                mouseleave: function($event) {
                  _vm.quickprevIconClass = "el-icon-more";
                }
              }
            }) : _vm._e(),
            _vm._l(_vm.pagers, function(pager3) {
              return _c(
                "li",
                {
                  key: pager3,
                  staticClass: "number",
                  class: { active: _vm.currentPage === pager3, disabled: _vm.disabled }
                },
                [_vm._v(_vm._s(pager3))]
              );
            }),
            _vm.showNextMore ? _c("li", {
              staticClass: "el-icon more btn-quicknext",
              class: [_vm.quicknextIconClass, { disabled: _vm.disabled }],
              on: {
                mouseenter: function($event) {
                  _vm.onMouseenter("right");
                },
                mouseleave: function($event) {
                  _vm.quicknextIconClass = "el-icon-more";
                }
              }
            }) : _vm._e(),
            _vm.pageCount > 1 ? _c(
              "li",
              {
                staticClass: "number",
                class: {
                  active: _vm.currentPage === _vm.pageCount,
                  disabled: _vm.disabled
                }
              },
              [_vm._v(_vm._s(_vm.pageCount))]
            ) : _vm._e()
          ],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var pagervue_type_script_lang_js_ = {
        name: "ElPager",
        props: {
          currentPage: Number,
          pageCount: Number,
          pagerCount: Number,
          disabled: Boolean
        },
        watch: {
          showPrevMore: function showPrevMore(val) {
            if (!val)
              this.quickprevIconClass = "el-icon-more";
          },
          showNextMore: function showNextMore(val) {
            if (!val)
              this.quicknextIconClass = "el-icon-more";
          }
        },
        methods: {
          onPagerClick: function onPagerClick(event) {
            var target2 = event.target;
            if (target2.tagName === "UL" || this.disabled) {
              return;
            }
            var newPage = Number(event.target.textContent);
            var pageCount = this.pageCount;
            var currentPage = this.currentPage;
            var pagerCountOffset = this.pagerCount - 2;
            if (target2.className.indexOf("more") !== -1) {
              if (target2.className.indexOf("quickprev") !== -1) {
                newPage = currentPage - pagerCountOffset;
              } else if (target2.className.indexOf("quicknext") !== -1) {
                newPage = currentPage + pagerCountOffset;
              }
            }
            if (!isNaN(newPage)) {
              if (newPage < 1) {
                newPage = 1;
              }
              if (newPage > pageCount) {
                newPage = pageCount;
              }
            }
            if (newPage !== currentPage) {
              this.$emit("change", newPage);
            }
          },
          onMouseenter: function onMouseenter(direction) {
            if (this.disabled)
              return;
            if (direction === "left") {
              this.quickprevIconClass = "el-icon-d-arrow-left";
            } else {
              this.quicknextIconClass = "el-icon-d-arrow-right";
            }
          }
        },
        computed: {
          pagers: function pagers() {
            var pagerCount = this.pagerCount;
            var halfPagerCount = (pagerCount - 1) / 2;
            var currentPage = Number(this.currentPage);
            var pageCount = Number(this.pageCount);
            var showPrevMore = false;
            var showNextMore = false;
            if (pageCount > pagerCount) {
              if (currentPage > pagerCount - halfPagerCount) {
                showPrevMore = true;
              }
              if (currentPage < pageCount - halfPagerCount) {
                showNextMore = true;
              }
            }
            var array = [];
            if (showPrevMore && !showNextMore) {
              var startPage = pageCount - (pagerCount - 2);
              for (var i = startPage; i < pageCount; i++) {
                array.push(i);
              }
            } else if (!showPrevMore && showNextMore) {
              for (var _i = 2; _i < pagerCount; _i++) {
                array.push(_i);
              }
            } else if (showPrevMore && showNextMore) {
              var offset = Math.floor(pagerCount / 2) - 1;
              for (var _i2 = currentPage - offset; _i2 <= currentPage + offset; _i2++) {
                array.push(_i2);
              }
            } else {
              for (var _i3 = 2; _i3 < pageCount; _i3++) {
                array.push(_i3);
              }
            }
            this.showPrevMore = showPrevMore;
            this.showNextMore = showNextMore;
            return array;
          }
        },
        data: function data3() {
          return {
            current: null,
            showPrevMore: false,
            showNextMore: false,
            quicknextIconClass: "el-icon-more",
            quickprevIconClass: "el-icon-more"
          };
        }
      };
      var src_pagervue_type_script_lang_js_ = pagervue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_pagervue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/pagination/src/pager.vue";
      var pager2 = component.exports;
      var select_ = __webpack_require__(44);
      var select_default = /* @__PURE__ */ __webpack_require__.n(select_);
      var option_ = __webpack_require__(45);
      var option_default = /* @__PURE__ */ __webpack_require__.n(option_);
      var input_ = __webpack_require__(10);
      var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
      var locale_ = __webpack_require__(6);
      var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
      var util_ = __webpack_require__(3);
      var pagination2 = {
        name: "ElPagination",
        props: {
          pageSize: {
            type: Number,
            default: 10
          },
          small: Boolean,
          total: Number,
          pageCount: Number,
          pagerCount: {
            type: Number,
            validator: function validator5(value) {
              return (value | 0) === value && value > 4 && value < 22 && value % 2 === 1;
            },
            default: 7
          },
          currentPage: {
            type: Number,
            default: 1
          },
          layout: {
            default: "prev, pager, next, jumper, ->, total"
          },
          pageSizes: {
            type: Array,
            default: function _default3() {
              return [10, 20, 30, 40, 50, 100];
            }
          },
          popperClass: String,
          prevText: String,
          nextText: String,
          background: Boolean,
          disabled: Boolean,
          hideOnSinglePage: Boolean
        },
        data: function data3() {
          return {
            internalCurrentPage: 1,
            internalPageSize: 0,
            lastEmittedPage: -1,
            userChangePageSize: false
          };
        },
        render: function render51(h) {
          var layout = this.layout;
          if (!layout)
            return null;
          if (this.hideOnSinglePage && (!this.internalPageCount || this.internalPageCount === 1))
            return null;
          var template = h("div", { "class": ["el-pagination", {
            "is-background": this.background,
            "el-pagination--small": this.small
          }] });
          var TEMPLATE_MAP = {
            prev: h("prev"),
            jumper: h("jumper"),
            pager: h("pager", {
              attrs: { currentPage: this.internalCurrentPage, pageCount: this.internalPageCount, pagerCount: this.pagerCount, disabled: this.disabled },
              on: {
                "change": this.handleCurrentChange
              }
            }),
            next: h("next"),
            sizes: h("sizes", {
              attrs: { pageSizes: this.pageSizes }
            }),
            slot: h("slot", [this.$slots.default ? this.$slots.default : ""]),
            total: h("total")
          };
          var components = layout.split(",").map(function(item2) {
            return item2.trim();
          });
          var rightWrapper = h("div", { "class": "el-pagination__rightwrapper" });
          var haveRightWrapper = false;
          template.children = template.children || [];
          rightWrapper.children = rightWrapper.children || [];
          components.forEach(function(compo) {
            if (compo === "->") {
              haveRightWrapper = true;
              return;
            }
            if (!haveRightWrapper) {
              template.children.push(TEMPLATE_MAP[compo]);
            } else {
              rightWrapper.children.push(TEMPLATE_MAP[compo]);
            }
          });
          if (haveRightWrapper) {
            template.children.unshift(rightWrapper);
          }
          return template;
        },
        components: {
          Prev: {
            render: function render51(h) {
              return h(
                "button",
                {
                  attrs: {
                    type: "button",
                    disabled: this.$parent.disabled || this.$parent.internalCurrentPage <= 1
                  },
                  "class": "btn-prev",
                  on: {
                    "click": this.$parent.prev
                  }
                },
                [this.$parent.prevText ? h("span", [this.$parent.prevText]) : h("i", { "class": "el-icon el-icon-arrow-left" })]
              );
            }
          },
          Next: {
            render: function render51(h) {
              return h(
                "button",
                {
                  attrs: {
                    type: "button",
                    disabled: this.$parent.disabled || this.$parent.internalCurrentPage === this.$parent.internalPageCount || this.$parent.internalPageCount === 0
                  },
                  "class": "btn-next",
                  on: {
                    "click": this.$parent.next
                  }
                },
                [this.$parent.nextText ? h("span", [this.$parent.nextText]) : h("i", { "class": "el-icon el-icon-arrow-right" })]
              );
            }
          },
          Sizes: {
            mixins: [locale_default.a],
            props: {
              pageSizes: Array
            },
            watch: {
              pageSizes: {
                immediate: true,
                handler: function handler2(newVal, oldVal) {
                  if (Object(util_["valueEquals"])(newVal, oldVal))
                    return;
                  if (Array.isArray(newVal)) {
                    this.$parent.internalPageSize = newVal.indexOf(this.$parent.pageSize) > -1 ? this.$parent.pageSize : this.pageSizes[0];
                  }
                }
              }
            },
            render: function render51(h) {
              var _this = this;
              return h(
                "span",
                { "class": "el-pagination__sizes" },
                [h(
                  "el-select",
                  {
                    attrs: {
                      value: this.$parent.internalPageSize,
                      popperClass: this.$parent.popperClass || "",
                      size: "mini",
                      disabled: this.$parent.disabled
                    },
                    on: {
                      "input": this.handleChange
                    }
                  },
                  [this.pageSizes.map(function(item2) {
                    return h("el-option", {
                      attrs: {
                        value: item2,
                        label: item2 + _this.t("el.pagination.pagesize")
                      }
                    });
                  })]
                )]
              );
            },
            components: {
              ElSelect: select_default.a,
              ElOption: option_default.a
            },
            methods: {
              handleChange: function handleChange(val) {
                if (val !== this.$parent.internalPageSize) {
                  this.$parent.internalPageSize = val = parseInt(val, 10);
                  this.$parent.userChangePageSize = true;
                  this.$parent.$emit("update:pageSize", val);
                  this.$parent.$emit("size-change", val);
                }
              }
            }
          },
          Jumper: {
            mixins: [locale_default.a],
            components: { ElInput: input_default.a },
            data: function data3() {
              return {
                userInput: null
              };
            },
            watch: {
              "$parent.internalCurrentPage": function $parentInternalCurrentPage() {
                this.userInput = null;
              }
            },
            methods: {
              handleKeyup: function handleKeyup(_ref2) {
                var keyCode = _ref2.keyCode, target2 = _ref2.target;
                if (keyCode === 13) {
                  this.handleChange(target2.value);
                }
              },
              handleInput: function handleInput(value) {
                this.userInput = value;
              },
              handleChange: function handleChange(value) {
                this.$parent.internalCurrentPage = this.$parent.getValidCurrentPage(value);
                this.$parent.emitChange();
                this.userInput = null;
              }
            },
            render: function render51(h) {
              return h(
                "span",
                { "class": "el-pagination__jump" },
                [this.t("el.pagination.goto"), h("el-input", {
                  "class": "el-pagination__editor is-in-pagination",
                  attrs: {
                    min: 1,
                    max: this.$parent.internalPageCount,
                    value: this.userInput !== null ? this.userInput : this.$parent.internalCurrentPage,
                    type: "number",
                    disabled: this.$parent.disabled
                  },
                  nativeOn: {
                    "keyup": this.handleKeyup
                  },
                  on: {
                    "input": this.handleInput,
                    "change": this.handleChange
                  }
                }), this.t("el.pagination.pageClassifier")]
              );
            }
          },
          Total: {
            mixins: [locale_default.a],
            render: function render51(h) {
              return typeof this.$parent.total === "number" ? h(
                "span",
                { "class": "el-pagination__total" },
                [this.t("el.pagination.total", { total: this.$parent.total })]
              ) : "";
            }
          },
          Pager: pager2
        },
        methods: {
          handleCurrentChange: function handleCurrentChange(val) {
            this.internalCurrentPage = this.getValidCurrentPage(val);
            this.userChangePageSize = true;
            this.emitChange();
          },
          prev: function prev() {
            if (this.disabled)
              return;
            var newVal = this.internalCurrentPage - 1;
            this.internalCurrentPage = this.getValidCurrentPage(newVal);
            this.$emit("prev-click", this.internalCurrentPage);
            this.emitChange();
          },
          next: function next2() {
            if (this.disabled)
              return;
            var newVal = this.internalCurrentPage + 1;
            this.internalCurrentPage = this.getValidCurrentPage(newVal);
            this.$emit("next-click", this.internalCurrentPage);
            this.emitChange();
          },
          getValidCurrentPage: function getValidCurrentPage(value) {
            value = parseInt(value, 10);
            var havePageCount = typeof this.internalPageCount === "number";
            var resetValue = void 0;
            if (!havePageCount) {
              if (isNaN(value) || value < 1)
                resetValue = 1;
            } else {
              if (value < 1) {
                resetValue = 1;
              } else if (value > this.internalPageCount) {
                resetValue = this.internalPageCount;
              }
            }
            if (resetValue === void 0 && isNaN(value)) {
              resetValue = 1;
            } else if (resetValue === 0) {
              resetValue = 1;
            }
            return resetValue === void 0 ? value : resetValue;
          },
          emitChange: function emitChange() {
            var _this2 = this;
            this.$nextTick(function() {
              if (_this2.internalCurrentPage !== _this2.lastEmittedPage || _this2.userChangePageSize) {
                _this2.$emit("current-change", _this2.internalCurrentPage);
                _this2.lastEmittedPage = _this2.internalCurrentPage;
                _this2.userChangePageSize = false;
              }
            });
          }
        },
        computed: {
          internalPageCount: function internalPageCount() {
            if (typeof this.total === "number") {
              return Math.max(1, Math.ceil(this.total / this.internalPageSize));
            } else if (typeof this.pageCount === "number") {
              return Math.max(1, this.pageCount);
            }
            return null;
          }
        },
        watch: {
          currentPage: {
            immediate: true,
            handler: function handler2(val) {
              this.internalCurrentPage = this.getValidCurrentPage(val);
            }
          },
          pageSize: {
            immediate: true,
            handler: function handler2(val) {
              this.internalPageSize = isNaN(val) ? 10 : val;
            }
          },
          internalCurrentPage: {
            immediate: true,
            handler: function handler2(newVal) {
              this.$emit("update:currentPage", newVal);
              this.lastEmittedPage = -1;
            }
          },
          internalPageCount: function internalPageCount(newVal) {
            var oldPage = this.internalCurrentPage;
            if (newVal > 0 && oldPage === 0) {
              this.internalCurrentPage = 1;
            } else if (oldPage > newVal) {
              this.internalCurrentPage = newVal === 0 ? 1 : newVal;
              this.userChangePageSize && this.emitChange();
            }
            this.userChangePageSize = false;
          }
        }
      };
      pagination2.install = function(Vue2) {
        Vue2.component(pagination2.name, pagination2);
      };
      __webpack_exports__["default"] = pagination2;
    }
  });
})(pagination);
var Pagination = /* @__PURE__ */ getDefaultExportFromCjs(pagination.exports);
var table2 = { exports: {} };
var checkboxGroup = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 92);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    92: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-checkbox-group",
            attrs: { role: "group", "aria-label": "checkbox-group" }
          },
          [_vm._t("default")],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var checkbox_groupvue_type_script_lang_js_ = {
        name: "ElCheckboxGroup",
        componentName: "ElCheckboxGroup",
        mixins: [emitter_default.a],
        inject: {
          elFormItem: {
            default: ""
          }
        },
        props: {
          value: {},
          disabled: Boolean,
          min: Number,
          max: Number,
          size: String,
          fill: String,
          textColor: String
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          checkboxGroupSize: function checkboxGroupSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          }
        },
        watch: {
          value: function value(_value) {
            this.dispatch("ElFormItem", "el.form.change", [_value]);
          }
        }
      };
      var src_checkbox_groupvue_type_script_lang_js_ = checkbox_groupvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_checkbox_groupvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/checkbox/src/checkbox-group.vue";
      var checkbox_group = component.exports;
      checkbox_group.install = function(Vue2) {
        Vue2.component(checkbox_group.name, checkbox_group);
      };
      __webpack_exports__["default"] = checkbox_group;
    }
  });
})(checkboxGroup);
var _populated = false;
var _ie, _firefox, _opera, _webkit, _chrome;
var _ie_real_version;
var _osx, _windows, _linux, _android;
var _win64;
var _iphone, _ipad, _native;
var _mobile;
function _populate() {
  if (_populated) {
    return;
  }
  _populated = true;
  var uas = navigator.userAgent;
  var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);
  _iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
  _ipad = /\b(iP[ao]d)/.exec(uas);
  _android = /Android/i.exec(uas);
  _native = /FBAN\/\w+;/i.exec(uas);
  _mobile = /Mobile/i.exec(uas);
  _win64 = !!/Win64/.exec(uas);
  if (agent) {
    _ie = agent[1] ? parseFloat(agent[1]) : agent[5] ? parseFloat(agent[5]) : NaN;
    if (_ie && document && document.documentMode) {
      _ie = document.documentMode;
    }
    var trident2 = /(?:Trident\/(\d+.\d+))/.exec(uas);
    _ie_real_version = trident2 ? parseFloat(trident2[1]) + 4 : _ie;
    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;
    _opera = agent[3] ? parseFloat(agent[3]) : NaN;
    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;
    if (_webkit) {
      agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
    } else {
      _chrome = NaN;
    }
  } else {
    _ie = _firefox = _opera = _chrome = _webkit = NaN;
  }
  if (os) {
    if (os[1]) {
      var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);
      _osx = ver ? parseFloat(ver[1].replace("_", ".")) : true;
    } else {
      _osx = false;
    }
    _windows = !!os[2];
    _linux = !!os[3];
  } else {
    _osx = _windows = _linux = false;
  }
}
var UserAgent_DEPRECATED$1 = {
  ie: function() {
    return _populate() || _ie;
  },
  ieCompatibilityMode: function() {
    return _populate() || _ie_real_version > _ie;
  },
  ie64: function() {
    return UserAgent_DEPRECATED$1.ie() && _win64;
  },
  firefox: function() {
    return _populate() || _firefox;
  },
  opera: function() {
    return _populate() || _opera;
  },
  webkit: function() {
    return _populate() || _webkit;
  },
  safari: function() {
    return UserAgent_DEPRECATED$1.webkit();
  },
  chrome: function() {
    return _populate() || _chrome;
  },
  windows: function() {
    return _populate() || _windows;
  },
  osx: function() {
    return _populate() || _osx;
  },
  linux: function() {
    return _populate() || _linux;
  },
  iphone: function() {
    return _populate() || _iphone;
  },
  mobile: function() {
    return _populate() || (_iphone || _ipad || _android || _mobile);
  },
  nativeApp: function() {
    return _populate() || _native;
  },
  android: function() {
    return _populate() || _android;
  },
  ipad: function() {
    return _populate() || _ipad;
  }
};
var UserAgent_DEPRECATED_1 = UserAgent_DEPRECATED$1;
var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
var ExecutionEnvironment$1 = {
  canUseDOM,
  canUseWorkers: typeof Worker !== "undefined",
  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
  canUseViewport: canUseDOM && !!window.screen,
  isInWorker: !canUseDOM
};
var ExecutionEnvironment_1 = ExecutionEnvironment$1;
var ExecutionEnvironment = ExecutionEnvironment_1;
var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature && document.implementation.hasFeature("", "") !== true;
}
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported$1(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !("addEventListener" in document)) {
    return false;
  }
  var eventName = "on" + eventNameSuffix;
  var isSupported = eventName in document;
  if (!isSupported) {
    var element = document.createElement("div");
    element.setAttribute(eventName, "return;");
    isSupported = typeof element[eventName] === "function";
  }
  if (!isSupported && useHasFeature && eventNameSuffix === "wheel") {
    isSupported = document.implementation.hasFeature("Events.wheel", "3.0");
  }
  return isSupported;
}
var isEventSupported_1 = isEventSupported$1;
var UserAgent_DEPRECATED = UserAgent_DEPRECATED_1;
var isEventSupported = isEventSupported_1;
var PIXEL_STEP = 10;
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
function normalizeWheel$1(event) {
  var sX = 0, sY = 0, pX = 0, pY = 0;
  if ("detail" in event) {
    sY = event.detail;
  }
  if ("wheelDelta" in event) {
    sY = -event.wheelDelta / 120;
  }
  if ("wheelDeltaY" in event) {
    sY = -event.wheelDeltaY / 120;
  }
  if ("wheelDeltaX" in event) {
    sX = -event.wheelDeltaX / 120;
  }
  if ("axis" in event && event.axis === event.HORIZONTAL_AXIS) {
    sX = sY;
    sY = 0;
  }
  pX = sX * PIXEL_STEP;
  pY = sY * PIXEL_STEP;
  if ("deltaY" in event) {
    pY = event.deltaY;
  }
  if ("deltaX" in event) {
    pX = event.deltaX;
  }
  if ((pX || pY) && event.deltaMode) {
    if (event.deltaMode == 1) {
      pX *= LINE_HEIGHT;
      pY *= LINE_HEIGHT;
    } else {
      pX *= PAGE_HEIGHT;
      pY *= PAGE_HEIGHT;
    }
  }
  if (pX && !sX) {
    sX = pX < 1 ? -1 : 1;
  }
  if (pY && !sY) {
    sY = pY < 1 ? -1 : 1;
  }
  return {
    spinX: sX,
    spinY: sY,
    pixelX: pX,
    pixelY: pY
  };
}
normalizeWheel$1.getEventType = function() {
  return UserAgent_DEPRECATED.firefox() ? "DOMMouseScroll" : isEventSupported("wheel") ? "wheel" : "mousewheel";
};
var normalizeWheel_1 = normalizeWheel$1;
var normalizeWheel = normalizeWheel_1;
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 57);
  }([
    function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    ,
    function(module2, exports) {
      module2.exports = dom;
    },
    function(module2, exports) {
      module2.exports = util$2;
    },
    ,
    function(module2, exports) {
      module2.exports = vuePopper;
    },
    function(module2, exports) {
      module2.exports = locale;
    },
    function(module2, exports) {
      module2.exports = Vue;
    },
    function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "b", function() {
        return getCell;
      });
      __webpack_require__.d(__webpack_exports__, "i", function() {
        return orderBy;
      });
      __webpack_require__.d(__webpack_exports__, "d", function() {
        return getColumnById;
      });
      __webpack_require__.d(__webpack_exports__, "e", function() {
        return getColumnByKey;
      });
      __webpack_require__.d(__webpack_exports__, "c", function() {
        return getColumnByCell;
      });
      __webpack_require__.d(__webpack_exports__, "g", function() {
        return getRowIdentity;
      });
      __webpack_require__.d(__webpack_exports__, "f", function() {
        return getKeysMap;
      });
      __webpack_require__.d(__webpack_exports__, "h", function() {
        return mergeOptions;
      });
      __webpack_require__.d(__webpack_exports__, "l", function() {
        return parseWidth;
      });
      __webpack_require__.d(__webpack_exports__, "k", function() {
        return parseMinWidth;
      });
      __webpack_require__.d(__webpack_exports__, "j", function() {
        return parseHeight;
      });
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return compose;
      });
      __webpack_require__.d(__webpack_exports__, "m", function() {
        return toggleRowStatus;
      });
      __webpack_require__.d(__webpack_exports__, "n", function() {
        return walkTreeNode;
      });
      var element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
      var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var getCell = function getCell2(event) {
        var cell = event.target;
        while (cell && cell.tagName.toUpperCase() !== "HTML") {
          if (cell.tagName.toUpperCase() === "TD") {
            return cell;
          }
          cell = cell.parentNode;
        }
        return null;
      };
      var isObject2 = function isObject3(obj) {
        return obj !== null && (typeof obj === "undefined" ? "undefined" : _typeof2(obj)) === "object";
      };
      var orderBy = function orderBy2(array, sortKey, reverse, sortMethod, sortBy) {
        if (!sortKey && !sortMethod && (!sortBy || Array.isArray(sortBy) && !sortBy.length)) {
          return array;
        }
        if (typeof reverse === "string") {
          reverse = reverse === "descending" ? -1 : 1;
        } else {
          reverse = reverse && reverse < 0 ? -1 : 1;
        }
        var getKey = sortMethod ? null : function(value, index2) {
          if (sortBy) {
            if (!Array.isArray(sortBy)) {
              sortBy = [sortBy];
            }
            return sortBy.map(function(by) {
              if (typeof by === "string") {
                return Object(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__["getValueByPath"])(value, by);
              } else {
                return by(value, index2, array);
              }
            });
          }
          if (sortKey !== "$key") {
            if (isObject2(value) && "$value" in value)
              value = value.$value;
          }
          return [isObject2(value) ? Object(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__["getValueByPath"])(value, sortKey) : value];
        };
        var compare = function compare2(a2, b2) {
          if (sortMethod) {
            return sortMethod(a2.value, b2.value);
          }
          for (var i = 0, len = a2.key.length; i < len; i++) {
            if (a2.key[i] < b2.key[i]) {
              return -1;
            }
            if (a2.key[i] > b2.key[i]) {
              return 1;
            }
          }
          return 0;
        };
        return array.map(function(value, index2) {
          return {
            value,
            index: index2,
            key: getKey ? getKey(value, index2) : null
          };
        }).sort(function(a2, b2) {
          var order2 = compare(a2, b2);
          if (!order2) {
            order2 = a2.index - b2.index;
          }
          return order2 * reverse;
        }).map(function(item2) {
          return item2.value;
        });
      };
      var getColumnById = function getColumnById2(table3, columnId) {
        var column = null;
        table3.columns.forEach(function(item2) {
          if (item2.id === columnId) {
            column = item2;
          }
        });
        return column;
      };
      var getColumnByKey = function getColumnByKey2(table3, columnKey) {
        var column = null;
        for (var i = 0; i < table3.columns.length; i++) {
          var item2 = table3.columns[i];
          if (item2.columnKey === columnKey) {
            column = item2;
            break;
          }
        }
        return column;
      };
      var getColumnByCell = function getColumnByCell2(table3, cell) {
        var matches = (cell.className || "").match(/el-table_[^\s]+/gm);
        if (matches) {
          return getColumnById(table3, matches[0]);
        }
        return null;
      };
      var getRowIdentity = function getRowIdentity2(row2, rowKey) {
        if (!row2)
          throw new Error("row is required when get row identity");
        if (typeof rowKey === "string") {
          if (rowKey.indexOf(".") < 0) {
            return row2[rowKey];
          }
          var key2 = rowKey.split(".");
          var current = row2;
          for (var i = 0; i < key2.length; i++) {
            current = current[key2[i]];
          }
          return current;
        } else if (typeof rowKey === "function") {
          return rowKey.call(null, row2);
        }
      };
      var getKeysMap = function getKeysMap2(array, rowKey) {
        var arrayMap = {};
        (array || []).forEach(function(row2, index2) {
          arrayMap[getRowIdentity(row2, rowKey)] = { row: row2, index: index2 };
        });
        return arrayMap;
      };
      function hasOwn2(obj, key2) {
        return Object.prototype.hasOwnProperty.call(obj, key2);
      }
      function mergeOptions(defaults, config2) {
        var options2 = {};
        var key2 = void 0;
        for (key2 in defaults) {
          options2[key2] = defaults[key2];
        }
        for (key2 in config2) {
          if (hasOwn2(config2, key2)) {
            var value = config2[key2];
            if (typeof value !== "undefined") {
              options2[key2] = value;
            }
          }
        }
        return options2;
      }
      function parseWidth(width) {
        if (width !== void 0) {
          width = parseInt(width, 10);
          if (isNaN(width)) {
            width = null;
          }
        }
        return width;
      }
      function parseMinWidth(minWidth) {
        if (typeof minWidth !== "undefined") {
          minWidth = parseWidth(minWidth);
          if (isNaN(minWidth)) {
            minWidth = 80;
          }
        }
        return minWidth;
      }
      function parseHeight(height) {
        if (typeof height === "number") {
          return height;
        }
        if (typeof height === "string") {
          if (/^\d+(?:px)?$/.test(height)) {
            return parseInt(height, 10);
          } else {
            return height;
          }
        }
        return null;
      }
      function compose() {
        for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
          funcs[_key] = arguments[_key];
        }
        if (funcs.length === 0) {
          return function(arg) {
            return arg;
          };
        }
        if (funcs.length === 1) {
          return funcs[0];
        }
        return funcs.reduce(function(a2, b2) {
          return function() {
            return a2(b2.apply(void 0, arguments));
          };
        });
      }
      function toggleRowStatus(statusArr, row2, newVal) {
        var changed = false;
        var index2 = statusArr.indexOf(row2);
        var included = index2 !== -1;
        var addRow = function addRow2() {
          statusArr.push(row2);
          changed = true;
        };
        var removeRow = function removeRow2() {
          statusArr.splice(index2, 1);
          changed = true;
        };
        if (typeof newVal === "boolean") {
          if (newVal && !included) {
            addRow();
          } else if (!newVal && included) {
            removeRow();
          }
        } else {
          if (included) {
            removeRow();
          } else {
            addRow();
          }
        }
        return changed;
      }
      function walkTreeNode(root2, cb) {
        var childrenKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
        var lazyKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "hasChildren";
        var isNil = function isNil2(array) {
          return !(Array.isArray(array) && array.length);
        };
        function _walker(parent, children, level) {
          cb(parent, children, level);
          children.forEach(function(item2) {
            if (item2[lazyKey]) {
              cb(item2, null, level + 1);
              return;
            }
            var children2 = item2[childrenKey];
            if (!isNil(children2)) {
              _walker(item2, children2, level + 1);
            }
          });
        }
        root2.forEach(function(item2) {
          if (item2[lazyKey]) {
            cb(item2, null, 0);
            return;
          }
          var children = item2[childrenKey];
          if (!isNil(children)) {
            _walker(item2, children, 0);
          }
        });
      }
    },
    function(module2, exports) {
      module2.exports = merge;
    },
    ,
    function(module2, exports) {
      module2.exports = migrating;
    },
    function(module2, exports) {
      module2.exports = clickoutside;
    },
    function(module2, exports) {
      module2.exports = popup;
    },
    ,
    function(module2, exports) {
      module2.exports = scrollbar.exports;
    },
    function(module2, exports) {
      module2.exports = resizeEvent;
    },
    ,
    function(module2, exports) {
      module2.exports = checkbox.exports;
    },
    function(module2, exports) {
      module2.exports = debounce$1;
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(module2, exports) {
      module2.exports = tooltip$1.exports;
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(module2, exports) {
      module2.exports = scrollbarWidth;
    },
    function(module2, exports) {
      module2.exports = checkboxGroup.exports;
    },
    ,
    ,
    ,
    function(module2, exports) {
      module2.exports = throttleDebounce;
    },
    ,
    ,
    function(module2, exports) {
      module2.exports = normalizeWheel;
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-table",
            class: [
              {
                "el-table--fit": _vm.fit,
                "el-table--striped": _vm.stripe,
                "el-table--border": _vm.border || _vm.isGroup,
                "el-table--hidden": _vm.isHidden,
                "el-table--group": _vm.isGroup,
                "el-table--fluid-height": _vm.maxHeight,
                "el-table--scrollable-x": _vm.layout.scrollX,
                "el-table--scrollable-y": _vm.layout.scrollY,
                "el-table--enable-row-hover": !_vm.store.states.isComplex,
                "el-table--enable-row-transition": (_vm.store.states.data || []).length !== 0 && (_vm.store.states.data || []).length < 100
              },
              _vm.tableSize ? "el-table--" + _vm.tableSize : ""
            ],
            on: {
              mouseleave: function($event) {
                _vm.handleMouseLeave($event);
              }
            }
          },
          [
            _c(
              "div",
              { ref: "hiddenColumns", staticClass: "hidden-columns" },
              [_vm._t("default")],
              2
            ),
            _vm.showHeader ? _c(
              "div",
              {
                directives: [
                  {
                    name: "mousewheel",
                    rawName: "v-mousewheel",
                    value: _vm.handleHeaderFooterMousewheel,
                    expression: "handleHeaderFooterMousewheel"
                  }
                ],
                ref: "headerWrapper",
                staticClass: "el-table__header-wrapper"
              },
              [
                _c("table-header", {
                  ref: "tableHeader",
                  style: {
                    width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + "px" : ""
                  },
                  attrs: {
                    store: _vm.store,
                    border: _vm.border,
                    "default-sort": _vm.defaultSort
                  }
                })
              ],
              1
            ) : _vm._e(),
            _c(
              "div",
              {
                ref: "bodyWrapper",
                staticClass: "el-table__body-wrapper",
                class: [
                  _vm.layout.scrollX ? "is-scrolling-" + _vm.scrollPosition : "is-scrolling-none"
                ],
                style: [_vm.bodyHeight]
              },
              [
                _c("table-body", {
                  style: {
                    width: _vm.bodyWidth
                  },
                  attrs: {
                    context: _vm.context,
                    store: _vm.store,
                    stripe: _vm.stripe,
                    "row-class-name": _vm.rowClassName,
                    "row-style": _vm.rowStyle,
                    highlight: _vm.highlightCurrentRow
                  }
                }),
                !_vm.data || _vm.data.length === 0 ? _c(
                  "div",
                  {
                    ref: "emptyBlock",
                    staticClass: "el-table__empty-block",
                    style: _vm.emptyBlockStyle
                  },
                  [
                    _c(
                      "span",
                      { staticClass: "el-table__empty-text" },
                      [
                        _vm._t("empty", [
                          _vm._v(
                            _vm._s(_vm.emptyText || _vm.t("el.table.emptyText"))
                          )
                        ])
                      ],
                      2
                    )
                  ]
                ) : _vm._e(),
                _vm.$slots.append ? _c(
                  "div",
                  {
                    ref: "appendWrapper",
                    staticClass: "el-table__append-wrapper"
                  },
                  [_vm._t("append")],
                  2
                ) : _vm._e()
              ],
              1
            ),
            _vm.showSummary ? _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.data && _vm.data.length > 0,
                    expression: "data && data.length > 0"
                  },
                  {
                    name: "mousewheel",
                    rawName: "v-mousewheel",
                    value: _vm.handleHeaderFooterMousewheel,
                    expression: "handleHeaderFooterMousewheel"
                  }
                ],
                ref: "footerWrapper",
                staticClass: "el-table__footer-wrapper"
              },
              [
                _c("table-footer", {
                  style: {
                    width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + "px" : ""
                  },
                  attrs: {
                    store: _vm.store,
                    border: _vm.border,
                    "sum-text": _vm.sumText || _vm.t("el.table.sumText"),
                    "summary-method": _vm.summaryMethod,
                    "default-sort": _vm.defaultSort
                  }
                })
              ],
              1
            ) : _vm._e(),
            _vm.fixedColumns.length > 0 ? _c(
              "div",
              {
                directives: [
                  {
                    name: "mousewheel",
                    rawName: "v-mousewheel",
                    value: _vm.handleFixedMousewheel,
                    expression: "handleFixedMousewheel"
                  }
                ],
                ref: "fixedWrapper",
                staticClass: "el-table__fixed",
                style: [
                  {
                    width: _vm.layout.fixedWidth ? _vm.layout.fixedWidth + "px" : ""
                  },
                  _vm.fixedHeight
                ]
              },
              [
                _vm.showHeader ? _c(
                  "div",
                  {
                    ref: "fixedHeaderWrapper",
                    staticClass: "el-table__fixed-header-wrapper"
                  },
                  [
                    _c("table-header", {
                      ref: "fixedTableHeader",
                      style: {
                        width: _vm.bodyWidth
                      },
                      attrs: {
                        fixed: "left",
                        border: _vm.border,
                        store: _vm.store
                      }
                    })
                  ],
                  1
                ) : _vm._e(),
                _c(
                  "div",
                  {
                    ref: "fixedBodyWrapper",
                    staticClass: "el-table__fixed-body-wrapper",
                    style: [
                      {
                        top: _vm.layout.headerHeight + "px"
                      },
                      _vm.fixedBodyHeight
                    ]
                  },
                  [
                    _c("table-body", {
                      style: {
                        width: _vm.bodyWidth
                      },
                      attrs: {
                        fixed: "left",
                        store: _vm.store,
                        stripe: _vm.stripe,
                        highlight: _vm.highlightCurrentRow,
                        "row-class-name": _vm.rowClassName,
                        "row-style": _vm.rowStyle
                      }
                    }),
                    _vm.$slots.append ? _c("div", {
                      staticClass: "el-table__append-gutter",
                      style: { height: _vm.layout.appendHeight + "px" }
                    }) : _vm._e()
                  ],
                  1
                ),
                _vm.showSummary ? _c(
                  "div",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.data && _vm.data.length > 0,
                        expression: "data && data.length > 0"
                      }
                    ],
                    ref: "fixedFooterWrapper",
                    staticClass: "el-table__fixed-footer-wrapper"
                  },
                  [
                    _c("table-footer", {
                      style: {
                        width: _vm.bodyWidth
                      },
                      attrs: {
                        fixed: "left",
                        border: _vm.border,
                        "sum-text": _vm.sumText || _vm.t("el.table.sumText"),
                        "summary-method": _vm.summaryMethod,
                        store: _vm.store
                      }
                    })
                  ],
                  1
                ) : _vm._e()
              ]
            ) : _vm._e(),
            _vm.rightFixedColumns.length > 0 ? _c(
              "div",
              {
                directives: [
                  {
                    name: "mousewheel",
                    rawName: "v-mousewheel",
                    value: _vm.handleFixedMousewheel,
                    expression: "handleFixedMousewheel"
                  }
                ],
                ref: "rightFixedWrapper",
                staticClass: "el-table__fixed-right",
                style: [
                  {
                    width: _vm.layout.rightFixedWidth ? _vm.layout.rightFixedWidth + "px" : "",
                    right: _vm.layout.scrollY ? (_vm.border ? _vm.layout.gutterWidth : _vm.layout.gutterWidth || 0) + "px" : ""
                  },
                  _vm.fixedHeight
                ]
              },
              [
                _vm.showHeader ? _c(
                  "div",
                  {
                    ref: "rightFixedHeaderWrapper",
                    staticClass: "el-table__fixed-header-wrapper"
                  },
                  [
                    _c("table-header", {
                      ref: "rightFixedTableHeader",
                      style: {
                        width: _vm.bodyWidth
                      },
                      attrs: {
                        fixed: "right",
                        border: _vm.border,
                        store: _vm.store
                      }
                    })
                  ],
                  1
                ) : _vm._e(),
                _c(
                  "div",
                  {
                    ref: "rightFixedBodyWrapper",
                    staticClass: "el-table__fixed-body-wrapper",
                    style: [
                      {
                        top: _vm.layout.headerHeight + "px"
                      },
                      _vm.fixedBodyHeight
                    ]
                  },
                  [
                    _c("table-body", {
                      style: {
                        width: _vm.bodyWidth
                      },
                      attrs: {
                        fixed: "right",
                        store: _vm.store,
                        stripe: _vm.stripe,
                        "row-class-name": _vm.rowClassName,
                        "row-style": _vm.rowStyle,
                        highlight: _vm.highlightCurrentRow
                      }
                    }),
                    _vm.$slots.append ? _c("div", {
                      staticClass: "el-table__append-gutter",
                      style: { height: _vm.layout.appendHeight + "px" }
                    }) : _vm._e()
                  ],
                  1
                ),
                _vm.showSummary ? _c(
                  "div",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.data && _vm.data.length > 0,
                        expression: "data && data.length > 0"
                      }
                    ],
                    ref: "rightFixedFooterWrapper",
                    staticClass: "el-table__fixed-footer-wrapper"
                  },
                  [
                    _c("table-footer", {
                      style: {
                        width: _vm.bodyWidth
                      },
                      attrs: {
                        fixed: "right",
                        border: _vm.border,
                        "sum-text": _vm.sumText || _vm.t("el.table.sumText"),
                        "summary-method": _vm.summaryMethod,
                        store: _vm.store
                      }
                    })
                  ],
                  1
                ) : _vm._e()
              ]
            ) : _vm._e(),
            _vm.rightFixedColumns.length > 0 ? _c("div", {
              ref: "rightFixedPatch",
              staticClass: "el-table__fixed-right-patch",
              style: {
                width: _vm.layout.scrollY ? _vm.layout.gutterWidth + "px" : "0",
                height: _vm.layout.headerHeight + "px"
              }
            }) : _vm._e(),
            _c("div", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.resizeProxyVisible,
                  expression: "resizeProxyVisible"
                }
              ],
              ref: "resizeProxy",
              staticClass: "el-table__column-resize-proxy"
            })
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var checkbox_ = __webpack_require__(18);
      var checkbox_default = /* @__PURE__ */ __webpack_require__.n(checkbox_);
      var external_throttle_debounce_ = __webpack_require__(43);
      var resize_event_ = __webpack_require__(16);
      var external_normalize_wheel_ = __webpack_require__(46);
      var external_normalize_wheel_default = /* @__PURE__ */ __webpack_require__.n(external_normalize_wheel_);
      var isFirefox2 = typeof navigator !== "undefined" && navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
      var mousewheel_mousewheel = function mousewheel(element, callback) {
        if (element && element.addEventListener) {
          element.addEventListener(isFirefox2 ? "DOMMouseScroll" : "mousewheel", function(event) {
            var normalized = external_normalize_wheel_default()(event);
            callback && callback.apply(this, [event, normalized]);
          });
        }
      };
      var directives_mousewheel = {
        bind: function bind2(el2, binding) {
          mousewheel_mousewheel(el2, binding.value);
        }
      };
      var locale_ = __webpack_require__(6);
      var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
      var migrating_ = __webpack_require__(11);
      var migrating_default = /* @__PURE__ */ __webpack_require__.n(migrating_);
      var external_vue_ = __webpack_require__(7);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      var merge_ = __webpack_require__(9);
      var merge_default = /* @__PURE__ */ __webpack_require__.n(merge_);
      var util2 = __webpack_require__(8);
      var expand = {
        data: function data3() {
          return {
            states: {
              defaultExpandAll: false,
              expandRows: []
            }
          };
        },
        methods: {
          updateExpandRows: function updateExpandRows() {
            var _states = this.states, _states$data = _states.data, data3 = _states$data === void 0 ? [] : _states$data, rowKey = _states.rowKey, defaultExpandAll = _states.defaultExpandAll, expandRows = _states.expandRows;
            if (defaultExpandAll) {
              this.states.expandRows = data3.slice();
            } else if (rowKey) {
              var expandRowsMap = Object(util2["f"])(expandRows, rowKey);
              this.states.expandRows = data3.reduce(function(prev, row2) {
                var rowId = Object(util2["g"])(row2, rowKey);
                var rowInfo = expandRowsMap[rowId];
                if (rowInfo) {
                  prev.push(row2);
                }
                return prev;
              }, []);
            } else {
              this.states.expandRows = [];
            }
          },
          toggleRowExpansion: function toggleRowExpansion(row2, expanded2) {
            var changed = Object(util2["m"])(this.states.expandRows, row2, expanded2);
            if (changed) {
              this.table.$emit("expand-change", row2, this.states.expandRows.slice());
              this.scheduleLayout();
            }
          },
          setExpandRowKeys: function setExpandRowKeys(rowKeys) {
            this.assertRowKey();
            var _states2 = this.states, data3 = _states2.data, rowKey = _states2.rowKey;
            var keysMap = Object(util2["f"])(data3, rowKey);
            this.states.expandRows = rowKeys.reduce(function(prev, cur) {
              var info2 = keysMap[cur];
              if (info2) {
                prev.push(info2.row);
              }
              return prev;
            }, []);
          },
          isRowExpanded: function isRowExpanded(row2) {
            var _states3 = this.states, _states3$expandRows = _states3.expandRows, expandRows = _states3$expandRows === void 0 ? [] : _states3$expandRows, rowKey = _states3.rowKey;
            if (rowKey) {
              var expandMap = Object(util2["f"])(expandRows, rowKey);
              return !!expandMap[Object(util2["g"])(row2, rowKey)];
            }
            return expandRows.indexOf(row2) !== -1;
          }
        }
      };
      var util_ = __webpack_require__(3);
      var current = {
        data: function data3() {
          return {
            states: {
              _currentRowKey: null,
              currentRow: null
            }
          };
        },
        methods: {
          setCurrentRowKey: function setCurrentRowKey(key2) {
            this.assertRowKey();
            this.states._currentRowKey = key2;
            this.setCurrentRowByKey(key2);
          },
          restoreCurrentRowKey: function restoreCurrentRowKey() {
            this.states._currentRowKey = null;
          },
          setCurrentRowByKey: function setCurrentRowByKey(key2) {
            var states = this.states;
            var _states$data = states.data, data3 = _states$data === void 0 ? [] : _states$data, rowKey = states.rowKey;
            var currentRow = null;
            if (rowKey) {
              currentRow = Object(util_["arrayFind"])(data3, function(item2) {
                return Object(util2["g"])(item2, rowKey) === key2;
              });
            }
            states.currentRow = currentRow;
          },
          updateCurrentRow: function updateCurrentRow(currentRow) {
            var states = this.states, table3 = this.table;
            var oldCurrentRow = states.currentRow;
            if (currentRow && currentRow !== oldCurrentRow) {
              states.currentRow = currentRow;
              table3.$emit("current-change", currentRow, oldCurrentRow);
              return;
            }
            if (!currentRow && oldCurrentRow) {
              states.currentRow = null;
              table3.$emit("current-change", null, oldCurrentRow);
            }
          },
          updateCurrentRowData: function updateCurrentRowData() {
            var states = this.states, table3 = this.table;
            var rowKey = states.rowKey, _currentRowKey = states._currentRowKey;
            var data3 = states.data || [];
            var oldCurrentRow = states.currentRow;
            if (data3.indexOf(oldCurrentRow) === -1 && oldCurrentRow) {
              if (rowKey) {
                var currentRowKey = Object(util2["g"])(oldCurrentRow, rowKey);
                this.setCurrentRowByKey(currentRowKey);
              } else {
                states.currentRow = null;
              }
              if (states.currentRow === null) {
                table3.$emit("current-change", null, oldCurrentRow);
              }
            } else if (_currentRowKey) {
              this.setCurrentRowByKey(_currentRowKey);
              this.restoreCurrentRowKey();
            }
          }
        }
      };
      var _extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key2 in source) {
            if (Object.prototype.hasOwnProperty.call(source, key2)) {
              target2[key2] = source[key2];
            }
          }
        }
        return target2;
      };
      var tree = {
        data: function data3() {
          return {
            states: {
              expandRowKeys: [],
              treeData: {},
              indent: 16,
              lazy: false,
              lazyTreeNodeMap: {},
              lazyColumnIdentifier: "hasChildren",
              childrenColumnName: "children"
            }
          };
        },
        computed: {
          normalizedData: function normalizedData() {
            if (!this.states.rowKey)
              return {};
            var data3 = this.states.data || [];
            return this.normalize(data3);
          },
          normalizedLazyNode: function normalizedLazyNode() {
            var _states = this.states, rowKey = _states.rowKey, lazyTreeNodeMap = _states.lazyTreeNodeMap, lazyColumnIdentifier = _states.lazyColumnIdentifier;
            var keys = Object.keys(lazyTreeNodeMap);
            var res = {};
            if (!keys.length)
              return res;
            keys.forEach(function(key2) {
              if (lazyTreeNodeMap[key2].length) {
                var item2 = { children: [] };
                lazyTreeNodeMap[key2].forEach(function(row2) {
                  var currentRowKey = Object(util2["g"])(row2, rowKey);
                  item2.children.push(currentRowKey);
                  if (row2[lazyColumnIdentifier] && !res[currentRowKey]) {
                    res[currentRowKey] = { children: [] };
                  }
                });
                res[key2] = item2;
              }
            });
            return res;
          }
        },
        watch: {
          normalizedData: "updateTreeData",
          normalizedLazyNode: "updateTreeData"
        },
        methods: {
          normalize: function normalize4(data3) {
            var _states2 = this.states, childrenColumnName = _states2.childrenColumnName, lazyColumnIdentifier = _states2.lazyColumnIdentifier, rowKey = _states2.rowKey, lazy = _states2.lazy;
            var res = {};
            Object(util2["n"])(data3, function(parent, children, level) {
              var parentId = Object(util2["g"])(parent, rowKey);
              if (Array.isArray(children)) {
                res[parentId] = {
                  children: children.map(function(row2) {
                    return Object(util2["g"])(row2, rowKey);
                  }),
                  level
                };
              } else if (lazy) {
                res[parentId] = {
                  children: [],
                  lazy: true,
                  level
                };
              }
            }, childrenColumnName, lazyColumnIdentifier);
            return res;
          },
          updateTreeData: function updateTreeData() {
            var nested = this.normalizedData;
            var normalizedLazyNode = this.normalizedLazyNode;
            var keys = Object.keys(nested);
            var newTreeData = {};
            if (keys.length) {
              var _states3 = this.states, oldTreeData = _states3.treeData, defaultExpandAll = _states3.defaultExpandAll, expandRowKeys = _states3.expandRowKeys, lazy = _states3.lazy;
              var rootLazyRowKeys = [];
              var getExpanded = function getExpanded2(oldValue, key2) {
                var included = defaultExpandAll || expandRowKeys && expandRowKeys.indexOf(key2) !== -1;
                return !!(oldValue && oldValue.expanded || included);
              };
              keys.forEach(function(key2) {
                var oldValue = oldTreeData[key2];
                var newValue = _extends({}, nested[key2]);
                newValue.expanded = getExpanded(oldValue, key2);
                if (newValue.lazy) {
                  var _ref2 = oldValue || {}, _ref$loaded = _ref2.loaded, loaded2 = _ref$loaded === void 0 ? false : _ref$loaded, _ref$loading = _ref2.loading, loading2 = _ref$loading === void 0 ? false : _ref$loading;
                  newValue.loaded = !!loaded2;
                  newValue.loading = !!loading2;
                  rootLazyRowKeys.push(key2);
                }
                newTreeData[key2] = newValue;
              });
              var lazyKeys = Object.keys(normalizedLazyNode);
              if (lazy && lazyKeys.length && rootLazyRowKeys.length) {
                lazyKeys.forEach(function(key2) {
                  var oldValue = oldTreeData[key2];
                  var lazyNodeChildren = normalizedLazyNode[key2].children;
                  if (rootLazyRowKeys.indexOf(key2) !== -1) {
                    if (newTreeData[key2].children.length !== 0) {
                      throw new Error("[ElTable]children must be an empty array.");
                    }
                    newTreeData[key2].children = lazyNodeChildren;
                  } else {
                    var _ref2 = oldValue || {}, _ref2$loaded = _ref2.loaded, loaded2 = _ref2$loaded === void 0 ? false : _ref2$loaded, _ref2$loading = _ref2.loading, loading2 = _ref2$loading === void 0 ? false : _ref2$loading;
                    newTreeData[key2] = {
                      lazy: true,
                      loaded: !!loaded2,
                      loading: !!loading2,
                      expanded: getExpanded(oldValue, key2),
                      children: lazyNodeChildren,
                      level: ""
                    };
                  }
                });
              }
            }
            this.states.treeData = newTreeData;
            this.updateTableScrollY();
          },
          updateTreeExpandKeys: function updateTreeExpandKeys(value) {
            this.states.expandRowKeys = value;
            this.updateTreeData();
          },
          toggleTreeExpansion: function toggleTreeExpansion(row2, expanded2) {
            this.assertRowKey();
            var _states4 = this.states, rowKey = _states4.rowKey, treeData = _states4.treeData;
            var id2 = Object(util2["g"])(row2, rowKey);
            var data3 = id2 && treeData[id2];
            if (id2 && data3 && "expanded" in data3) {
              var oldExpanded = data3.expanded;
              expanded2 = typeof expanded2 === "undefined" ? !data3.expanded : expanded2;
              treeData[id2].expanded = expanded2;
              if (oldExpanded !== expanded2) {
                this.table.$emit("expand-change", row2, expanded2);
              }
              this.updateTableScrollY();
            }
          },
          loadOrToggle: function loadOrToggle(row2) {
            this.assertRowKey();
            var _states5 = this.states, lazy = _states5.lazy, treeData = _states5.treeData, rowKey = _states5.rowKey;
            var id2 = Object(util2["g"])(row2, rowKey);
            var data3 = treeData[id2];
            if (lazy && data3 && "loaded" in data3 && !data3.loaded) {
              this.loadData(row2, id2, data3);
            } else {
              this.toggleTreeExpansion(row2);
            }
          },
          loadData: function loadData(row2, key2, treeNode) {
            var _this = this;
            var load = this.table.load;
            var rawTreeData = this.states.treeData;
            if (load && !rawTreeData[key2].loaded) {
              rawTreeData[key2].loading = true;
              load(row2, treeNode, function(data3) {
                if (!Array.isArray(data3)) {
                  throw new Error("[ElTable] data must be an array");
                }
                var _states6 = _this.states, lazyTreeNodeMap = _states6.lazyTreeNodeMap, treeData = _states6.treeData;
                treeData[key2].loading = false;
                treeData[key2].loaded = true;
                treeData[key2].expanded = true;
                if (data3.length) {
                  _this.$set(lazyTreeNodeMap, key2, data3);
                }
                _this.table.$emit("expand-change", row2, true);
              });
            }
          }
        }
      };
      var watcher_sortData = function sortData(data3, states) {
        var sortingColumn = states.sortingColumn;
        if (!sortingColumn || typeof sortingColumn.sortable === "string") {
          return data3;
        }
        return Object(util2["i"])(data3, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);
      };
      var doFlattenColumns = function doFlattenColumns2(columns) {
        var result2 = [];
        columns.forEach(function(column) {
          if (column.children) {
            result2.push.apply(result2, doFlattenColumns2(column.children));
          } else {
            result2.push(column);
          }
        });
        return result2;
      };
      var watcher = external_vue_default.a.extend({
        data: function data3() {
          return {
            states: {
              rowKey: null,
              data: [],
              isComplex: false,
              _columns: [],
              originColumns: [],
              columns: [],
              fixedColumns: [],
              rightFixedColumns: [],
              leafColumns: [],
              fixedLeafColumns: [],
              rightFixedLeafColumns: [],
              leafColumnsLength: 0,
              fixedLeafColumnsLength: 0,
              rightFixedLeafColumnsLength: 0,
              isAllSelected: false,
              selection: [],
              reserveSelection: false,
              selectOnIndeterminate: false,
              selectable: null,
              filters: {},
              filteredData: null,
              sortingColumn: null,
              sortProp: null,
              sortOrder: null,
              hoverRow: null
            }
          };
        },
        mixins: [expand, current, tree],
        methods: {
          assertRowKey: function assertRowKey() {
            var rowKey = this.states.rowKey;
            if (!rowKey)
              throw new Error("[ElTable] prop row-key is required");
          },
          updateColumns: function updateColumns() {
            var states = this.states;
            var _columns = states._columns || [];
            states.fixedColumns = _columns.filter(function(column) {
              return column.fixed === true || column.fixed === "left";
            });
            states.rightFixedColumns = _columns.filter(function(column) {
              return column.fixed === "right";
            });
            if (states.fixedColumns.length > 0 && _columns[0] && _columns[0].type === "selection" && !_columns[0].fixed) {
              _columns[0].fixed = true;
              states.fixedColumns.unshift(_columns[0]);
            }
            var notFixedColumns = _columns.filter(function(column) {
              return !column.fixed;
            });
            states.originColumns = [].concat(states.fixedColumns).concat(notFixedColumns).concat(states.rightFixedColumns);
            var leafColumns = doFlattenColumns(notFixedColumns);
            var fixedLeafColumns = doFlattenColumns(states.fixedColumns);
            var rightFixedLeafColumns = doFlattenColumns(states.rightFixedColumns);
            states.leafColumnsLength = leafColumns.length;
            states.fixedLeafColumnsLength = fixedLeafColumns.length;
            states.rightFixedLeafColumnsLength = rightFixedLeafColumns.length;
            states.columns = [].concat(fixedLeafColumns).concat(leafColumns).concat(rightFixedLeafColumns);
            states.isComplex = states.fixedColumns.length > 0 || states.rightFixedColumns.length > 0;
          },
          scheduleLayout: function scheduleLayout(needUpdateColumns) {
            if (needUpdateColumns) {
              this.updateColumns();
            }
            this.table.debouncedUpdateLayout();
          },
          isSelected: function isSelected(row2) {
            var _states$selection = this.states.selection, selection = _states$selection === void 0 ? [] : _states$selection;
            return selection.indexOf(row2) > -1;
          },
          clearSelection: function clearSelection() {
            var states = this.states;
            states.isAllSelected = false;
            var oldSelection = states.selection;
            if (oldSelection.length) {
              states.selection = [];
              this.table.$emit("selection-change", []);
            }
          },
          cleanSelection: function cleanSelection() {
            var states = this.states;
            var data3 = states.data, rowKey = states.rowKey, selection = states.selection;
            var deleted = void 0;
            if (rowKey) {
              deleted = [];
              var selectedMap = Object(util2["f"])(selection, rowKey);
              var dataMap = Object(util2["f"])(data3, rowKey);
              for (var key2 in selectedMap) {
                if (selectedMap.hasOwnProperty(key2) && !dataMap[key2]) {
                  deleted.push(selectedMap[key2].row);
                }
              }
            } else {
              deleted = selection.filter(function(item2) {
                return data3.indexOf(item2) === -1;
              });
            }
            if (deleted.length) {
              var newSelection = selection.filter(function(item2) {
                return deleted.indexOf(item2) === -1;
              });
              states.selection = newSelection;
              this.table.$emit("selection-change", newSelection.slice());
            }
          },
          toggleRowSelection: function toggleRowSelection(row2, selected) {
            var emitChange = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
            var changed = Object(util2["m"])(this.states.selection, row2, selected);
            if (changed) {
              var newSelection = (this.states.selection || []).slice();
              if (emitChange) {
                this.table.$emit("select", newSelection, row2);
              }
              this.table.$emit("selection-change", newSelection);
            }
          },
          _toggleAllSelection: function _toggleAllSelection() {
            var states = this.states;
            var _states$data = states.data, data3 = _states$data === void 0 ? [] : _states$data, selection = states.selection;
            var value = states.selectOnIndeterminate ? !states.isAllSelected : !(states.isAllSelected || selection.length);
            states.isAllSelected = value;
            var selectionChanged = false;
            data3.forEach(function(row2, index2) {
              if (states.selectable) {
                if (states.selectable.call(null, row2, index2) && Object(util2["m"])(selection, row2, value)) {
                  selectionChanged = true;
                }
              } else {
                if (Object(util2["m"])(selection, row2, value)) {
                  selectionChanged = true;
                }
              }
            });
            if (selectionChanged) {
              this.table.$emit("selection-change", selection ? selection.slice() : []);
            }
            this.table.$emit("select-all", selection);
          },
          updateSelectionByRowKey: function updateSelectionByRowKey() {
            var states = this.states;
            var selection = states.selection, rowKey = states.rowKey, data3 = states.data;
            var selectedMap = Object(util2["f"])(selection, rowKey);
            data3.forEach(function(row2) {
              var rowId = Object(util2["g"])(row2, rowKey);
              var rowInfo = selectedMap[rowId];
              if (rowInfo) {
                selection[rowInfo.index] = row2;
              }
            });
          },
          updateAllSelected: function updateAllSelected() {
            var states = this.states;
            var selection = states.selection, rowKey = states.rowKey, selectable = states.selectable;
            var data3 = states.data || [];
            if (data3.length === 0) {
              states.isAllSelected = false;
              return;
            }
            var selectedMap = void 0;
            if (rowKey) {
              selectedMap = Object(util2["f"])(selection, rowKey);
            }
            var isSelected = function isSelected2(row2) {
              if (selectedMap) {
                return !!selectedMap[Object(util2["g"])(row2, rowKey)];
              } else {
                return selection.indexOf(row2) !== -1;
              }
            };
            var isAllSelected = true;
            var selectedCount = 0;
            for (var i = 0, j = data3.length; i < j; i++) {
              var item2 = data3[i];
              var isRowSelectable = selectable && selectable.call(null, item2, i);
              if (!isSelected(item2)) {
                if (!selectable || isRowSelectable) {
                  isAllSelected = false;
                  break;
                }
              } else {
                selectedCount++;
              }
            }
            if (selectedCount === 0)
              isAllSelected = false;
            states.isAllSelected = isAllSelected;
          },
          updateFilters: function updateFilters(columns, values) {
            if (!Array.isArray(columns)) {
              columns = [columns];
            }
            var states = this.states;
            var filters = {};
            columns.forEach(function(col2) {
              states.filters[col2.id] = values;
              filters[col2.columnKey || col2.id] = values;
            });
            return filters;
          },
          updateSort: function updateSort(column, prop2, order2) {
            if (this.states.sortingColumn && this.states.sortingColumn !== column) {
              this.states.sortingColumn.order = null;
            }
            this.states.sortingColumn = column;
            this.states.sortProp = prop2;
            this.states.sortOrder = order2;
          },
          execFilter: function execFilter() {
            var _this = this;
            var states = this.states;
            var _data = states._data, filters = states.filters;
            var data3 = _data;
            Object.keys(filters).forEach(function(columnId) {
              var values = states.filters[columnId];
              if (!values || values.length === 0)
                return;
              var column = Object(util2["d"])(_this.states, columnId);
              if (column && column.filterMethod) {
                data3 = data3.filter(function(row2) {
                  return values.some(function(value) {
                    return column.filterMethod.call(null, value, row2, column);
                  });
                });
              }
            });
            states.filteredData = data3;
          },
          execSort: function execSort() {
            var states = this.states;
            states.data = watcher_sortData(states.filteredData, states);
          },
          execQuery: function execQuery(ignore) {
            if (!(ignore && ignore.filter)) {
              this.execFilter();
            }
            this.execSort();
          },
          clearFilter: function clearFilter(columnKeys) {
            var states = this.states;
            var _table$$refs = this.table.$refs, tableHeader = _table$$refs.tableHeader, fixedTableHeader = _table$$refs.fixedTableHeader, rightFixedTableHeader = _table$$refs.rightFixedTableHeader;
            var panels = {};
            if (tableHeader)
              panels = merge_default()(panels, tableHeader.filterPanels);
            if (fixedTableHeader)
              panels = merge_default()(panels, fixedTableHeader.filterPanels);
            if (rightFixedTableHeader)
              panels = merge_default()(panels, rightFixedTableHeader.filterPanels);
            var keys = Object.keys(panels);
            if (!keys.length)
              return;
            if (typeof columnKeys === "string") {
              columnKeys = [columnKeys];
            }
            if (Array.isArray(columnKeys)) {
              var columns = columnKeys.map(function(key2) {
                return Object(util2["e"])(states, key2);
              });
              keys.forEach(function(key2) {
                var column = columns.find(function(col2) {
                  return col2.id === key2;
                });
                if (column) {
                  panels[key2].filteredValue = [];
                }
              });
              this.commit("filterChange", {
                column: columns,
                values: [],
                silent: true,
                multi: true
              });
            } else {
              keys.forEach(function(key2) {
                panels[key2].filteredValue = [];
              });
              states.filters = {};
              this.commit("filterChange", {
                column: {},
                values: [],
                silent: true
              });
            }
          },
          clearSort: function clearSort() {
            var states = this.states;
            if (!states.sortingColumn)
              return;
            this.updateSort(null, null, null);
            this.commit("changeSortCondition", {
              silent: true
            });
          },
          setExpandRowKeysAdapter: function setExpandRowKeysAdapter(val) {
            this.setExpandRowKeys(val);
            this.updateTreeExpandKeys(val);
          },
          toggleRowExpansionAdapter: function toggleRowExpansionAdapter(row2, expanded2) {
            var hasExpandColumn = this.states.columns.some(function(_ref2) {
              var type = _ref2.type;
              return type === "expand";
            });
            if (hasExpandColumn) {
              this.toggleRowExpansion(row2, expanded2);
            } else {
              this.toggleTreeExpansion(row2, expanded2);
            }
          }
        }
      });
      watcher.prototype.mutations = {
        setData: function setData(states, data3) {
          var dataInstanceChanged = states._data !== data3;
          states._data = data3;
          this.execQuery();
          this.updateCurrentRowData();
          this.updateExpandRows();
          if (states.reserveSelection) {
            this.assertRowKey();
            this.updateSelectionByRowKey();
          } else {
            if (dataInstanceChanged) {
              this.clearSelection();
            } else {
              this.cleanSelection();
            }
          }
          this.updateAllSelected();
          this.updateTableScrollY();
        },
        insertColumn: function insertColumn(states, column, index2, parent) {
          var array = states._columns;
          if (parent) {
            array = parent.children;
            if (!array)
              array = parent.children = [];
          }
          if (typeof index2 !== "undefined") {
            array.splice(index2, 0, column);
          } else {
            array.push(column);
          }
          if (column.type === "selection") {
            states.selectable = column.selectable;
            states.reserveSelection = column.reserveSelection;
          }
          if (this.table.$ready) {
            this.updateColumns();
            this.scheduleLayout();
          }
        },
        removeColumn: function removeColumn(states, column, parent) {
          var array = states._columns;
          if (parent) {
            array = parent.children;
            if (!array)
              array = parent.children = [];
          }
          if (array) {
            array.splice(array.indexOf(column), 1);
          }
          if (this.table.$ready) {
            this.updateColumns();
            this.scheduleLayout();
          }
        },
        sort: function sort(states, options2) {
          var prop2 = options2.prop, order2 = options2.order, init = options2.init;
          if (prop2) {
            var column = Object(util_["arrayFind"])(states.columns, function(column2) {
              return column2.property === prop2;
            });
            if (column) {
              column.order = order2;
              this.updateSort(column, prop2, order2);
              this.commit("changeSortCondition", { init });
            }
          }
        },
        changeSortCondition: function changeSortCondition(states, options2) {
          var column = states.sortingColumn, prop2 = states.sortProp, order2 = states.sortOrder;
          if (order2 === null) {
            states.sortingColumn = null;
            states.sortProp = null;
          }
          var ingore = { filter: true };
          this.execQuery(ingore);
          if (!options2 || !(options2.silent || options2.init)) {
            this.table.$emit("sort-change", {
              column,
              prop: prop2,
              order: order2
            });
          }
          this.updateTableScrollY();
        },
        filterChange: function filterChange(states, options2) {
          var column = options2.column, values = options2.values, silent = options2.silent;
          var newFilters = this.updateFilters(column, values);
          this.execQuery();
          if (!silent) {
            this.table.$emit("filter-change", newFilters);
          }
          this.updateTableScrollY();
        },
        toggleAllSelection: function toggleAllSelection() {
          this.toggleAllSelection();
        },
        rowSelectedChanged: function rowSelectedChanged(states, row2) {
          this.toggleRowSelection(row2);
          this.updateAllSelected();
        },
        setHoverRow: function setHoverRow(states, row2) {
          states.hoverRow = row2;
        },
        setCurrentRow: function setCurrentRow(states, row2) {
          this.updateCurrentRow(row2);
        }
      };
      watcher.prototype.commit = function(name) {
        var mutations = this.mutations;
        if (mutations[name]) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          mutations[name].apply(this, [this.states].concat(args));
        } else {
          throw new Error("Action not found: " + name);
        }
      };
      watcher.prototype.updateTableScrollY = function() {
        external_vue_default.a.nextTick(this.table.updateScrollY);
      };
      var src_store = watcher;
      var debounce_ = __webpack_require__(19);
      var debounce_default = /* @__PURE__ */ __webpack_require__.n(debounce_);
      function createStore(table3) {
        var initialState = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (!table3) {
          throw new Error("Table is required.");
        }
        var store = new src_store();
        store.table = table3;
        store.toggleAllSelection = debounce_default()(10, store._toggleAllSelection);
        Object.keys(initialState).forEach(function(key2) {
          store.states[key2] = initialState[key2];
        });
        return store;
      }
      function mapStates(mapper) {
        var res = {};
        Object.keys(mapper).forEach(function(key2) {
          var value = mapper[key2];
          var fn = void 0;
          if (typeof value === "string") {
            fn = function fn2() {
              return this.store.states[value];
            };
          } else if (typeof value === "function") {
            fn = function fn2() {
              return value.call(this, this.store.states);
            };
          } else {
            console.error("invalid value type");
          }
          if (fn) {
            res[key2] = fn;
          }
        });
        return res;
      }
      var scrollbar_width_ = __webpack_require__(38);
      var scrollbar_width_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_width_);
      function _classCallCheck2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var table_layout_TableLayout = function() {
        function TableLayout(options2) {
          _classCallCheck2(this, TableLayout);
          this.observers = [];
          this.table = null;
          this.store = null;
          this.columns = null;
          this.fit = true;
          this.showHeader = true;
          this.height = null;
          this.scrollX = false;
          this.scrollY = false;
          this.bodyWidth = null;
          this.fixedWidth = null;
          this.rightFixedWidth = null;
          this.tableHeight = null;
          this.headerHeight = 44;
          this.appendHeight = 0;
          this.footerHeight = 44;
          this.viewportHeight = null;
          this.bodyHeight = null;
          this.fixedBodyHeight = null;
          this.gutterWidth = scrollbar_width_default()();
          for (var name in options2) {
            if (options2.hasOwnProperty(name)) {
              this[name] = options2[name];
            }
          }
          if (!this.table) {
            throw new Error("table is required for Table Layout");
          }
          if (!this.store) {
            throw new Error("store is required for Table Layout");
          }
        }
        TableLayout.prototype.updateScrollY = function updateScrollY() {
          var height = this.height;
          if (height === null)
            return false;
          var bodyWrapper = this.table.bodyWrapper;
          if (this.table.$el && bodyWrapper) {
            var body2 = bodyWrapper.querySelector(".el-table__body");
            var prevScrollY = this.scrollY;
            var scrollY = body2.offsetHeight > this.bodyHeight;
            this.scrollY = scrollY;
            return prevScrollY !== scrollY;
          }
          return false;
        };
        TableLayout.prototype.setHeight = function setHeight(value) {
          var _this = this;
          var prop2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "height";
          if (external_vue_default.a.prototype.$isServer)
            return;
          var el2 = this.table.$el;
          value = Object(util2["j"])(value);
          this.height = value;
          if (!el2 && (value || value === 0))
            return external_vue_default.a.nextTick(function() {
              return _this.setHeight(value, prop2);
            });
          if (typeof value === "number") {
            el2.style[prop2] = value + "px";
            this.updateElsHeight();
          } else if (typeof value === "string") {
            el2.style[prop2] = value;
            this.updateElsHeight();
          }
        };
        TableLayout.prototype.setMaxHeight = function setMaxHeight(value) {
          this.setHeight(value, "max-height");
        };
        TableLayout.prototype.getFlattenColumns = function getFlattenColumns() {
          var flattenColumns = [];
          var columns = this.table.columns;
          columns.forEach(function(column) {
            if (column.isColumnGroup) {
              flattenColumns.push.apply(flattenColumns, column.columns);
            } else {
              flattenColumns.push(column);
            }
          });
          return flattenColumns;
        };
        TableLayout.prototype.updateElsHeight = function updateElsHeight() {
          var _this2 = this;
          if (!this.table.$ready)
            return external_vue_default.a.nextTick(function() {
              return _this2.updateElsHeight();
            });
          var _table$$refs = this.table.$refs, headerWrapper = _table$$refs.headerWrapper, appendWrapper = _table$$refs.appendWrapper, footerWrapper = _table$$refs.footerWrapper;
          this.appendHeight = appendWrapper ? appendWrapper.offsetHeight : 0;
          if (this.showHeader && !headerWrapper)
            return;
          var headerTrElm = headerWrapper ? headerWrapper.querySelector(".el-table__header tr") : null;
          var noneHeader = this.headerDisplayNone(headerTrElm);
          var headerHeight = this.headerHeight = !this.showHeader ? 0 : headerWrapper.offsetHeight;
          if (this.showHeader && !noneHeader && headerWrapper.offsetWidth > 0 && (this.table.columns || []).length > 0 && headerHeight < 2) {
            return external_vue_default.a.nextTick(function() {
              return _this2.updateElsHeight();
            });
          }
          var tableHeight = this.tableHeight = this.table.$el.clientHeight;
          var footerHeight = this.footerHeight = footerWrapper ? footerWrapper.offsetHeight : 0;
          if (this.height !== null) {
            this.bodyHeight = tableHeight - headerHeight - footerHeight + (footerWrapper ? 1 : 0);
          }
          this.fixedBodyHeight = this.scrollX ? this.bodyHeight - this.gutterWidth : this.bodyHeight;
          var noData = !(this.store.states.data && this.store.states.data.length);
          this.viewportHeight = this.scrollX ? tableHeight - (noData ? 0 : this.gutterWidth) : tableHeight;
          this.updateScrollY();
          this.notifyObservers("scrollable");
        };
        TableLayout.prototype.headerDisplayNone = function headerDisplayNone(elm) {
          if (!elm)
            return true;
          var headerChild = elm;
          while (headerChild.tagName !== "DIV") {
            if (getComputedStyle(headerChild).display === "none") {
              return true;
            }
            headerChild = headerChild.parentElement;
          }
          return false;
        };
        TableLayout.prototype.updateColumnsWidth = function updateColumnsWidth() {
          if (external_vue_default.a.prototype.$isServer)
            return;
          var fit = this.fit;
          var bodyWidth = this.table.$el.clientWidth;
          var bodyMinWidth = 0;
          var flattenColumns = this.getFlattenColumns();
          var flexColumns = flattenColumns.filter(function(column) {
            return typeof column.width !== "number";
          });
          flattenColumns.forEach(function(column) {
            if (typeof column.width === "number" && column.realWidth)
              column.realWidth = null;
          });
          if (flexColumns.length > 0 && fit) {
            flattenColumns.forEach(function(column) {
              bodyMinWidth += column.width || column.minWidth || 80;
            });
            var scrollYWidth = this.scrollY ? this.gutterWidth : 0;
            if (bodyMinWidth <= bodyWidth - scrollYWidth) {
              this.scrollX = false;
              var totalFlexWidth = bodyWidth - scrollYWidth - bodyMinWidth;
              if (flexColumns.length === 1) {
                flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth;
              } else {
                var allColumnsWidth = flexColumns.reduce(function(prev, column) {
                  return prev + (column.minWidth || 80);
                }, 0);
                var flexWidthPerPixel = totalFlexWidth / allColumnsWidth;
                var noneFirstWidth = 0;
                flexColumns.forEach(function(column, index2) {
                  if (index2 === 0)
                    return;
                  var flexWidth = Math.floor((column.minWidth || 80) * flexWidthPerPixel);
                  noneFirstWidth += flexWidth;
                  column.realWidth = (column.minWidth || 80) + flexWidth;
                });
                flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;
              }
            } else {
              this.scrollX = true;
              flexColumns.forEach(function(column) {
                column.realWidth = column.minWidth;
              });
            }
            this.bodyWidth = Math.max(bodyMinWidth, bodyWidth);
            this.table.resizeState.width = this.bodyWidth;
          } else {
            flattenColumns.forEach(function(column) {
              if (!column.width && !column.minWidth) {
                column.realWidth = 80;
              } else {
                column.realWidth = column.width || column.minWidth;
              }
              bodyMinWidth += column.realWidth;
            });
            this.scrollX = bodyMinWidth > bodyWidth;
            this.bodyWidth = bodyMinWidth;
          }
          var fixedColumns = this.store.states.fixedColumns;
          if (fixedColumns.length > 0) {
            var fixedWidth = 0;
            fixedColumns.forEach(function(column) {
              fixedWidth += column.realWidth || column.width;
            });
            this.fixedWidth = fixedWidth;
          }
          var rightFixedColumns = this.store.states.rightFixedColumns;
          if (rightFixedColumns.length > 0) {
            var rightFixedWidth = 0;
            rightFixedColumns.forEach(function(column) {
              rightFixedWidth += column.realWidth || column.width;
            });
            this.rightFixedWidth = rightFixedWidth;
          }
          this.notifyObservers("columns");
        };
        TableLayout.prototype.addObserver = function addObserver(observer) {
          this.observers.push(observer);
        };
        TableLayout.prototype.removeObserver = function removeObserver(observer) {
          var index2 = this.observers.indexOf(observer);
          if (index2 !== -1) {
            this.observers.splice(index2, 1);
          }
        };
        TableLayout.prototype.notifyObservers = function notifyObservers(event) {
          var _this3 = this;
          var observers2 = this.observers;
          observers2.forEach(function(observer) {
            switch (event) {
              case "columns":
                observer.onColumnsChange(_this3);
                break;
              case "scrollable":
                observer.onScrollableChange(_this3);
                break;
              default:
                throw new Error("Table Layout don't have event " + event + ".");
            }
          });
        };
        return TableLayout;
      }();
      var table_layout = table_layout_TableLayout;
      var dom_ = __webpack_require__(2);
      var tooltip_ = __webpack_require__(29);
      var tooltip_default = /* @__PURE__ */ __webpack_require__.n(tooltip_);
      var layout_observer = {
        created: function created() {
          this.tableLayout.addObserver(this);
        },
        destroyed: function destroyed() {
          this.tableLayout.removeObserver(this);
        },
        computed: {
          tableLayout: function tableLayout() {
            var layout = this.layout;
            if (!layout && this.table) {
              layout = this.table.layout;
            }
            if (!layout) {
              throw new Error("Can not find table layout.");
            }
            return layout;
          }
        },
        mounted: function mounted2() {
          this.onColumnsChange(this.tableLayout);
          this.onScrollableChange(this.tableLayout);
        },
        updated: function updated() {
          if (this.__updated__)
            return;
          this.onColumnsChange(this.tableLayout);
          this.onScrollableChange(this.tableLayout);
          this.__updated__ = true;
        },
        methods: {
          onColumnsChange: function onColumnsChange(layout) {
            var cols = this.$el.querySelectorAll("colgroup > col");
            if (!cols.length)
              return;
            var flattenColumns = layout.getFlattenColumns();
            var columnsMap = {};
            flattenColumns.forEach(function(column2) {
              columnsMap[column2.id] = column2;
            });
            for (var i = 0, j = cols.length; i < j; i++) {
              var col2 = cols[i];
              var name = col2.getAttribute("name");
              var column = columnsMap[name];
              if (column) {
                col2.setAttribute("width", column.realWidth || column.width);
              }
            }
          },
          onScrollableChange: function onScrollableChange(layout) {
            var cols = this.$el.querySelectorAll("colgroup > col[name=gutter]");
            for (var i = 0, j = cols.length; i < j; i++) {
              var col2 = cols[i];
              col2.setAttribute("width", layout.scrollY ? layout.gutterWidth : "0");
            }
            var ths = this.$el.querySelectorAll("th.gutter");
            for (var _i = 0, _j = ths.length; _i < _j; _i++) {
              var th = ths[_i];
              th.style.width = layout.scrollY ? layout.gutterWidth + "px" : "0";
              th.style.display = layout.scrollY ? "" : "none";
            }
          }
        }
      };
      var table_row_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key2 in source) {
            if (Object.prototype.hasOwnProperty.call(source, key2)) {
              target2[key2] = source[key2];
            }
          }
        }
        return target2;
      };
      var table_row = {
        name: "ElTableRow",
        props: ["columns", "row", "index", "isSelected", "isExpanded", "store", "context", "firstDefaultColumnIndex", "treeRowData", "treeIndent", "columnsHidden", "getSpan", "getColspanRealWidth", "getCellStyle", "getCellClass", "handleCellMouseLeave", "handleCellMouseEnter", "fixed"],
        components: {
          ElCheckbox: checkbox_default.a
        },
        render: function render51() {
          var _this = this;
          var h = arguments[0];
          var columns = this.columns, row2 = this.row, $index = this.index, store = this.store, context = this.context, firstDefaultColumnIndex = this.firstDefaultColumnIndex, treeRowData = this.treeRowData, treeIndent = this.treeIndent, _columnsHidden = this.columnsHidden, columnsHidden = _columnsHidden === void 0 ? [] : _columnsHidden, isSelected = this.isSelected, isExpanded = this.isExpanded;
          return h("tr", [columns.map(function(column, cellIndex) {
            var _getSpan = _this.getSpan(row2, column, $index, cellIndex), rowspan = _getSpan.rowspan, colspan = _getSpan.colspan;
            if (!rowspan || !colspan) {
              return null;
            }
            var columnData = table_row_extends({}, column);
            columnData.realWidth = _this.getColspanRealWidth(columns, colspan, cellIndex);
            var data3 = {
              store,
              isSelected,
              isExpanded,
              _self: context,
              column: columnData,
              row: row2,
              $index
            };
            if (cellIndex === firstDefaultColumnIndex && treeRowData) {
              data3.treeNode = {
                indent: treeRowData.level * treeIndent,
                level: treeRowData.level
              };
              if (typeof treeRowData.expanded === "boolean") {
                data3.treeNode.expanded = treeRowData.expanded;
                if ("loading" in treeRowData) {
                  data3.treeNode.loading = treeRowData.loading;
                }
                if ("noLazyChildren" in treeRowData) {
                  data3.treeNode.noLazyChildren = treeRowData.noLazyChildren;
                }
              }
            }
            return h(
              "td",
              {
                style: _this.getCellStyle($index, cellIndex, row2, column),
                "class": _this.getCellClass($index, cellIndex, row2, column),
                attrs: {
                  rowspan,
                  colspan
                },
                on: {
                  "mouseenter": function mouseenter($event) {
                    return _this.handleCellMouseEnter($event, row2);
                  },
                  "mouseleave": _this.handleCellMouseLeave
                }
              },
              [column.renderCell.call(_this._renderProxy, _this.$createElement, data3, columnsHidden[cellIndex])]
            );
          })]);
        }
      };
      var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var table_body_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key2 in source) {
            if (Object.prototype.hasOwnProperty.call(source, key2)) {
              target2[key2] = source[key2];
            }
          }
        }
        return target2;
      };
      var table_body = {
        name: "ElTableBody",
        mixins: [layout_observer],
        components: {
          ElCheckbox: checkbox_default.a,
          ElTooltip: tooltip_default.a,
          TableRow: table_row
        },
        props: {
          store: {
            required: true
          },
          stripe: Boolean,
          context: {},
          rowClassName: [String, Function],
          rowStyle: [Object, Function],
          fixed: String,
          highlight: Boolean
        },
        render: function render51(h) {
          var _this = this;
          var data3 = this.data || [];
          return h(
            "table",
            {
              "class": "el-table__body",
              attrs: {
                cellspacing: "0",
                cellpadding: "0",
                border: "0"
              }
            },
            [h("colgroup", [this.columns.map(function(column) {
              return h("col", {
                attrs: { name: column.id },
                key: column.id
              });
            })]), h("tbody", [data3.reduce(function(acc, row2) {
              return acc.concat(_this.wrappedRowRender(row2, acc.length));
            }, []), h("el-tooltip", {
              attrs: { effect: this.table.tooltipEffect, placement: "top", content: this.tooltipContent },
              ref: "tooltip"
            })])]
          );
        },
        computed: table_body_extends({
          table: function table3() {
            return this.$parent;
          }
        }, mapStates({
          data: "data",
          columns: "columns",
          treeIndent: "indent",
          leftFixedLeafCount: "fixedLeafColumnsLength",
          rightFixedLeafCount: "rightFixedLeafColumnsLength",
          columnsCount: function columnsCount(states) {
            return states.columns.length;
          },
          leftFixedCount: function leftFixedCount(states) {
            return states.fixedColumns.length;
          },
          rightFixedCount: function rightFixedCount(states) {
            return states.rightFixedColumns.length;
          },
          hasExpandColumn: function hasExpandColumn(states) {
            return states.columns.some(function(_ref2) {
              var type = _ref2.type;
              return type === "expand";
            });
          }
        }), {
          columnsHidden: function columnsHidden() {
            var _this2 = this;
            return this.columns.map(function(column, index2) {
              return _this2.isColumnHidden(index2);
            });
          },
          firstDefaultColumnIndex: function firstDefaultColumnIndex() {
            return Object(util_["arrayFindIndex"])(this.columns, function(_ref2) {
              var type = _ref2.type;
              return type === "default";
            });
          }
        }),
        watch: {
          "store.states.hoverRow": function storeStatesHoverRow(newVal, oldVal) {
            var _this3 = this;
            if (!this.store.states.isComplex || this.$isServer)
              return;
            var raf = window.requestAnimationFrame;
            if (!raf) {
              raf = function raf2(fn) {
                return setTimeout(fn, 16);
              };
            }
            raf(function() {
              var rows = _this3.$el.querySelectorAll(".el-table__row");
              var oldRow = rows[oldVal];
              var newRow = rows[newVal];
              if (oldRow) {
                Object(dom_["removeClass"])(oldRow, "hover-row");
              }
              if (newRow) {
                Object(dom_["addClass"])(newRow, "hover-row");
              }
            });
          }
        },
        data: function data3() {
          return {
            tooltipContent: ""
          };
        },
        created: function created() {
          this.activateTooltip = debounce_default()(50, function(tooltip2) {
            return tooltip2.handleShowPopper();
          });
        },
        methods: {
          getKeyOfRow: function getKeyOfRow(row2, index2) {
            var rowKey = this.table.rowKey;
            if (rowKey) {
              return Object(util2["g"])(row2, rowKey);
            }
            return index2;
          },
          isColumnHidden: function isColumnHidden(index2) {
            if (this.fixed === true || this.fixed === "left") {
              return index2 >= this.leftFixedLeafCount;
            } else if (this.fixed === "right") {
              return index2 < this.columnsCount - this.rightFixedLeafCount;
            } else {
              return index2 < this.leftFixedLeafCount || index2 >= this.columnsCount - this.rightFixedLeafCount;
            }
          },
          getSpan: function getSpan(row2, column, rowIndex, columnIndex) {
            var rowspan = 1;
            var colspan = 1;
            var fn = this.table.spanMethod;
            if (typeof fn === "function") {
              var result2 = fn({
                row: row2,
                column,
                rowIndex,
                columnIndex
              });
              if (Array.isArray(result2)) {
                rowspan = result2[0];
                colspan = result2[1];
              } else if ((typeof result2 === "undefined" ? "undefined" : _typeof2(result2)) === "object") {
                rowspan = result2.rowspan;
                colspan = result2.colspan;
              }
            }
            return { rowspan, colspan };
          },
          getRowStyle: function getRowStyle(row2, rowIndex) {
            var rowStyle = this.table.rowStyle;
            if (typeof rowStyle === "function") {
              return rowStyle.call(null, {
                row: row2,
                rowIndex
              });
            }
            return rowStyle || null;
          },
          getRowClass: function getRowClass(row2, rowIndex) {
            var classes = ["el-table__row"];
            if (this.table.highlightCurrentRow && row2 === this.store.states.currentRow) {
              classes.push("current-row");
            }
            if (this.stripe && rowIndex % 2 === 1) {
              classes.push("el-table__row--striped");
            }
            var rowClassName = this.table.rowClassName;
            if (typeof rowClassName === "string") {
              classes.push(rowClassName);
            } else if (typeof rowClassName === "function") {
              classes.push(rowClassName.call(null, {
                row: row2,
                rowIndex
              }));
            }
            if (this.store.states.expandRows.indexOf(row2) > -1) {
              classes.push("expanded");
            }
            return classes;
          },
          getCellStyle: function getCellStyle(rowIndex, columnIndex, row2, column) {
            var cellStyle = this.table.cellStyle;
            if (typeof cellStyle === "function") {
              return cellStyle.call(null, {
                rowIndex,
                columnIndex,
                row: row2,
                column
              });
            }
            return cellStyle;
          },
          getCellClass: function getCellClass(rowIndex, columnIndex, row2, column) {
            var classes = [column.id, column.align, column.className];
            if (this.isColumnHidden(columnIndex)) {
              classes.push("is-hidden");
            }
            var cellClassName = this.table.cellClassName;
            if (typeof cellClassName === "string") {
              classes.push(cellClassName);
            } else if (typeof cellClassName === "function") {
              classes.push(cellClassName.call(null, {
                rowIndex,
                columnIndex,
                row: row2,
                column
              }));
            }
            classes.push("el-table__cell");
            return classes.join(" ");
          },
          getColspanRealWidth: function getColspanRealWidth(columns, colspan, index2) {
            if (colspan < 1) {
              return columns[index2].realWidth;
            }
            var widthArr = columns.map(function(_ref3) {
              var realWidth = _ref3.realWidth;
              return realWidth;
            }).slice(index2, index2 + colspan);
            return widthArr.reduce(function(acc, width) {
              return acc + width;
            }, -1);
          },
          handleCellMouseEnter: function handleCellMouseEnter(event, row2) {
            var table3 = this.table;
            var cell = Object(util2["b"])(event);
            if (cell) {
              var column = Object(util2["c"])(table3, cell);
              var hoverState = table3.hoverState = { cell, column, row: row2 };
              table3.$emit("cell-mouse-enter", hoverState.row, hoverState.column, hoverState.cell, event);
            }
            var cellChild = event.target.querySelector(".cell");
            if (!(Object(dom_["hasClass"])(cellChild, "el-tooltip") && cellChild.childNodes.length)) {
              return;
            }
            var range3 = document.createRange();
            range3.setStart(cellChild, 0);
            range3.setEnd(cellChild, cellChild.childNodes.length);
            var rangeWidth = range3.getBoundingClientRect().width;
            var padding = (parseInt(Object(dom_["getStyle"])(cellChild, "paddingLeft"), 10) || 0) + (parseInt(Object(dom_["getStyle"])(cellChild, "paddingRight"), 10) || 0);
            if ((rangeWidth + padding > cellChild.offsetWidth || cellChild.scrollWidth > cellChild.offsetWidth) && this.$refs.tooltip) {
              var tooltip2 = this.$refs.tooltip;
              this.tooltipContent = cell.innerText || cell.textContent;
              tooltip2.referenceElm = cell;
              tooltip2.$refs.popper && (tooltip2.$refs.popper.style.display = "none");
              tooltip2.doDestroy();
              tooltip2.setExpectedState(true);
              this.activateTooltip(tooltip2);
            }
          },
          handleCellMouseLeave: function handleCellMouseLeave(event) {
            var tooltip2 = this.$refs.tooltip;
            if (tooltip2) {
              tooltip2.setExpectedState(false);
              tooltip2.handleClosePopper();
            }
            var cell = Object(util2["b"])(event);
            if (!cell)
              return;
            var oldHoverState = this.table.hoverState || {};
            this.table.$emit("cell-mouse-leave", oldHoverState.row, oldHoverState.column, oldHoverState.cell, event);
          },
          handleMouseEnter: debounce_default()(30, function(index2) {
            this.store.commit("setHoverRow", index2);
          }),
          handleMouseLeave: debounce_default()(30, function() {
            this.store.commit("setHoverRow", null);
          }),
          handleContextMenu: function handleContextMenu(event, row2) {
            this.handleEvent(event, row2, "contextmenu");
          },
          handleDoubleClick: function handleDoubleClick(event, row2) {
            this.handleEvent(event, row2, "dblclick");
          },
          handleClick: function handleClick(event, row2) {
            this.store.commit("setCurrentRow", row2);
            this.handleEvent(event, row2, "click");
          },
          handleEvent: function handleEvent(event, row2, name) {
            var table3 = this.table;
            var cell = Object(util2["b"])(event);
            var column = void 0;
            if (cell) {
              column = Object(util2["c"])(table3, cell);
              if (column) {
                table3.$emit("cell-" + name, row2, column, cell, event);
              }
            }
            table3.$emit("row-" + name, row2, column, event);
          },
          rowRender: function rowRender(row2, $index, treeRowData) {
            var _this4 = this;
            var h = this.$createElement;
            var treeIndent = this.treeIndent, columns = this.columns, firstDefaultColumnIndex = this.firstDefaultColumnIndex;
            var rowClasses = this.getRowClass(row2, $index);
            var display = true;
            if (treeRowData) {
              rowClasses.push("el-table__row--level-" + treeRowData.level);
              display = treeRowData.display;
            }
            var displayStyle = display ? null : {
              display: "none"
            };
            return h(table_row, {
              style: [displayStyle, this.getRowStyle(row2, $index)],
              "class": rowClasses,
              key: this.getKeyOfRow(row2, $index),
              nativeOn: {
                "dblclick": function dblclick($event) {
                  return _this4.handleDoubleClick($event, row2);
                },
                "click": function click($event) {
                  return _this4.handleClick($event, row2);
                },
                "contextmenu": function contextmenu($event) {
                  return _this4.handleContextMenu($event, row2);
                },
                "mouseenter": function mouseenter(_2) {
                  return _this4.handleMouseEnter($index);
                },
                "mouseleave": this.handleMouseLeave
              },
              attrs: {
                columns,
                row: row2,
                index: $index,
                store: this.store,
                context: this.context || this.table.$vnode.context,
                firstDefaultColumnIndex,
                treeRowData,
                treeIndent,
                columnsHidden: this.columnsHidden,
                getSpan: this.getSpan,
                getColspanRealWidth: this.getColspanRealWidth,
                getCellStyle: this.getCellStyle,
                getCellClass: this.getCellClass,
                handleCellMouseEnter: this.handleCellMouseEnter,
                handleCellMouseLeave: this.handleCellMouseLeave,
                isSelected: this.store.isSelected(row2),
                isExpanded: this.store.states.expandRows.indexOf(row2) > -1,
                fixed: this.fixed
              }
            });
          },
          wrappedRowRender: function wrappedRowRender(row2, $index) {
            var _this5 = this;
            var h = this.$createElement;
            var store = this.store;
            var isRowExpanded = store.isRowExpanded, assertRowKey = store.assertRowKey;
            var _store$states = store.states, treeData = _store$states.treeData, lazyTreeNodeMap = _store$states.lazyTreeNodeMap, childrenColumnName = _store$states.childrenColumnName, rowKey = _store$states.rowKey;
            if (this.hasExpandColumn && isRowExpanded(row2)) {
              var renderExpanded = this.table.renderExpanded;
              var tr2 = this.rowRender(row2, $index);
              if (!renderExpanded) {
                console.error("[Element Error]renderExpanded is required.");
                return tr2;
              }
              return [[tr2, h(
                "tr",
                { key: "expanded-row__" + tr2.key },
                [h(
                  "td",
                  {
                    attrs: { colspan: this.columnsCount },
                    "class": "el-table__cell el-table__expanded-cell"
                  },
                  [renderExpanded(this.$createElement, { row: row2, $index, store: this.store })]
                )]
              )]];
            } else if (Object.keys(treeData).length) {
              assertRowKey();
              var key2 = Object(util2["g"])(row2, rowKey);
              var cur = treeData[key2];
              var treeRowData = null;
              if (cur) {
                treeRowData = {
                  expanded: cur.expanded,
                  level: cur.level,
                  display: true
                };
                if (typeof cur.lazy === "boolean") {
                  if (typeof cur.loaded === "boolean" && cur.loaded) {
                    treeRowData.noLazyChildren = !(cur.children && cur.children.length);
                  }
                  treeRowData.loading = cur.loading;
                }
              }
              var tmp = [this.rowRender(row2, $index, treeRowData)];
              if (cur) {
                var i = 0;
                var traverse = function traverse2(children, parent) {
                  if (!(children && children.length && parent))
                    return;
                  children.forEach(function(node2) {
                    var innerTreeRowData = {
                      display: parent.display && parent.expanded,
                      level: parent.level + 1
                    };
                    var childKey = Object(util2["g"])(node2, rowKey);
                    if (childKey === void 0 || childKey === null) {
                      throw new Error("for nested data item, row-key is required.");
                    }
                    cur = table_body_extends({}, treeData[childKey]);
                    if (cur) {
                      innerTreeRowData.expanded = cur.expanded;
                      cur.level = cur.level || innerTreeRowData.level;
                      cur.display = !!(cur.expanded && innerTreeRowData.display);
                      if (typeof cur.lazy === "boolean") {
                        if (typeof cur.loaded === "boolean" && cur.loaded) {
                          innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);
                        }
                        innerTreeRowData.loading = cur.loading;
                      }
                    }
                    i++;
                    tmp.push(_this5.rowRender(node2, $index + i, innerTreeRowData));
                    if (cur) {
                      var _nodes = lazyTreeNodeMap[childKey] || node2[childrenColumnName];
                      traverse2(_nodes, cur);
                    }
                  });
                };
                cur.display = true;
                var nodes = lazyTreeNodeMap[key2] || row2[childrenColumnName];
                traverse(nodes, cur);
              }
              return tmp;
            } else {
              return this.rowRender(row2, $index);
            }
          }
        }
      };
      var filter_panelvue_type_template_id_7f2c919f_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-zoom-in-top" } }, [
          _vm.multiple ? _c(
            "div",
            {
              directives: [
                {
                  name: "clickoutside",
                  rawName: "v-clickoutside",
                  value: _vm.handleOutsideClick,
                  expression: "handleOutsideClick"
                },
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.showPopper,
                  expression: "showPopper"
                }
              ],
              staticClass: "el-table-filter"
            },
            [
              _c(
                "div",
                { staticClass: "el-table-filter__content" },
                [
                  _c(
                    "el-scrollbar",
                    { attrs: { "wrap-class": "el-table-filter__wrap" } },
                    [
                      _c(
                        "el-checkbox-group",
                        {
                          staticClass: "el-table-filter__checkbox-group",
                          model: {
                            value: _vm.filteredValue,
                            callback: function($$v) {
                              _vm.filteredValue = $$v;
                            },
                            expression: "filteredValue"
                          }
                        },
                        _vm._l(_vm.filters, function(filter2) {
                          return _c(
                            "el-checkbox",
                            { key: filter2.value, attrs: { label: filter2.value } },
                            [_vm._v(_vm._s(filter2.text))]
                          );
                        }),
                        1
                      )
                    ],
                    1
                  )
                ],
                1
              ),
              _c("div", { staticClass: "el-table-filter__bottom" }, [
                _c(
                  "button",
                  {
                    class: { "is-disabled": _vm.filteredValue.length === 0 },
                    attrs: { disabled: _vm.filteredValue.length === 0 },
                    on: { click: _vm.handleConfirm }
                  },
                  [_vm._v(_vm._s(_vm.t("el.table.confirmFilter")))]
                ),
                _c("button", { on: { click: _vm.handleReset } }, [
                  _vm._v(_vm._s(_vm.t("el.table.resetFilter")))
                ])
              ])
            ]
          ) : _c(
            "div",
            {
              directives: [
                {
                  name: "clickoutside",
                  rawName: "v-clickoutside",
                  value: _vm.handleOutsideClick,
                  expression: "handleOutsideClick"
                },
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.showPopper,
                  expression: "showPopper"
                }
              ],
              staticClass: "el-table-filter"
            },
            [
              _c(
                "ul",
                { staticClass: "el-table-filter__list" },
                [
                  _c(
                    "li",
                    {
                      staticClass: "el-table-filter__list-item",
                      class: {
                        "is-active": _vm.filterValue === void 0 || _vm.filterValue === null
                      },
                      on: {
                        click: function($event) {
                          _vm.handleSelect(null);
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.t("el.table.clearFilter")))]
                  ),
                  _vm._l(_vm.filters, function(filter2) {
                    return _c(
                      "li",
                      {
                        key: filter2.value,
                        staticClass: "el-table-filter__list-item",
                        class: { "is-active": _vm.isActive(filter2) },
                        attrs: { label: filter2.value },
                        on: {
                          click: function($event) {
                            _vm.handleSelect(filter2.value);
                          }
                        }
                      },
                      [_vm._v(_vm._s(filter2.text))]
                    );
                  })
                ],
                2
              )
            ]
          )
        ]);
      };
      var filter_panelvue_type_template_id_7f2c919f_staticRenderFns = [];
      filter_panelvue_type_template_id_7f2c919f_render._withStripped = true;
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var popup_ = __webpack_require__(13);
      var clickoutside_ = __webpack_require__(12);
      var clickoutside_default = /* @__PURE__ */ __webpack_require__.n(clickoutside_);
      var dropdowns = [];
      !external_vue_default.a.prototype.$isServer && document.addEventListener("click", function(event) {
        dropdowns.forEach(function(dropdown3) {
          var target2 = event.target;
          if (!dropdown3 || !dropdown3.$el)
            return;
          if (target2 === dropdown3.$el || dropdown3.$el.contains(target2)) {
            return;
          }
          dropdown3.handleOutsideClick && dropdown3.handleOutsideClick(event);
        });
      });
      var dropdown2 = {
        open: function open2(instance) {
          if (instance) {
            dropdowns.push(instance);
          }
        },
        close: function close2(instance) {
          var index2 = dropdowns.indexOf(instance);
          if (index2 !== -1) {
            dropdowns.splice(instance, 1);
          }
        }
      };
      var checkbox_group_ = __webpack_require__(39);
      var checkbox_group_default = /* @__PURE__ */ __webpack_require__.n(checkbox_group_);
      var scrollbar_ = __webpack_require__(15);
      var scrollbar_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_);
      var filter_panelvue_type_script_lang_js_ = {
        name: "ElTableFilterPanel",
        mixins: [vue_popper_default.a, locale_default.a],
        directives: {
          Clickoutside: clickoutside_default.a
        },
        components: {
          ElCheckbox: checkbox_default.a,
          ElCheckboxGroup: checkbox_group_default.a,
          ElScrollbar: scrollbar_default.a
        },
        props: {
          placement: {
            type: String,
            default: "bottom-end"
          }
        },
        methods: {
          isActive: function isActive(filter2) {
            return filter2.value === this.filterValue;
          },
          handleOutsideClick: function handleOutsideClick() {
            var _this = this;
            setTimeout(function() {
              _this.showPopper = false;
            }, 16);
          },
          handleConfirm: function handleConfirm() {
            this.confirmFilter(this.filteredValue);
            this.handleOutsideClick();
          },
          handleReset: function handleReset() {
            this.filteredValue = [];
            this.confirmFilter(this.filteredValue);
            this.handleOutsideClick();
          },
          handleSelect: function handleSelect(filterValue) {
            this.filterValue = filterValue;
            if (typeof filterValue !== "undefined" && filterValue !== null) {
              this.confirmFilter(this.filteredValue);
            } else {
              this.confirmFilter([]);
            }
            this.handleOutsideClick();
          },
          confirmFilter: function confirmFilter(filteredValue) {
            this.table.store.commit("filterChange", {
              column: this.column,
              values: filteredValue
            });
            this.table.store.updateAllSelected();
          }
        },
        data: function data3() {
          return {
            table: null,
            cell: null,
            column: null
          };
        },
        computed: {
          filters: function filters() {
            return this.column && this.column.filters;
          },
          filterValue: {
            get: function get2() {
              return (this.column.filteredValue || [])[0];
            },
            set: function set3(value) {
              if (this.filteredValue) {
                if (typeof value !== "undefined" && value !== null) {
                  this.filteredValue.splice(0, 1, value);
                } else {
                  this.filteredValue.splice(0, 1);
                }
              }
            }
          },
          filteredValue: {
            get: function get2() {
              if (this.column) {
                return this.column.filteredValue || [];
              }
              return [];
            },
            set: function set3(value) {
              if (this.column) {
                this.column.filteredValue = value;
              }
            }
          },
          multiple: function multiple() {
            if (this.column) {
              return this.column.filterMultiple;
            }
            return true;
          }
        },
        mounted: function mounted2() {
          var _this2 = this;
          this.popperElm = this.$el;
          this.referenceElm = this.cell;
          this.table.bodyWrapper.addEventListener("scroll", function() {
            _this2.updatePopper();
          });
          this.$watch("showPopper", function(value) {
            if (_this2.column)
              _this2.column.filterOpened = value;
            if (value) {
              dropdown2.open(_this2);
            } else {
              dropdown2.close(_this2);
            }
          });
        },
        watch: {
          showPopper: function showPopper2(val) {
            if (val === true && parseInt(this.popperJS._popper.style.zIndex, 10) < popup_["PopupManager"].zIndex) {
              this.popperJS._popper.style.zIndex = popup_["PopupManager"].nextZIndex();
            }
          }
        }
      };
      var src_filter_panelvue_type_script_lang_js_ = filter_panelvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_filter_panelvue_type_script_lang_js_,
        filter_panelvue_type_template_id_7f2c919f_render,
        filter_panelvue_type_template_id_7f2c919f_staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/table/src/filter-panel.vue";
      var filter_panel = component.exports;
      var table_header_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key2 in source) {
            if (Object.prototype.hasOwnProperty.call(source, key2)) {
              target2[key2] = source[key2];
            }
          }
        }
        return target2;
      };
      var getAllColumns = function getAllColumns2(columns) {
        var result2 = [];
        columns.forEach(function(column) {
          if (column.children) {
            result2.push(column);
            result2.push.apply(result2, getAllColumns2(column.children));
          } else {
            result2.push(column);
          }
        });
        return result2;
      };
      var convertToRows = function convertToRows2(originColumns) {
        var maxLevel = 1;
        var traverse = function traverse2(column, parent) {
          if (parent) {
            column.level = parent.level + 1;
            if (maxLevel < column.level) {
              maxLevel = column.level;
            }
          }
          if (column.children) {
            var colSpan = 0;
            column.children.forEach(function(subColumn) {
              traverse2(subColumn, column);
              colSpan += subColumn.colSpan;
            });
            column.colSpan = colSpan;
          } else {
            column.colSpan = 1;
          }
        };
        originColumns.forEach(function(column) {
          column.level = 1;
          traverse(column);
        });
        var rows = [];
        for (var i = 0; i < maxLevel; i++) {
          rows.push([]);
        }
        var allColumns = getAllColumns(originColumns);
        allColumns.forEach(function(column) {
          if (!column.children) {
            column.rowSpan = maxLevel - column.level + 1;
          } else {
            column.rowSpan = 1;
          }
          rows[column.level - 1].push(column);
        });
        return rows;
      };
      var table_header = {
        name: "ElTableHeader",
        mixins: [layout_observer],
        render: function render51(h) {
          var _this = this;
          var originColumns = this.store.states.originColumns;
          var columnRows = convertToRows(originColumns, this.columns);
          var isGroup = columnRows.length > 1;
          if (isGroup)
            this.$parent.isGroup = true;
          return h(
            "table",
            {
              "class": "el-table__header",
              attrs: {
                cellspacing: "0",
                cellpadding: "0",
                border: "0"
              }
            },
            [h("colgroup", [this.columns.map(function(column) {
              return h("col", {
                attrs: { name: column.id },
                key: column.id
              });
            }), this.hasGutter ? h("col", {
              attrs: { name: "gutter" }
            }) : ""]), h(
              "thead",
              { "class": [{ "is-group": isGroup, "has-gutter": this.hasGutter }] },
              [this._l(columnRows, function(columns, rowIndex) {
                return h(
                  "tr",
                  {
                    style: _this.getHeaderRowStyle(rowIndex),
                    "class": _this.getHeaderRowClass(rowIndex)
                  },
                  [columns.map(function(column, cellIndex) {
                    return h(
                      "th",
                      {
                        attrs: {
                          colspan: column.colSpan,
                          rowspan: column.rowSpan
                        },
                        on: {
                          "mousemove": function mousemove($event) {
                            return _this.handleMouseMove($event, column);
                          },
                          "mouseout": _this.handleMouseOut,
                          "mousedown": function mousedown($event) {
                            return _this.handleMouseDown($event, column);
                          },
                          "click": function click($event) {
                            return _this.handleHeaderClick($event, column);
                          },
                          "contextmenu": function contextmenu($event) {
                            return _this.handleHeaderContextMenu($event, column);
                          }
                        },
                        style: _this.getHeaderCellStyle(rowIndex, cellIndex, columns, column),
                        "class": _this.getHeaderCellClass(rowIndex, cellIndex, columns, column),
                        key: column.id
                      },
                      [h(
                        "div",
                        { "class": ["cell", column.filteredValue && column.filteredValue.length > 0 ? "highlight" : "", column.labelClassName] },
                        [column.renderHeader ? column.renderHeader.call(_this._renderProxy, h, { column, $index: cellIndex, store: _this.store, _self: _this.$parent.$vnode.context }) : column.label, column.sortable ? h(
                          "span",
                          {
                            "class": "caret-wrapper",
                            on: {
                              "click": function click($event) {
                                return _this.handleSortClick($event, column);
                              }
                            }
                          },
                          [h("i", {
                            "class": "sort-caret ascending",
                            on: {
                              "click": function click($event) {
                                return _this.handleSortClick($event, column, "ascending");
                              }
                            }
                          }), h("i", {
                            "class": "sort-caret descending",
                            on: {
                              "click": function click($event) {
                                return _this.handleSortClick($event, column, "descending");
                              }
                            }
                          })]
                        ) : "", column.filterable ? h(
                          "span",
                          {
                            "class": "el-table__column-filter-trigger",
                            on: {
                              "click": function click($event) {
                                return _this.handleFilterClick($event, column);
                              }
                            }
                          },
                          [h("i", { "class": ["el-icon-arrow-down", column.filterOpened ? "el-icon-arrow-up" : ""] })]
                        ) : ""]
                      )]
                    );
                  }), _this.hasGutter ? h("th", { "class": "el-table__cell gutter" }) : ""]
                );
              })]
            )]
          );
        },
        props: {
          fixed: String,
          store: {
            required: true
          },
          border: Boolean,
          defaultSort: {
            type: Object,
            default: function _default3() {
              return {
                prop: "",
                order: ""
              };
            }
          }
        },
        components: {
          ElCheckbox: checkbox_default.a
        },
        computed: table_header_extends({
          table: function table3() {
            return this.$parent;
          },
          hasGutter: function hasGutter() {
            return !this.fixed && this.tableLayout.gutterWidth;
          }
        }, mapStates({
          columns: "columns",
          isAllSelected: "isAllSelected",
          leftFixedLeafCount: "fixedLeafColumnsLength",
          rightFixedLeafCount: "rightFixedLeafColumnsLength",
          columnsCount: function columnsCount(states) {
            return states.columns.length;
          },
          leftFixedCount: function leftFixedCount(states) {
            return states.fixedColumns.length;
          },
          rightFixedCount: function rightFixedCount(states) {
            return states.rightFixedColumns.length;
          }
        })),
        created: function created() {
          this.filterPanels = {};
        },
        mounted: function mounted2() {
          var _this2 = this;
          this.$nextTick(function() {
            var _defaultSort = _this2.defaultSort, prop2 = _defaultSort.prop, order2 = _defaultSort.order;
            var init = true;
            _this2.store.commit("sort", { prop: prop2, order: order2, init });
          });
        },
        beforeDestroy: function beforeDestroy3() {
          var panels = this.filterPanels;
          for (var prop2 in panels) {
            if (panels.hasOwnProperty(prop2) && panels[prop2]) {
              panels[prop2].$destroy(true);
            }
          }
        },
        methods: {
          isCellHidden: function isCellHidden(index2, columns) {
            var start = 0;
            for (var i = 0; i < index2; i++) {
              start += columns[i].colSpan;
            }
            var after = start + columns[index2].colSpan - 1;
            if (this.fixed === true || this.fixed === "left") {
              return after >= this.leftFixedLeafCount;
            } else if (this.fixed === "right") {
              return start < this.columnsCount - this.rightFixedLeafCount;
            } else {
              return after < this.leftFixedLeafCount || start >= this.columnsCount - this.rightFixedLeafCount;
            }
          },
          getHeaderRowStyle: function getHeaderRowStyle(rowIndex) {
            var headerRowStyle = this.table.headerRowStyle;
            if (typeof headerRowStyle === "function") {
              return headerRowStyle.call(null, { rowIndex });
            }
            return headerRowStyle;
          },
          getHeaderRowClass: function getHeaderRowClass(rowIndex) {
            var classes = [];
            var headerRowClassName = this.table.headerRowClassName;
            if (typeof headerRowClassName === "string") {
              classes.push(headerRowClassName);
            } else if (typeof headerRowClassName === "function") {
              classes.push(headerRowClassName.call(null, { rowIndex }));
            }
            return classes.join(" ");
          },
          getHeaderCellStyle: function getHeaderCellStyle(rowIndex, columnIndex, row2, column) {
            var headerCellStyle = this.table.headerCellStyle;
            if (typeof headerCellStyle === "function") {
              return headerCellStyle.call(null, {
                rowIndex,
                columnIndex,
                row: row2,
                column
              });
            }
            return headerCellStyle;
          },
          getHeaderCellClass: function getHeaderCellClass(rowIndex, columnIndex, row2, column) {
            var classes = [column.id, column.order, column.headerAlign, column.className, column.labelClassName];
            if (rowIndex === 0 && this.isCellHidden(columnIndex, row2)) {
              classes.push("is-hidden");
            }
            if (!column.children) {
              classes.push("is-leaf");
            }
            if (column.sortable) {
              classes.push("is-sortable");
            }
            var headerCellClassName = this.table.headerCellClassName;
            if (typeof headerCellClassName === "string") {
              classes.push(headerCellClassName);
            } else if (typeof headerCellClassName === "function") {
              classes.push(headerCellClassName.call(null, {
                rowIndex,
                columnIndex,
                row: row2,
                column
              }));
            }
            classes.push("el-table__cell");
            return classes.join(" ");
          },
          toggleAllSelection: function toggleAllSelection() {
            this.store.commit("toggleAllSelection");
          },
          handleFilterClick: function handleFilterClick(event, column) {
            event.stopPropagation();
            var target2 = event.target;
            var cell = target2.tagName === "TH" ? target2 : target2.parentNode;
            if (Object(dom_["hasClass"])(cell, "noclick"))
              return;
            cell = cell.querySelector(".el-table__column-filter-trigger") || cell;
            var table3 = this.$parent;
            var filterPanel = this.filterPanels[column.id];
            if (filterPanel && column.filterOpened) {
              filterPanel.showPopper = false;
              return;
            }
            if (!filterPanel) {
              filterPanel = new external_vue_default.a(filter_panel);
              this.filterPanels[column.id] = filterPanel;
              if (column.filterPlacement) {
                filterPanel.placement = column.filterPlacement;
              }
              filterPanel.table = table3;
              filterPanel.cell = cell;
              filterPanel.column = column;
              !this.$isServer && filterPanel.$mount(document.createElement("div"));
            }
            setTimeout(function() {
              filterPanel.showPopper = true;
            }, 16);
          },
          handleHeaderClick: function handleHeaderClick(event, column) {
            if (!column.filters && column.sortable) {
              this.handleSortClick(event, column);
            } else if (column.filterable && !column.sortable) {
              this.handleFilterClick(event, column);
            }
            this.$parent.$emit("header-click", column, event);
          },
          handleHeaderContextMenu: function handleHeaderContextMenu(event, column) {
            this.$parent.$emit("header-contextmenu", column, event);
          },
          handleMouseDown: function handleMouseDown(event, column) {
            var _this3 = this;
            if (this.$isServer)
              return;
            if (column.children && column.children.length > 0)
              return;
            if (this.draggingColumn && this.border) {
              this.dragging = true;
              this.$parent.resizeProxyVisible = true;
              var table3 = this.$parent;
              var tableEl = table3.$el;
              var tableLeft = tableEl.getBoundingClientRect().left;
              var columnEl = this.$el.querySelector("th." + column.id);
              var columnRect = columnEl.getBoundingClientRect();
              var minLeft = columnRect.left - tableLeft + 30;
              Object(dom_["addClass"])(columnEl, "noclick");
              this.dragState = {
                startMouseLeft: event.clientX,
                startLeft: columnRect.right - tableLeft,
                startColumnLeft: columnRect.left - tableLeft,
                tableLeft
              };
              var resizeProxy = table3.$refs.resizeProxy;
              resizeProxy.style.left = this.dragState.startLeft + "px";
              document.onselectstart = function() {
                return false;
              };
              document.ondragstart = function() {
                return false;
              };
              var handleMouseMove = function handleMouseMove2(event2) {
                var deltaLeft = event2.clientX - _this3.dragState.startMouseLeft;
                var proxyLeft = _this3.dragState.startLeft + deltaLeft;
                resizeProxy.style.left = Math.max(minLeft, proxyLeft) + "px";
              };
              var handleMouseUp = function handleMouseUp2() {
                if (_this3.dragging) {
                  var _dragState = _this3.dragState, startColumnLeft = _dragState.startColumnLeft, startLeft = _dragState.startLeft;
                  var finalLeft = parseInt(resizeProxy.style.left, 10);
                  var columnWidth = finalLeft - startColumnLeft;
                  column.width = column.realWidth = columnWidth;
                  table3.$emit("header-dragend", column.width, startLeft - startColumnLeft, column, event);
                  _this3.store.scheduleLayout();
                  document.body.style.cursor = "";
                  _this3.dragging = false;
                  _this3.draggingColumn = null;
                  _this3.dragState = {};
                  table3.resizeProxyVisible = false;
                }
                document.removeEventListener("mousemove", handleMouseMove);
                document.removeEventListener("mouseup", handleMouseUp2);
                document.onselectstart = null;
                document.ondragstart = null;
                setTimeout(function() {
                  Object(dom_["removeClass"])(columnEl, "noclick");
                }, 0);
              };
              document.addEventListener("mousemove", handleMouseMove);
              document.addEventListener("mouseup", handleMouseUp);
            }
          },
          handleMouseMove: function handleMouseMove(event, column) {
            if (column.children && column.children.length > 0)
              return;
            var target2 = event.target;
            while (target2 && target2.tagName !== "TH") {
              target2 = target2.parentNode;
            }
            if (!column || !column.resizable)
              return;
            if (!this.dragging && this.border) {
              var rect2 = target2.getBoundingClientRect();
              var bodyStyle = document.body.style;
              if (rect2.width > 12 && rect2.right - event.pageX < 8) {
                bodyStyle.cursor = "col-resize";
                if (Object(dom_["hasClass"])(target2, "is-sortable")) {
                  target2.style.cursor = "col-resize";
                }
                this.draggingColumn = column;
              } else if (!this.dragging) {
                bodyStyle.cursor = "";
                if (Object(dom_["hasClass"])(target2, "is-sortable")) {
                  target2.style.cursor = "pointer";
                }
                this.draggingColumn = null;
              }
            }
          },
          handleMouseOut: function handleMouseOut() {
            if (this.$isServer)
              return;
            document.body.style.cursor = "";
          },
          toggleOrder: function toggleOrder(_ref2) {
            var order2 = _ref2.order, sortOrders = _ref2.sortOrders;
            if (order2 === "")
              return sortOrders[0];
            var index2 = sortOrders.indexOf(order2 || null);
            return sortOrders[index2 > sortOrders.length - 2 ? 0 : index2 + 1];
          },
          handleSortClick: function handleSortClick(event, column, givenOrder) {
            event.stopPropagation();
            var order2 = column.order === givenOrder ? null : givenOrder || this.toggleOrder(column);
            var target2 = event.target;
            while (target2 && target2.tagName !== "TH") {
              target2 = target2.parentNode;
            }
            if (target2 && target2.tagName === "TH") {
              if (Object(dom_["hasClass"])(target2, "noclick")) {
                Object(dom_["removeClass"])(target2, "noclick");
                return;
              }
            }
            if (!column.sortable)
              return;
            var states = this.store.states;
            var sortProp = states.sortProp;
            var sortOrder = void 0;
            var sortingColumn = states.sortingColumn;
            if (sortingColumn !== column || sortingColumn === column && sortingColumn.order === null) {
              if (sortingColumn) {
                sortingColumn.order = null;
              }
              states.sortingColumn = column;
              sortProp = column.property;
            }
            if (!order2) {
              sortOrder = column.order = null;
            } else {
              sortOrder = column.order = order2;
            }
            states.sortProp = sortProp;
            states.sortOrder = sortOrder;
            this.store.commit("changeSortCondition");
          }
        },
        data: function data3() {
          return {
            draggingColumn: null,
            dragging: false,
            dragState: {}
          };
        }
      };
      var table_footer_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key2 in source) {
            if (Object.prototype.hasOwnProperty.call(source, key2)) {
              target2[key2] = source[key2];
            }
          }
        }
        return target2;
      };
      var table_footer = {
        name: "ElTableFooter",
        mixins: [layout_observer],
        render: function render51(h) {
          var _this = this;
          var sums = [];
          if (this.summaryMethod) {
            sums = this.summaryMethod({ columns: this.columns, data: this.store.states.data });
          } else {
            this.columns.forEach(function(column, index2) {
              if (index2 === 0) {
                sums[index2] = _this.sumText;
                return;
              }
              var values = _this.store.states.data.map(function(item2) {
                return Number(item2[column.property]);
              });
              var precisions = [];
              var notNumber = true;
              values.forEach(function(value) {
                if (!isNaN(value)) {
                  notNumber = false;
                  var decimal = ("" + value).split(".")[1];
                  precisions.push(decimal ? decimal.length : 0);
                }
              });
              var precision = Math.max.apply(null, precisions);
              if (!notNumber) {
                sums[index2] = values.reduce(function(prev, curr) {
                  var value = Number(curr);
                  if (!isNaN(value)) {
                    return parseFloat((prev + curr).toFixed(Math.min(precision, 20)));
                  } else {
                    return prev;
                  }
                }, 0);
              } else {
                sums[index2] = "";
              }
            });
          }
          return h(
            "table",
            {
              "class": "el-table__footer",
              attrs: {
                cellspacing: "0",
                cellpadding: "0",
                border: "0"
              }
            },
            [h("colgroup", [this.columns.map(function(column) {
              return h("col", {
                attrs: { name: column.id },
                key: column.id
              });
            }), this.hasGutter ? h("col", {
              attrs: { name: "gutter" }
            }) : ""]), h(
              "tbody",
              { "class": [{ "has-gutter": this.hasGutter }] },
              [h("tr", [this.columns.map(function(column, cellIndex) {
                return h(
                  "td",
                  {
                    key: cellIndex,
                    attrs: {
                      colspan: column.colSpan,
                      rowspan: column.rowSpan
                    },
                    "class": [].concat(_this.getRowClasses(column, cellIndex), ["el-table__cell"])
                  },
                  [h(
                    "div",
                    { "class": ["cell", column.labelClassName] },
                    [sums[cellIndex]]
                  )]
                );
              }), this.hasGutter ? h("th", { "class": "el-table__cell gutter" }) : ""])]
            )]
          );
        },
        props: {
          fixed: String,
          store: {
            required: true
          },
          summaryMethod: Function,
          sumText: String,
          border: Boolean,
          defaultSort: {
            type: Object,
            default: function _default3() {
              return {
                prop: "",
                order: ""
              };
            }
          }
        },
        computed: table_footer_extends({
          table: function table3() {
            return this.$parent;
          },
          hasGutter: function hasGutter() {
            return !this.fixed && this.tableLayout.gutterWidth;
          }
        }, mapStates({
          columns: "columns",
          isAllSelected: "isAllSelected",
          leftFixedLeafCount: "fixedLeafColumnsLength",
          rightFixedLeafCount: "rightFixedLeafColumnsLength",
          columnsCount: function columnsCount(states) {
            return states.columns.length;
          },
          leftFixedCount: function leftFixedCount(states) {
            return states.fixedColumns.length;
          },
          rightFixedCount: function rightFixedCount(states) {
            return states.rightFixedColumns.length;
          }
        })),
        methods: {
          isCellHidden: function isCellHidden(index2, columns, column) {
            if (this.fixed === true || this.fixed === "left") {
              return index2 >= this.leftFixedLeafCount;
            } else if (this.fixed === "right") {
              var before = 0;
              for (var i = 0; i < index2; i++) {
                before += columns[i].colSpan;
              }
              return before < this.columnsCount - this.rightFixedLeafCount;
            } else if (!this.fixed && column.fixed) {
              return true;
            } else {
              return index2 < this.leftFixedCount || index2 >= this.columnsCount - this.rightFixedCount;
            }
          },
          getRowClasses: function getRowClasses(column, cellIndex) {
            var classes = [column.id, column.align, column.labelClassName];
            if (column.className) {
              classes.push(column.className);
            }
            if (this.isCellHidden(cellIndex, this.columns, column)) {
              classes.push("is-hidden");
            }
            if (!column.children) {
              classes.push("is-leaf");
            }
            return classes;
          }
        }
      };
      var tablevue_type_script_lang_js_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key2 in source) {
            if (Object.prototype.hasOwnProperty.call(source, key2)) {
              target2[key2] = source[key2];
            }
          }
        }
        return target2;
      };
      var tableIdSeed = 1;
      var tablevue_type_script_lang_js_ = {
        name: "ElTable",
        mixins: [locale_default.a, migrating_default.a],
        directives: {
          Mousewheel: directives_mousewheel
        },
        props: {
          data: {
            type: Array,
            default: function _default3() {
              return [];
            }
          },
          size: String,
          width: [String, Number],
          height: [String, Number],
          maxHeight: [String, Number],
          fit: {
            type: Boolean,
            default: true
          },
          stripe: Boolean,
          border: Boolean,
          rowKey: [String, Function],
          context: {},
          showHeader: {
            type: Boolean,
            default: true
          },
          showSummary: Boolean,
          sumText: String,
          summaryMethod: Function,
          rowClassName: [String, Function],
          rowStyle: [Object, Function],
          cellClassName: [String, Function],
          cellStyle: [Object, Function],
          headerRowClassName: [String, Function],
          headerRowStyle: [Object, Function],
          headerCellClassName: [String, Function],
          headerCellStyle: [Object, Function],
          highlightCurrentRow: Boolean,
          currentRowKey: [String, Number],
          emptyText: String,
          expandRowKeys: Array,
          defaultExpandAll: Boolean,
          defaultSort: Object,
          tooltipEffect: String,
          spanMethod: Function,
          selectOnIndeterminate: {
            type: Boolean,
            default: true
          },
          indent: {
            type: Number,
            default: 16
          },
          treeProps: {
            type: Object,
            default: function _default3() {
              return {
                hasChildren: "hasChildren",
                children: "children"
              };
            }
          },
          lazy: Boolean,
          load: Function
        },
        components: {
          TableHeader: table_header,
          TableFooter: table_footer,
          TableBody: table_body,
          ElCheckbox: checkbox_default.a
        },
        methods: {
          getMigratingConfig: function getMigratingConfig2() {
            return {
              events: {
                expand: "expand is renamed to expand-change"
              }
            };
          },
          setCurrentRow: function setCurrentRow(row2) {
            this.store.commit("setCurrentRow", row2);
          },
          toggleRowSelection: function toggleRowSelection(row2, selected) {
            this.store.toggleRowSelection(row2, selected, false);
            this.store.updateAllSelected();
          },
          toggleRowExpansion: function toggleRowExpansion(row2, expanded2) {
            this.store.toggleRowExpansionAdapter(row2, expanded2);
          },
          clearSelection: function clearSelection() {
            this.store.clearSelection();
          },
          clearFilter: function clearFilter(columnKeys) {
            this.store.clearFilter(columnKeys);
          },
          clearSort: function clearSort() {
            this.store.clearSort();
          },
          handleMouseLeave: function handleMouseLeave() {
            this.store.commit("setHoverRow", null);
            if (this.hoverState)
              this.hoverState = null;
          },
          updateScrollY: function updateScrollY() {
            var changed = this.layout.updateScrollY();
            if (changed) {
              this.layout.notifyObservers("scrollable");
              this.layout.updateColumnsWidth();
            }
          },
          handleFixedMousewheel: function handleFixedMousewheel(event, data3) {
            var bodyWrapper = this.bodyWrapper;
            if (Math.abs(data3.spinY) > 0) {
              var currentScrollTop = bodyWrapper.scrollTop;
              if (data3.pixelY < 0 && currentScrollTop !== 0) {
                event.preventDefault();
              }
              if (data3.pixelY > 0 && bodyWrapper.scrollHeight - bodyWrapper.clientHeight > currentScrollTop) {
                event.preventDefault();
              }
              bodyWrapper.scrollTop += Math.ceil(data3.pixelY / 5);
            } else {
              bodyWrapper.scrollLeft += Math.ceil(data3.pixelX / 5);
            }
          },
          handleHeaderFooterMousewheel: function handleHeaderFooterMousewheel(event, data3) {
            var pixelX = data3.pixelX, pixelY = data3.pixelY;
            if (Math.abs(pixelX) >= Math.abs(pixelY)) {
              this.bodyWrapper.scrollLeft += data3.pixelX / 5;
            }
          },
          syncPostion: function syncPostion() {
            var _bodyWrapper = this.bodyWrapper, scrollLeft = _bodyWrapper.scrollLeft, scrollTop = _bodyWrapper.scrollTop, offsetWidth = _bodyWrapper.offsetWidth, scrollWidth = _bodyWrapper.scrollWidth;
            var _$refs = this.$refs, headerWrapper = _$refs.headerWrapper, footerWrapper = _$refs.footerWrapper, fixedBodyWrapper = _$refs.fixedBodyWrapper, rightFixedBodyWrapper = _$refs.rightFixedBodyWrapper;
            if (headerWrapper)
              headerWrapper.scrollLeft = scrollLeft;
            if (footerWrapper)
              footerWrapper.scrollLeft = scrollLeft;
            if (fixedBodyWrapper)
              fixedBodyWrapper.scrollTop = scrollTop;
            if (rightFixedBodyWrapper)
              rightFixedBodyWrapper.scrollTop = scrollTop;
            var maxScrollLeftPosition = scrollWidth - offsetWidth - 1;
            if (scrollLeft >= maxScrollLeftPosition) {
              this.scrollPosition = "right";
            } else if (scrollLeft === 0) {
              this.scrollPosition = "left";
            } else {
              this.scrollPosition = "middle";
            }
          },
          throttleSyncPostion: Object(external_throttle_debounce_["throttle"])(16, function() {
            this.syncPostion();
          }),
          onScroll: function onScroll(evt) {
            var raf = window.requestAnimationFrame;
            if (!raf) {
              this.throttleSyncPostion();
            } else {
              raf(this.syncPostion);
            }
          },
          bindEvents: function bindEvents() {
            this.bodyWrapper.addEventListener("scroll", this.onScroll, { passive: true });
            if (this.fit) {
              Object(resize_event_["addResizeListener"])(this.$el, this.resizeListener);
            }
          },
          unbindEvents: function unbindEvents() {
            this.bodyWrapper.removeEventListener("scroll", this.onScroll, { passive: true });
            if (this.fit) {
              Object(resize_event_["removeResizeListener"])(this.$el, this.resizeListener);
            }
          },
          resizeListener: function resizeListener() {
            if (!this.$ready)
              return;
            var shouldUpdateLayout = false;
            var el2 = this.$el;
            var _resizeState = this.resizeState, oldWidth = _resizeState.width, oldHeight = _resizeState.height;
            var width = el2.offsetWidth;
            if (oldWidth !== width) {
              shouldUpdateLayout = true;
            }
            var height = el2.offsetHeight;
            if ((this.height || this.shouldUpdateHeight) && oldHeight !== height) {
              shouldUpdateLayout = true;
            }
            if (shouldUpdateLayout) {
              this.resizeState.width = width;
              this.resizeState.height = height;
              this.doLayout();
            }
          },
          doLayout: function doLayout() {
            if (this.shouldUpdateHeight) {
              this.layout.updateElsHeight();
            }
            this.layout.updateColumnsWidth();
          },
          sort: function sort(prop2, order2) {
            this.store.commit("sort", { prop: prop2, order: order2 });
          },
          toggleAllSelection: function toggleAllSelection() {
            this.store.commit("toggleAllSelection");
          }
        },
        computed: tablevue_type_script_lang_js_extends({
          tableSize: function tableSize() {
            return this.size || (this.$ELEMENT || {}).size;
          },
          bodyWrapper: function bodyWrapper() {
            return this.$refs.bodyWrapper;
          },
          shouldUpdateHeight: function shouldUpdateHeight() {
            return this.height || this.maxHeight || this.fixedColumns.length > 0 || this.rightFixedColumns.length > 0;
          },
          bodyWidth: function bodyWidth() {
            var _layout = this.layout, bodyWidth2 = _layout.bodyWidth, scrollY = _layout.scrollY, gutterWidth = _layout.gutterWidth;
            return bodyWidth2 ? bodyWidth2 - (scrollY ? gutterWidth : 0) + "px" : "";
          },
          bodyHeight: function bodyHeight() {
            var _layout2 = this.layout, _layout2$headerHeight = _layout2.headerHeight, headerHeight = _layout2$headerHeight === void 0 ? 0 : _layout2$headerHeight, bodyHeight2 = _layout2.bodyHeight, _layout2$footerHeight = _layout2.footerHeight, footerHeight = _layout2$footerHeight === void 0 ? 0 : _layout2$footerHeight;
            if (this.height) {
              return {
                height: bodyHeight2 ? bodyHeight2 + "px" : ""
              };
            } else if (this.maxHeight) {
              var maxHeight = Object(util2["j"])(this.maxHeight);
              if (typeof maxHeight === "number") {
                return {
                  "max-height": maxHeight - footerHeight - (this.showHeader ? headerHeight : 0) + "px"
                };
              }
            }
            return {};
          },
          fixedBodyHeight: function fixedBodyHeight() {
            if (this.height) {
              return {
                height: this.layout.fixedBodyHeight ? this.layout.fixedBodyHeight + "px" : ""
              };
            } else if (this.maxHeight) {
              var maxHeight = Object(util2["j"])(this.maxHeight);
              if (typeof maxHeight === "number") {
                maxHeight = this.layout.scrollX ? maxHeight - this.layout.gutterWidth : maxHeight;
                if (this.showHeader) {
                  maxHeight -= this.layout.headerHeight;
                }
                maxHeight -= this.layout.footerHeight;
                return {
                  "max-height": maxHeight + "px"
                };
              }
            }
            return {};
          },
          fixedHeight: function fixedHeight() {
            if (this.maxHeight) {
              if (this.showSummary) {
                return {
                  bottom: 0
                };
              }
              return {
                bottom: this.layout.scrollX && this.data.length ? this.layout.gutterWidth + "px" : ""
              };
            } else {
              if (this.showSummary) {
                return {
                  height: this.layout.tableHeight ? this.layout.tableHeight + "px" : ""
                };
              }
              return {
                height: this.layout.viewportHeight ? this.layout.viewportHeight + "px" : ""
              };
            }
          },
          emptyBlockStyle: function emptyBlockStyle() {
            if (this.data && this.data.length)
              return null;
            var height = "100%";
            if (this.layout.appendHeight) {
              height = "calc(100% - " + this.layout.appendHeight + "px)";
            }
            return {
              width: this.bodyWidth,
              height
            };
          }
        }, mapStates({
          selection: "selection",
          columns: "columns",
          tableData: "data",
          fixedColumns: "fixedColumns",
          rightFixedColumns: "rightFixedColumns"
        })),
        watch: {
          height: {
            immediate: true,
            handler: function handler2(value) {
              this.layout.setHeight(value);
            }
          },
          maxHeight: {
            immediate: true,
            handler: function handler2(value) {
              this.layout.setMaxHeight(value);
            }
          },
          currentRowKey: {
            immediate: true,
            handler: function handler2(value) {
              if (!this.rowKey)
                return;
              this.store.setCurrentRowKey(value);
            }
          },
          data: {
            immediate: true,
            handler: function handler2(value) {
              this.store.commit("setData", value);
            }
          },
          expandRowKeys: {
            immediate: true,
            handler: function handler2(newVal) {
              if (newVal) {
                this.store.setExpandRowKeysAdapter(newVal);
              }
            }
          }
        },
        created: function created() {
          var _this = this;
          this.tableId = "el-table_" + tableIdSeed++;
          this.debouncedUpdateLayout = Object(external_throttle_debounce_["debounce"])(50, function() {
            return _this.doLayout();
          });
        },
        mounted: function mounted2() {
          var _this2 = this;
          this.bindEvents();
          this.store.updateColumns();
          this.doLayout();
          this.resizeState = {
            width: this.$el.offsetWidth,
            height: this.$el.offsetHeight
          };
          this.store.states.columns.forEach(function(column) {
            if (column.filteredValue && column.filteredValue.length) {
              _this2.store.commit("filterChange", {
                column,
                values: column.filteredValue,
                silent: true
              });
            }
          });
          this.$ready = true;
        },
        destroyed: function destroyed() {
          this.unbindEvents();
        },
        data: function data3() {
          var _treeProps = this.treeProps, _treeProps$hasChildre = _treeProps.hasChildren, hasChildren2 = _treeProps$hasChildre === void 0 ? "hasChildren" : _treeProps$hasChildre, _treeProps$children = _treeProps.children, children = _treeProps$children === void 0 ? "children" : _treeProps$children;
          this.store = createStore(this, {
            rowKey: this.rowKey,
            defaultExpandAll: this.defaultExpandAll,
            selectOnIndeterminate: this.selectOnIndeterminate,
            indent: this.indent,
            lazy: this.lazy,
            lazyColumnIdentifier: hasChildren2,
            childrenColumnName: children
          });
          var layout = new table_layout({
            store: this.store,
            table: this,
            fit: this.fit,
            showHeader: this.showHeader
          });
          return {
            layout,
            isHidden: false,
            renderExpanded: null,
            resizeProxyVisible: false,
            resizeState: {
              width: null,
              height: null
            },
            isGroup: false,
            scrollPosition: "left"
          };
        }
      };
      var src_tablevue_type_script_lang_js_ = tablevue_type_script_lang_js_;
      var table_component = Object(componentNormalizer["a"])(
        src_tablevue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      table_component.options.__file = "packages/table/src/table.vue";
      var src_table = table_component.exports;
      src_table.install = function(Vue2) {
        Vue2.component(src_table.name, src_table);
      };
      __webpack_exports__["default"] = src_table;
    }
  ]);
})(table2);
var Table = /* @__PURE__ */ getDefaultExportFromCjs(table2.exports);
var tableColumn = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 134);
  }({
    134: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var util_ = __webpack_require__(3);
      var cellStarts = {
        default: {
          order: ""
        },
        selection: {
          width: 48,
          minWidth: 48,
          realWidth: 48,
          order: "",
          className: "el-table-column--selection"
        },
        expand: {
          width: 48,
          minWidth: 48,
          realWidth: 48,
          order: ""
        },
        index: {
          width: 48,
          minWidth: 48,
          realWidth: 48,
          order: ""
        }
      };
      var cellForced = {
        selection: {
          renderHeader: function renderHeader(h, _ref2) {
            var store = _ref2.store;
            return h("el-checkbox", {
              attrs: {
                disabled: store.states.data && store.states.data.length === 0,
                indeterminate: store.states.selection.length > 0 && !this.isAllSelected,
                value: this.isAllSelected
              },
              on: {
                "input": this.toggleAllSelection
              }
            });
          },
          renderCell: function renderCell(h, _ref2) {
            var row2 = _ref2.row, column = _ref2.column, isSelected = _ref2.isSelected, store = _ref2.store, $index = _ref2.$index;
            return h("el-checkbox", {
              nativeOn: {
                "click": function click(event) {
                  return event.stopPropagation();
                }
              },
              attrs: {
                value: isSelected,
                disabled: column.selectable ? !column.selectable.call(null, row2, $index) : false
              },
              on: {
                "input": function input2() {
                  store.commit("rowSelectedChanged", row2);
                }
              }
            });
          },
          sortable: false,
          resizable: false
        },
        index: {
          renderHeader: function renderHeader(h, _ref3) {
            var column = _ref3.column;
            return column.label || "#";
          },
          renderCell: function renderCell(h, _ref4) {
            var $index = _ref4.$index, column = _ref4.column;
            var i = $index + 1;
            var index2 = column.index;
            if (typeof index2 === "number") {
              i = $index + index2;
            } else if (typeof index2 === "function") {
              i = index2($index);
            }
            return h("div", [i]);
          },
          sortable: false
        },
        expand: {
          renderHeader: function renderHeader(h, _ref5) {
            var column = _ref5.column;
            return column.label || "";
          },
          renderCell: function renderCell(h, _ref6) {
            var row2 = _ref6.row, store = _ref6.store, isExpanded = _ref6.isExpanded;
            var classes = ["el-table__expand-icon"];
            if (isExpanded) {
              classes.push("el-table__expand-icon--expanded");
            }
            var callback = function callback2(e) {
              e.stopPropagation();
              store.toggleRowExpansion(row2);
            };
            return h(
              "div",
              {
                "class": classes,
                on: {
                  "click": callback
                }
              },
              [h("i", { "class": "el-icon el-icon-arrow-right" })]
            );
          },
          sortable: false,
          resizable: false,
          className: "el-table__expand-column"
        }
      };
      function defaultRenderCell(h, _ref7) {
        var row2 = _ref7.row, column = _ref7.column, $index = _ref7.$index;
        var property = column.property;
        var value = property && Object(util_["getPropByPath"])(row2, property).v;
        if (column && column.formatter) {
          return column.formatter(row2, column, value, $index);
        }
        return value;
      }
      function treeCellPrefix(h, _ref8) {
        var row2 = _ref8.row, treeNode = _ref8.treeNode, store = _ref8.store;
        if (!treeNode)
          return null;
        var ele = [];
        var callback = function callback2(e) {
          e.stopPropagation();
          store.loadOrToggle(row2);
        };
        if (treeNode.indent) {
          ele.push(h("span", { "class": "el-table__indent", style: { "padding-left": treeNode.indent + "px" } }));
        }
        if (typeof treeNode.expanded === "boolean" && !treeNode.noLazyChildren) {
          var expandClasses = ["el-table__expand-icon", treeNode.expanded ? "el-table__expand-icon--expanded" : ""];
          var iconClasses = ["el-icon-arrow-right"];
          if (treeNode.loading) {
            iconClasses = ["el-icon-loading"];
          }
          ele.push(h(
            "div",
            {
              "class": expandClasses,
              on: {
                "click": callback
              }
            },
            [h("i", { "class": iconClasses })]
          ));
        } else {
          ele.push(h("span", { "class": "el-table__placeholder" }));
        }
        return ele;
      }
      var util2 = __webpack_require__(8);
      var checkbox_ = __webpack_require__(18);
      var checkbox_default = /* @__PURE__ */ __webpack_require__.n(checkbox_);
      var _extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key2 in source) {
            if (Object.prototype.hasOwnProperty.call(source, key2)) {
              target2[key2] = source[key2];
            }
          }
        }
        return target2;
      };
      var columnIdSeed = 1;
      var table_column = {
        name: "ElTableColumn",
        props: {
          type: {
            type: String,
            default: "default"
          },
          label: String,
          className: String,
          labelClassName: String,
          property: String,
          prop: String,
          width: {},
          minWidth: {},
          renderHeader: Function,
          sortable: {
            type: [Boolean, String],
            default: false
          },
          sortMethod: Function,
          sortBy: [String, Function, Array],
          resizable: {
            type: Boolean,
            default: true
          },
          columnKey: String,
          align: String,
          headerAlign: String,
          showTooltipWhenOverflow: Boolean,
          showOverflowTooltip: Boolean,
          fixed: [Boolean, String],
          formatter: Function,
          selectable: Function,
          reserveSelection: Boolean,
          filterMethod: Function,
          filteredValue: Array,
          filters: Array,
          filterPlacement: String,
          filterMultiple: {
            type: Boolean,
            default: true
          },
          index: [Number, Function],
          sortOrders: {
            type: Array,
            default: function _default3() {
              return ["ascending", "descending", null];
            },
            validator: function validator5(val) {
              return val.every(function(order2) {
                return ["ascending", "descending", null].indexOf(order2) > -1;
              });
            }
          }
        },
        data: function data3() {
          return {
            isSubColumn: false,
            columns: []
          };
        },
        computed: {
          owner: function owner() {
            var parent = this.$parent;
            while (parent && !parent.tableId) {
              parent = parent.$parent;
            }
            return parent;
          },
          columnOrTableParent: function columnOrTableParent() {
            var parent = this.$parent;
            while (parent && !parent.tableId && !parent.columnId) {
              parent = parent.$parent;
            }
            return parent;
          },
          realWidth: function realWidth() {
            return Object(util2["l"])(this.width);
          },
          realMinWidth: function realMinWidth() {
            return Object(util2["k"])(this.minWidth);
          },
          realAlign: function realAlign() {
            return this.align ? "is-" + this.align : null;
          },
          realHeaderAlign: function realHeaderAlign() {
            return this.headerAlign ? "is-" + this.headerAlign : this.realAlign;
          }
        },
        methods: {
          getPropsData: function getPropsData() {
            var _this = this;
            for (var _len = arguments.length, props = Array(_len), _key = 0; _key < _len; _key++) {
              props[_key] = arguments[_key];
            }
            return props.reduce(function(prev, cur) {
              if (Array.isArray(cur)) {
                cur.forEach(function(key2) {
                  prev[key2] = _this[key2];
                });
              }
              return prev;
            }, {});
          },
          getColumnElIndex: function getColumnElIndex(children, child2) {
            return [].indexOf.call(children, child2);
          },
          setColumnWidth: function setColumnWidth(column) {
            if (this.realWidth) {
              column.width = this.realWidth;
            }
            if (this.realMinWidth) {
              column.minWidth = this.realMinWidth;
            }
            if (!column.minWidth) {
              column.minWidth = 80;
            }
            column.realWidth = column.width === void 0 ? column.minWidth : column.width;
            return column;
          },
          setColumnForcedProps: function setColumnForcedProps(column) {
            var type = column.type;
            var source = cellForced[type] || {};
            Object.keys(source).forEach(function(prop2) {
              var value = source[prop2];
              if (value !== void 0) {
                column[prop2] = prop2 === "className" ? column[prop2] + " " + value : value;
              }
            });
            return column;
          },
          setColumnRenders: function setColumnRenders(column) {
            var _this2 = this;
            this.$createElement;
            if (this.renderHeader) {
              console.warn("[Element Warn][TableColumn]Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.");
            } else if (column.type !== "selection") {
              column.renderHeader = function(h, scope) {
                var renderHeader = _this2.$scopedSlots.header;
                return renderHeader ? renderHeader(scope) : column.label;
              };
            }
            var originRenderCell = column.renderCell;
            if (column.type === "expand") {
              column.renderCell = function(h, data3) {
                return h(
                  "div",
                  { "class": "cell" },
                  [originRenderCell(h, data3)]
                );
              };
              this.owner.renderExpanded = function(h, data3) {
                return _this2.$scopedSlots.default ? _this2.$scopedSlots.default(data3) : _this2.$slots.default;
              };
            } else {
              originRenderCell = originRenderCell || defaultRenderCell;
              column.renderCell = function(h, data3) {
                var children = null;
                if (_this2.$scopedSlots.default) {
                  children = _this2.$scopedSlots.default(data3);
                } else {
                  children = originRenderCell(h, data3);
                }
                var prefix = treeCellPrefix(h, data3);
                var props = {
                  class: "cell",
                  style: {}
                };
                if (column.showOverflowTooltip) {
                  props.class += " el-tooltip";
                  props.style = { width: (data3.column.realWidth || data3.column.width) - 1 + "px" };
                }
                return h(
                  "div",
                  props,
                  [prefix, children]
                );
              };
            }
            return column;
          },
          registerNormalWatchers: function registerNormalWatchers() {
            var _this3 = this;
            var props = ["label", "property", "filters", "filterMultiple", "sortable", "index", "formatter", "className", "labelClassName", "showOverflowTooltip"];
            var aliases = {
              prop: "property",
              realAlign: "align",
              realHeaderAlign: "headerAlign",
              realWidth: "width"
            };
            var allAliases = props.reduce(function(prev, cur) {
              prev[cur] = cur;
              return prev;
            }, aliases);
            Object.keys(allAliases).forEach(function(key2) {
              var columnKey = aliases[key2];
              _this3.$watch(key2, function(newVal) {
                _this3.columnConfig[columnKey] = newVal;
              });
            });
          },
          registerComplexWatchers: function registerComplexWatchers() {
            var _this4 = this;
            var props = ["fixed"];
            var aliases = {
              realWidth: "width",
              realMinWidth: "minWidth"
            };
            var allAliases = props.reduce(function(prev, cur) {
              prev[cur] = cur;
              return prev;
            }, aliases);
            Object.keys(allAliases).forEach(function(key2) {
              var columnKey = aliases[key2];
              _this4.$watch(key2, function(newVal) {
                _this4.columnConfig[columnKey] = newVal;
                var updateColumns = columnKey === "fixed";
                _this4.owner.store.scheduleLayout(updateColumns);
              });
            });
          }
        },
        components: {
          ElCheckbox: checkbox_default.a
        },
        beforeCreate: function beforeCreate() {
          this.row = {};
          this.column = {};
          this.$index = 0;
          this.columnId = "";
        },
        created: function created() {
          var parent = this.columnOrTableParent;
          this.isSubColumn = this.owner !== parent;
          this.columnId = (parent.tableId || parent.columnId) + "_column_" + columnIdSeed++;
          var type = this.type || "default";
          var sortable = this.sortable === "" ? true : this.sortable;
          var defaults = _extends({}, cellStarts[type], {
            id: this.columnId,
            type,
            property: this.prop || this.property,
            align: this.realAlign,
            headerAlign: this.realHeaderAlign,
            showOverflowTooltip: this.showOverflowTooltip || this.showTooltipWhenOverflow,
            filterable: this.filters || this.filterMethod,
            filteredValue: [],
            filterPlacement: "",
            isColumnGroup: false,
            filterOpened: false,
            sortable,
            index: this.index
          });
          var basicProps = ["columnKey", "label", "className", "labelClassName", "type", "renderHeader", "formatter", "fixed", "resizable"];
          var sortProps = ["sortMethod", "sortBy", "sortOrders"];
          var selectProps = ["selectable", "reserveSelection"];
          var filterProps = ["filterMethod", "filters", "filterMultiple", "filterOpened", "filteredValue", "filterPlacement"];
          var column = this.getPropsData(basicProps, sortProps, selectProps, filterProps);
          column = Object(util2["h"])(defaults, column);
          var chains2 = Object(util2["a"])(this.setColumnRenders, this.setColumnWidth, this.setColumnForcedProps);
          column = chains2(column);
          this.columnConfig = column;
          this.registerNormalWatchers();
          this.registerComplexWatchers();
        },
        mounted: function mounted2() {
          var owner = this.owner;
          var parent = this.columnOrTableParent;
          var children = this.isSubColumn ? parent.$el.children : parent.$refs.hiddenColumns.children;
          var columnIndex = this.getColumnElIndex(children, this.$el);
          owner.store.commit("insertColumn", this.columnConfig, columnIndex, this.isSubColumn ? parent.columnConfig : null);
        },
        destroyed: function destroyed() {
          if (!this.$parent)
            return;
          var parent = this.$parent;
          this.owner.store.commit("removeColumn", this.columnConfig, this.isSubColumn ? parent.columnConfig : null);
        },
        render: function render50(h) {
          return h("div", this.$slots.default);
        }
      };
      table_column.install = function(Vue2) {
        Vue2.component(table_column.name, table_column);
      };
      __webpack_exports__["default"] = table_column;
    },
    18: function(module2, exports) {
      module2.exports = checkbox.exports;
    },
    3: function(module2, exports) {
      module2.exports = util$2;
    },
    8: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "b", function() {
        return getCell;
      });
      __webpack_require__.d(__webpack_exports__, "i", function() {
        return orderBy;
      });
      __webpack_require__.d(__webpack_exports__, "d", function() {
        return getColumnById;
      });
      __webpack_require__.d(__webpack_exports__, "e", function() {
        return getColumnByKey;
      });
      __webpack_require__.d(__webpack_exports__, "c", function() {
        return getColumnByCell;
      });
      __webpack_require__.d(__webpack_exports__, "g", function() {
        return getRowIdentity;
      });
      __webpack_require__.d(__webpack_exports__, "f", function() {
        return getKeysMap;
      });
      __webpack_require__.d(__webpack_exports__, "h", function() {
        return mergeOptions;
      });
      __webpack_require__.d(__webpack_exports__, "l", function() {
        return parseWidth;
      });
      __webpack_require__.d(__webpack_exports__, "k", function() {
        return parseMinWidth;
      });
      __webpack_require__.d(__webpack_exports__, "j", function() {
        return parseHeight;
      });
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return compose;
      });
      __webpack_require__.d(__webpack_exports__, "m", function() {
        return toggleRowStatus;
      });
      __webpack_require__.d(__webpack_exports__, "n", function() {
        return walkTreeNode;
      });
      var element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
      var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var getCell = function getCell2(event) {
        var cell = event.target;
        while (cell && cell.tagName.toUpperCase() !== "HTML") {
          if (cell.tagName.toUpperCase() === "TD") {
            return cell;
          }
          cell = cell.parentNode;
        }
        return null;
      };
      var isObject2 = function isObject3(obj) {
        return obj !== null && (typeof obj === "undefined" ? "undefined" : _typeof2(obj)) === "object";
      };
      var orderBy = function orderBy2(array, sortKey, reverse, sortMethod, sortBy) {
        if (!sortKey && !sortMethod && (!sortBy || Array.isArray(sortBy) && !sortBy.length)) {
          return array;
        }
        if (typeof reverse === "string") {
          reverse = reverse === "descending" ? -1 : 1;
        } else {
          reverse = reverse && reverse < 0 ? -1 : 1;
        }
        var getKey = sortMethod ? null : function(value, index2) {
          if (sortBy) {
            if (!Array.isArray(sortBy)) {
              sortBy = [sortBy];
            }
            return sortBy.map(function(by) {
              if (typeof by === "string") {
                return Object(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__["getValueByPath"])(value, by);
              } else {
                return by(value, index2, array);
              }
            });
          }
          if (sortKey !== "$key") {
            if (isObject2(value) && "$value" in value)
              value = value.$value;
          }
          return [isObject2(value) ? Object(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__["getValueByPath"])(value, sortKey) : value];
        };
        var compare = function compare2(a2, b2) {
          if (sortMethod) {
            return sortMethod(a2.value, b2.value);
          }
          for (var i = 0, len = a2.key.length; i < len; i++) {
            if (a2.key[i] < b2.key[i]) {
              return -1;
            }
            if (a2.key[i] > b2.key[i]) {
              return 1;
            }
          }
          return 0;
        };
        return array.map(function(value, index2) {
          return {
            value,
            index: index2,
            key: getKey ? getKey(value, index2) : null
          };
        }).sort(function(a2, b2) {
          var order2 = compare(a2, b2);
          if (!order2) {
            order2 = a2.index - b2.index;
          }
          return order2 * reverse;
        }).map(function(item2) {
          return item2.value;
        });
      };
      var getColumnById = function getColumnById2(table3, columnId) {
        var column = null;
        table3.columns.forEach(function(item2) {
          if (item2.id === columnId) {
            column = item2;
          }
        });
        return column;
      };
      var getColumnByKey = function getColumnByKey2(table3, columnKey) {
        var column = null;
        for (var i = 0; i < table3.columns.length; i++) {
          var item2 = table3.columns[i];
          if (item2.columnKey === columnKey) {
            column = item2;
            break;
          }
        }
        return column;
      };
      var getColumnByCell = function getColumnByCell2(table3, cell) {
        var matches = (cell.className || "").match(/el-table_[^\s]+/gm);
        if (matches) {
          return getColumnById(table3, matches[0]);
        }
        return null;
      };
      var getRowIdentity = function getRowIdentity2(row2, rowKey) {
        if (!row2)
          throw new Error("row is required when get row identity");
        if (typeof rowKey === "string") {
          if (rowKey.indexOf(".") < 0) {
            return row2[rowKey];
          }
          var key2 = rowKey.split(".");
          var current = row2;
          for (var i = 0; i < key2.length; i++) {
            current = current[key2[i]];
          }
          return current;
        } else if (typeof rowKey === "function") {
          return rowKey.call(null, row2);
        }
      };
      var getKeysMap = function getKeysMap2(array, rowKey) {
        var arrayMap = {};
        (array || []).forEach(function(row2, index2) {
          arrayMap[getRowIdentity(row2, rowKey)] = { row: row2, index: index2 };
        });
        return arrayMap;
      };
      function hasOwn2(obj, key2) {
        return Object.prototype.hasOwnProperty.call(obj, key2);
      }
      function mergeOptions(defaults, config2) {
        var options2 = {};
        var key2 = void 0;
        for (key2 in defaults) {
          options2[key2] = defaults[key2];
        }
        for (key2 in config2) {
          if (hasOwn2(config2, key2)) {
            var value = config2[key2];
            if (typeof value !== "undefined") {
              options2[key2] = value;
            }
          }
        }
        return options2;
      }
      function parseWidth(width) {
        if (width !== void 0) {
          width = parseInt(width, 10);
          if (isNaN(width)) {
            width = null;
          }
        }
        return width;
      }
      function parseMinWidth(minWidth) {
        if (typeof minWidth !== "undefined") {
          minWidth = parseWidth(minWidth);
          if (isNaN(minWidth)) {
            minWidth = 80;
          }
        }
        return minWidth;
      }
      function parseHeight(height) {
        if (typeof height === "number") {
          return height;
        }
        if (typeof height === "string") {
          if (/^\d+(?:px)?$/.test(height)) {
            return parseInt(height, 10);
          } else {
            return height;
          }
        }
        return null;
      }
      function compose() {
        for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
          funcs[_key] = arguments[_key];
        }
        if (funcs.length === 0) {
          return function(arg) {
            return arg;
          };
        }
        if (funcs.length === 1) {
          return funcs[0];
        }
        return funcs.reduce(function(a2, b2) {
          return function() {
            return a2(b2.apply(void 0, arguments));
          };
        });
      }
      function toggleRowStatus(statusArr, row2, newVal) {
        var changed = false;
        var index2 = statusArr.indexOf(row2);
        var included = index2 !== -1;
        var addRow = function addRow2() {
          statusArr.push(row2);
          changed = true;
        };
        var removeRow = function removeRow2() {
          statusArr.splice(index2, 1);
          changed = true;
        };
        if (typeof newVal === "boolean") {
          if (newVal && !included) {
            addRow();
          } else if (!newVal && included) {
            removeRow();
          }
        } else {
          if (included) {
            removeRow();
          } else {
            addRow();
          }
        }
        return changed;
      }
      function walkTreeNode(root2, cb) {
        var childrenKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
        var lazyKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "hasChildren";
        var isNil = function isNil2(array) {
          return !(Array.isArray(array) && array.length);
        };
        function _walker(parent, children, level) {
          cb(parent, children, level);
          children.forEach(function(item2) {
            if (item2[lazyKey]) {
              cb(item2, null, level + 1);
              return;
            }
            var children2 = item2[childrenKey];
            if (!isNil(children2)) {
              _walker(item2, children2, level + 1);
            }
          });
        }
        root2.forEach(function(item2) {
          if (item2[lazyKey]) {
            cb(item2, null, 0);
            return;
          }
          var children = item2[childrenKey];
          if (!isNil(children)) {
            _walker(item2, children, 0);
          }
        });
      }
    }
  });
})(tableColumn);
var TableColumn = /* @__PURE__ */ getDefaultExportFromCjs(tableColumn.exports);
var datePicker = { exports: {} };
var dateUtil = {};
var date = { exports: {} };
(function(module) {
  (function(main) {
    var fecha = {};
    var token2 = /d{1,4}|M{1,4}|yy(?:yy)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
    var twoDigits = "\\d\\d?";
    var threeDigits = "\\d{3}";
    var fourDigits = "\\d{4}";
    var word = "[^\\s]+";
    var literal = /\[([^]*?)\]/gm;
    var noop4 = function noop5() {
    };
    function regexEscape(str) {
      return str.replace(/[|\\{()[^$+*?.-]/g, "\\$&");
    }
    function shorten(arr, sLen) {
      var newArr = [];
      for (var i = 0, len = arr.length; i < len; i++) {
        newArr.push(arr[i].substr(0, sLen));
      }
      return newArr;
    }
    function monthUpdate(arrName) {
      return function(d, v2, i18n3) {
        var index2 = i18n3[arrName].indexOf(v2.charAt(0).toUpperCase() + v2.substr(1).toLowerCase());
        if (~index2) {
          d.month = index2;
        }
      };
    }
    function pad(val, len) {
      val = String(val);
      len = len || 2;
      while (val.length < len) {
        val = "0" + val;
      }
      return val;
    }
    var dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var monthNamesShort = shorten(monthNames, 3);
    var dayNamesShort = shorten(dayNames, 3);
    fecha.i18n = {
      dayNamesShort,
      dayNames,
      monthNamesShort,
      monthNames,
      amPm: ["am", "pm"],
      DoFn: function DoFn(D) {
        return D + ["th", "st", "nd", "rd"][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];
      }
    };
    var formatFlags = {
      D: function D(dateObj) {
        return dateObj.getDay();
      },
      DD: function DD2(dateObj) {
        return pad(dateObj.getDay());
      },
      Do: function Do(dateObj, i18n3) {
        return i18n3.DoFn(dateObj.getDate());
      },
      d: function d(dateObj) {
        return dateObj.getDate();
      },
      dd: function dd2(dateObj) {
        return pad(dateObj.getDate());
      },
      ddd: function ddd(dateObj, i18n3) {
        return i18n3.dayNamesShort[dateObj.getDay()];
      },
      dddd: function dddd(dateObj, i18n3) {
        return i18n3.dayNames[dateObj.getDay()];
      },
      M: function M(dateObj) {
        return dateObj.getMonth() + 1;
      },
      MM: function MM(dateObj) {
        return pad(dateObj.getMonth() + 1);
      },
      MMM: function MMM(dateObj, i18n3) {
        return i18n3.monthNamesShort[dateObj.getMonth()];
      },
      MMMM: function MMMM(dateObj, i18n3) {
        return i18n3.monthNames[dateObj.getMonth()];
      },
      yy: function yy(dateObj) {
        return pad(String(dateObj.getFullYear()), 4).substr(2);
      },
      yyyy: function yyyy(dateObj) {
        return pad(dateObj.getFullYear(), 4);
      },
      h: function h(dateObj) {
        return dateObj.getHours() % 12 || 12;
      },
      hh: function hh(dateObj) {
        return pad(dateObj.getHours() % 12 || 12);
      },
      H: function H(dateObj) {
        return dateObj.getHours();
      },
      HH: function HH(dateObj) {
        return pad(dateObj.getHours());
      },
      m: function m2(dateObj) {
        return dateObj.getMinutes();
      },
      mm: function mm(dateObj) {
        return pad(dateObj.getMinutes());
      },
      s: function s(dateObj) {
        return dateObj.getSeconds();
      },
      ss: function ss(dateObj) {
        return pad(dateObj.getSeconds());
      },
      S: function S(dateObj) {
        return Math.round(dateObj.getMilliseconds() / 100);
      },
      SS: function SS(dateObj) {
        return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
      },
      SSS: function SSS(dateObj) {
        return pad(dateObj.getMilliseconds(), 3);
      },
      a: function a2(dateObj, i18n3) {
        return dateObj.getHours() < 12 ? i18n3.amPm[0] : i18n3.amPm[1];
      },
      A: function A(dateObj, i18n3) {
        return dateObj.getHours() < 12 ? i18n3.amPm[0].toUpperCase() : i18n3.amPm[1].toUpperCase();
      },
      ZZ: function ZZ(dateObj) {
        var o3 = dateObj.getTimezoneOffset();
        return (o3 > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o3) / 60) * 100 + Math.abs(o3) % 60, 4);
      }
    };
    var parseFlags = {
      d: [twoDigits, function(d, v2) {
        d.day = v2;
      }],
      Do: [twoDigits + word, function(d, v2) {
        d.day = parseInt(v2, 10);
      }],
      M: [twoDigits, function(d, v2) {
        d.month = v2 - 1;
      }],
      yy: [twoDigits, function(d, v2) {
        var da = new Date(), cent2 = +("" + da.getFullYear()).substr(0, 2);
        d.year = "" + (v2 > 68 ? cent2 - 1 : cent2) + v2;
      }],
      h: [twoDigits, function(d, v2) {
        d.hour = v2;
      }],
      m: [twoDigits, function(d, v2) {
        d.minute = v2;
      }],
      s: [twoDigits, function(d, v2) {
        d.second = v2;
      }],
      yyyy: [fourDigits, function(d, v2) {
        d.year = v2;
      }],
      S: ["\\d", function(d, v2) {
        d.millisecond = v2 * 100;
      }],
      SS: ["\\d{2}", function(d, v2) {
        d.millisecond = v2 * 10;
      }],
      SSS: [threeDigits, function(d, v2) {
        d.millisecond = v2;
      }],
      D: [twoDigits, noop4],
      ddd: [word, noop4],
      MMM: [word, monthUpdate("monthNamesShort")],
      MMMM: [word, monthUpdate("monthNames")],
      a: [word, function(d, v2, i18n3) {
        var val = v2.toLowerCase();
        if (val === i18n3.amPm[0]) {
          d.isPm = false;
        } else if (val === i18n3.amPm[1]) {
          d.isPm = true;
        }
      }],
      ZZ: ["[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z", function(d, v2) {
        var parts = (v2 + "").match(/([+-]|\d\d)/gi), minutes;
        if (parts) {
          minutes = +(parts[1] * 60) + parseInt(parts[2], 10);
          d.timezoneOffset = parts[0] === "+" ? minutes : -minutes;
        }
      }]
    };
    parseFlags.dd = parseFlags.d;
    parseFlags.dddd = parseFlags.ddd;
    parseFlags.DD = parseFlags.D;
    parseFlags.mm = parseFlags.m;
    parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;
    parseFlags.MM = parseFlags.M;
    parseFlags.ss = parseFlags.s;
    parseFlags.A = parseFlags.a;
    fecha.masks = {
      default: "ddd MMM dd yyyy HH:mm:ss",
      shortDate: "M/D/yy",
      mediumDate: "MMM d, yyyy",
      longDate: "MMMM d, yyyy",
      fullDate: "dddd, MMMM d, yyyy",
      shortTime: "HH:mm",
      mediumTime: "HH:mm:ss",
      longTime: "HH:mm:ss.SSS"
    };
    fecha.format = function(dateObj, mask2, i18nSettings) {
      var i18n3 = i18nSettings || fecha.i18n;
      if (typeof dateObj === "number") {
        dateObj = new Date(dateObj);
      }
      if (Object.prototype.toString.call(dateObj) !== "[object Date]" || isNaN(dateObj.getTime())) {
        throw new Error("Invalid Date in fecha.format");
      }
      mask2 = fecha.masks[mask2] || mask2 || fecha.masks["default"];
      var literals = [];
      mask2 = mask2.replace(literal, function($0, $1) {
        literals.push($1);
        return "@@@";
      });
      mask2 = mask2.replace(token2, function($0) {
        return $0 in formatFlags ? formatFlags[$0](dateObj, i18n3) : $0.slice(1, $0.length - 1);
      });
      return mask2.replace(/@@@/g, function() {
        return literals.shift();
      });
    };
    fecha.parse = function(dateStr, format3, i18nSettings) {
      var i18n3 = i18nSettings || fecha.i18n;
      if (typeof format3 !== "string") {
        throw new Error("Invalid format in fecha.parse");
      }
      format3 = fecha.masks[format3] || format3;
      if (dateStr.length > 1e3) {
        return null;
      }
      var dateInfo = {};
      var parseInfo = [];
      var literals = [];
      format3 = format3.replace(literal, function($0, $1) {
        literals.push($1);
        return "@@@";
      });
      var newFormat = regexEscape(format3).replace(token2, function($0) {
        if (parseFlags[$0]) {
          var info2 = parseFlags[$0];
          parseInfo.push(info2[1]);
          return "(" + info2[0] + ")";
        }
        return $0;
      });
      newFormat = newFormat.replace(/@@@/g, function() {
        return literals.shift();
      });
      var matches = dateStr.match(new RegExp(newFormat, "i"));
      if (!matches) {
        return null;
      }
      for (var i = 1; i < matches.length; i++) {
        parseInfo[i - 1](dateInfo, matches[i], i18n3);
      }
      var today = new Date();
      if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {
        dateInfo.hour = +dateInfo.hour + 12;
      } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {
        dateInfo.hour = 0;
      }
      var date2;
      if (dateInfo.timezoneOffset != null) {
        dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;
        date2 = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));
      } else {
        date2 = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);
      }
      return date2;
    };
    if (module.exports) {
      module.exports = fecha;
    } else {
      main.fecha = fecha;
    }
  })(void 0);
})(date);
dateUtil.__esModule = true;
dateUtil.validateRangeInOneMonth = dateUtil.extractTimeFormat = dateUtil.extractDateFormat = dateUtil.nextYear = dateUtil.prevYear = dateUtil.nextMonth = dateUtil.prevMonth = dateUtil.changeYearMonthAndClampDate = dateUtil.timeWithinRange = dateUtil.limitTimeRange = dateUtil.clearMilliseconds = dateUtil.clearTime = dateUtil.modifyWithTimeString = dateUtil.modifyTime = dateUtil.modifyDate = dateUtil.range = dateUtil.getRangeMinutes = dateUtil.getMonthDays = dateUtil.getPrevMonthLastDays = dateUtil.getRangeHours = dateUtil.getWeekNumber = dateUtil.getStartDateOfMonth = dateUtil.nextDate = dateUtil.prevDate = dateUtil.getFirstDayOfMonth = dateUtil.getDayCountOfYear = dateUtil.getDayCountOfMonth = dateUtil.parseDate = dateUtil.formatDate = dateUtil.isDateObject = dateUtil.isDate = dateUtil.toDate = dateUtil.getI18nSettings = void 0;
var _date = date.exports;
var _date2 = _interopRequireDefault$1(_date);
var _locale = locale$1;
function _interopRequireDefault$1(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var weeks = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
var months = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"];
var newArray = function newArray2(start, end2) {
  var result2 = [];
  for (var i = start; i <= end2; i++) {
    result2.push(i);
  }
  return result2;
};
var getI18nSettings = dateUtil.getI18nSettings = function getI18nSettings2() {
  return {
    dayNamesShort: weeks.map(function(week) {
      return (0, _locale.t)("el.datepicker.weeks." + week);
    }),
    dayNames: weeks.map(function(week) {
      return (0, _locale.t)("el.datepicker.weeks." + week);
    }),
    monthNamesShort: months.map(function(month) {
      return (0, _locale.t)("el.datepicker.months." + month);
    }),
    monthNames: months.map(function(month, index2) {
      return (0, _locale.t)("el.datepicker.month" + (index2 + 1));
    }),
    amPm: ["am", "pm"]
  };
};
var toDate = dateUtil.toDate = function toDate2(date2) {
  return isDate(date2) ? new Date(date2) : null;
};
var isDate = dateUtil.isDate = function isDate2(date2) {
  if (date2 === null || date2 === void 0)
    return false;
  if (isNaN(new Date(date2).getTime()))
    return false;
  if (Array.isArray(date2))
    return false;
  return true;
};
dateUtil.isDateObject = function isDateObject(val) {
  return val instanceof Date;
};
dateUtil.formatDate = function formatDate(date2, format3) {
  date2 = toDate(date2);
  if (!date2)
    return "";
  return _date2.default.format(date2, format3 || "yyyy-MM-dd", getI18nSettings());
};
var parseDate = dateUtil.parseDate = function parseDate2(string, format3) {
  return _date2.default.parse(string, format3 || "yyyy-MM-dd", getI18nSettings());
};
var getDayCountOfMonth = dateUtil.getDayCountOfMonth = function getDayCountOfMonth2(year, month) {
  if (isNaN(+month))
    return 31;
  return new Date(year, +month + 1, 0).getDate();
};
dateUtil.getDayCountOfYear = function getDayCountOfYear(year) {
  var isLeapYear = year % 400 === 0 || year % 100 !== 0 && year % 4 === 0;
  return isLeapYear ? 366 : 365;
};
dateUtil.getFirstDayOfMonth = function getFirstDayOfMonth(date2) {
  var temp = new Date(date2.getTime());
  temp.setDate(1);
  return temp.getDay();
};
var prevDate = dateUtil.prevDate = function prevDate2(date2) {
  var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  return new Date(date2.getFullYear(), date2.getMonth(), date2.getDate() - amount);
};
dateUtil.nextDate = function nextDate(date2) {
  var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  return new Date(date2.getFullYear(), date2.getMonth(), date2.getDate() + amount);
};
dateUtil.getStartDateOfMonth = function getStartDateOfMonth(year, month) {
  var result2 = new Date(year, month, 1);
  var day = result2.getDay();
  if (day === 0) {
    return prevDate(result2, 7);
  } else {
    return prevDate(result2, day);
  }
};
dateUtil.getWeekNumber = function getWeekNumber(src) {
  if (!isDate(src))
    return null;
  var date2 = new Date(src.getTime());
  date2.setHours(0, 0, 0, 0);
  date2.setDate(date2.getDate() + 3 - (date2.getDay() + 6) % 7);
  var week1 = new Date(date2.getFullYear(), 0, 4);
  return 1 + Math.round(((date2.getTime() - week1.getTime()) / 864e5 - 3 + (week1.getDay() + 6) % 7) / 7);
};
dateUtil.getRangeHours = function getRangeHours(ranges) {
  var hours = [];
  var disabledHours = [];
  (ranges || []).forEach(function(range3) {
    var value = range3.map(function(date2) {
      return date2.getHours();
    });
    disabledHours = disabledHours.concat(newArray(value[0], value[1]));
  });
  if (disabledHours.length) {
    for (var i = 0; i < 24; i++) {
      hours[i] = disabledHours.indexOf(i) === -1;
    }
  } else {
    for (var _i = 0; _i < 24; _i++) {
      hours[_i] = false;
    }
  }
  return hours;
};
dateUtil.getPrevMonthLastDays = function getPrevMonthLastDays(date2, amount) {
  if (amount <= 0)
    return [];
  var temp = new Date(date2.getTime());
  temp.setDate(0);
  var lastDay = temp.getDate();
  return range(amount).map(function(_2, index2) {
    return lastDay - (amount - index2 - 1);
  });
};
dateUtil.getMonthDays = function getMonthDays(date2) {
  var temp = new Date(date2.getFullYear(), date2.getMonth() + 1, 0);
  var days = temp.getDate();
  return range(days).map(function(_2, index2) {
    return index2 + 1;
  });
};
function setRangeData(arr, start, end2, value) {
  for (var i = start; i < end2; i++) {
    arr[i] = value;
  }
}
dateUtil.getRangeMinutes = function getRangeMinutes(ranges, hour) {
  var minutes = new Array(60);
  if (ranges.length > 0) {
    ranges.forEach(function(range3) {
      var start = range3[0];
      var end2 = range3[1];
      var startHour = start.getHours();
      var startMinute = start.getMinutes();
      var endHour = end2.getHours();
      var endMinute = end2.getMinutes();
      if (startHour === hour && endHour !== hour) {
        setRangeData(minutes, startMinute, 60, true);
      } else if (startHour === hour && endHour === hour) {
        setRangeData(minutes, startMinute, endMinute + 1, true);
      } else if (startHour !== hour && endHour === hour) {
        setRangeData(minutes, 0, endMinute + 1, true);
      } else if (startHour < hour && endHour > hour) {
        setRangeData(minutes, 0, 60, true);
      }
    });
  } else {
    setRangeData(minutes, 0, 60, true);
  }
  return minutes;
};
var range = dateUtil.range = function range2(n) {
  return Array.apply(null, { length: n }).map(function(_2, n2) {
    return n2;
  });
};
var modifyDate = dateUtil.modifyDate = function modifyDate2(date2, y, m2, d) {
  return new Date(y, m2, d, date2.getHours(), date2.getMinutes(), date2.getSeconds(), date2.getMilliseconds());
};
var modifyTime = dateUtil.modifyTime = function modifyTime2(date2, h, m2, s) {
  return new Date(date2.getFullYear(), date2.getMonth(), date2.getDate(), h, m2, s, date2.getMilliseconds());
};
dateUtil.modifyWithTimeString = function modifyWithTimeString(date2, time) {
  if (date2 == null || !time) {
    return date2;
  }
  time = parseDate(time, "HH:mm:ss");
  return modifyTime(date2, time.getHours(), time.getMinutes(), time.getSeconds());
};
dateUtil.clearTime = function clearTime(date2) {
  return new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());
};
dateUtil.clearMilliseconds = function clearMilliseconds(date2) {
  return new Date(date2.getFullYear(), date2.getMonth(), date2.getDate(), date2.getHours(), date2.getMinutes(), date2.getSeconds(), 0);
};
var limitTimeRange = dateUtil.limitTimeRange = function limitTimeRange2(date2, ranges) {
  var format3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "HH:mm:ss";
  if (ranges.length === 0)
    return date2;
  var normalizeDate = function normalizeDate2(date3) {
    return _date2.default.parse(_date2.default.format(date3, format3), format3);
  };
  var ndate = normalizeDate(date2);
  var nranges = ranges.map(function(range3) {
    return range3.map(normalizeDate);
  });
  if (nranges.some(function(nrange) {
    return ndate >= nrange[0] && ndate <= nrange[1];
  }))
    return date2;
  var minDate = nranges[0][0];
  var maxDate = nranges[0][0];
  nranges.forEach(function(nrange) {
    minDate = new Date(Math.min(nrange[0], minDate));
    maxDate = new Date(Math.max(nrange[1], minDate));
  });
  var ret = ndate < minDate ? minDate : maxDate;
  return modifyDate(ret, date2.getFullYear(), date2.getMonth(), date2.getDate());
};
dateUtil.timeWithinRange = function timeWithinRange(date2, selectableRange, format3) {
  var limitedDate = limitTimeRange(date2, selectableRange, format3);
  return limitedDate.getTime() === date2.getTime();
};
var changeYearMonthAndClampDate = dateUtil.changeYearMonthAndClampDate = function changeYearMonthAndClampDate2(date2, year, month) {
  var monthDate = Math.min(date2.getDate(), getDayCountOfMonth(year, month));
  return modifyDate(date2, year, month, monthDate);
};
dateUtil.prevMonth = function prevMonth(date2) {
  var year = date2.getFullYear();
  var month = date2.getMonth();
  return month === 0 ? changeYearMonthAndClampDate(date2, year - 1, 11) : changeYearMonthAndClampDate(date2, year, month - 1);
};
dateUtil.nextMonth = function nextMonth(date2) {
  var year = date2.getFullYear();
  var month = date2.getMonth();
  return month === 11 ? changeYearMonthAndClampDate(date2, year + 1, 0) : changeYearMonthAndClampDate(date2, year, month + 1);
};
dateUtil.prevYear = function prevYear(date2) {
  var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var year = date2.getFullYear();
  var month = date2.getMonth();
  return changeYearMonthAndClampDate(date2, year - amount, month);
};
dateUtil.nextYear = function nextYear(date2) {
  var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var year = date2.getFullYear();
  var month = date2.getMonth();
  return changeYearMonthAndClampDate(date2, year + amount, month);
};
dateUtil.extractDateFormat = function extractDateFormat(format3) {
  return format3.replace(/\W?m{1,2}|\W?ZZ/g, "").replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi, "").trim();
};
dateUtil.extractTimeFormat = function extractTimeFormat(format3) {
  return format3.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?y{2,4}/g, "").trim();
};
dateUtil.validateRangeInOneMonth = function validateRangeInOneMonth(start, end2) {
  return start.getMonth() === end2.getMonth() && start.getFullYear() === end2.getFullYear();
};
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 55);
  }([
    function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    function(module2, exports) {
      module2.exports = dateUtil;
    },
    function(module2, exports) {
      module2.exports = dom;
    },
    function(module2, exports) {
      module2.exports = util$2;
    },
    function(module2, exports) {
      module2.exports = emitter;
    },
    function(module2, exports) {
      module2.exports = vuePopper;
    },
    function(module2, exports) {
      module2.exports = locale;
    },
    function(module2, exports) {
      module2.exports = Vue;
    },
    ,
    function(module2, exports) {
      module2.exports = merge;
    },
    function(module2, exports) {
      module2.exports = input$2.exports;
    },
    ,
    function(module2, exports) {
      module2.exports = clickoutside;
    },
    ,
    function(module2, exports) {
      module2.exports = button$3.exports;
    },
    function(module2, exports) {
      module2.exports = scrollbar.exports;
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(module2, __webpack_exports__, __webpack_require__) {
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-zoom-in-top" },
            on: {
              "after-leave": function($event) {
                _vm.$emit("dodestroy");
              }
            }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-time-panel el-popper",
                class: _vm.popperClass
              },
              [
                _c(
                  "div",
                  {
                    staticClass: "el-time-panel__content",
                    class: { "has-seconds": _vm.showSeconds }
                  },
                  [
                    _c("time-spinner", {
                      ref: "spinner",
                      attrs: {
                        "arrow-control": _vm.useArrow,
                        "show-seconds": _vm.showSeconds,
                        "am-pm-mode": _vm.amPmMode,
                        date: _vm.date
                      },
                      on: {
                        change: _vm.handleChange,
                        "select-range": _vm.setSelectionRange
                      }
                    })
                  ],
                  1
                ),
                _c("div", { staticClass: "el-time-panel__footer" }, [
                  _c(
                    "button",
                    {
                      staticClass: "el-time-panel__btn cancel",
                      attrs: { type: "button" },
                      on: { click: _vm.handleCancel }
                    },
                    [_vm._v(_vm._s(_vm.t("el.datepicker.cancel")))]
                  ),
                  _c(
                    "button",
                    {
                      staticClass: "el-time-panel__btn",
                      class: { confirm: !_vm.disabled },
                      attrs: { type: "button" },
                      on: {
                        click: function($event) {
                          _vm.handleConfirm();
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.t("el.datepicker.confirm")))]
                  )
                ])
              ]
            )
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var date_util_ = __webpack_require__(1);
      var locale_ = __webpack_require__(6);
      var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
      var time_spinner = __webpack_require__(34);
      var timevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        components: {
          TimeSpinner: time_spinner["a"]
        },
        props: {
          visible: Boolean,
          timeArrowControl: Boolean
        },
        watch: {
          visible: function visible3(val) {
            var _this = this;
            if (val) {
              this.oldValue = this.value;
              this.$nextTick(function() {
                return _this.$refs.spinner.emitSelectRange("hours");
              });
            } else {
              this.needInitAdjust = true;
            }
          },
          value: function value(newVal) {
            var _this2 = this;
            var date2 = void 0;
            if (newVal instanceof Date) {
              date2 = Object(date_util_["limitTimeRange"])(newVal, this.selectableRange, this.format);
            } else if (!newVal) {
              date2 = this.defaultValue ? new Date(this.defaultValue) : new Date();
            }
            this.date = date2;
            if (this.visible && this.needInitAdjust) {
              this.$nextTick(function(_2) {
                return _this2.adjustSpinners();
              });
              this.needInitAdjust = false;
            }
          },
          selectableRange: function selectableRange(val) {
            this.$refs.spinner.selectableRange = val;
          },
          defaultValue: function defaultValue(val) {
            if (!Object(date_util_["isDate"])(this.value)) {
              this.date = val ? new Date(val) : new Date();
            }
          }
        },
        data: function data3() {
          return {
            popperClass: "",
            format: "HH:mm:ss",
            value: "",
            defaultValue: null,
            date: new Date(),
            oldValue: new Date(),
            selectableRange: [],
            selectionRange: [0, 2],
            disabled: false,
            arrowControl: false,
            needInitAdjust: true
          };
        },
        computed: {
          showSeconds: function showSeconds() {
            return (this.format || "").indexOf("ss") !== -1;
          },
          useArrow: function useArrow() {
            return this.arrowControl || this.timeArrowControl || false;
          },
          amPmMode: function amPmMode() {
            if ((this.format || "").indexOf("A") !== -1)
              return "A";
            if ((this.format || "").indexOf("a") !== -1)
              return "a";
            return "";
          }
        },
        methods: {
          handleCancel: function handleCancel() {
            this.$emit("pick", this.oldValue, false);
          },
          handleChange: function handleChange(date2) {
            if (this.visible) {
              this.date = Object(date_util_["clearMilliseconds"])(date2);
              if (this.isValidValue(this.date)) {
                this.$emit("pick", this.date, true);
              }
            }
          },
          setSelectionRange: function setSelectionRange(start, end2) {
            this.$emit("select-range", start, end2);
            this.selectionRange = [start, end2];
          },
          handleConfirm: function handleConfirm() {
            var visible3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            var first = arguments[1];
            if (first)
              return;
            var date2 = Object(date_util_["clearMilliseconds"])(Object(date_util_["limitTimeRange"])(this.date, this.selectableRange, this.format));
            this.$emit("pick", date2, visible3, first);
          },
          handleKeydown: function handleKeydown(event) {
            var keyCode = event.keyCode;
            var mapping = { 38: -1, 40: 1, 37: -1, 39: 1 };
            if (keyCode === 37 || keyCode === 39) {
              var step = mapping[keyCode];
              this.changeSelectionRange(step);
              event.preventDefault();
              return;
            }
            if (keyCode === 38 || keyCode === 40) {
              var _step = mapping[keyCode];
              this.$refs.spinner.scrollDown(_step);
              event.preventDefault();
              return;
            }
          },
          isValidValue: function isValidValue(date2) {
            return Object(date_util_["timeWithinRange"])(date2, this.selectableRange, this.format);
          },
          adjustSpinners: function adjustSpinners() {
            return this.$refs.spinner.adjustSpinners();
          },
          changeSelectionRange: function changeSelectionRange(step) {
            var list3 = [0, 3].concat(this.showSeconds ? [6] : []);
            var mapping = ["hours", "minutes"].concat(this.showSeconds ? ["seconds"] : []);
            var index2 = list3.indexOf(this.selectionRange[0]);
            var next2 = (index2 + step + list3.length) % list3.length;
            this.$refs.spinner.emitSelectRange(mapping[next2]);
          }
        },
        mounted: function mounted2() {
          var _this3 = this;
          this.$nextTick(function() {
            return _this3.handleConfirm(true, true);
          });
          this.$emit("mounted");
        }
      };
      var panel_timevue_type_script_lang_js_ = timevue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        panel_timevue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/date-picker/src/panel/time.vue";
      __webpack_exports__["a"] = component.exports;
    },
    ,
    ,
    function(module2, __webpack_exports__, __webpack_require__) {
      var element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
      __webpack_exports__["a"] = {
        bind: function bind2(el2, binding, vnode) {
          var interval = null;
          var startTime = void 0;
          var handler2 = function handler3() {
            return vnode.context[binding.expression].apply();
          };
          var clear = function clear2() {
            if (Date.now() - startTime < 100) {
              handler2();
            }
            clearInterval(interval);
            interval = null;
          };
          Object(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__["on"])(el2, "mousedown", function(e) {
            if (e.button !== 0)
              return;
            startTime = Date.now();
            Object(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__["once"])(document, "mouseup", clear);
            clearInterval(interval);
            interval = setInterval(handler2, 100);
          });
        }
      };
    },
    ,
    function(module2, __webpack_exports__, __webpack_require__) {
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return !_vm.ranged ? _c(
          "el-input",
          _vm._b(
            {
              directives: [
                {
                  name: "clickoutside",
                  rawName: "v-clickoutside",
                  value: _vm.handleClose,
                  expression: "handleClose"
                }
              ],
              ref: "reference",
              staticClass: "el-date-editor",
              class: "el-date-editor--" + _vm.type,
              attrs: {
                readonly: !_vm.editable || _vm.readonly || _vm.type === "dates" || _vm.type === "week" || _vm.type === "years" || _vm.type === "months",
                disabled: _vm.pickerDisabled,
                size: _vm.pickerSize,
                name: _vm.name,
                placeholder: _vm.placeholder,
                value: _vm.displayValue,
                validateEvent: false
              },
              on: {
                focus: _vm.handleFocus,
                input: function(value) {
                  return _vm.userInput = value;
                },
                change: _vm.handleChange
              },
              nativeOn: {
                keydown: function($event) {
                  return _vm.handleKeydown($event);
                },
                mouseenter: function($event) {
                  return _vm.handleMouseEnter($event);
                },
                mouseleave: function($event) {
                  _vm.showClose = false;
                }
              }
            },
            "el-input",
            _vm.firstInputId,
            false
          ),
          [
            _c("i", {
              staticClass: "el-input__icon",
              class: _vm.triggerClass,
              attrs: { slot: "prefix" },
              on: { click: _vm.handleFocus },
              slot: "prefix"
            }),
            _vm.haveTrigger ? _c("i", {
              staticClass: "el-input__icon",
              class: [_vm.showClose ? "" + _vm.clearIcon : ""],
              attrs: { slot: "suffix" },
              on: { click: _vm.handleClickIcon },
              slot: "suffix"
            }) : _vm._e()
          ]
        ) : _c(
          "div",
          {
            directives: [
              {
                name: "clickoutside",
                rawName: "v-clickoutside",
                value: _vm.handleClose,
                expression: "handleClose"
              }
            ],
            ref: "reference",
            staticClass: "el-date-editor el-range-editor el-input__inner",
            class: [
              "el-date-editor--" + _vm.type,
              _vm.pickerSize ? "el-range-editor--" + _vm.pickerSize : "",
              _vm.pickerDisabled ? "is-disabled" : "",
              _vm.pickerVisible ? "is-active" : ""
            ],
            on: {
              click: _vm.handleRangeClick,
              mouseenter: _vm.handleMouseEnter,
              mouseleave: function($event) {
                _vm.showClose = false;
              },
              keydown: _vm.handleKeydown
            }
          },
          [
            _c("i", {
              class: ["el-input__icon", "el-range__icon", _vm.triggerClass]
            }),
            _c(
              "input",
              _vm._b(
                {
                  staticClass: "el-range-input",
                  attrs: {
                    autocomplete: "off",
                    placeholder: _vm.startPlaceholder,
                    disabled: _vm.pickerDisabled,
                    readonly: !_vm.editable || _vm.readonly,
                    name: _vm.name && _vm.name[0]
                  },
                  domProps: { value: _vm.displayValue && _vm.displayValue[0] },
                  on: {
                    input: _vm.handleStartInput,
                    change: _vm.handleStartChange,
                    focus: _vm.handleFocus
                  }
                },
                "input",
                _vm.firstInputId,
                false
              )
            ),
            _vm._t("range-separator", [
              _c("span", { staticClass: "el-range-separator" }, [
                _vm._v(_vm._s(_vm.rangeSeparator))
              ])
            ]),
            _c(
              "input",
              _vm._b(
                {
                  staticClass: "el-range-input",
                  attrs: {
                    autocomplete: "off",
                    placeholder: _vm.endPlaceholder,
                    disabled: _vm.pickerDisabled,
                    readonly: !_vm.editable || _vm.readonly,
                    name: _vm.name && _vm.name[1]
                  },
                  domProps: { value: _vm.displayValue && _vm.displayValue[1] },
                  on: {
                    input: _vm.handleEndInput,
                    change: _vm.handleEndChange,
                    focus: _vm.handleFocus
                  }
                },
                "input",
                _vm.secondInputId,
                false
              )
            ),
            _vm.haveTrigger ? _c("i", {
              staticClass: "el-input__icon el-range__close-icon",
              class: [_vm.showClose ? "" + _vm.clearIcon : ""],
              on: { click: _vm.handleClickIcon }
            }) : _vm._e()
          ],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var external_vue_ = __webpack_require__(7);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      var clickoutside_ = __webpack_require__(12);
      var clickoutside_default = /* @__PURE__ */ __webpack_require__.n(clickoutside_);
      var date_util_ = __webpack_require__(1);
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var input_ = __webpack_require__(10);
      var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
      var merge_ = __webpack_require__(9);
      var merge_default = /* @__PURE__ */ __webpack_require__.n(merge_);
      var NewPopper = {
        props: {
          appendToBody: vue_popper_default.a.props.appendToBody,
          offset: vue_popper_default.a.props.offset,
          boundariesPadding: vue_popper_default.a.props.boundariesPadding,
          arrowOffset: vue_popper_default.a.props.arrowOffset,
          transformOrigin: vue_popper_default.a.props.transformOrigin
        },
        methods: vue_popper_default.a.methods,
        data: function data3() {
          return merge_default()({ visibleArrow: true }, vue_popper_default.a.data);
        },
        beforeDestroy: vue_popper_default.a.beforeDestroy
      };
      var DEFAULT_FORMATS = {
        date: "yyyy-MM-dd",
        month: "yyyy-MM",
        months: "yyyy-MM",
        datetime: "yyyy-MM-dd HH:mm:ss",
        time: "HH:mm:ss",
        week: "yyyywWW",
        timerange: "HH:mm:ss",
        daterange: "yyyy-MM-dd",
        monthrange: "yyyy-MM",
        datetimerange: "yyyy-MM-dd HH:mm:ss",
        year: "yyyy",
        years: "yyyy"
      };
      var HAVE_TRIGGER_TYPES = ["date", "datetime", "time", "time-select", "week", "month", "year", "daterange", "monthrange", "timerange", "datetimerange", "dates", "months", "years"];
      var pickervue_type_script_lang_js_DATE_FORMATTER = function DATE_FORMATTER(value, format3) {
        if (format3 === "timestamp")
          return value.getTime();
        return Object(date_util_["formatDate"])(value, format3);
      };
      var pickervue_type_script_lang_js_DATE_PARSER = function DATE_PARSER(text3, format3) {
        if (format3 === "timestamp")
          return new Date(Number(text3));
        return Object(date_util_["parseDate"])(text3, format3);
      };
      var RANGE_FORMATTER = function RANGE_FORMATTER2(value, format3) {
        if (Array.isArray(value) && value.length === 2) {
          var start = value[0];
          var end2 = value[1];
          if (start && end2) {
            return [pickervue_type_script_lang_js_DATE_FORMATTER(start, format3), pickervue_type_script_lang_js_DATE_FORMATTER(end2, format3)];
          }
        }
        return "";
      };
      var RANGE_PARSER = function RANGE_PARSER2(array, format3, separator) {
        if (!Array.isArray(array)) {
          array = array.split(separator);
        }
        if (array.length === 2) {
          var range1 = array[0];
          var range22 = array[1];
          return [pickervue_type_script_lang_js_DATE_PARSER(range1, format3), pickervue_type_script_lang_js_DATE_PARSER(range22, format3)];
        }
        return [];
      };
      var TYPE_VALUE_RESOLVER_MAP = {
        default: {
          formatter: function formatter(value) {
            if (!value)
              return "";
            return "" + value;
          },
          parser: function parser2(text3) {
            if (text3 === void 0 || text3 === "")
              return null;
            return text3;
          }
        },
        week: {
          formatter: function formatter(value, format3) {
            var week = Object(date_util_["getWeekNumber"])(value);
            var month = value.getMonth();
            var trueDate = new Date(value);
            if (week === 1 && month === 11) {
              trueDate.setHours(0, 0, 0, 0);
              trueDate.setDate(trueDate.getDate() + 3 - (trueDate.getDay() + 6) % 7);
            }
            var date2 = Object(date_util_["formatDate"])(trueDate, format3);
            date2 = /WW/.test(date2) ? date2.replace(/WW/, week < 10 ? "0" + week : week) : date2.replace(/W/, week);
            return date2;
          },
          parser: function parser2(text3, format3) {
            return TYPE_VALUE_RESOLVER_MAP.date.parser(text3, format3);
          }
        },
        date: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        datetime: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        daterange: {
          formatter: RANGE_FORMATTER,
          parser: RANGE_PARSER
        },
        monthrange: {
          formatter: RANGE_FORMATTER,
          parser: RANGE_PARSER
        },
        datetimerange: {
          formatter: RANGE_FORMATTER,
          parser: RANGE_PARSER
        },
        timerange: {
          formatter: RANGE_FORMATTER,
          parser: RANGE_PARSER
        },
        time: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        month: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        year: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        number: {
          formatter: function formatter(value) {
            if (!value)
              return "";
            return "" + value;
          },
          parser: function parser2(text3) {
            var result2 = Number(text3);
            if (!isNaN(text3)) {
              return result2;
            } else {
              return null;
            }
          }
        },
        dates: {
          formatter: function formatter(value, format3) {
            return value.map(function(date2) {
              return pickervue_type_script_lang_js_DATE_FORMATTER(date2, format3);
            });
          },
          parser: function parser2(value, format3) {
            return (typeof value === "string" ? value.split(", ") : value).map(function(date2) {
              return date2 instanceof Date ? date2 : pickervue_type_script_lang_js_DATE_PARSER(date2, format3);
            });
          }
        },
        months: {
          formatter: function formatter(value, format3) {
            return value.map(function(date2) {
              return pickervue_type_script_lang_js_DATE_FORMATTER(date2, format3);
            });
          },
          parser: function parser2(value, format3) {
            return (typeof value === "string" ? value.split(", ") : value).map(function(date2) {
              return date2 instanceof Date ? date2 : pickervue_type_script_lang_js_DATE_PARSER(date2, format3);
            });
          }
        },
        years: {
          formatter: function formatter(value, format3) {
            return value.map(function(date2) {
              return pickervue_type_script_lang_js_DATE_FORMATTER(date2, format3);
            });
          },
          parser: function parser2(value, format3) {
            return (typeof value === "string" ? value.split(", ") : value).map(function(date2) {
              return date2 instanceof Date ? date2 : pickervue_type_script_lang_js_DATE_PARSER(date2, format3);
            });
          }
        }
      };
      var PLACEMENT_MAP = {
        left: "bottom-start",
        center: "bottom",
        right: "bottom-end"
      };
      var parseAsFormatAndType = function parseAsFormatAndType2(value, customFormat, type) {
        var rangeSeparator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "-";
        if (!value)
          return null;
        var parser2 = (TYPE_VALUE_RESOLVER_MAP[type] || TYPE_VALUE_RESOLVER_MAP["default"]).parser;
        var format3 = customFormat || DEFAULT_FORMATS[type];
        return parser2(value, format3, rangeSeparator);
      };
      var formatAsFormatAndType = function formatAsFormatAndType2(value, customFormat, type) {
        if (!value)
          return null;
        var formatter = (TYPE_VALUE_RESOLVER_MAP[type] || TYPE_VALUE_RESOLVER_MAP["default"]).formatter;
        var format3 = customFormat || DEFAULT_FORMATS[type];
        return formatter(value, format3);
      };
      var valueEquals2 = function valueEquals3(a2, b2) {
        var dateEquals = function dateEquals2(a3, b3) {
          var aIsDate = a3 instanceof Date;
          var bIsDate = b3 instanceof Date;
          if (aIsDate && bIsDate) {
            return a3.getTime() === b3.getTime();
          }
          if (!aIsDate && !bIsDate) {
            return a3 === b3;
          }
          return false;
        };
        var aIsArray = a2 instanceof Array;
        var bIsArray = b2 instanceof Array;
        if (aIsArray && bIsArray) {
          if (a2.length !== b2.length) {
            return false;
          }
          return a2.every(function(item2, index2) {
            return dateEquals(item2, b2[index2]);
          });
        }
        if (!aIsArray && !bIsArray) {
          return dateEquals(a2, b2);
        }
        return false;
      };
      var isString2 = function isString3(val) {
        return typeof val === "string" || val instanceof String;
      };
      var validator5 = function validator6(val) {
        return val === null || val === void 0 || isString2(val) || Array.isArray(val) && val.length === 2 && val.every(isString2);
      };
      var pickervue_type_script_lang_js_ = {
        mixins: [emitter_default.a, NewPopper],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        props: {
          size: String,
          format: String,
          valueFormat: String,
          readonly: Boolean,
          placeholder: String,
          startPlaceholder: String,
          endPlaceholder: String,
          prefixIcon: String,
          clearIcon: {
            type: String,
            default: "el-icon-circle-close"
          },
          name: {
            default: "",
            validator: validator5
          },
          disabled: Boolean,
          clearable: {
            type: Boolean,
            default: true
          },
          id: {
            default: "",
            validator: validator5
          },
          popperClass: String,
          editable: {
            type: Boolean,
            default: true
          },
          align: {
            type: String,
            default: "left"
          },
          value: {},
          defaultValue: {},
          defaultTime: {},
          rangeSeparator: {
            default: "-"
          },
          pickerOptions: {},
          unlinkPanels: Boolean,
          validateEvent: {
            type: Boolean,
            default: true
          }
        },
        components: { ElInput: input_default.a },
        directives: { Clickoutside: clickoutside_default.a },
        data: function data3() {
          return {
            pickerVisible: false,
            showClose: false,
            userInput: null,
            valueOnOpen: null,
            unwatchPickerOptions: null
          };
        },
        watch: {
          pickerVisible: function pickerVisible(val) {
            if (this.readonly || this.pickerDisabled)
              return;
            if (val) {
              this.showPicker();
              this.valueOnOpen = Array.isArray(this.value) ? [].concat(this.value) : this.value;
            } else {
              this.hidePicker();
              this.emitChange(this.value);
              this.userInput = null;
              if (this.validateEvent) {
                this.dispatch("ElFormItem", "el.form.blur");
              }
              this.$emit("blur", this);
              this.blur();
            }
          },
          parsedValue: {
            immediate: true,
            handler: function handler2(val) {
              if (this.picker) {
                this.picker.value = val;
              }
            }
          },
          defaultValue: function defaultValue(val) {
            if (this.picker) {
              this.picker.defaultValue = val;
            }
          },
          value: function value(val, oldVal) {
            if (!valueEquals2(val, oldVal) && !this.pickerVisible && this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.change", val);
            }
          }
        },
        computed: {
          ranged: function ranged() {
            return this.type.indexOf("range") > -1;
          },
          reference: function reference3() {
            var reference4 = this.$refs.reference;
            return reference4.$el || reference4;
          },
          refInput: function refInput() {
            if (this.reference) {
              return [].slice.call(this.reference.querySelectorAll("input"));
            }
            return [];
          },
          valueIsEmpty: function valueIsEmpty() {
            var val = this.value;
            if (Array.isArray(val)) {
              for (var i = 0, len = val.length; i < len; i++) {
                if (val[i]) {
                  return false;
                }
              }
            } else {
              if (val) {
                return false;
              }
            }
            return true;
          },
          triggerClass: function triggerClass() {
            return this.prefixIcon || (this.type.indexOf("time") !== -1 ? "el-icon-time" : "el-icon-date");
          },
          selectionMode: function selectionMode() {
            if (this.type === "week") {
              return "week";
            } else if (this.type === "month") {
              return "month";
            } else if (this.type === "year") {
              return "year";
            } else if (this.type === "dates") {
              return "dates";
            } else if (this.type === "months") {
              return "months";
            } else if (this.type === "years") {
              return "years";
            }
            return "day";
          },
          haveTrigger: function haveTrigger() {
            if (typeof this.showTrigger !== "undefined") {
              return this.showTrigger;
            }
            return HAVE_TRIGGER_TYPES.indexOf(this.type) !== -1;
          },
          displayValue: function displayValue() {
            var formattedValue = formatAsFormatAndType(this.parsedValue, this.format, this.type, this.rangeSeparator);
            if (Array.isArray(this.userInput)) {
              return [this.userInput[0] || formattedValue && formattedValue[0] || "", this.userInput[1] || formattedValue && formattedValue[1] || ""];
            } else if (this.userInput !== null) {
              return this.userInput;
            } else if (formattedValue) {
              return this.type === "dates" || this.type === "years" || this.type === "months" ? formattedValue.join(", ") : formattedValue;
            } else {
              return "";
            }
          },
          parsedValue: function parsedValue() {
            if (!this.value)
              return this.value;
            if (this.type === "time-select")
              return this.value;
            var valueIsDateObject = Object(date_util_["isDateObject"])(this.value) || Array.isArray(this.value) && this.value.every(date_util_["isDateObject"]);
            if (valueIsDateObject) {
              return this.value;
            }
            if (this.valueFormat) {
              return parseAsFormatAndType(this.value, this.valueFormat, this.type, this.rangeSeparator) || this.value;
            }
            return Array.isArray(this.value) ? this.value.map(function(val) {
              return new Date(val);
            }) : new Date(this.value);
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          pickerSize: function pickerSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          pickerDisabled: function pickerDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          firstInputId: function firstInputId() {
            var obj = {};
            var id2 = void 0;
            if (this.ranged) {
              id2 = this.id && this.id[0];
            } else {
              id2 = this.id;
            }
            if (id2)
              obj.id = id2;
            return obj;
          },
          secondInputId: function secondInputId() {
            var obj = {};
            var id2 = void 0;
            if (this.ranged) {
              id2 = this.id && this.id[1];
            }
            if (id2)
              obj.id = id2;
            return obj;
          }
        },
        created: function created() {
          this.popperOptions = {
            boundariesPadding: 0,
            gpuAcceleration: false
          };
          this.placement = PLACEMENT_MAP[this.align] || PLACEMENT_MAP.left;
          this.$on("fieldReset", this.handleFieldReset);
        },
        methods: {
          focus: function focus2() {
            if (!this.ranged) {
              this.$refs.reference.focus();
            } else {
              this.handleFocus();
            }
          },
          blur: function blur() {
            this.refInput.forEach(function(input2) {
              return input2.blur();
            });
          },
          parseValue: function parseValue(value) {
            var isParsed = Object(date_util_["isDateObject"])(value) || Array.isArray(value) && value.every(date_util_["isDateObject"]);
            if (this.valueFormat && !isParsed) {
              return parseAsFormatAndType(value, this.valueFormat, this.type, this.rangeSeparator) || value;
            } else {
              return value;
            }
          },
          formatToValue: function formatToValue(date2) {
            var isFormattable = Object(date_util_["isDateObject"])(date2) || Array.isArray(date2) && date2.every(date_util_["isDateObject"]);
            if (this.valueFormat && isFormattable) {
              return formatAsFormatAndType(date2, this.valueFormat, this.type, this.rangeSeparator);
            } else {
              return date2;
            }
          },
          parseString: function parseString(value) {
            var type = Array.isArray(value) ? this.type : this.type.replace("range", "");
            return parseAsFormatAndType(value, this.format, type);
          },
          formatToString: function formatToString(value) {
            var type = Array.isArray(value) ? this.type : this.type.replace("range", "");
            return formatAsFormatAndType(value, this.format, type);
          },
          handleMouseEnter: function handleMouseEnter() {
            if (this.readonly || this.pickerDisabled)
              return;
            if (!this.valueIsEmpty && this.clearable) {
              this.showClose = true;
            }
          },
          handleChange: function handleChange() {
            if (this.userInput) {
              var value = this.parseString(this.displayValue);
              if (value) {
                this.picker.value = value;
                if (this.isValidValue(value)) {
                  this.emitInput(value);
                  this.userInput = null;
                }
              }
            }
            if (this.userInput === "") {
              this.emitInput(null);
              this.emitChange(null);
              this.userInput = null;
            }
          },
          handleStartInput: function handleStartInput(event) {
            if (this.userInput) {
              this.userInput = [event.target.value, this.userInput[1]];
            } else {
              this.userInput = [event.target.value, null];
            }
          },
          handleEndInput: function handleEndInput(event) {
            if (this.userInput) {
              this.userInput = [this.userInput[0], event.target.value];
            } else {
              this.userInput = [null, event.target.value];
            }
          },
          handleStartChange: function handleStartChange(event) {
            var value = this.parseString(this.userInput && this.userInput[0]);
            if (value) {
              this.userInput = [this.formatToString(value), this.displayValue[1]];
              var newValue = [value, this.picker.value && this.picker.value[1]];
              this.picker.value = newValue;
              if (this.isValidValue(newValue)) {
                this.emitInput(newValue);
                this.userInput = null;
              }
            }
          },
          handleEndChange: function handleEndChange(event) {
            var value = this.parseString(this.userInput && this.userInput[1]);
            if (value) {
              this.userInput = [this.displayValue[0], this.formatToString(value)];
              var newValue = [this.picker.value && this.picker.value[0], value];
              this.picker.value = newValue;
              if (this.isValidValue(newValue)) {
                this.emitInput(newValue);
                this.userInput = null;
              }
            }
          },
          handleClickIcon: function handleClickIcon(event) {
            if (this.readonly || this.pickerDisabled)
              return;
            if (this.showClose) {
              this.valueOnOpen = this.value;
              event.stopPropagation();
              this.emitInput(null);
              this.emitChange(null);
              this.showClose = false;
              if (this.picker && typeof this.picker.handleClear === "function") {
                this.picker.handleClear();
              }
            } else {
              this.pickerVisible = !this.pickerVisible;
            }
          },
          handleClose: function handleClose() {
            if (!this.pickerVisible)
              return;
            this.pickerVisible = false;
            if (this.type === "dates" || this.type === "years" || this.type === "months") {
              var oldValue = parseAsFormatAndType(this.valueOnOpen, this.valueFormat, this.type, this.rangeSeparator) || this.valueOnOpen;
              this.emitInput(oldValue);
            }
          },
          handleFieldReset: function handleFieldReset(initialValue) {
            this.userInput = initialValue === "" ? null : initialValue;
          },
          handleFocus: function handleFocus() {
            var type = this.type;
            if (HAVE_TRIGGER_TYPES.indexOf(type) !== -1 && !this.pickerVisible) {
              this.pickerVisible = true;
            }
            this.$emit("focus", this);
          },
          handleKeydown: function handleKeydown(event) {
            var _this = this;
            var keyCode = event.keyCode;
            if (keyCode === 27) {
              this.pickerVisible = false;
              event.stopPropagation();
              return;
            }
            if (keyCode === 9) {
              if (!this.ranged) {
                this.handleChange();
                this.pickerVisible = this.picker.visible = false;
                this.blur();
                event.stopPropagation();
              } else {
                setTimeout(function() {
                  if (_this.refInput.indexOf(document.activeElement) === -1) {
                    _this.pickerVisible = false;
                    _this.blur();
                    event.stopPropagation();
                  }
                }, 0);
              }
              return;
            }
            if (keyCode === 13) {
              if (this.userInput === "" || this.isValidValue(this.parseString(this.displayValue))) {
                this.handleChange();
                this.pickerVisible = this.picker.visible = false;
                this.blur();
              }
              event.stopPropagation();
              return;
            }
            if (this.userInput) {
              event.stopPropagation();
              return;
            }
            if (this.picker && this.picker.handleKeydown) {
              this.picker.handleKeydown(event);
            }
          },
          handleRangeClick: function handleRangeClick() {
            var type = this.type;
            if (HAVE_TRIGGER_TYPES.indexOf(type) !== -1 && !this.pickerVisible) {
              this.pickerVisible = true;
            }
            this.$emit("focus", this);
          },
          hidePicker: function hidePicker() {
            if (this.picker) {
              this.picker.resetView && this.picker.resetView();
              this.pickerVisible = this.picker.visible = false;
              this.destroyPopper();
            }
          },
          showPicker: function showPicker() {
            var _this2 = this;
            if (this.$isServer)
              return;
            if (!this.picker) {
              this.mountPicker();
            }
            this.pickerVisible = this.picker.visible = true;
            this.updatePopper();
            this.picker.value = this.parsedValue;
            this.picker.resetView && this.picker.resetView();
            this.$nextTick(function() {
              _this2.picker.adjustSpinners && _this2.picker.adjustSpinners();
            });
          },
          mountPicker: function mountPicker() {
            var _this3 = this;
            this.picker = new external_vue_default.a(this.panel).$mount();
            this.picker.defaultValue = this.defaultValue;
            this.picker.defaultTime = this.defaultTime;
            this.picker.popperClass = this.popperClass;
            this.popperElm = this.picker.$el;
            this.picker.width = this.reference.getBoundingClientRect().width;
            this.picker.showTime = this.type === "datetime" || this.type === "datetimerange";
            this.picker.selectionMode = this.selectionMode;
            this.picker.unlinkPanels = this.unlinkPanels;
            this.picker.arrowControl = this.arrowControl || this.timeArrowControl || false;
            this.$watch("format", function(format3) {
              _this3.picker.format = format3;
            });
            var updateOptions = function updateOptions2() {
              var options2 = _this3.pickerOptions;
              if (options2 && options2.selectableRange) {
                var ranges = options2.selectableRange;
                var parser2 = TYPE_VALUE_RESOLVER_MAP.datetimerange.parser;
                var format3 = DEFAULT_FORMATS.timerange;
                ranges = Array.isArray(ranges) ? ranges : [ranges];
                _this3.picker.selectableRange = ranges.map(function(range3) {
                  return parser2(range3, format3, _this3.rangeSeparator);
                });
              }
              for (var option2 in options2) {
                if (options2.hasOwnProperty(option2) && option2 !== "selectableRange") {
                  _this3.picker[option2] = options2[option2];
                }
              }
              if (_this3.format) {
                _this3.picker.format = _this3.format;
              }
            };
            updateOptions();
            this.unwatchPickerOptions = this.$watch("pickerOptions", function() {
              return updateOptions();
            }, { deep: true });
            this.$el.appendChild(this.picker.$el);
            this.picker.resetView && this.picker.resetView();
            this.picker.$on("dodestroy", this.doDestroy);
            this.picker.$on("pick", function() {
              var date2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
              var visible3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              _this3.userInput = null;
              _this3.pickerVisible = _this3.picker.visible = visible3;
              _this3.emitInput(date2);
              _this3.picker.resetView && _this3.picker.resetView();
            });
            this.picker.$on("select-range", function(start, end2, pos) {
              if (_this3.refInput.length === 0)
                return;
              if (!pos || pos === "min") {
                _this3.refInput[0].setSelectionRange(start, end2);
                _this3.refInput[0].focus();
              } else if (pos === "max") {
                _this3.refInput[1].setSelectionRange(start, end2);
                _this3.refInput[1].focus();
              }
            });
          },
          unmountPicker: function unmountPicker() {
            if (this.picker) {
              this.picker.$destroy();
              this.picker.$off();
              if (typeof this.unwatchPickerOptions === "function") {
                this.unwatchPickerOptions();
              }
              this.picker.$el.parentNode.removeChild(this.picker.$el);
            }
          },
          emitChange: function emitChange(val) {
            if (!valueEquals2(val, this.valueOnOpen)) {
              this.$emit("change", val);
              this.valueOnOpen = val;
              if (this.validateEvent) {
                this.dispatch("ElFormItem", "el.form.change", val);
              }
            }
          },
          emitInput: function emitInput(val) {
            var formatted = this.formatToValue(val);
            if (!valueEquals2(this.value, formatted)) {
              this.$emit("input", formatted);
            }
          },
          isValidValue: function isValidValue(value) {
            if (!this.picker) {
              this.mountPicker();
            }
            if (this.picker.isValidValue) {
              return value && this.picker.isValidValue(value);
            } else {
              return true;
            }
          }
        }
      };
      var src_pickervue_type_script_lang_js_ = pickervue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_pickervue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/date-picker/src/picker.vue";
      __webpack_exports__["a"] = component.exports;
    },
    ,
    function(module2, __webpack_exports__, __webpack_require__) {
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-time-spinner",
            class: { "has-seconds": _vm.showSeconds }
          },
          [
            !_vm.arrowControl ? [
              _c(
                "el-scrollbar",
                {
                  ref: "hours",
                  staticClass: "el-time-spinner__wrapper",
                  attrs: {
                    "wrap-style": "max-height: inherit;",
                    "view-class": "el-time-spinner__list",
                    noresize: "",
                    tag: "ul"
                  },
                  nativeOn: {
                    mouseenter: function($event) {
                      _vm.emitSelectRange("hours");
                    },
                    mousemove: function($event) {
                      _vm.adjustCurrentSpinner("hours");
                    }
                  }
                },
                _vm._l(_vm.hoursList, function(disabled2, hour) {
                  return _c(
                    "li",
                    {
                      key: hour,
                      staticClass: "el-time-spinner__item",
                      class: { active: hour === _vm.hours, disabled: disabled2 },
                      on: {
                        click: function($event) {
                          _vm.handleClick("hours", {
                            value: hour,
                            disabled: disabled2
                          });
                        }
                      }
                    },
                    [
                      _vm._v(
                        _vm._s(
                          ("0" + (_vm.amPmMode ? hour % 12 || 12 : hour)).slice(
                            -2
                          )
                        ) + _vm._s(_vm.amPm(hour))
                      )
                    ]
                  );
                }),
                0
              ),
              _c(
                "el-scrollbar",
                {
                  ref: "minutes",
                  staticClass: "el-time-spinner__wrapper",
                  attrs: {
                    "wrap-style": "max-height: inherit;",
                    "view-class": "el-time-spinner__list",
                    noresize: "",
                    tag: "ul"
                  },
                  nativeOn: {
                    mouseenter: function($event) {
                      _vm.emitSelectRange("minutes");
                    },
                    mousemove: function($event) {
                      _vm.adjustCurrentSpinner("minutes");
                    }
                  }
                },
                _vm._l(_vm.minutesList, function(enabled, key2) {
                  return _c(
                    "li",
                    {
                      key: key2,
                      staticClass: "el-time-spinner__item",
                      class: { active: key2 === _vm.minutes, disabled: !enabled },
                      on: {
                        click: function($event) {
                          _vm.handleClick("minutes", {
                            value: key2,
                            disabled: false
                          });
                        }
                      }
                    },
                    [_vm._v(_vm._s(("0" + key2).slice(-2)))]
                  );
                }),
                0
              ),
              _c(
                "el-scrollbar",
                {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.showSeconds,
                      expression: "showSeconds"
                    }
                  ],
                  ref: "seconds",
                  staticClass: "el-time-spinner__wrapper",
                  attrs: {
                    "wrap-style": "max-height: inherit;",
                    "view-class": "el-time-spinner__list",
                    noresize: "",
                    tag: "ul"
                  },
                  nativeOn: {
                    mouseenter: function($event) {
                      _vm.emitSelectRange("seconds");
                    },
                    mousemove: function($event) {
                      _vm.adjustCurrentSpinner("seconds");
                    }
                  }
                },
                _vm._l(60, function(second, key2) {
                  return _c(
                    "li",
                    {
                      key: key2,
                      staticClass: "el-time-spinner__item",
                      class: { active: key2 === _vm.seconds },
                      on: {
                        click: function($event) {
                          _vm.handleClick("seconds", {
                            value: key2,
                            disabled: false
                          });
                        }
                      }
                    },
                    [_vm._v(_vm._s(("0" + key2).slice(-2)))]
                  );
                }),
                0
              )
            ] : _vm._e(),
            _vm.arrowControl ? [
              _c(
                "div",
                {
                  staticClass: "el-time-spinner__wrapper is-arrow",
                  on: {
                    mouseenter: function($event) {
                      _vm.emitSelectRange("hours");
                    }
                  }
                },
                [
                  _c("i", {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.decrease,
                        expression: "decrease"
                      }
                    ],
                    staticClass: "el-time-spinner__arrow el-icon-arrow-up"
                  }),
                  _c("i", {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.increase,
                        expression: "increase"
                      }
                    ],
                    staticClass: "el-time-spinner__arrow el-icon-arrow-down"
                  }),
                  _c(
                    "ul",
                    { ref: "hours", staticClass: "el-time-spinner__list" },
                    _vm._l(_vm.arrowHourList, function(hour, key2) {
                      return _c(
                        "li",
                        {
                          key: key2,
                          staticClass: "el-time-spinner__item",
                          class: {
                            active: hour === _vm.hours,
                            disabled: _vm.hoursList[hour]
                          }
                        },
                        [
                          _vm._v(
                            _vm._s(
                              hour === void 0 ? "" : ("0" + (_vm.amPmMode ? hour % 12 || 12 : hour)).slice(-2) + _vm.amPm(hour)
                            )
                          )
                        ]
                      );
                    }),
                    0
                  )
                ]
              ),
              _c(
                "div",
                {
                  staticClass: "el-time-spinner__wrapper is-arrow",
                  on: {
                    mouseenter: function($event) {
                      _vm.emitSelectRange("minutes");
                    }
                  }
                },
                [
                  _c("i", {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.decrease,
                        expression: "decrease"
                      }
                    ],
                    staticClass: "el-time-spinner__arrow el-icon-arrow-up"
                  }),
                  _c("i", {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.increase,
                        expression: "increase"
                      }
                    ],
                    staticClass: "el-time-spinner__arrow el-icon-arrow-down"
                  }),
                  _c(
                    "ul",
                    { ref: "minutes", staticClass: "el-time-spinner__list" },
                    _vm._l(_vm.arrowMinuteList, function(minute, key2) {
                      return _c(
                        "li",
                        {
                          key: key2,
                          staticClass: "el-time-spinner__item",
                          class: { active: minute === _vm.minutes }
                        },
                        [
                          _vm._v(
                            "\n          " + _vm._s(
                              minute === void 0 ? "" : ("0" + minute).slice(-2)
                            ) + "\n        "
                          )
                        ]
                      );
                    }),
                    0
                  )
                ]
              ),
              _vm.showSeconds ? _c(
                "div",
                {
                  staticClass: "el-time-spinner__wrapper is-arrow",
                  on: {
                    mouseenter: function($event) {
                      _vm.emitSelectRange("seconds");
                    }
                  }
                },
                [
                  _c("i", {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.decrease,
                        expression: "decrease"
                      }
                    ],
                    staticClass: "el-time-spinner__arrow el-icon-arrow-up"
                  }),
                  _c("i", {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.increase,
                        expression: "increase"
                      }
                    ],
                    staticClass: "el-time-spinner__arrow el-icon-arrow-down"
                  }),
                  _c(
                    "ul",
                    { ref: "seconds", staticClass: "el-time-spinner__list" },
                    _vm._l(_vm.arrowSecondList, function(second, key2) {
                      return _c(
                        "li",
                        {
                          key: key2,
                          staticClass: "el-time-spinner__item",
                          class: { active: second === _vm.seconds }
                        },
                        [
                          _vm._v(
                            "\n          " + _vm._s(
                              second === void 0 ? "" : ("0" + second).slice(-2)
                            ) + "\n        "
                          )
                        ]
                      );
                    }),
                    0
                  )
                ]
              ) : _vm._e()
            ] : _vm._e()
          ],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var date_util_ = __webpack_require__(1);
      var scrollbar_ = __webpack_require__(15);
      var scrollbar_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_);
      var repeat_click = __webpack_require__(30);
      var time_spinnervue_type_script_lang_js_ = {
        components: { ElScrollbar: scrollbar_default.a },
        directives: {
          repeatClick: repeat_click["a"]
        },
        props: {
          date: {},
          defaultValue: {},
          showSeconds: {
            type: Boolean,
            default: true
          },
          arrowControl: Boolean,
          amPmMode: {
            type: String,
            default: ""
          }
        },
        computed: {
          hours: function hours() {
            return this.date.getHours();
          },
          minutes: function minutes() {
            return this.date.getMinutes();
          },
          seconds: function seconds() {
            return this.date.getSeconds();
          },
          hoursList: function hoursList() {
            return Object(date_util_["getRangeHours"])(this.selectableRange);
          },
          minutesList: function minutesList() {
            return Object(date_util_["getRangeMinutes"])(this.selectableRange, this.hours);
          },
          arrowHourList: function arrowHourList() {
            var hours = this.hours;
            return [hours > 0 ? hours - 1 : void 0, hours, hours < 23 ? hours + 1 : void 0];
          },
          arrowMinuteList: function arrowMinuteList() {
            var minutes = this.minutes;
            return [minutes > 0 ? minutes - 1 : void 0, minutes, minutes < 59 ? minutes + 1 : void 0];
          },
          arrowSecondList: function arrowSecondList() {
            var seconds = this.seconds;
            return [seconds > 0 ? seconds - 1 : void 0, seconds, seconds < 59 ? seconds + 1 : void 0];
          }
        },
        data: function data3() {
          return {
            selectableRange: [],
            currentScrollbar: null
          };
        },
        mounted: function mounted2() {
          var _this = this;
          this.$nextTick(function() {
            !_this.arrowControl && _this.bindScrollEvent();
          });
        },
        methods: {
          increase: function increase() {
            this.scrollDown(1);
          },
          decrease: function decrease() {
            this.scrollDown(-1);
          },
          modifyDateField: function modifyDateField(type, value) {
            switch (type) {
              case "hours":
                this.$emit("change", Object(date_util_["modifyTime"])(this.date, value, this.minutes, this.seconds));
                break;
              case "minutes":
                this.$emit("change", Object(date_util_["modifyTime"])(this.date, this.hours, value, this.seconds));
                break;
              case "seconds":
                this.$emit("change", Object(date_util_["modifyTime"])(this.date, this.hours, this.minutes, value));
                break;
            }
          },
          handleClick: function handleClick(type, _ref2) {
            var value = _ref2.value, disabled2 = _ref2.disabled;
            if (!disabled2) {
              this.modifyDateField(type, value);
              this.emitSelectRange(type);
              this.adjustSpinner(type, value);
            }
          },
          emitSelectRange: function emitSelectRange(type) {
            if (type === "hours") {
              this.$emit("select-range", 0, 2);
            } else if (type === "minutes") {
              this.$emit("select-range", 3, 5);
            } else if (type === "seconds") {
              this.$emit("select-range", 6, 8);
            }
            this.currentScrollbar = type;
          },
          bindScrollEvent: function bindScrollEvent() {
            var _this2 = this;
            var bindFunction = function bindFunction2(type) {
              _this2.$refs[type].wrap.onscroll = function(e) {
                _this2.handleScroll(type, e);
              };
            };
            bindFunction("hours");
            bindFunction("minutes");
            bindFunction("seconds");
          },
          handleScroll: function handleScroll(type) {
            var value = Math.min(Math.round((this.$refs[type].wrap.scrollTop - (this.scrollBarHeight(type) * 0.5 - 10) / this.typeItemHeight(type) + 3) / this.typeItemHeight(type)), type === "hours" ? 23 : 59);
            this.modifyDateField(type, value);
          },
          adjustSpinners: function adjustSpinners() {
            this.adjustSpinner("hours", this.hours);
            this.adjustSpinner("minutes", this.minutes);
            this.adjustSpinner("seconds", this.seconds);
          },
          adjustCurrentSpinner: function adjustCurrentSpinner(type) {
            this.adjustSpinner(type, this[type]);
          },
          adjustSpinner: function adjustSpinner(type, value) {
            if (this.arrowControl)
              return;
            var el2 = this.$refs[type].wrap;
            if (el2) {
              el2.scrollTop = Math.max(0, value * this.typeItemHeight(type));
            }
          },
          scrollDown: function scrollDown(step) {
            var _this3 = this;
            if (!this.currentScrollbar) {
              this.emitSelectRange("hours");
            }
            var label2 = this.currentScrollbar;
            var hoursList = this.hoursList;
            var now = this[label2];
            if (this.currentScrollbar === "hours") {
              var total = Math.abs(step);
              step = step > 0 ? 1 : -1;
              var length = hoursList.length;
              while (length-- && total) {
                now = (now + step + hoursList.length) % hoursList.length;
                if (hoursList[now]) {
                  continue;
                }
                total--;
              }
              if (hoursList[now])
                return;
            } else {
              now = (now + step + 60) % 60;
            }
            this.modifyDateField(label2, now);
            this.adjustSpinner(label2, now);
            this.$nextTick(function() {
              return _this3.emitSelectRange(_this3.currentScrollbar);
            });
          },
          amPm: function amPm(hour) {
            var shouldShowAmPm = this.amPmMode.toLowerCase() === "a";
            if (!shouldShowAmPm)
              return "";
            var isCapital = this.amPmMode === "A";
            var content2 = hour < 12 ? " am" : " pm";
            if (isCapital)
              content2 = content2.toUpperCase();
            return content2;
          },
          typeItemHeight: function typeItemHeight(type) {
            return this.$refs[type].$el.querySelector("li").offsetHeight;
          },
          scrollBarHeight: function scrollBarHeight(type) {
            return this.$refs[type].$el.offsetHeight;
          }
        }
      };
      var basic_time_spinnervue_type_script_lang_js_ = time_spinnervue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        basic_time_spinnervue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/date-picker/src/basic/time-spinner.vue";
      __webpack_exports__["a"] = component.exports;
    },
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    ,
    function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var picker = __webpack_require__(32);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-zoom-in-top" },
            on: { "after-enter": _vm.handleEnter, "after-leave": _vm.handleLeave }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-picker-panel el-date-picker el-popper",
                class: [
                  {
                    "has-sidebar": _vm.$slots.sidebar || _vm.shortcuts,
                    "has-time": _vm.showTime
                  },
                  _vm.popperClass
                ]
              },
              [
                _c(
                  "div",
                  { staticClass: "el-picker-panel__body-wrapper" },
                  [
                    _vm._t("sidebar"),
                    _vm.shortcuts ? _c(
                      "div",
                      { staticClass: "el-picker-panel__sidebar" },
                      _vm._l(_vm.shortcuts, function(shortcut, key2) {
                        return _c(
                          "button",
                          {
                            key: key2,
                            staticClass: "el-picker-panel__shortcut",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.handleShortcutClick(shortcut);
                              }
                            }
                          },
                          [_vm._v(_vm._s(shortcut.text))]
                        );
                      }),
                      0
                    ) : _vm._e(),
                    _c("div", { staticClass: "el-picker-panel__body" }, [
                      _vm.showTime ? _c("div", { staticClass: "el-date-picker__time-header" }, [
                        _c(
                          "span",
                          { staticClass: "el-date-picker__editor-wrap" },
                          [
                            _c("el-input", {
                              attrs: {
                                placeholder: _vm.t("el.datepicker.selectDate"),
                                value: _vm.visibleDate,
                                size: "small"
                              },
                              on: {
                                input: function(val) {
                                  return _vm.userInputDate = val;
                                },
                                change: _vm.handleVisibleDateChange
                              }
                            })
                          ],
                          1
                        ),
                        _c(
                          "span",
                          {
                            directives: [
                              {
                                name: "clickoutside",
                                rawName: "v-clickoutside",
                                value: _vm.handleTimePickClose,
                                expression: "handleTimePickClose"
                              }
                            ],
                            staticClass: "el-date-picker__editor-wrap"
                          },
                          [
                            _c("el-input", {
                              ref: "input",
                              attrs: {
                                placeholder: _vm.t("el.datepicker.selectTime"),
                                value: _vm.visibleTime,
                                size: "small"
                              },
                              on: {
                                focus: function($event) {
                                  _vm.timePickerVisible = true;
                                },
                                input: function(val) {
                                  return _vm.userInputTime = val;
                                },
                                change: _vm.handleVisibleTimeChange
                              }
                            }),
                            _c("time-picker", {
                              ref: "timepicker",
                              attrs: {
                                "time-arrow-control": _vm.arrowControl,
                                visible: _vm.timePickerVisible
                              },
                              on: {
                                pick: _vm.handleTimePick,
                                mounted: _vm.proxyTimePickerDataProperties
                              }
                            })
                          ],
                          1
                        )
                      ]) : _vm._e(),
                      _c(
                        "div",
                        {
                          directives: [
                            {
                              name: "show",
                              rawName: "v-show",
                              value: _vm.currentView !== "time",
                              expression: "currentView !== 'time'"
                            }
                          ],
                          staticClass: "el-date-picker__header",
                          class: {
                            "el-date-picker__header--bordered": _vm.currentView === "year" || _vm.currentView === "month"
                          }
                        },
                        [
                          _c("button", {
                            staticClass: "el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-d-arrow-left",
                            attrs: {
                              type: "button",
                              "aria-label": _vm.t("el.datepicker.prevYear")
                            },
                            on: { click: _vm.prevYear }
                          }),
                          _c("button", {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.currentView === "date",
                                expression: "currentView === 'date'"
                              }
                            ],
                            staticClass: "el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-arrow-left",
                            attrs: {
                              type: "button",
                              "aria-label": _vm.t("el.datepicker.prevMonth")
                            },
                            on: { click: _vm.prevMonth }
                          }),
                          _c(
                            "span",
                            {
                              staticClass: "el-date-picker__header-label",
                              attrs: { role: "button" },
                              on: { click: _vm.showYearPicker }
                            },
                            [_vm._v(_vm._s(_vm.yearLabel))]
                          ),
                          _c(
                            "span",
                            {
                              directives: [
                                {
                                  name: "show",
                                  rawName: "v-show",
                                  value: _vm.currentView === "date",
                                  expression: "currentView === 'date'"
                                }
                              ],
                              staticClass: "el-date-picker__header-label",
                              class: { active: _vm.currentView === "month" },
                              attrs: { role: "button" },
                              on: { click: _vm.showMonthPicker }
                            },
                            [
                              _vm._v(
                                _vm._s(_vm.t("el.datepicker.month" + (_vm.month + 1)))
                              )
                            ]
                          ),
                          _c("button", {
                            staticClass: "el-picker-panel__icon-btn el-date-picker__next-btn el-icon-d-arrow-right",
                            attrs: {
                              type: "button",
                              "aria-label": _vm.t("el.datepicker.nextYear")
                            },
                            on: { click: _vm.nextYear }
                          }),
                          _c("button", {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.currentView === "date",
                                expression: "currentView === 'date'"
                              }
                            ],
                            staticClass: "el-picker-panel__icon-btn el-date-picker__next-btn el-icon-arrow-right",
                            attrs: {
                              type: "button",
                              "aria-label": _vm.t("el.datepicker.nextMonth")
                            },
                            on: { click: _vm.nextMonth }
                          })
                        ]
                      ),
                      _c(
                        "div",
                        { staticClass: "el-picker-panel__content" },
                        [
                          _c("date-table", {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.currentView === "date",
                                expression: "currentView === 'date'"
                              }
                            ],
                            attrs: {
                              "selection-mode": _vm.selectionMode,
                              "first-day-of-week": _vm.firstDayOfWeek,
                              value: _vm.value,
                              "default-value": _vm.defaultValue ? new Date(_vm.defaultValue) : null,
                              date: _vm.date,
                              "cell-class-name": _vm.cellClassName,
                              "disabled-date": _vm.disabledDate
                            },
                            on: { pick: _vm.handleDatePick }
                          }),
                          _c("year-table", {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.currentView === "year",
                                expression: "currentView === 'year'"
                              }
                            ],
                            attrs: {
                              "selection-mode": _vm.selectionMode,
                              value: _vm.value,
                              "default-value": _vm.defaultValue ? new Date(_vm.defaultValue) : null,
                              date: _vm.date,
                              "disabled-date": _vm.disabledDate
                            },
                            on: { pick: _vm.handleYearPick }
                          }),
                          _c("month-table", {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.currentView === "month",
                                expression: "currentView === 'month'"
                              }
                            ],
                            attrs: {
                              "selection-mode": _vm.selectionMode,
                              value: _vm.value,
                              "default-value": _vm.defaultValue ? new Date(_vm.defaultValue) : null,
                              date: _vm.date,
                              "disabled-date": _vm.disabledDate
                            },
                            on: { pick: _vm.handleMonthPick }
                          })
                        ],
                        1
                      )
                    ])
                  ],
                  2
                ),
                _c(
                  "div",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.footerVisible && (_vm.currentView === "date" || _vm.currentView === "month" || _vm.currentView === "year"),
                        expression: "footerVisible && (currentView === 'date' || currentView === 'month' || currentView === 'year')"
                      }
                    ],
                    staticClass: "el-picker-panel__footer"
                  },
                  [
                    _c(
                      "el-button",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.selectionMode !== "dates" && _vm.selectionMode !== "months" && _vm.selectionMode !== "years",
                            expression: "selectionMode !== 'dates' && selectionMode !== 'months' && selectionMode !== 'years'"
                          }
                        ],
                        staticClass: "el-picker-panel__link-btn",
                        attrs: { size: "mini", type: "text" },
                        on: { click: _vm.changeToNow }
                      },
                      [
                        _vm._v(
                          "\n        " + _vm._s(_vm.t("el.datepicker.now")) + "\n      "
                        )
                      ]
                    ),
                    _c(
                      "el-button",
                      {
                        staticClass: "el-picker-panel__link-btn",
                        attrs: { plain: "", size: "mini" },
                        on: { click: _vm.confirm }
                      },
                      [
                        _vm._v(
                          "\n        " + _vm._s(_vm.t("el.datepicker.confirm")) + "\n      "
                        )
                      ]
                    )
                  ],
                  1
                )
              ]
            )
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var date_util_ = __webpack_require__(1);
      var clickoutside_ = __webpack_require__(12);
      var clickoutside_default = /* @__PURE__ */ __webpack_require__.n(clickoutside_);
      var locale_ = __webpack_require__(6);
      var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
      var input_ = __webpack_require__(10);
      var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
      var button_ = __webpack_require__(14);
      var button_default = /* @__PURE__ */ __webpack_require__.n(button_);
      var panel_time = __webpack_require__(27);
      var year_tablevue_type_template_id_c86ab5e0_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "table",
          { staticClass: "el-year-table", on: { click: _vm.handleYearTableClick } },
          [
            _c("tbody", [
              _c("tr", [
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 0)
                  },
                  [_c("a", { staticClass: "cell" }, [_vm._v(_vm._s(_vm.startYear))])]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 1)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 1))
                    ])
                  ]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 2)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 2))
                    ])
                  ]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 3)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 3))
                    ])
                  ]
                )
              ]),
              _c("tr", [
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 4)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 4))
                    ])
                  ]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 5)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 5))
                    ])
                  ]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 6)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 6))
                    ])
                  ]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 7)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 7))
                    ])
                  ]
                )
              ]),
              _c("tr", [
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 8)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 8))
                    ])
                  ]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 9)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 9))
                    ])
                  ]
                ),
                _c("td"),
                _c("td")
              ])
            ])
          ]
        );
      };
      var year_tablevue_type_template_id_c86ab5e0_staticRenderFns = [];
      year_tablevue_type_template_id_c86ab5e0_render._withStripped = true;
      var dom_ = __webpack_require__(2);
      var util_ = __webpack_require__(3);
      var year_tablevue_type_script_lang_js_datesInYear = function datesInYear(year) {
        var numOfDays = Object(date_util_["getDayCountOfYear"])(year);
        var firstDay = new Date(year, 0, 1);
        return Object(date_util_["range"])(numOfDays).map(function(n) {
          return Object(date_util_["nextDate"])(firstDay, n);
        });
      };
      var year_tablevue_type_script_lang_js_ = {
        props: {
          disabledDate: {},
          value: {},
          defaultValue: {
            validator: function validator5(val) {
              return val === null || val instanceof Date && Object(date_util_["isDate"])(val);
            }
          },
          date: {},
          selectionMode: {}
        },
        computed: {
          startYear: function startYear() {
            return Math.floor(this.date.getFullYear() / 10) * 10;
          }
        },
        methods: {
          getCellStyle: function getCellStyle(year) {
            var style = {};
            var today = new Date();
            style.disabled = typeof this.disabledDate === "function" ? year_tablevue_type_script_lang_js_datesInYear(year).every(this.disabledDate) : false;
            style.current = Object(util_["arrayFindIndex"])(Object(util_["coerceTruthyValueToArray"])(this.value), function(date2) {
              return date2.getFullYear() === year;
            }) >= 0;
            style.today = today.getFullYear() === year;
            style.default = this.defaultValue && this.defaultValue.getFullYear() === year;
            return style;
          },
          handleYearTableClick: function handleYearTableClick(event) {
            var target2 = event.target;
            if (target2.tagName === "A") {
              if (Object(dom_["hasClass"])(target2.parentNode, "disabled"))
                return;
              var year = target2.textContent || target2.innerText;
              if (this.selectionMode === "years") {
                var value = this.value || [];
                var idx = Object(util_["arrayFindIndex"])(value, function(date2) {
                  return date2.getFullYear() === Number(year);
                });
                var newValue = idx > -1 ? [].concat(value.slice(0, idx), value.slice(idx + 1)) : [].concat(value, [new Date(year)]);
                this.$emit("pick", newValue);
              } else {
                this.$emit("pick", Number(year));
              }
            }
          }
        }
      };
      var basic_year_tablevue_type_script_lang_js_ = year_tablevue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        basic_year_tablevue_type_script_lang_js_,
        year_tablevue_type_template_id_c86ab5e0_render,
        year_tablevue_type_template_id_c86ab5e0_staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/date-picker/src/basic/year-table.vue";
      var year_table = component.exports;
      var month_tablevue_type_template_id_654d4f42_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "table",
          {
            staticClass: "el-month-table",
            on: { click: _vm.handleMonthTableClick, mousemove: _vm.handleMouseMove }
          },
          [
            _c(
              "tbody",
              _vm._l(_vm.rows, function(row2, key2) {
                return _c(
                  "tr",
                  { key: key2 },
                  _vm._l(row2, function(cell, key3) {
                    return _c("td", { key: key3, class: _vm.getCellStyle(cell) }, [
                      _c("div", [
                        _c("a", { staticClass: "cell" }, [
                          _vm._v(
                            _vm._s(
                              _vm.t("el.datepicker.months." + _vm.months[cell.text])
                            )
                          )
                        ])
                      ])
                    ]);
                  }),
                  0
                );
              }),
              0
            )
          ]
        );
      };
      var month_tablevue_type_template_id_654d4f42_staticRenderFns = [];
      month_tablevue_type_template_id_654d4f42_render._withStripped = true;
      var month_tablevue_type_script_lang_js_datesInMonth = function datesInMonth(year, month) {
        var numOfDays = Object(date_util_["getDayCountOfMonth"])(year, month);
        var firstDay = new Date(year, month, 1);
        return Object(date_util_["range"])(numOfDays).map(function(n) {
          return Object(date_util_["nextDate"])(firstDay, n);
        });
      };
      var clearDate = function clearDate2(date2) {
        return new Date(date2.getFullYear(), date2.getMonth());
      };
      var getMonthTimestamp = function getMonthTimestamp2(time) {
        if (typeof time === "number" || typeof time === "string") {
          return clearDate(new Date(time)).getTime();
        } else if (time instanceof Date) {
          return clearDate(time).getTime();
        } else {
          return NaN;
        }
      };
      var month_tablevue_type_script_lang_js_removeFromArray = function removeFromArray(arr, pred) {
        var idx = typeof pred === "function" ? Object(util_["arrayFindIndex"])(arr, pred) : arr.indexOf(pred);
        return idx >= 0 ? [].concat(arr.slice(0, idx), arr.slice(idx + 1)) : arr;
      };
      var month_tablevue_type_script_lang_js_ = {
        props: {
          disabledDate: {},
          value: {},
          selectionMode: {
            default: "month"
          },
          minDate: {},
          maxDate: {},
          defaultValue: {
            validator: function validator5(val) {
              return val === null || Object(date_util_["isDate"])(val) || Array.isArray(val) && val.every(date_util_["isDate"]);
            }
          },
          date: {},
          rangeState: {
            default: function _default3() {
              return {
                endDate: null,
                selecting: false
              };
            }
          }
        },
        mixins: [locale_default.a],
        watch: {
          "rangeState.endDate": function rangeStateEndDate(newVal) {
            this.markRange(this.minDate, newVal);
          },
          minDate: function minDate(newVal, oldVal) {
            if (getMonthTimestamp(newVal) !== getMonthTimestamp(oldVal)) {
              this.markRange(this.minDate, this.maxDate);
            }
          },
          maxDate: function maxDate(newVal, oldVal) {
            if (getMonthTimestamp(newVal) !== getMonthTimestamp(oldVal)) {
              this.markRange(this.minDate, this.maxDate);
            }
          }
        },
        data: function data3() {
          return {
            months: ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"],
            tableRows: [[], [], []],
            lastRow: null,
            lastColumn: null
          };
        },
        methods: {
          cellMatchesDate: function cellMatchesDate(cell, date2) {
            var value = new Date(date2);
            return this.date.getFullYear() === value.getFullYear() && Number(cell.text) === value.getMonth();
          },
          getCellStyle: function getCellStyle(cell) {
            var _this = this;
            var style = {};
            var year = this.date.getFullYear();
            var today = new Date();
            var month = cell.text;
            var defaultValue = this.defaultValue ? Array.isArray(this.defaultValue) ? this.defaultValue : [this.defaultValue] : [];
            style.disabled = typeof this.disabledDate === "function" ? month_tablevue_type_script_lang_js_datesInMonth(year, month).every(this.disabledDate) : false;
            style.current = Object(util_["arrayFindIndex"])(Object(util_["coerceTruthyValueToArray"])(this.value), function(date2) {
              return date2.getFullYear() === year && date2.getMonth() === month;
            }) >= 0;
            style.today = today.getFullYear() === year && today.getMonth() === month;
            style.default = defaultValue.some(function(date2) {
              return _this.cellMatchesDate(cell, date2);
            });
            if (cell.inRange) {
              style["in-range"] = true;
              if (cell.start) {
                style["start-date"] = true;
              }
              if (cell.end) {
                style["end-date"] = true;
              }
            }
            return style;
          },
          getMonthOfCell: function getMonthOfCell(month) {
            var year = this.date.getFullYear();
            return new Date(year, month, 1);
          },
          markRange: function markRange(minDate, maxDate) {
            minDate = getMonthTimestamp(minDate);
            maxDate = getMonthTimestamp(maxDate) || minDate;
            var _ref2 = [Math.min(minDate, maxDate), Math.max(minDate, maxDate)];
            minDate = _ref2[0];
            maxDate = _ref2[1];
            var rows = this.rows;
            for (var i = 0, k = rows.length; i < k; i++) {
              var row2 = rows[i];
              for (var j = 0, l = row2.length; j < l; j++) {
                var cell = row2[j];
                var index2 = i * 4 + j;
                var time = new Date(this.date.getFullYear(), index2).getTime();
                cell.inRange = minDate && time >= minDate && time <= maxDate;
                cell.start = minDate && time === minDate;
                cell.end = maxDate && time === maxDate;
              }
            }
          },
          handleMouseMove: function handleMouseMove(event) {
            if (!this.rangeState.selecting)
              return;
            var target2 = event.target;
            if (target2.tagName === "A") {
              target2 = target2.parentNode.parentNode;
            }
            if (target2.tagName === "DIV") {
              target2 = target2.parentNode;
            }
            if (target2.tagName !== "TD")
              return;
            var row2 = target2.parentNode.rowIndex;
            var column = target2.cellIndex;
            if (this.rows[row2][column].disabled)
              return;
            if (row2 !== this.lastRow || column !== this.lastColumn) {
              this.lastRow = row2;
              this.lastColumn = column;
              this.$emit("changerange", {
                minDate: this.minDate,
                maxDate: this.maxDate,
                rangeState: {
                  selecting: true,
                  endDate: this.getMonthOfCell(row2 * 4 + column)
                }
              });
            }
          },
          handleMonthTableClick: function handleMonthTableClick(event) {
            var target2 = event.target;
            if (target2.tagName === "A") {
              target2 = target2.parentNode.parentNode;
            }
            if (target2.tagName === "DIV") {
              target2 = target2.parentNode;
            }
            if (target2.tagName !== "TD")
              return;
            if (Object(dom_["hasClass"])(target2, "disabled"))
              return;
            var column = target2.cellIndex;
            var row2 = target2.parentNode.rowIndex;
            var month = row2 * 4 + column;
            var newDate = this.getMonthOfCell(month);
            if (this.selectionMode === "range") {
              if (!this.rangeState.selecting) {
                this.$emit("pick", { minDate: newDate, maxDate: null });
                this.rangeState.selecting = true;
              } else {
                if (newDate >= this.minDate) {
                  this.$emit("pick", { minDate: this.minDate, maxDate: newDate });
                } else {
                  this.$emit("pick", { minDate: newDate, maxDate: this.minDate });
                }
                this.rangeState.selecting = false;
              }
            } else if (this.selectionMode === "months") {
              var value = this.value || [];
              var year = this.date.getFullYear();
              var newValue = Object(util_["arrayFindIndex"])(value, function(date2) {
                return date2.getFullYear() === year && date2.getMonth() === month;
              }) >= 0 ? month_tablevue_type_script_lang_js_removeFromArray(value, function(date2) {
                return date2.getTime() === newDate.getTime();
              }) : [].concat(value, [newDate]);
              this.$emit("pick", newValue);
            } else {
              this.$emit("pick", month);
            }
          }
        },
        computed: {
          rows: function rows() {
            var _this2 = this;
            var rows2 = this.tableRows;
            var disabledDate = this.disabledDate;
            var selectedDate = [];
            var now = getMonthTimestamp(new Date());
            for (var i = 0; i < 3; i++) {
              var row2 = rows2[i];
              var _loop = function _loop2(j2) {
                var cell = row2[j2];
                if (!cell) {
                  cell = { row: i, column: j2, type: "normal", inRange: false, start: false, end: false };
                }
                cell.type = "normal";
                var index2 = i * 4 + j2;
                var time = new Date(_this2.date.getFullYear(), index2).getTime();
                cell.inRange = time >= getMonthTimestamp(_this2.minDate) && time <= getMonthTimestamp(_this2.maxDate);
                cell.start = _this2.minDate && time === getMonthTimestamp(_this2.minDate);
                cell.end = _this2.maxDate && time === getMonthTimestamp(_this2.maxDate);
                var isToday = time === now;
                if (isToday) {
                  cell.type = "today";
                }
                cell.text = index2;
                var cellDate = new Date(time);
                cell.disabled = typeof disabledDate === "function" && disabledDate(cellDate);
                cell.selected = Object(util_["arrayFind"])(selectedDate, function(date2) {
                  return date2.getTime() === cellDate.getTime();
                });
                _this2.$set(row2, j2, cell);
              };
              for (var j = 0; j < 4; j++) {
                _loop(j);
              }
            }
            return rows2;
          }
        }
      };
      var basic_month_tablevue_type_script_lang_js_ = month_tablevue_type_script_lang_js_;
      var month_table_component = Object(componentNormalizer["a"])(
        basic_month_tablevue_type_script_lang_js_,
        month_tablevue_type_template_id_654d4f42_render,
        month_tablevue_type_template_id_654d4f42_staticRenderFns,
        false,
        null,
        null,
        null
      );
      month_table_component.options.__file = "packages/date-picker/src/basic/month-table.vue";
      var month_table = month_table_component.exports;
      var date_tablevue_type_template_id_5d1f3341_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "table",
          {
            staticClass: "el-date-table",
            class: { "is-week-mode": _vm.selectionMode === "week" },
            attrs: { cellspacing: "0", cellpadding: "0" },
            on: { click: _vm.handleClick, mousemove: _vm.handleMouseMove }
          },
          [
            _c(
              "tbody",
              [
                _c(
                  "tr",
                  [
                    _vm.showWeekNumber ? _c("th", [_vm._v(_vm._s(_vm.t("el.datepicker.week")))]) : _vm._e(),
                    _vm._l(_vm.WEEKS, function(week, key2) {
                      return _c("th", { key: key2 }, [
                        _vm._v(_vm._s(_vm.t("el.datepicker.weeks." + week)))
                      ]);
                    })
                  ],
                  2
                ),
                _vm._l(_vm.rows, function(row2, key2) {
                  return _c(
                    "tr",
                    {
                      key: key2,
                      staticClass: "el-date-table__row",
                      class: { current: _vm.isWeekActive(row2[1]) }
                    },
                    _vm._l(row2, function(cell, key3) {
                      return _c("td", { key: key3, class: _vm.getCellClasses(cell) }, [
                        _c("div", [
                          _c("span", [
                            _vm._v("\n          " + _vm._s(cell.text) + "\n        ")
                          ])
                        ])
                      ]);
                    }),
                    0
                  );
                })
              ],
              2
            )
          ]
        );
      };
      var date_tablevue_type_template_id_5d1f3341_staticRenderFns = [];
      date_tablevue_type_template_id_5d1f3341_render._withStripped = true;
      var _WEEKS = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
      var date_tablevue_type_script_lang_js_getDateTimestamp = function getDateTimestamp(time) {
        if (typeof time === "number" || typeof time === "string") {
          return Object(date_util_["clearTime"])(new Date(time)).getTime();
        } else if (time instanceof Date) {
          return Object(date_util_["clearTime"])(time).getTime();
        } else {
          return NaN;
        }
      };
      var date_tablevue_type_script_lang_js_removeFromArray = function removeFromArray(arr, pred) {
        var idx = typeof pred === "function" ? Object(util_["arrayFindIndex"])(arr, pred) : arr.indexOf(pred);
        return idx >= 0 ? [].concat(arr.slice(0, idx), arr.slice(idx + 1)) : arr;
      };
      var date_tablevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        props: {
          firstDayOfWeek: {
            default: 7,
            type: Number,
            validator: function validator5(val) {
              return val >= 1 && val <= 7;
            }
          },
          value: {},
          defaultValue: {
            validator: function validator5(val) {
              return val === null || Object(date_util_["isDate"])(val) || Array.isArray(val) && val.every(date_util_["isDate"]);
            }
          },
          date: {},
          selectionMode: {
            default: "day"
          },
          showWeekNumber: {
            type: Boolean,
            default: false
          },
          disabledDate: {},
          cellClassName: {},
          minDate: {},
          maxDate: {},
          rangeState: {
            default: function _default3() {
              return {
                endDate: null,
                selecting: false
              };
            }
          }
        },
        computed: {
          offsetDay: function offsetDay() {
            var week = this.firstDayOfWeek;
            return week > 3 ? 7 - week : -week;
          },
          WEEKS: function WEEKS() {
            var week = this.firstDayOfWeek;
            return _WEEKS.concat(_WEEKS).slice(week, week + 7);
          },
          year: function year() {
            return this.date.getFullYear();
          },
          month: function month() {
            return this.date.getMonth();
          },
          startDate: function startDate() {
            return Object(date_util_["getStartDateOfMonth"])(this.year, this.month);
          },
          rows: function rows() {
            var _this = this;
            var date2 = new Date(this.year, this.month, 1);
            var day = Object(date_util_["getFirstDayOfMonth"])(date2);
            var dateCountOfMonth = Object(date_util_["getDayCountOfMonth"])(date2.getFullYear(), date2.getMonth());
            var dateCountOfLastMonth = Object(date_util_["getDayCountOfMonth"])(date2.getFullYear(), date2.getMonth() === 0 ? 11 : date2.getMonth() - 1);
            day = day === 0 ? 7 : day;
            var offset = this.offsetDay;
            var rows2 = this.tableRows;
            var count = 1;
            var startDate = this.startDate;
            var disabledDate = this.disabledDate;
            var cellClassName = this.cellClassName;
            var selectedDate = this.selectionMode === "dates" ? Object(util_["coerceTruthyValueToArray"])(this.value) : [];
            var now = date_tablevue_type_script_lang_js_getDateTimestamp(new Date());
            for (var i = 0; i < 6; i++) {
              var row2 = rows2[i];
              if (this.showWeekNumber) {
                if (!row2[0]) {
                  row2[0] = { type: "week", text: Object(date_util_["getWeekNumber"])(Object(date_util_["nextDate"])(startDate, i * 7 + 1)) };
                }
              }
              var _loop = function _loop2(j2) {
                var cell = row2[_this.showWeekNumber ? j2 + 1 : j2];
                if (!cell) {
                  cell = { row: i, column: j2, type: "normal", inRange: false, start: false, end: false };
                }
                cell.type = "normal";
                var index2 = i * 7 + j2;
                var time = Object(date_util_["nextDate"])(startDate, index2 - offset).getTime();
                cell.inRange = time >= date_tablevue_type_script_lang_js_getDateTimestamp(_this.minDate) && time <= date_tablevue_type_script_lang_js_getDateTimestamp(_this.maxDate);
                cell.start = _this.minDate && time === date_tablevue_type_script_lang_js_getDateTimestamp(_this.minDate);
                cell.end = _this.maxDate && time === date_tablevue_type_script_lang_js_getDateTimestamp(_this.maxDate);
                var isToday = time === now;
                if (isToday) {
                  cell.type = "today";
                }
                if (i >= 0 && i <= 1) {
                  var numberOfDaysFromPreviousMonth = day + offset < 0 ? 7 + day + offset : day + offset;
                  if (j2 + i * 7 >= numberOfDaysFromPreviousMonth) {
                    cell.text = count++;
                  } else {
                    cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - j2 % 7) + 1 + i * 7;
                    cell.type = "prev-month";
                  }
                } else {
                  if (count <= dateCountOfMonth) {
                    cell.text = count++;
                  } else {
                    cell.text = count++ - dateCountOfMonth;
                    cell.type = "next-month";
                  }
                }
                var cellDate = new Date(time);
                cell.disabled = typeof disabledDate === "function" && disabledDate(cellDate);
                cell.selected = Object(util_["arrayFind"])(selectedDate, function(date3) {
                  return date3.getTime() === cellDate.getTime();
                });
                cell.customClass = typeof cellClassName === "function" && cellClassName(cellDate);
                _this.$set(row2, _this.showWeekNumber ? j2 + 1 : j2, cell);
              };
              for (var j = 0; j < 7; j++) {
                _loop(j);
              }
              if (this.selectionMode === "week") {
                var start = this.showWeekNumber ? 1 : 0;
                var end2 = this.showWeekNumber ? 7 : 6;
                var isWeekActive = this.isWeekActive(row2[start + 1]);
                row2[start].inRange = isWeekActive;
                row2[start].start = isWeekActive;
                row2[end2].inRange = isWeekActive;
                row2[end2].end = isWeekActive;
              }
            }
            return rows2;
          }
        },
        watch: {
          "rangeState.endDate": function rangeStateEndDate(newVal) {
            this.markRange(this.minDate, newVal);
          },
          minDate: function minDate(newVal, oldVal) {
            if (date_tablevue_type_script_lang_js_getDateTimestamp(newVal) !== date_tablevue_type_script_lang_js_getDateTimestamp(oldVal)) {
              this.markRange(this.minDate, this.maxDate);
            }
          },
          maxDate: function maxDate(newVal, oldVal) {
            if (date_tablevue_type_script_lang_js_getDateTimestamp(newVal) !== date_tablevue_type_script_lang_js_getDateTimestamp(oldVal)) {
              this.markRange(this.minDate, this.maxDate);
            }
          }
        },
        data: function data3() {
          return {
            tableRows: [[], [], [], [], [], []],
            lastRow: null,
            lastColumn: null
          };
        },
        methods: {
          cellMatchesDate: function cellMatchesDate(cell, date2) {
            var value = new Date(date2);
            return this.year === value.getFullYear() && this.month === value.getMonth() && Number(cell.text) === value.getDate();
          },
          getCellClasses: function getCellClasses(cell) {
            var _this2 = this;
            var selectionMode = this.selectionMode;
            var defaultValue = this.defaultValue ? Array.isArray(this.defaultValue) ? this.defaultValue : [this.defaultValue] : [];
            var classes = [];
            if ((cell.type === "normal" || cell.type === "today") && !cell.disabled) {
              classes.push("available");
              if (cell.type === "today") {
                classes.push("today");
              }
            } else {
              classes.push(cell.type);
            }
            if (cell.type === "normal" && defaultValue.some(function(date2) {
              return _this2.cellMatchesDate(cell, date2);
            })) {
              classes.push("default");
            }
            if (selectionMode === "day" && (cell.type === "normal" || cell.type === "today") && this.cellMatchesDate(cell, this.value)) {
              classes.push("current");
            }
            if (cell.inRange && (cell.type === "normal" || cell.type === "today" || this.selectionMode === "week")) {
              classes.push("in-range");
              if (cell.start) {
                classes.push("start-date");
              }
              if (cell.end) {
                classes.push("end-date");
              }
            }
            if (cell.disabled) {
              classes.push("disabled");
            }
            if (cell.selected) {
              classes.push("selected");
            }
            if (cell.customClass) {
              classes.push(cell.customClass);
            }
            return classes.join(" ");
          },
          getDateOfCell: function getDateOfCell(row2, column) {
            var offsetFromStart = row2 * 7 + (column - (this.showWeekNumber ? 1 : 0)) - this.offsetDay;
            return Object(date_util_["nextDate"])(this.startDate, offsetFromStart);
          },
          isWeekActive: function isWeekActive(cell) {
            if (this.selectionMode !== "week")
              return false;
            var newDate = new Date(this.year, this.month, 1);
            var year = newDate.getFullYear();
            var month = newDate.getMonth();
            if (cell.type === "prev-month") {
              newDate.setMonth(month === 0 ? 11 : month - 1);
              newDate.setFullYear(month === 0 ? year - 1 : year);
            }
            if (cell.type === "next-month") {
              newDate.setMonth(month === 11 ? 0 : month + 1);
              newDate.setFullYear(month === 11 ? year + 1 : year);
            }
            newDate.setDate(parseInt(cell.text, 10));
            if (Object(date_util_["isDate"])(this.value)) {
              var dayOffset = (this.value.getDay() - this.firstDayOfWeek + 7) % 7 - 1;
              var weekDate = Object(date_util_["prevDate"])(this.value, dayOffset);
              return weekDate.getTime() === newDate.getTime();
            }
            return false;
          },
          markRange: function markRange(minDate, maxDate) {
            minDate = date_tablevue_type_script_lang_js_getDateTimestamp(minDate);
            maxDate = date_tablevue_type_script_lang_js_getDateTimestamp(maxDate) || minDate;
            var _ref2 = [Math.min(minDate, maxDate), Math.max(minDate, maxDate)];
            minDate = _ref2[0];
            maxDate = _ref2[1];
            var startDate = this.startDate;
            var rows = this.rows;
            for (var i = 0, k = rows.length; i < k; i++) {
              var row2 = rows[i];
              for (var j = 0, l = row2.length; j < l; j++) {
                if (this.showWeekNumber && j === 0)
                  continue;
                var _cell = row2[j];
                var index2 = i * 7 + j + (this.showWeekNumber ? -1 : 0);
                var time = Object(date_util_["nextDate"])(startDate, index2 - this.offsetDay).getTime();
                _cell.inRange = minDate && time >= minDate && time <= maxDate;
                _cell.start = minDate && time === minDate;
                _cell.end = maxDate && time === maxDate;
              }
            }
          },
          handleMouseMove: function handleMouseMove(event) {
            if (!this.rangeState.selecting)
              return;
            var target2 = event.target;
            if (target2.tagName === "SPAN") {
              target2 = target2.parentNode.parentNode;
            }
            if (target2.tagName === "DIV") {
              target2 = target2.parentNode;
            }
            if (target2.tagName !== "TD")
              return;
            var row2 = target2.parentNode.rowIndex - 1;
            var column = target2.cellIndex;
            if (this.rows[row2][column].disabled)
              return;
            if (row2 !== this.lastRow || column !== this.lastColumn) {
              this.lastRow = row2;
              this.lastColumn = column;
              this.$emit("changerange", {
                minDate: this.minDate,
                maxDate: this.maxDate,
                rangeState: {
                  selecting: true,
                  endDate: this.getDateOfCell(row2, column)
                }
              });
            }
          },
          handleClick: function handleClick(event) {
            var target2 = event.target;
            if (target2.tagName === "SPAN") {
              target2 = target2.parentNode.parentNode;
            }
            if (target2.tagName === "DIV") {
              target2 = target2.parentNode;
            }
            if (target2.tagName !== "TD")
              return;
            var row2 = target2.parentNode.rowIndex - 1;
            var column = this.selectionMode === "week" ? 1 : target2.cellIndex;
            var cell = this.rows[row2][column];
            if (cell.disabled || cell.type === "week")
              return;
            var newDate = this.getDateOfCell(row2, column);
            if (this.selectionMode === "range") {
              if (!this.rangeState.selecting) {
                this.$emit("pick", { minDate: newDate, maxDate: null });
                this.rangeState.selecting = true;
              } else {
                if (newDate >= this.minDate) {
                  this.$emit("pick", { minDate: this.minDate, maxDate: newDate });
                } else {
                  this.$emit("pick", { minDate: newDate, maxDate: this.minDate });
                }
                this.rangeState.selecting = false;
              }
            } else if (this.selectionMode === "day") {
              this.$emit("pick", newDate);
            } else if (this.selectionMode === "week") {
              var weekNumber = Object(date_util_["getWeekNumber"])(newDate);
              var value = newDate.getFullYear() + "w" + weekNumber;
              this.$emit("pick", {
                year: newDate.getFullYear(),
                week: weekNumber,
                value,
                date: newDate
              });
            } else if (this.selectionMode === "dates") {
              var _value = this.value || [];
              var newValue = cell.selected ? date_tablevue_type_script_lang_js_removeFromArray(_value, function(date2) {
                return date2.getTime() === newDate.getTime();
              }) : [].concat(_value, [newDate]);
              this.$emit("pick", newValue);
            }
          }
        }
      };
      var basic_date_tablevue_type_script_lang_js_ = date_tablevue_type_script_lang_js_;
      var date_table_component = Object(componentNormalizer["a"])(
        basic_date_tablevue_type_script_lang_js_,
        date_tablevue_type_template_id_5d1f3341_render,
        date_tablevue_type_template_id_5d1f3341_staticRenderFns,
        false,
        null,
        null,
        null
      );
      date_table_component.options.__file = "packages/date-picker/src/basic/date-table.vue";
      var date_table = date_table_component.exports;
      var datevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        directives: { Clickoutside: clickoutside_default.a },
        watch: {
          showTime: function showTime(val) {
            var _this = this;
            if (!val)
              return;
            this.$nextTick(function(_2) {
              var inputElm = _this.$refs.input.$el;
              if (inputElm) {
                _this.pickerWidth = inputElm.getBoundingClientRect().width + 10;
              }
            });
          },
          value: function value(val) {
            if (this.selectionMode === "dates" && this.value)
              return;
            if (this.selectionMode === "months" && this.value)
              return;
            if (this.selectionMode === "years" && this.value)
              return;
            if (Object(date_util_["isDate"])(val)) {
              this.date = new Date(val);
            } else {
              this.date = this.getDefaultValue();
            }
          },
          defaultValue: function defaultValue(val) {
            if (!Object(date_util_["isDate"])(this.value)) {
              this.date = val ? new Date(val) : new Date();
            }
          },
          timePickerVisible: function timePickerVisible(val) {
            var _this2 = this;
            if (val)
              this.$nextTick(function() {
                return _this2.$refs.timepicker.adjustSpinners();
              });
          },
          selectionMode: function selectionMode(newVal) {
            if (newVal === "month") {
              if (this.currentView !== "year" || this.currentView !== "month") {
                this.currentView = "month";
              }
            } else if (newVal === "dates") {
              this.currentView = "date";
            } else if (newVal === "years") {
              this.currentView = "year";
            } else if (newVal === "months") {
              this.currentView = "month";
            }
          }
        },
        methods: {
          proxyTimePickerDataProperties: function proxyTimePickerDataProperties() {
            var _this3 = this;
            var format3 = function format4(timeFormat) {
              _this3.$refs.timepicker.format = timeFormat;
            };
            var value = function value2(_value) {
              _this3.$refs.timepicker.value = _value;
            };
            var date2 = function date3(_date3) {
              _this3.$refs.timepicker.date = _date3;
            };
            var selectableRange = function selectableRange2(_selectableRange) {
              _this3.$refs.timepicker.selectableRange = _selectableRange;
            };
            this.$watch("value", value);
            this.$watch("date", date2);
            this.$watch("selectableRange", selectableRange);
            format3(this.timeFormat);
            value(this.value);
            date2(this.date);
            selectableRange(this.selectableRange);
          },
          handleClear: function handleClear() {
            this.date = this.getDefaultValue();
            this.$emit("pick", null);
          },
          emit: function emit(value) {
            var _this4 = this;
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            if (!value) {
              this.$emit.apply(this, ["pick", value].concat(args));
            } else if (Array.isArray(value)) {
              var dates = value.map(function(date2) {
                return _this4.showTime ? Object(date_util_["clearMilliseconds"])(date2) : Object(date_util_["clearTime"])(date2);
              });
              this.$emit.apply(this, ["pick", dates].concat(args));
            } else {
              this.$emit.apply(this, ["pick", this.showTime ? Object(date_util_["clearMilliseconds"])(value) : Object(date_util_["clearTime"])(value)].concat(args));
            }
            this.userInputDate = null;
            this.userInputTime = null;
          },
          showMonthPicker: function showMonthPicker() {
            this.currentView = "month";
          },
          showYearPicker: function showYearPicker() {
            this.currentView = "year";
          },
          prevMonth: function prevMonth2() {
            this.date = Object(date_util_["prevMonth"])(this.date);
          },
          nextMonth: function nextMonth2() {
            this.date = Object(date_util_["nextMonth"])(this.date);
          },
          prevYear: function prevYear2() {
            if (this.currentView === "year") {
              this.date = Object(date_util_["prevYear"])(this.date, 10);
            } else {
              this.date = Object(date_util_["prevYear"])(this.date);
            }
          },
          nextYear: function nextYear2() {
            if (this.currentView === "year") {
              this.date = Object(date_util_["nextYear"])(this.date, 10);
            } else {
              this.date = Object(date_util_["nextYear"])(this.date);
            }
          },
          handleShortcutClick: function handleShortcutClick(shortcut) {
            if (shortcut.onClick) {
              shortcut.onClick(this);
            }
          },
          handleTimePick: function handleTimePick(value, visible3, first) {
            if (Object(date_util_["isDate"])(value)) {
              var newDate = this.value ? Object(date_util_["modifyTime"])(this.value, value.getHours(), value.getMinutes(), value.getSeconds()) : Object(date_util_["modifyWithTimeString"])(this.getDefaultValue(), this.defaultTime);
              this.date = newDate;
              this.emit(this.date, true);
            } else {
              this.emit(value, true);
            }
            if (!first) {
              this.timePickerVisible = visible3;
            }
          },
          handleTimePickClose: function handleTimePickClose() {
            this.timePickerVisible = false;
          },
          handleMonthPick: function handleMonthPick(month) {
            if (this.selectionMode === "month") {
              this.date = Object(date_util_["modifyDate"])(this.date, this.year, month, 1);
              this.emit(this.date);
            } else if (this.selectionMode === "months") {
              this.emit(month, true);
            } else {
              this.date = Object(date_util_["changeYearMonthAndClampDate"])(this.date, this.year, month);
              this.currentView = "date";
            }
          },
          handleDatePick: function handleDatePick(value) {
            if (this.selectionMode === "day") {
              var newDate = this.value ? Object(date_util_["modifyDate"])(this.value, value.getFullYear(), value.getMonth(), value.getDate()) : Object(date_util_["modifyWithTimeString"])(value, this.defaultTime);
              if (!this.checkDateWithinRange(newDate)) {
                newDate = Object(date_util_["modifyDate"])(this.selectableRange[0][0], value.getFullYear(), value.getMonth(), value.getDate());
              }
              this.date = newDate;
              this.emit(this.date, this.showTime);
            } else if (this.selectionMode === "week") {
              this.emit(value.date);
            } else if (this.selectionMode === "dates") {
              this.emit(value, true);
            }
          },
          handleYearPick: function handleYearPick(year) {
            if (this.selectionMode === "year") {
              this.date = Object(date_util_["modifyDate"])(this.date, year, 0, 1);
              this.emit(this.date);
            } else if (this.selectionMode === "years") {
              this.emit(year, true);
            } else {
              this.date = Object(date_util_["changeYearMonthAndClampDate"])(this.date, year, this.month);
              this.currentView = "month";
            }
          },
          changeToNow: function changeToNow() {
            if ((!this.disabledDate || !this.disabledDate(new Date())) && this.checkDateWithinRange(new Date())) {
              this.date = new Date();
              this.emit(this.date);
            }
          },
          confirm: function confirm() {
            if (this.selectionMode === "dates" || this.selectionMode === "months" || this.selectionMode === "years") {
              this.emit(this.value);
            } else {
              var value = this.value ? this.value : Object(date_util_["modifyWithTimeString"])(this.getDefaultValue(), this.defaultTime);
              this.date = new Date(value);
              this.emit(value);
            }
          },
          resetView: function resetView() {
            if (this.selectionMode === "month" || this.selectionMode === "months") {
              this.currentView = "month";
            } else if (this.selectionMode === "year" || this.selectionMode === "years") {
              this.currentView = "year";
            } else {
              this.currentView = "date";
            }
          },
          handleEnter: function handleEnter() {
            document.body.addEventListener("keydown", this.handleKeydown);
          },
          handleLeave: function handleLeave() {
            this.$emit("dodestroy");
            document.body.removeEventListener("keydown", this.handleKeydown);
          },
          handleKeydown: function handleKeydown(event) {
            var keyCode = event.keyCode;
            var list3 = [38, 40, 37, 39];
            if (this.visible && !this.timePickerVisible) {
              if (list3.indexOf(keyCode) !== -1) {
                this.handleKeyControl(keyCode);
                event.stopPropagation();
                event.preventDefault();
              }
              if (keyCode === 13 && this.userInputDate === null && this.userInputTime === null) {
                this.emit(this.date, false);
              }
            }
          },
          handleKeyControl: function handleKeyControl(keyCode) {
            var mapping = {
              "year": {
                38: -4,
                40: 4,
                37: -1,
                39: 1,
                offset: function offset(date2, step) {
                  return date2.setFullYear(date2.getFullYear() + step);
                }
              },
              "month": {
                38: -4,
                40: 4,
                37: -1,
                39: 1,
                offset: function offset(date2, step) {
                  return date2.setMonth(date2.getMonth() + step);
                }
              },
              "week": {
                38: -1,
                40: 1,
                37: -1,
                39: 1,
                offset: function offset(date2, step) {
                  return date2.setDate(date2.getDate() + step * 7);
                }
              },
              "day": {
                38: -7,
                40: 7,
                37: -1,
                39: 1,
                offset: function offset(date2, step) {
                  return date2.setDate(date2.getDate() + step);
                }
              }
            };
            var mode = this.selectionMode;
            var year = 31536e6;
            var now = this.date.getTime();
            var newDate = new Date(this.date.getTime());
            while (Math.abs(now - newDate.getTime()) <= year) {
              var map2 = mapping[mode];
              map2.offset(newDate, map2[keyCode]);
              if (typeof this.disabledDate === "function" && this.disabledDate(newDate)) {
                continue;
              }
              this.date = newDate;
              this.$emit("pick", newDate, true);
              break;
            }
          },
          handleVisibleTimeChange: function handleVisibleTimeChange(value) {
            var time = Object(date_util_["parseDate"])(value, this.timeFormat);
            if (time && this.checkDateWithinRange(time)) {
              this.date = Object(date_util_["modifyDate"])(time, this.year, this.month, this.monthDate);
              this.userInputTime = null;
              this.$refs.timepicker.value = this.date;
              this.timePickerVisible = false;
              this.emit(this.date, true);
            }
          },
          handleVisibleDateChange: function handleVisibleDateChange(value) {
            var date2 = Object(date_util_["parseDate"])(value, this.dateFormat);
            if (date2) {
              if (typeof this.disabledDate === "function" && this.disabledDate(date2)) {
                return;
              }
              this.date = Object(date_util_["modifyTime"])(date2, this.date.getHours(), this.date.getMinutes(), this.date.getSeconds());
              this.userInputDate = null;
              this.resetView();
              this.emit(this.date, true);
            }
          },
          isValidValue: function isValidValue(value) {
            return value && !isNaN(value) && (typeof this.disabledDate === "function" ? !this.disabledDate(value) : true) && this.checkDateWithinRange(value);
          },
          getDefaultValue: function getDefaultValue() {
            return this.defaultValue ? new Date(this.defaultValue) : new Date();
          },
          checkDateWithinRange: function checkDateWithinRange(date2) {
            return this.selectableRange.length > 0 ? Object(date_util_["timeWithinRange"])(date2, this.selectableRange, this.format || "HH:mm:ss") : true;
          }
        },
        components: {
          TimePicker: panel_time["a"],
          YearTable: year_table,
          MonthTable: month_table,
          DateTable: date_table,
          ElInput: input_default.a,
          ElButton: button_default.a
        },
        data: function data3() {
          return {
            popperClass: "",
            date: new Date(),
            value: "",
            defaultValue: null,
            defaultTime: null,
            showTime: false,
            selectionMode: "day",
            shortcuts: "",
            visible: false,
            currentView: "date",
            disabledDate: "",
            cellClassName: "",
            selectableRange: [],
            firstDayOfWeek: 7,
            showWeekNumber: false,
            timePickerVisible: false,
            format: "",
            arrowControl: false,
            userInputDate: null,
            userInputTime: null
          };
        },
        computed: {
          year: function year() {
            return this.date.getFullYear();
          },
          month: function month() {
            return this.date.getMonth();
          },
          week: function week() {
            return Object(date_util_["getWeekNumber"])(this.date);
          },
          monthDate: function monthDate() {
            return this.date.getDate();
          },
          footerVisible: function footerVisible() {
            return this.showTime || this.selectionMode === "dates" || this.selectionMode === "months" || this.selectionMode === "years";
          },
          visibleTime: function visibleTime() {
            if (this.userInputTime !== null) {
              return this.userInputTime;
            } else {
              return Object(date_util_["formatDate"])(this.value || this.defaultValue, this.timeFormat);
            }
          },
          visibleDate: function visibleDate() {
            if (this.userInputDate !== null) {
              return this.userInputDate;
            } else {
              return Object(date_util_["formatDate"])(this.value || this.defaultValue, this.dateFormat);
            }
          },
          yearLabel: function yearLabel() {
            var yearTranslation = this.t("el.datepicker.year");
            if (this.currentView === "year") {
              var startYear = Math.floor(this.year / 10) * 10;
              if (yearTranslation) {
                return startYear + " " + yearTranslation + " - " + (startYear + 9) + " " + yearTranslation;
              }
              return startYear + " - " + (startYear + 9);
            }
            return this.year + " " + yearTranslation;
          },
          timeFormat: function timeFormat() {
            if (this.format) {
              return Object(date_util_["extractTimeFormat"])(this.format);
            } else {
              return "HH:mm:ss";
            }
          },
          dateFormat: function dateFormat() {
            if (this.format) {
              return Object(date_util_["extractDateFormat"])(this.format);
            } else {
              return "yyyy-MM-dd";
            }
          }
        }
      };
      var panel_datevue_type_script_lang_js_ = datevue_type_script_lang_js_;
      var date_component = Object(componentNormalizer["a"])(
        panel_datevue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      date_component.options.__file = "packages/date-picker/src/panel/date.vue";
      var panel_date = date_component.exports;
      var date_rangevue_type_template_id_2652849a_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-zoom-in-top" },
            on: {
              "after-leave": function($event) {
                _vm.$emit("dodestroy");
              }
            }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-picker-panel el-date-range-picker el-popper",
                class: [
                  {
                    "has-sidebar": _vm.$slots.sidebar || _vm.shortcuts,
                    "has-time": _vm.showTime
                  },
                  _vm.popperClass
                ]
              },
              [
                _c(
                  "div",
                  { staticClass: "el-picker-panel__body-wrapper" },
                  [
                    _vm._t("sidebar"),
                    _vm.shortcuts ? _c(
                      "div",
                      { staticClass: "el-picker-panel__sidebar" },
                      _vm._l(_vm.shortcuts, function(shortcut, key2) {
                        return _c(
                          "button",
                          {
                            key: key2,
                            staticClass: "el-picker-panel__shortcut",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.handleShortcutClick(shortcut);
                              }
                            }
                          },
                          [_vm._v(_vm._s(shortcut.text))]
                        );
                      }),
                      0
                    ) : _vm._e(),
                    _c("div", { staticClass: "el-picker-panel__body" }, [
                      _vm.showTime ? _c(
                        "div",
                        { staticClass: "el-date-range-picker__time-header" },
                        [
                          _c(
                            "span",
                            { staticClass: "el-date-range-picker__editors-wrap" },
                            [
                              _c(
                                "span",
                                {
                                  staticClass: "el-date-range-picker__time-picker-wrap"
                                },
                                [
                                  _c("el-input", {
                                    ref: "minInput",
                                    staticClass: "el-date-range-picker__editor",
                                    attrs: {
                                      size: "small",
                                      disabled: _vm.rangeState.selecting,
                                      placeholder: _vm.t(
                                        "el.datepicker.startDate"
                                      ),
                                      value: _vm.minVisibleDate
                                    },
                                    on: {
                                      input: function(val) {
                                        return _vm.handleDateInput(val, "min");
                                      },
                                      change: function(val) {
                                        return _vm.handleDateChange(val, "min");
                                      }
                                    }
                                  })
                                ],
                                1
                              ),
                              _c(
                                "span",
                                {
                                  directives: [
                                    {
                                      name: "clickoutside",
                                      rawName: "v-clickoutside",
                                      value: _vm.handleMinTimeClose,
                                      expression: "handleMinTimeClose"
                                    }
                                  ],
                                  staticClass: "el-date-range-picker__time-picker-wrap"
                                },
                                [
                                  _c("el-input", {
                                    staticClass: "el-date-range-picker__editor",
                                    attrs: {
                                      size: "small",
                                      disabled: _vm.rangeState.selecting,
                                      placeholder: _vm.t(
                                        "el.datepicker.startTime"
                                      ),
                                      value: _vm.minVisibleTime
                                    },
                                    on: {
                                      focus: function($event) {
                                        _vm.minTimePickerVisible = true;
                                      },
                                      input: function(val) {
                                        return _vm.handleTimeInput(val, "min");
                                      },
                                      change: function(val) {
                                        return _vm.handleTimeChange(val, "min");
                                      }
                                    }
                                  }),
                                  _c("time-picker", {
                                    ref: "minTimePicker",
                                    attrs: {
                                      "time-arrow-control": _vm.arrowControl,
                                      visible: _vm.minTimePickerVisible
                                    },
                                    on: {
                                      pick: _vm.handleMinTimePick,
                                      mounted: function($event) {
                                        _vm.$refs.minTimePicker.format = _vm.timeFormat;
                                      }
                                    }
                                  })
                                ],
                                1
                              )
                            ]
                          ),
                          _c("span", { staticClass: "el-icon-arrow-right" }),
                          _c(
                            "span",
                            {
                              staticClass: "el-date-range-picker__editors-wrap is-right"
                            },
                            [
                              _c(
                                "span",
                                {
                                  staticClass: "el-date-range-picker__time-picker-wrap"
                                },
                                [
                                  _c("el-input", {
                                    staticClass: "el-date-range-picker__editor",
                                    attrs: {
                                      size: "small",
                                      disabled: _vm.rangeState.selecting,
                                      placeholder: _vm.t("el.datepicker.endDate"),
                                      value: _vm.maxVisibleDate,
                                      readonly: !_vm.minDate
                                    },
                                    on: {
                                      input: function(val) {
                                        return _vm.handleDateInput(val, "max");
                                      },
                                      change: function(val) {
                                        return _vm.handleDateChange(val, "max");
                                      }
                                    }
                                  })
                                ],
                                1
                              ),
                              _c(
                                "span",
                                {
                                  directives: [
                                    {
                                      name: "clickoutside",
                                      rawName: "v-clickoutside",
                                      value: _vm.handleMaxTimeClose,
                                      expression: "handleMaxTimeClose"
                                    }
                                  ],
                                  staticClass: "el-date-range-picker__time-picker-wrap"
                                },
                                [
                                  _c("el-input", {
                                    staticClass: "el-date-range-picker__editor",
                                    attrs: {
                                      size: "small",
                                      disabled: _vm.rangeState.selecting,
                                      placeholder: _vm.t("el.datepicker.endTime"),
                                      value: _vm.maxVisibleTime,
                                      readonly: !_vm.minDate
                                    },
                                    on: {
                                      focus: function($event) {
                                        _vm.minDate && (_vm.maxTimePickerVisible = true);
                                      },
                                      input: function(val) {
                                        return _vm.handleTimeInput(val, "max");
                                      },
                                      change: function(val) {
                                        return _vm.handleTimeChange(val, "max");
                                      }
                                    }
                                  }),
                                  _c("time-picker", {
                                    ref: "maxTimePicker",
                                    attrs: {
                                      "time-arrow-control": _vm.arrowControl,
                                      visible: _vm.maxTimePickerVisible
                                    },
                                    on: {
                                      pick: _vm.handleMaxTimePick,
                                      mounted: function($event) {
                                        _vm.$refs.maxTimePicker.format = _vm.timeFormat;
                                      }
                                    }
                                  })
                                ],
                                1
                              )
                            ]
                          )
                        ]
                      ) : _vm._e(),
                      _c(
                        "div",
                        {
                          staticClass: "el-picker-panel__content el-date-range-picker__content is-left"
                        },
                        [
                          _c("div", { staticClass: "el-date-range-picker__header" }, [
                            _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-left",
                              attrs: { type: "button" },
                              on: { click: _vm.leftPrevYear }
                            }),
                            _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-arrow-left",
                              attrs: { type: "button" },
                              on: { click: _vm.leftPrevMonth }
                            }),
                            _vm.unlinkPanels ? _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-right",
                              class: { "is-disabled": !_vm.enableYearArrow },
                              attrs: {
                                type: "button",
                                disabled: !_vm.enableYearArrow
                              },
                              on: { click: _vm.leftNextYear }
                            }) : _vm._e(),
                            _vm.unlinkPanels ? _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-arrow-right",
                              class: { "is-disabled": !_vm.enableMonthArrow },
                              attrs: {
                                type: "button",
                                disabled: !_vm.enableMonthArrow
                              },
                              on: { click: _vm.leftNextMonth }
                            }) : _vm._e(),
                            _c("div", [_vm._v(_vm._s(_vm.leftLabel))])
                          ]),
                          _c("date-table", {
                            attrs: {
                              "selection-mode": "range",
                              date: _vm.leftDate,
                              "default-value": _vm.defaultValue,
                              "min-date": _vm.minDate,
                              "max-date": _vm.maxDate,
                              "range-state": _vm.rangeState,
                              "disabled-date": _vm.disabledDate,
                              "cell-class-name": _vm.cellClassName,
                              "first-day-of-week": _vm.firstDayOfWeek
                            },
                            on: {
                              changerange: _vm.handleChangeRange,
                              pick: _vm.handleRangePick
                            }
                          })
                        ],
                        1
                      ),
                      _c(
                        "div",
                        {
                          staticClass: "el-picker-panel__content el-date-range-picker__content is-right"
                        },
                        [
                          _c("div", { staticClass: "el-date-range-picker__header" }, [
                            _vm.unlinkPanels ? _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-left",
                              class: { "is-disabled": !_vm.enableYearArrow },
                              attrs: {
                                type: "button",
                                disabled: !_vm.enableYearArrow
                              },
                              on: { click: _vm.rightPrevYear }
                            }) : _vm._e(),
                            _vm.unlinkPanels ? _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-arrow-left",
                              class: { "is-disabled": !_vm.enableMonthArrow },
                              attrs: {
                                type: "button",
                                disabled: !_vm.enableMonthArrow
                              },
                              on: { click: _vm.rightPrevMonth }
                            }) : _vm._e(),
                            _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-right",
                              attrs: { type: "button" },
                              on: { click: _vm.rightNextYear }
                            }),
                            _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-arrow-right",
                              attrs: { type: "button" },
                              on: { click: _vm.rightNextMonth }
                            }),
                            _c("div", [_vm._v(_vm._s(_vm.rightLabel))])
                          ]),
                          _c("date-table", {
                            attrs: {
                              "selection-mode": "range",
                              date: _vm.rightDate,
                              "default-value": _vm.defaultValue,
                              "min-date": _vm.minDate,
                              "max-date": _vm.maxDate,
                              "range-state": _vm.rangeState,
                              "disabled-date": _vm.disabledDate,
                              "cell-class-name": _vm.cellClassName,
                              "first-day-of-week": _vm.firstDayOfWeek
                            },
                            on: {
                              changerange: _vm.handleChangeRange,
                              pick: _vm.handleRangePick
                            }
                          })
                        ],
                        1
                      )
                    ])
                  ],
                  2
                ),
                _vm.showTime ? _c(
                  "div",
                  { staticClass: "el-picker-panel__footer" },
                  [
                    _c(
                      "el-button",
                      {
                        staticClass: "el-picker-panel__link-btn",
                        attrs: { size: "mini", type: "text" },
                        on: { click: _vm.handleClear }
                      },
                      [
                        _vm._v(
                          "\n        " + _vm._s(_vm.t("el.datepicker.clear")) + "\n      "
                        )
                      ]
                    ),
                    _c(
                      "el-button",
                      {
                        staticClass: "el-picker-panel__link-btn",
                        attrs: {
                          plain: "",
                          size: "mini",
                          disabled: _vm.btnDisabled
                        },
                        on: {
                          click: function($event) {
                            _vm.handleConfirm(false);
                          }
                        }
                      },
                      [
                        _vm._v(
                          "\n        " + _vm._s(_vm.t("el.datepicker.confirm")) + "\n      "
                        )
                      ]
                    )
                  ],
                  1
                ) : _vm._e()
              ]
            )
          ]
        );
      };
      var date_rangevue_type_template_id_2652849a_staticRenderFns = [];
      date_rangevue_type_template_id_2652849a_render._withStripped = true;
      var date_rangevue_type_script_lang_js_calcDefaultValue = function calcDefaultValue(defaultValue) {
        if (Array.isArray(defaultValue)) {
          return [new Date(defaultValue[0]), new Date(defaultValue[1])];
        } else if (defaultValue) {
          return [new Date(defaultValue), Object(date_util_["nextDate"])(new Date(defaultValue), 1)];
        } else {
          return [new Date(), Object(date_util_["nextDate"])(new Date(), 1)];
        }
      };
      var date_rangevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        directives: { Clickoutside: clickoutside_default.a },
        computed: {
          btnDisabled: function btnDisabled() {
            return !(this.minDate && this.maxDate && !this.selecting && this.isValidValue([this.minDate, this.maxDate]));
          },
          leftLabel: function leftLabel() {
            return this.leftDate.getFullYear() + " " + this.t("el.datepicker.year") + " " + this.t("el.datepicker.month" + (this.leftDate.getMonth() + 1));
          },
          rightLabel: function rightLabel() {
            return this.rightDate.getFullYear() + " " + this.t("el.datepicker.year") + " " + this.t("el.datepicker.month" + (this.rightDate.getMonth() + 1));
          },
          leftYear: function leftYear() {
            return this.leftDate.getFullYear();
          },
          leftMonth: function leftMonth() {
            return this.leftDate.getMonth();
          },
          leftMonthDate: function leftMonthDate() {
            return this.leftDate.getDate();
          },
          rightYear: function rightYear() {
            return this.rightDate.getFullYear();
          },
          rightMonth: function rightMonth() {
            return this.rightDate.getMonth();
          },
          rightMonthDate: function rightMonthDate() {
            return this.rightDate.getDate();
          },
          minVisibleDate: function minVisibleDate() {
            if (this.dateUserInput.min !== null)
              return this.dateUserInput.min;
            if (this.minDate)
              return Object(date_util_["formatDate"])(this.minDate, this.dateFormat);
            return "";
          },
          maxVisibleDate: function maxVisibleDate() {
            if (this.dateUserInput.max !== null)
              return this.dateUserInput.max;
            if (this.maxDate || this.minDate)
              return Object(date_util_["formatDate"])(this.maxDate || this.minDate, this.dateFormat);
            return "";
          },
          minVisibleTime: function minVisibleTime() {
            if (this.timeUserInput.min !== null)
              return this.timeUserInput.min;
            if (this.minDate)
              return Object(date_util_["formatDate"])(this.minDate, this.timeFormat);
            return "";
          },
          maxVisibleTime: function maxVisibleTime() {
            if (this.timeUserInput.max !== null)
              return this.timeUserInput.max;
            if (this.maxDate || this.minDate)
              return Object(date_util_["formatDate"])(this.maxDate || this.minDate, this.timeFormat);
            return "";
          },
          timeFormat: function timeFormat() {
            if (this.format) {
              return Object(date_util_["extractTimeFormat"])(this.format);
            } else {
              return "HH:mm:ss";
            }
          },
          dateFormat: function dateFormat() {
            if (this.format) {
              return Object(date_util_["extractDateFormat"])(this.format);
            } else {
              return "yyyy-MM-dd";
            }
          },
          enableMonthArrow: function enableMonthArrow() {
            var nextMonth2 = (this.leftMonth + 1) % 12;
            var yearOffset = this.leftMonth + 1 >= 12 ? 1 : 0;
            return this.unlinkPanels && new Date(this.leftYear + yearOffset, nextMonth2) < new Date(this.rightYear, this.rightMonth);
          },
          enableYearArrow: function enableYearArrow() {
            return this.unlinkPanels && this.rightYear * 12 + this.rightMonth - (this.leftYear * 12 + this.leftMonth + 1) >= 12;
          }
        },
        data: function data3() {
          return {
            popperClass: "",
            value: [],
            defaultValue: null,
            defaultTime: null,
            minDate: "",
            maxDate: "",
            leftDate: new Date(),
            rightDate: Object(date_util_["nextMonth"])(new Date()),
            rangeState: {
              endDate: null,
              selecting: false,
              row: null,
              column: null
            },
            showTime: false,
            shortcuts: "",
            visible: "",
            disabledDate: "",
            cellClassName: "",
            firstDayOfWeek: 7,
            minTimePickerVisible: false,
            maxTimePickerVisible: false,
            format: "",
            arrowControl: false,
            unlinkPanels: false,
            dateUserInput: {
              min: null,
              max: null
            },
            timeUserInput: {
              min: null,
              max: null
            }
          };
        },
        watch: {
          minDate: function minDate(val) {
            var _this = this;
            this.dateUserInput.min = null;
            this.timeUserInput.min = null;
            this.$nextTick(function() {
              if (_this.$refs.maxTimePicker && _this.maxDate && _this.maxDate < _this.minDate) {
                var format3 = "HH:mm:ss";
                _this.$refs.maxTimePicker.selectableRange = [[Object(date_util_["parseDate"])(Object(date_util_["formatDate"])(_this.minDate, format3), format3), Object(date_util_["parseDate"])("23:59:59", format3)]];
              }
            });
            if (val && this.$refs.minTimePicker) {
              this.$refs.minTimePicker.date = val;
              this.$refs.minTimePicker.value = val;
            }
          },
          maxDate: function maxDate(val) {
            this.dateUserInput.max = null;
            this.timeUserInput.max = null;
            if (val && this.$refs.maxTimePicker) {
              this.$refs.maxTimePicker.date = val;
              this.$refs.maxTimePicker.value = val;
            }
          },
          minTimePickerVisible: function minTimePickerVisible(val) {
            var _this2 = this;
            if (val) {
              this.$nextTick(function() {
                _this2.$refs.minTimePicker.date = _this2.minDate;
                _this2.$refs.minTimePicker.value = _this2.minDate;
                _this2.$refs.minTimePicker.adjustSpinners();
              });
            }
          },
          maxTimePickerVisible: function maxTimePickerVisible(val) {
            var _this3 = this;
            if (val) {
              this.$nextTick(function() {
                _this3.$refs.maxTimePicker.date = _this3.maxDate;
                _this3.$refs.maxTimePicker.value = _this3.maxDate;
                _this3.$refs.maxTimePicker.adjustSpinners();
              });
            }
          },
          value: function value(newVal) {
            if (!newVal) {
              this.minDate = null;
              this.maxDate = null;
            } else if (Array.isArray(newVal)) {
              this.minDate = Object(date_util_["isDate"])(newVal[0]) ? new Date(newVal[0]) : null;
              this.maxDate = Object(date_util_["isDate"])(newVal[1]) ? new Date(newVal[1]) : null;
              if (this.minDate) {
                this.leftDate = this.minDate;
                if (this.unlinkPanels && this.maxDate) {
                  var minDateYear = this.minDate.getFullYear();
                  var minDateMonth = this.minDate.getMonth();
                  var maxDateYear = this.maxDate.getFullYear();
                  var maxDateMonth = this.maxDate.getMonth();
                  this.rightDate = minDateYear === maxDateYear && minDateMonth === maxDateMonth ? Object(date_util_["nextMonth"])(this.maxDate) : this.maxDate;
                } else {
                  this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
                }
              } else {
                this.leftDate = date_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
                this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
              }
            }
          },
          defaultValue: function defaultValue(val) {
            if (!Array.isArray(this.value)) {
              var _calcDefaultValue = date_rangevue_type_script_lang_js_calcDefaultValue(val), left2 = _calcDefaultValue[0], right2 = _calcDefaultValue[1];
              this.leftDate = left2;
              this.rightDate = val && val[1] && this.unlinkPanels ? right2 : Object(date_util_["nextMonth"])(this.leftDate);
            }
          }
        },
        methods: {
          handleClear: function handleClear() {
            this.minDate = null;
            this.maxDate = null;
            this.leftDate = date_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
            this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            this.$emit("pick", null);
          },
          handleChangeRange: function handleChangeRange(val) {
            this.minDate = val.minDate;
            this.maxDate = val.maxDate;
            this.rangeState = val.rangeState;
          },
          handleDateInput: function handleDateInput(value, type) {
            this.dateUserInput[type] = value;
            if (value.length !== this.dateFormat.length)
              return;
            var parsedValue = Object(date_util_["parseDate"])(value, this.dateFormat);
            if (parsedValue) {
              if (typeof this.disabledDate === "function" && this.disabledDate(new Date(parsedValue))) {
                return;
              }
              if (type === "min") {
                this.minDate = Object(date_util_["modifyDate"])(this.minDate || new Date(), parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
                this.leftDate = new Date(parsedValue);
                if (!this.unlinkPanels) {
                  this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
                }
              } else {
                this.maxDate = Object(date_util_["modifyDate"])(this.maxDate || new Date(), parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
                this.rightDate = new Date(parsedValue);
                if (!this.unlinkPanels) {
                  this.leftDate = Object(date_util_["prevMonth"])(parsedValue);
                }
              }
            }
          },
          handleDateChange: function handleDateChange(value, type) {
            var parsedValue = Object(date_util_["parseDate"])(value, this.dateFormat);
            if (parsedValue) {
              if (type === "min") {
                this.minDate = Object(date_util_["modifyDate"])(this.minDate, parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
                if (this.minDate > this.maxDate) {
                  this.maxDate = this.minDate;
                }
              } else {
                this.maxDate = Object(date_util_["modifyDate"])(this.maxDate, parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
                if (this.maxDate < this.minDate) {
                  this.minDate = this.maxDate;
                }
              }
            }
          },
          handleTimeInput: function handleTimeInput(value, type) {
            var _this4 = this;
            this.timeUserInput[type] = value;
            if (value.length !== this.timeFormat.length)
              return;
            var parsedValue = Object(date_util_["parseDate"])(value, this.timeFormat);
            if (parsedValue) {
              if (type === "min") {
                this.minDate = Object(date_util_["modifyTime"])(this.minDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
                this.$nextTick(function(_2) {
                  return _this4.$refs.minTimePicker.adjustSpinners();
                });
              } else {
                this.maxDate = Object(date_util_["modifyTime"])(this.maxDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
                this.$nextTick(function(_2) {
                  return _this4.$refs.maxTimePicker.adjustSpinners();
                });
              }
            }
          },
          handleTimeChange: function handleTimeChange(value, type) {
            var parsedValue = Object(date_util_["parseDate"])(value, this.timeFormat);
            if (parsedValue) {
              if (type === "min") {
                this.minDate = Object(date_util_["modifyTime"])(this.minDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
                if (this.minDate > this.maxDate) {
                  this.maxDate = this.minDate;
                }
                this.$refs.minTimePicker.value = this.minDate;
                this.minTimePickerVisible = false;
              } else {
                this.maxDate = Object(date_util_["modifyTime"])(this.maxDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
                if (this.maxDate < this.minDate) {
                  this.minDate = this.maxDate;
                }
                this.$refs.maxTimePicker.value = this.minDate;
                this.maxTimePickerVisible = false;
              }
            }
          },
          handleRangePick: function handleRangePick(val) {
            var _this5 = this;
            var close2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var defaultTime = this.defaultTime || [];
            var minDate = Object(date_util_["modifyWithTimeString"])(val.minDate, defaultTime[0]);
            var maxDate = Object(date_util_["modifyWithTimeString"])(val.maxDate, defaultTime[1]);
            if (this.maxDate === maxDate && this.minDate === minDate) {
              return;
            }
            this.onPick && this.onPick(val);
            this.maxDate = maxDate;
            this.minDate = minDate;
            setTimeout(function() {
              _this5.maxDate = maxDate;
              _this5.minDate = minDate;
            }, 10);
            if (!close2 || this.showTime)
              return;
            this.handleConfirm();
          },
          handleShortcutClick: function handleShortcutClick(shortcut) {
            if (shortcut.onClick) {
              shortcut.onClick(this);
            }
          },
          handleMinTimePick: function handleMinTimePick(value, visible3, first) {
            this.minDate = this.minDate || new Date();
            if (value) {
              this.minDate = Object(date_util_["modifyTime"])(this.minDate, value.getHours(), value.getMinutes(), value.getSeconds());
            }
            if (!first) {
              this.minTimePickerVisible = visible3;
            }
            if (!this.maxDate || this.maxDate && this.maxDate.getTime() < this.minDate.getTime()) {
              this.maxDate = new Date(this.minDate);
            }
          },
          handleMinTimeClose: function handleMinTimeClose() {
            this.minTimePickerVisible = false;
          },
          handleMaxTimePick: function handleMaxTimePick(value, visible3, first) {
            if (this.maxDate && value) {
              this.maxDate = Object(date_util_["modifyTime"])(this.maxDate, value.getHours(), value.getMinutes(), value.getSeconds());
            }
            if (!first) {
              this.maxTimePickerVisible = visible3;
            }
            if (this.maxDate && this.minDate && this.minDate.getTime() > this.maxDate.getTime()) {
              this.minDate = new Date(this.maxDate);
            }
          },
          handleMaxTimeClose: function handleMaxTimeClose() {
            this.maxTimePickerVisible = false;
          },
          leftPrevYear: function leftPrevYear() {
            this.leftDate = Object(date_util_["prevYear"])(this.leftDate);
            if (!this.unlinkPanels) {
              this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            }
          },
          leftPrevMonth: function leftPrevMonth() {
            this.leftDate = Object(date_util_["prevMonth"])(this.leftDate);
            if (!this.unlinkPanels) {
              this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            }
          },
          rightNextYear: function rightNextYear() {
            if (!this.unlinkPanels) {
              this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
              this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            } else {
              this.rightDate = Object(date_util_["nextYear"])(this.rightDate);
            }
          },
          rightNextMonth: function rightNextMonth() {
            if (!this.unlinkPanels) {
              this.leftDate = Object(date_util_["nextMonth"])(this.leftDate);
              this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            } else {
              this.rightDate = Object(date_util_["nextMonth"])(this.rightDate);
            }
          },
          leftNextYear: function leftNextYear() {
            this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
          },
          leftNextMonth: function leftNextMonth() {
            this.leftDate = Object(date_util_["nextMonth"])(this.leftDate);
          },
          rightPrevYear: function rightPrevYear() {
            this.rightDate = Object(date_util_["prevYear"])(this.rightDate);
          },
          rightPrevMonth: function rightPrevMonth() {
            this.rightDate = Object(date_util_["prevMonth"])(this.rightDate);
          },
          handleConfirm: function handleConfirm() {
            var visible3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            if (this.isValidValue([this.minDate, this.maxDate])) {
              this.$emit("pick", [this.minDate, this.maxDate], visible3);
            }
          },
          isValidValue: function isValidValue(value) {
            return Array.isArray(value) && value && value[0] && value[1] && Object(date_util_["isDate"])(value[0]) && Object(date_util_["isDate"])(value[1]) && value[0].getTime() <= value[1].getTime() && (typeof this.disabledDate === "function" ? !this.disabledDate(value[0]) && !this.disabledDate(value[1]) : true);
          },
          resetView: function resetView() {
            if (this.minDate && this.maxDate == null)
              this.rangeState.selecting = false;
            this.minDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[0]) : null;
            this.maxDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[1]) : null;
          }
        },
        components: { TimePicker: panel_time["a"], DateTable: date_table, ElInput: input_default.a, ElButton: button_default.a }
      };
      var panel_date_rangevue_type_script_lang_js_ = date_rangevue_type_script_lang_js_;
      var date_range_component = Object(componentNormalizer["a"])(
        panel_date_rangevue_type_script_lang_js_,
        date_rangevue_type_template_id_2652849a_render,
        date_rangevue_type_template_id_2652849a_staticRenderFns,
        false,
        null,
        null,
        null
      );
      date_range_component.options.__file = "packages/date-picker/src/panel/date-range.vue";
      var date_range = date_range_component.exports;
      var month_rangevue_type_template_id_f2645fb8_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-zoom-in-top" },
            on: {
              "after-leave": function($event) {
                _vm.$emit("dodestroy");
              }
            }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-picker-panel el-date-range-picker el-popper",
                class: [
                  {
                    "has-sidebar": _vm.$slots.sidebar || _vm.shortcuts
                  },
                  _vm.popperClass
                ]
              },
              [
                _c(
                  "div",
                  { staticClass: "el-picker-panel__body-wrapper" },
                  [
                    _vm._t("sidebar"),
                    _vm.shortcuts ? _c(
                      "div",
                      { staticClass: "el-picker-panel__sidebar" },
                      _vm._l(_vm.shortcuts, function(shortcut, key2) {
                        return _c(
                          "button",
                          {
                            key: key2,
                            staticClass: "el-picker-panel__shortcut",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.handleShortcutClick(shortcut);
                              }
                            }
                          },
                          [_vm._v(_vm._s(shortcut.text))]
                        );
                      }),
                      0
                    ) : _vm._e(),
                    _c("div", { staticClass: "el-picker-panel__body" }, [
                      _c(
                        "div",
                        {
                          staticClass: "el-picker-panel__content el-date-range-picker__content is-left"
                        },
                        [
                          _c("div", { staticClass: "el-date-range-picker__header" }, [
                            _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-left",
                              attrs: { type: "button" },
                              on: { click: _vm.leftPrevYear }
                            }),
                            _vm.unlinkPanels ? _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-right",
                              class: { "is-disabled": !_vm.enableYearArrow },
                              attrs: {
                                type: "button",
                                disabled: !_vm.enableYearArrow
                              },
                              on: { click: _vm.leftNextYear }
                            }) : _vm._e(),
                            _c("div", [_vm._v(_vm._s(_vm.leftLabel))])
                          ]),
                          _c("month-table", {
                            attrs: {
                              "selection-mode": "range",
                              date: _vm.leftDate,
                              "default-value": _vm.defaultValue,
                              "min-date": _vm.minDate,
                              "max-date": _vm.maxDate,
                              "range-state": _vm.rangeState,
                              "disabled-date": _vm.disabledDate
                            },
                            on: {
                              changerange: _vm.handleChangeRange,
                              pick: _vm.handleRangePick
                            }
                          })
                        ],
                        1
                      ),
                      _c(
                        "div",
                        {
                          staticClass: "el-picker-panel__content el-date-range-picker__content is-right"
                        },
                        [
                          _c("div", { staticClass: "el-date-range-picker__header" }, [
                            _vm.unlinkPanels ? _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-left",
                              class: { "is-disabled": !_vm.enableYearArrow },
                              attrs: {
                                type: "button",
                                disabled: !_vm.enableYearArrow
                              },
                              on: { click: _vm.rightPrevYear }
                            }) : _vm._e(),
                            _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-right",
                              attrs: { type: "button" },
                              on: { click: _vm.rightNextYear }
                            }),
                            _c("div", [_vm._v(_vm._s(_vm.rightLabel))])
                          ]),
                          _c("month-table", {
                            attrs: {
                              "selection-mode": "range",
                              date: _vm.rightDate,
                              "default-value": _vm.defaultValue,
                              "min-date": _vm.minDate,
                              "max-date": _vm.maxDate,
                              "range-state": _vm.rangeState,
                              "disabled-date": _vm.disabledDate
                            },
                            on: {
                              changerange: _vm.handleChangeRange,
                              pick: _vm.handleRangePick
                            }
                          })
                        ],
                        1
                      )
                    ])
                  ],
                  2
                )
              ]
            )
          ]
        );
      };
      var month_rangevue_type_template_id_f2645fb8_staticRenderFns = [];
      month_rangevue_type_template_id_f2645fb8_render._withStripped = true;
      var month_rangevue_type_script_lang_js_calcDefaultValue = function calcDefaultValue(defaultValue) {
        if (Array.isArray(defaultValue)) {
          return [new Date(defaultValue[0]), new Date(defaultValue[1])];
        } else if (defaultValue) {
          return [new Date(defaultValue), Object(date_util_["nextMonth"])(new Date(defaultValue))];
        } else {
          return [new Date(), Object(date_util_["nextMonth"])(new Date())];
        }
      };
      var month_rangevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        directives: { Clickoutside: clickoutside_default.a },
        computed: {
          btnDisabled: function btnDisabled() {
            return !(this.minDate && this.maxDate && !this.selecting && this.isValidValue([this.minDate, this.maxDate]));
          },
          leftLabel: function leftLabel() {
            return this.leftDate.getFullYear() + " " + this.t("el.datepicker.year");
          },
          rightLabel: function rightLabel() {
            return this.rightDate.getFullYear() + " " + this.t("el.datepicker.year");
          },
          leftYear: function leftYear() {
            return this.leftDate.getFullYear();
          },
          rightYear: function rightYear() {
            return this.rightDate.getFullYear() === this.leftDate.getFullYear() ? this.leftDate.getFullYear() + 1 : this.rightDate.getFullYear();
          },
          enableYearArrow: function enableYearArrow() {
            return this.unlinkPanels && this.rightYear > this.leftYear + 1;
          }
        },
        data: function data3() {
          return {
            popperClass: "",
            value: [],
            defaultValue: null,
            defaultTime: null,
            minDate: "",
            maxDate: "",
            leftDate: new Date(),
            rightDate: Object(date_util_["nextYear"])(new Date()),
            rangeState: {
              endDate: null,
              selecting: false,
              row: null,
              column: null
            },
            shortcuts: "",
            visible: "",
            disabledDate: "",
            format: "",
            arrowControl: false,
            unlinkPanels: false
          };
        },
        watch: {
          value: function value(newVal) {
            if (!newVal) {
              this.minDate = null;
              this.maxDate = null;
            } else if (Array.isArray(newVal)) {
              this.minDate = Object(date_util_["isDate"])(newVal[0]) ? new Date(newVal[0]) : null;
              this.maxDate = Object(date_util_["isDate"])(newVal[1]) ? new Date(newVal[1]) : null;
              if (this.minDate) {
                this.leftDate = this.minDate;
                if (this.unlinkPanels && this.maxDate) {
                  var minDateYear = this.minDate.getFullYear();
                  var maxDateYear = this.maxDate.getFullYear();
                  this.rightDate = minDateYear === maxDateYear ? Object(date_util_["nextYear"])(this.maxDate) : this.maxDate;
                } else {
                  this.rightDate = Object(date_util_["nextYear"])(this.leftDate);
                }
              } else {
                this.leftDate = month_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
                this.rightDate = Object(date_util_["nextYear"])(this.leftDate);
              }
            }
          },
          defaultValue: function defaultValue(val) {
            if (!Array.isArray(this.value)) {
              var _calcDefaultValue = month_rangevue_type_script_lang_js_calcDefaultValue(val), left2 = _calcDefaultValue[0], right2 = _calcDefaultValue[1];
              this.leftDate = left2;
              this.rightDate = val && val[1] && left2.getFullYear() !== right2.getFullYear() && this.unlinkPanels ? right2 : Object(date_util_["nextYear"])(this.leftDate);
            }
          }
        },
        methods: {
          handleClear: function handleClear() {
            this.minDate = null;
            this.maxDate = null;
            this.leftDate = month_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
            this.rightDate = Object(date_util_["nextYear"])(this.leftDate);
            this.$emit("pick", null);
          },
          handleChangeRange: function handleChangeRange(val) {
            this.minDate = val.minDate;
            this.maxDate = val.maxDate;
            this.rangeState = val.rangeState;
          },
          handleRangePick: function handleRangePick(val) {
            var _this = this;
            var close2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var defaultTime = this.defaultTime || [];
            var minDate = Object(date_util_["modifyWithTimeString"])(val.minDate, defaultTime[0]);
            var maxDate = Object(date_util_["modifyWithTimeString"])(val.maxDate, defaultTime[1]);
            if (this.maxDate === maxDate && this.minDate === minDate) {
              return;
            }
            this.onPick && this.onPick(val);
            this.maxDate = maxDate;
            this.minDate = minDate;
            setTimeout(function() {
              _this.maxDate = maxDate;
              _this.minDate = minDate;
            }, 10);
            if (!close2)
              return;
            this.handleConfirm();
          },
          handleShortcutClick: function handleShortcutClick(shortcut) {
            if (shortcut.onClick) {
              shortcut.onClick(this);
            }
          },
          leftPrevYear: function leftPrevYear() {
            this.leftDate = Object(date_util_["prevYear"])(this.leftDate);
            if (!this.unlinkPanels) {
              this.rightDate = Object(date_util_["prevYear"])(this.rightDate);
            }
          },
          rightNextYear: function rightNextYear() {
            if (!this.unlinkPanels) {
              this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
            }
            this.rightDate = Object(date_util_["nextYear"])(this.rightDate);
          },
          leftNextYear: function leftNextYear() {
            this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
          },
          rightPrevYear: function rightPrevYear() {
            this.rightDate = Object(date_util_["prevYear"])(this.rightDate);
          },
          handleConfirm: function handleConfirm() {
            var visible3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            if (this.isValidValue([this.minDate, this.maxDate])) {
              this.$emit("pick", [this.minDate, this.maxDate], visible3);
            }
          },
          isValidValue: function isValidValue(value) {
            return Array.isArray(value) && value && value[0] && value[1] && Object(date_util_["isDate"])(value[0]) && Object(date_util_["isDate"])(value[1]) && value[0].getTime() <= value[1].getTime() && (typeof this.disabledDate === "function" ? !this.disabledDate(value[0]) && !this.disabledDate(value[1]) : true);
          },
          resetView: function resetView() {
            this.minDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[0]) : null;
            this.maxDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[1]) : null;
          }
        },
        components: { MonthTable: month_table, ElInput: input_default.a, ElButton: button_default.a }
      };
      var panel_month_rangevue_type_script_lang_js_ = month_rangevue_type_script_lang_js_;
      var month_range_component = Object(componentNormalizer["a"])(
        panel_month_rangevue_type_script_lang_js_,
        month_rangevue_type_template_id_f2645fb8_render,
        month_rangevue_type_template_id_f2645fb8_staticRenderFns,
        false,
        null,
        null,
        null
      );
      month_range_component.options.__file = "packages/date-picker/src/panel/month-range.vue";
      var month_range = month_range_component.exports;
      var date_picker_getPanel = function getPanel(type) {
        if (type === "daterange" || type === "datetimerange") {
          return date_range;
        } else if (type === "monthrange") {
          return month_range;
        }
        return panel_date;
      };
      var date_picker = {
        mixins: [picker["a"]],
        name: "ElDatePicker",
        props: {
          type: {
            type: String,
            default: "date"
          },
          timeArrowControl: Boolean
        },
        watch: {
          type: function type(_type) {
            if (this.picker) {
              this.unmountPicker();
              this.panel = date_picker_getPanel(_type);
              this.mountPicker();
            } else {
              this.panel = date_picker_getPanel(_type);
            }
          }
        },
        created: function created() {
          this.panel = date_picker_getPanel(this.type);
        }
      };
      date_picker.install = function install(Vue2) {
        Vue2.component(date_picker.name, date_picker);
      };
      __webpack_exports__["default"] = date_picker;
    }
  ]);
})(datePicker);
var DatePicker = /* @__PURE__ */ getDefaultExportFromCjs(datePicker.exports);
var tabs = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 62);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    16: function(module2, exports) {
      module2.exports = resizeEvent;
    },
    3: function(module2, exports) {
      module2.exports = util$2;
    },
    62: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-tabs__active-bar",
          class: "is-" + _vm.rootTabs.tabPosition,
          style: _vm.barStyle
        });
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var util_ = __webpack_require__(3);
      var tab_barvue_type_script_lang_js_ = {
        name: "TabBar",
        props: {
          tabs: Array
        },
        inject: ["rootTabs"],
        computed: {
          barStyle: {
            get: function get2() {
              var _this = this;
              var style = {};
              var offset = 0;
              var tabSize = 0;
              var sizeName = ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1 ? "width" : "height";
              var sizeDir = sizeName === "width" ? "x" : "y";
              var firstUpperCase = function firstUpperCase2(str) {
                return str.toLowerCase().replace(/( |^)[a-z]/g, function(L) {
                  return L.toUpperCase();
                });
              };
              this.tabs.every(function(tab2, index2) {
                var $el = Object(util_["arrayFind"])(_this.$parent.$refs.tabs || [], function(t4) {
                  return t4.id.replace("tab-", "") === tab2.paneName;
                });
                if (!$el) {
                  return false;
                }
                if (!tab2.active) {
                  offset += $el["client" + firstUpperCase(sizeName)];
                  return true;
                } else {
                  tabSize = $el["client" + firstUpperCase(sizeName)];
                  var tabStyles = window.getComputedStyle($el);
                  if (sizeName === "width" && _this.tabs.length > 1) {
                    tabSize -= parseFloat(tabStyles.paddingLeft) + parseFloat(tabStyles.paddingRight);
                  }
                  if (sizeName === "width") {
                    offset += parseFloat(tabStyles.paddingLeft);
                  }
                  return false;
                }
              });
              var transform2 = "translate" + firstUpperCase(sizeDir) + "(" + offset + "px)";
              style[sizeName] = tabSize + "px";
              style.transform = transform2;
              style.msTransform = transform2;
              style.webkitTransform = transform2;
              return style;
            }
          }
        }
      };
      var src_tab_barvue_type_script_lang_js_ = tab_barvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_tab_barvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/tabs/src/tab-bar.vue";
      var tab_bar = component.exports;
      var resize_event_ = __webpack_require__(16);
      function noop4() {
      }
      var tab_navvue_type_script_lang_js_firstUpperCase = function firstUpperCase(str) {
        return str.toLowerCase().replace(/( |^)[a-z]/g, function(L) {
          return L.toUpperCase();
        });
      };
      var tab_navvue_type_script_lang_js_ = {
        name: "TabNav",
        components: {
          TabBar: tab_bar
        },
        inject: ["rootTabs"],
        props: {
          panes: Array,
          currentName: String,
          editable: Boolean,
          onTabClick: {
            type: Function,
            default: noop4
          },
          onTabRemove: {
            type: Function,
            default: noop4
          },
          type: String,
          stretch: Boolean
        },
        data: function data3() {
          return {
            scrollable: false,
            navOffset: 0,
            isFocus: false,
            focusable: true
          };
        },
        computed: {
          navStyle: function navStyle() {
            var dir = ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1 ? "X" : "Y";
            return {
              transform: "translate" + dir + "(-" + this.navOffset + "px)"
            };
          },
          sizeName: function sizeName() {
            return ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1 ? "width" : "height";
          }
        },
        methods: {
          scrollPrev: function scrollPrev() {
            var containerSize = this.$refs.navScroll["offset" + tab_navvue_type_script_lang_js_firstUpperCase(this.sizeName)];
            var currentOffset = this.navOffset;
            if (!currentOffset)
              return;
            var newOffset = currentOffset > containerSize ? currentOffset - containerSize : 0;
            this.navOffset = newOffset;
          },
          scrollNext: function scrollNext() {
            var navSize = this.$refs.nav["offset" + tab_navvue_type_script_lang_js_firstUpperCase(this.sizeName)];
            var containerSize = this.$refs.navScroll["offset" + tab_navvue_type_script_lang_js_firstUpperCase(this.sizeName)];
            var currentOffset = this.navOffset;
            if (navSize - currentOffset <= containerSize)
              return;
            var newOffset = navSize - currentOffset > containerSize * 2 ? currentOffset + containerSize : navSize - containerSize;
            this.navOffset = newOffset;
          },
          scrollToActiveTab: function scrollToActiveTab() {
            if (!this.scrollable)
              return;
            var nav = this.$refs.nav;
            var activeTab2 = this.$el.querySelector(".is-active");
            if (!activeTab2)
              return;
            var navScroll = this.$refs.navScroll;
            var isHorizontal = ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1;
            var activeTabBounding = activeTab2.getBoundingClientRect();
            var navScrollBounding = navScroll.getBoundingClientRect();
            var maxOffset = isHorizontal ? nav.offsetWidth - navScrollBounding.width : nav.offsetHeight - navScrollBounding.height;
            var currentOffset = this.navOffset;
            var newOffset = currentOffset;
            if (isHorizontal) {
              if (activeTabBounding.left < navScrollBounding.left) {
                newOffset = currentOffset - (navScrollBounding.left - activeTabBounding.left);
              }
              if (activeTabBounding.right > navScrollBounding.right) {
                newOffset = currentOffset + activeTabBounding.right - navScrollBounding.right;
              }
            } else {
              if (activeTabBounding.top < navScrollBounding.top) {
                newOffset = currentOffset - (navScrollBounding.top - activeTabBounding.top);
              }
              if (activeTabBounding.bottom > navScrollBounding.bottom) {
                newOffset = currentOffset + (activeTabBounding.bottom - navScrollBounding.bottom);
              }
            }
            newOffset = Math.max(newOffset, 0);
            this.navOffset = Math.min(newOffset, maxOffset);
          },
          update: function update2() {
            if (!this.$refs.nav)
              return;
            var sizeName = this.sizeName;
            var navSize = this.$refs.nav["offset" + tab_navvue_type_script_lang_js_firstUpperCase(sizeName)];
            var containerSize = this.$refs.navScroll["offset" + tab_navvue_type_script_lang_js_firstUpperCase(sizeName)];
            var currentOffset = this.navOffset;
            if (containerSize < navSize) {
              var _currentOffset = this.navOffset;
              this.scrollable = this.scrollable || {};
              this.scrollable.prev = _currentOffset;
              this.scrollable.next = _currentOffset + containerSize < navSize;
              if (navSize - _currentOffset < containerSize) {
                this.navOffset = navSize - containerSize;
              }
            } else {
              this.scrollable = false;
              if (currentOffset > 0) {
                this.navOffset = 0;
              }
            }
          },
          changeTab: function changeTab(e) {
            var keyCode = e.keyCode;
            var nextIndex = void 0;
            var currentIndex = void 0, tabList = void 0;
            if ([37, 38, 39, 40].indexOf(keyCode) !== -1) {
              tabList = e.currentTarget.querySelectorAll("[role=tab]");
              currentIndex = Array.prototype.indexOf.call(tabList, e.target);
            } else {
              return;
            }
            if (keyCode === 37 || keyCode === 38) {
              if (currentIndex === 0) {
                nextIndex = tabList.length - 1;
              } else {
                nextIndex = currentIndex - 1;
              }
            } else {
              if (currentIndex < tabList.length - 1) {
                nextIndex = currentIndex + 1;
              } else {
                nextIndex = 0;
              }
            }
            tabList[nextIndex].focus();
            tabList[nextIndex].click();
            this.setFocus();
          },
          setFocus: function setFocus() {
            if (this.focusable) {
              this.isFocus = true;
            }
          },
          removeFocus: function removeFocus() {
            this.isFocus = false;
          },
          visibilityChangeHandler: function visibilityChangeHandler() {
            var _this = this;
            var visibility = document.visibilityState;
            if (visibility === "hidden") {
              this.focusable = false;
            } else if (visibility === "visible") {
              setTimeout(function() {
                _this.focusable = true;
              }, 50);
            }
          },
          windowBlurHandler: function windowBlurHandler() {
            this.focusable = false;
          },
          windowFocusHandler: function windowFocusHandler() {
            var _this2 = this;
            setTimeout(function() {
              _this2.focusable = true;
            }, 50);
          }
        },
        updated: function updated() {
          this.update();
        },
        render: function render51(h) {
          var _this3 = this;
          var type = this.type, panes = this.panes, editable = this.editable, stretch = this.stretch, onTabClick = this.onTabClick, onTabRemove = this.onTabRemove, navStyle = this.navStyle, scrollable = this.scrollable, scrollNext = this.scrollNext, scrollPrev = this.scrollPrev, changeTab = this.changeTab, setFocus = this.setFocus, removeFocus = this.removeFocus;
          var scrollBtn = scrollable ? [h(
            "span",
            {
              "class": ["el-tabs__nav-prev", scrollable.prev ? "" : "is-disabled"],
              on: {
                "click": scrollPrev
              }
            },
            [h("i", { "class": "el-icon-arrow-left" })]
          ), h(
            "span",
            {
              "class": ["el-tabs__nav-next", scrollable.next ? "" : "is-disabled"],
              on: {
                "click": scrollNext
              }
            },
            [h("i", { "class": "el-icon-arrow-right" })]
          )] : null;
          var tabs3 = this._l(panes, function(pane, index2) {
            var _ref2;
            var tabName = pane.name || pane.index || index2;
            var closable = pane.isClosable || editable;
            pane.index = "" + index2;
            var btnClose = closable ? h("span", {
              "class": "el-icon-close",
              on: {
                "click": function click(ev) {
                  onTabRemove(pane, ev);
                }
              }
            }) : null;
            var tabLabelContent = pane.$slots.label || pane.label;
            var tabindex = pane.active ? 0 : -1;
            return h(
              "div",
              {
                "class": (_ref2 = {
                  "el-tabs__item": true
                }, _ref2["is-" + _this3.rootTabs.tabPosition] = true, _ref2["is-active"] = pane.active, _ref2["is-disabled"] = pane.disabled, _ref2["is-closable"] = closable, _ref2["is-focus"] = _this3.isFocus, _ref2),
                attrs: {
                  id: "tab-" + tabName,
                  "aria-controls": "pane-" + tabName,
                  role: "tab",
                  "aria-selected": pane.active,
                  tabindex
                },
                key: "tab-" + tabName,
                ref: "tabs",
                refInFor: true,
                on: {
                  "focus": function focus2() {
                    setFocus();
                  },
                  "blur": function blur() {
                    removeFocus();
                  },
                  "click": function click(ev) {
                    removeFocus();
                    onTabClick(pane, tabName, ev);
                  },
                  "keydown": function keydown(ev) {
                    if (closable && (ev.keyCode === 46 || ev.keyCode === 8)) {
                      onTabRemove(pane, ev);
                    }
                  }
                }
              },
              [tabLabelContent, btnClose]
            );
          });
          return h(
            "div",
            { "class": ["el-tabs__nav-wrap", scrollable ? "is-scrollable" : "", "is-" + this.rootTabs.tabPosition] },
            [scrollBtn, h(
              "div",
              { "class": ["el-tabs__nav-scroll"], ref: "navScroll" },
              [h(
                "div",
                {
                  "class": ["el-tabs__nav", "is-" + this.rootTabs.tabPosition, stretch && ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1 ? "is-stretch" : ""],
                  ref: "nav",
                  style: navStyle,
                  attrs: {
                    role: "tablist"
                  },
                  on: {
                    "keydown": changeTab
                  }
                },
                [!type ? h("tab-bar", {
                  attrs: { tabs: panes }
                }) : null, tabs3]
              )]
            )]
          );
        },
        mounted: function mounted2() {
          var _this4 = this;
          Object(resize_event_["addResizeListener"])(this.$el, this.update);
          document.addEventListener("visibilitychange", this.visibilityChangeHandler);
          window.addEventListener("blur", this.windowBlurHandler);
          window.addEventListener("focus", this.windowFocusHandler);
          setTimeout(function() {
            _this4.scrollToActiveTab();
          }, 0);
        },
        beforeDestroy: function beforeDestroy3() {
          if (this.$el && this.update)
            Object(resize_event_["removeResizeListener"])(this.$el, this.update);
          document.removeEventListener("visibilitychange", this.visibilityChangeHandler);
          window.removeEventListener("blur", this.windowBlurHandler);
          window.removeEventListener("focus", this.windowFocusHandler);
        }
      };
      var src_tab_navvue_type_script_lang_js_ = tab_navvue_type_script_lang_js_;
      var tab_nav_render, tab_nav_staticRenderFns;
      var tab_nav_component = Object(componentNormalizer["a"])(
        src_tab_navvue_type_script_lang_js_,
        tab_nav_render,
        tab_nav_staticRenderFns,
        false,
        null,
        null,
        null
      );
      tab_nav_component.options.__file = "packages/tabs/src/tab-nav.vue";
      var tab_nav = tab_nav_component.exports;
      var tabsvue_type_script_lang_js_ = {
        name: "ElTabs",
        components: {
          TabNav: tab_nav
        },
        props: {
          type: String,
          activeName: String,
          closable: Boolean,
          addable: Boolean,
          value: {},
          editable: Boolean,
          tabPosition: {
            type: String,
            default: "top"
          },
          beforeLeave: Function,
          stretch: Boolean
        },
        provide: function provide() {
          return {
            rootTabs: this
          };
        },
        data: function data3() {
          return {
            currentName: this.value || this.activeName,
            panes: []
          };
        },
        watch: {
          activeName: function activeName(value) {
            this.setCurrentName(value);
          },
          value: function value(_value) {
            this.setCurrentName(_value);
          },
          currentName: function currentName(value) {
            var _this = this;
            if (this.$refs.nav) {
              this.$nextTick(function() {
                _this.$refs.nav.$nextTick(function(_2) {
                  _this.$refs.nav.scrollToActiveTab();
                });
              });
            }
          }
        },
        methods: {
          calcPaneInstances: function calcPaneInstances() {
            var _this2 = this;
            var isForceUpdate = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            if (this.$slots.default) {
              var paneSlots = this.$slots.default.filter(function(vnode) {
                return vnode.tag && vnode.componentOptions && vnode.componentOptions.Ctor.options.name === "ElTabPane";
              });
              var panes = paneSlots.map(function(_ref2) {
                var componentInstance = _ref2.componentInstance;
                return componentInstance;
              });
              var panesChanged = !(panes.length === this.panes.length && panes.every(function(pane, index2) {
                return pane === _this2.panes[index2];
              }));
              if (isForceUpdate || panesChanged) {
                this.panes = panes;
              }
            } else if (this.panes.length !== 0) {
              this.panes = [];
            }
          },
          handleTabClick: function handleTabClick(tab2, tabName, event) {
            if (tab2.disabled)
              return;
            this.setCurrentName(tabName);
            this.$emit("tab-click", tab2, event);
          },
          handleTabRemove: function handleTabRemove(pane, ev) {
            if (pane.disabled)
              return;
            ev.stopPropagation();
            this.$emit("edit", pane.name, "remove");
            this.$emit("tab-remove", pane.name);
          },
          handleTabAdd: function handleTabAdd() {
            this.$emit("edit", null, "add");
            this.$emit("tab-add");
          },
          setCurrentName: function setCurrentName(value) {
            var _this3 = this;
            var changeCurrentName = function changeCurrentName2() {
              _this3.currentName = value;
              _this3.$emit("input", value);
            };
            if (this.currentName !== value && this.beforeLeave) {
              var before = this.beforeLeave(value, this.currentName);
              if (before && before.then) {
                before.then(function() {
                  changeCurrentName();
                  _this3.$refs.nav && _this3.$refs.nav.removeFocus();
                }, function() {
                });
              } else if (before !== false) {
                changeCurrentName();
              }
            } else {
              changeCurrentName();
            }
          }
        },
        render: function render51(h) {
          var _ref2;
          var type = this.type, handleTabClick = this.handleTabClick, handleTabRemove = this.handleTabRemove, handleTabAdd = this.handleTabAdd, currentName = this.currentName, panes = this.panes, editable = this.editable, addable = this.addable, tabPosition = this.tabPosition, stretch = this.stretch;
          var newButton = editable || addable ? h(
            "span",
            {
              "class": "el-tabs__new-tab",
              on: {
                "click": handleTabAdd,
                "keydown": function keydown(ev) {
                  if (ev.keyCode === 13) {
                    handleTabAdd();
                  }
                }
              },
              attrs: {
                tabindex: "0"
              }
            },
            [h("i", { "class": "el-icon-plus" })]
          ) : null;
          var navData = {
            props: {
              currentName,
              onTabClick: handleTabClick,
              onTabRemove: handleTabRemove,
              editable,
              type,
              panes,
              stretch
            },
            ref: "nav"
          };
          var header2 = h(
            "div",
            { "class": ["el-tabs__header", "is-" + tabPosition] },
            [newButton, h("tab-nav", navData)]
          );
          var panels = h(
            "div",
            { "class": "el-tabs__content" },
            [this.$slots.default]
          );
          return h(
            "div",
            { "class": (_ref2 = {
              "el-tabs": true,
              "el-tabs--card": type === "card"
            }, _ref2["el-tabs--" + tabPosition] = true, _ref2["el-tabs--border-card"] = type === "border-card", _ref2) },
            [tabPosition !== "bottom" ? [header2, panels] : [panels, header2]]
          );
        },
        created: function created() {
          if (!this.currentName) {
            this.setCurrentName("0");
          }
          this.$on("tab-nav-update", this.calcPaneInstances.bind(null, true));
        },
        mounted: function mounted2() {
          this.calcPaneInstances();
        },
        updated: function updated() {
          this.calcPaneInstances();
        }
      };
      var src_tabsvue_type_script_lang_js_ = tabsvue_type_script_lang_js_;
      var tabs_render, tabs_staticRenderFns;
      var tabs_component = Object(componentNormalizer["a"])(
        src_tabsvue_type_script_lang_js_,
        tabs_render,
        tabs_staticRenderFns,
        false,
        null,
        null,
        null
      );
      tabs_component.options.__file = "packages/tabs/src/tabs.vue";
      var tabs2 = tabs_component.exports;
      tabs2.install = function(Vue2) {
        Vue2.component(tabs2.name, tabs2);
      };
      __webpack_exports__["default"] = tabs2;
    }
  });
})(tabs);
var Tabs = /* @__PURE__ */ getDefaultExportFromCjs(tabs.exports);
var tabPane = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 100);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    100: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return !_vm.lazy || _vm.loaded || _vm.active ? _c(
          "div",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.active,
                expression: "active"
              }
            ],
            staticClass: "el-tab-pane",
            attrs: {
              role: "tabpanel",
              "aria-hidden": !_vm.active,
              id: "pane-" + _vm.paneName,
              "aria-labelledby": "tab-" + _vm.paneName
            }
          },
          [_vm._t("default")],
          2
        ) : _vm._e();
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var tab_panevue_type_script_lang_js_ = {
        name: "ElTabPane",
        componentName: "ElTabPane",
        props: {
          label: String,
          labelContent: Function,
          name: String,
          closable: Boolean,
          disabled: Boolean,
          lazy: Boolean
        },
        data: function data3() {
          return {
            index: null,
            loaded: false
          };
        },
        computed: {
          isClosable: function isClosable() {
            return this.closable || this.$parent.closable;
          },
          active: function active2() {
            var active3 = this.$parent.currentName === (this.name || this.index);
            if (active3) {
              this.loaded = true;
            }
            return active3;
          },
          paneName: function paneName() {
            return this.name || this.index;
          }
        },
        updated: function updated() {
          this.$parent.$emit("tab-nav-update");
        }
      };
      var src_tab_panevue_type_script_lang_js_ = tab_panevue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_tab_panevue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/tabs/src/tab-pane.vue";
      var tab_pane = component.exports;
      tab_pane.install = function(Vue2) {
        Vue2.component(tab_pane.name, tab_pane);
      };
      __webpack_exports__["default"] = tab_pane;
    }
  });
})(tabPane);
var TabPane = /* @__PURE__ */ getDefaultExportFromCjs(tabPane.exports);
var row = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 137);
  }({
    137: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var row2 = {
        name: "ElRow",
        componentName: "ElRow",
        props: {
          tag: {
            type: String,
            default: "div"
          },
          gutter: Number,
          type: String,
          justify: {
            type: String,
            default: "start"
          },
          align: String
        },
        computed: {
          style: function style() {
            var ret = {};
            if (this.gutter) {
              ret.marginLeft = "-" + this.gutter / 2 + "px";
              ret.marginRight = ret.marginLeft;
            }
            return ret;
          }
        },
        render: function render50(h) {
          return h(this.tag, {
            class: ["el-row", this.justify !== "start" ? "is-justify-" + this.justify : "", this.align ? "is-align-" + this.align : "", { "el-row--flex": this.type === "flex" }],
            style: this.style
          }, this.$slots.default);
        }
      };
      row2.install = function(Vue2) {
        Vue2.component(row2.name, row2);
      };
      __webpack_exports__["default"] = row2;
    }
  });
})(row);
var Row = /* @__PURE__ */ getDefaultExportFromCjs(row.exports);
var col = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 138);
  }({
    138: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var col2 = {
        name: "ElCol",
        props: {
          span: {
            type: Number,
            default: 24
          },
          tag: {
            type: String,
            default: "div"
          },
          offset: Number,
          pull: Number,
          push: Number,
          xs: [Number, Object],
          sm: [Number, Object],
          md: [Number, Object],
          lg: [Number, Object],
          xl: [Number, Object]
        },
        computed: {
          gutter: function gutter() {
            var parent = this.$parent;
            while (parent && parent.$options.componentName !== "ElRow") {
              parent = parent.$parent;
            }
            return parent ? parent.gutter : 0;
          }
        },
        render: function render50(h) {
          var _this = this;
          var classList2 = [];
          var style = {};
          if (this.gutter) {
            style.paddingLeft = this.gutter / 2 + "px";
            style.paddingRight = style.paddingLeft;
          }
          ["span", "offset", "pull", "push"].forEach(function(prop2) {
            if (_this[prop2] || _this[prop2] === 0) {
              classList2.push(prop2 !== "span" ? "el-col-" + prop2 + "-" + _this[prop2] : "el-col-" + _this[prop2]);
            }
          });
          ["xs", "sm", "md", "lg", "xl"].forEach(function(size) {
            if (typeof _this[size] === "number") {
              classList2.push("el-col-" + size + "-" + _this[size]);
            } else if (_typeof2(_this[size]) === "object") {
              var props = _this[size];
              Object.keys(props).forEach(function(prop2) {
                classList2.push(prop2 !== "span" ? "el-col-" + size + "-" + prop2 + "-" + props[prop2] : "el-col-" + size + "-" + props[prop2]);
              });
            }
          });
          return h(this.tag, {
            class: ["el-col", classList2],
            style
          }, this.$slots.default);
        }
      };
      col2.install = function(Vue2) {
        Vue2.component(col2.name, col2);
      };
      __webpack_exports__["default"] = col2;
    }
  });
})(col);
var Col = /* @__PURE__ */ getDefaultExportFromCjs(col.exports);
var badge = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 105);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    105: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          { staticClass: "el-badge" },
          [
            _vm._t("default"),
            _c("transition", { attrs: { name: "el-zoom-in-center" } }, [
              _c("sup", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: !_vm.hidden && (_vm.content || _vm.content === 0 || _vm.isDot),
                    expression: "!hidden && (content || content === 0 || isDot)"
                  }
                ],
                staticClass: "el-badge__content",
                class: [
                  _vm.type ? "el-badge__content--" + _vm.type : null,
                  {
                    "is-fixed": _vm.$slots.default,
                    "is-dot": _vm.isDot
                  }
                ],
                domProps: { textContent: _vm._s(_vm.content) }
              })
            ])
          ],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var mainvue_type_script_lang_js_ = {
        name: "ElBadge",
        props: {
          value: [String, Number],
          max: Number,
          isDot: Boolean,
          hidden: Boolean,
          type: {
            type: String,
            validator: function validator5(val) {
              return ["primary", "success", "warning", "info", "danger"].indexOf(val) > -1;
            }
          }
        },
        computed: {
          content: function content2() {
            if (this.isDot)
              return;
            var value = this.value;
            var max = this.max;
            if (typeof value === "number" && typeof max === "number") {
              return max < value ? max + "+" : value;
            }
            return value;
          }
        }
      };
      var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_mainvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/badge/src/main.vue";
      var main = component.exports;
      main.install = function(Vue2) {
        Vue2.component(main.name, main);
      };
      __webpack_exports__["default"] = main;
    }
  });
})(badge);
var Badge = /* @__PURE__ */ getDefaultExportFromCjs(badge.exports);
var card = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 106);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    106: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-card",
            class: _vm.shadow ? "is-" + _vm.shadow + "-shadow" : "is-always-shadow"
          },
          [
            _vm.$slots.header || _vm.header ? _c(
              "div",
              { staticClass: "el-card__header" },
              [_vm._t("header", [_vm._v(_vm._s(_vm.header))])],
              2
            ) : _vm._e(),
            _c(
              "div",
              { staticClass: "el-card__body", style: _vm.bodyStyle },
              [_vm._t("default")],
              2
            )
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var mainvue_type_script_lang_js_ = {
        name: "ElCard",
        props: {
          header: {},
          bodyStyle: {},
          shadow: {
            type: String
          }
        }
      };
      var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_mainvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/card/src/main.vue";
      var main = component.exports;
      main.install = function(Vue2) {
        Vue2.component(main.name, main);
      };
      __webpack_exports__["default"] = main;
    }
  });
})(card);
var Card = /* @__PURE__ */ getDefaultExportFromCjs(card.exports);
var colorPicker = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 54);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    10: function(module2, exports) {
      module2.exports = input$2.exports;
    },
    12: function(module2, exports) {
      module2.exports = clickoutside;
    },
    14: function(module2, exports) {
      module2.exports = button$3.exports;
    },
    4: function(module2, exports) {
      module2.exports = emitter;
    },
    5: function(module2, exports) {
      module2.exports = vuePopper;
    },
    54: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            directives: [
              {
                name: "clickoutside",
                rawName: "v-clickoutside",
                value: _vm.hide,
                expression: "hide"
              }
            ],
            class: [
              "el-color-picker",
              _vm.colorDisabled ? "is-disabled" : "",
              _vm.colorSize ? "el-color-picker--" + _vm.colorSize : ""
            ]
          },
          [
            _vm.colorDisabled ? _c("div", { staticClass: "el-color-picker__mask" }) : _vm._e(),
            _c(
              "div",
              {
                staticClass: "el-color-picker__trigger",
                on: { click: _vm.handleTrigger }
              },
              [
                _c(
                  "span",
                  {
                    staticClass: "el-color-picker__color",
                    class: { "is-alpha": _vm.showAlpha }
                  },
                  [
                    _c("span", {
                      staticClass: "el-color-picker__color-inner",
                      style: {
                        backgroundColor: _vm.displayedColor
                      }
                    }),
                    !_vm.value && !_vm.showPanelColor ? _c("span", {
                      staticClass: "el-color-picker__empty el-icon-close"
                    }) : _vm._e()
                  ]
                ),
                _c("span", {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.value || _vm.showPanelColor,
                      expression: "value || showPanelColor"
                    }
                  ],
                  staticClass: "el-color-picker__icon el-icon-arrow-down"
                })
              ]
            ),
            _c("picker-dropdown", {
              ref: "dropdown",
              class: ["el-color-picker__panel", _vm.popperClass || ""],
              attrs: {
                color: _vm.color,
                "show-alpha": _vm.showAlpha,
                predefine: _vm.predefine
              },
              on: { pick: _vm.confirmValue, clear: _vm.clearValue },
              model: {
                value: _vm.showPicker,
                callback: function($$v) {
                  _vm.showPicker = $$v;
                },
                expression: "showPicker"
              }
            })
          ],
          1
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      function _classCallCheck2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var hsv2hsl = function hsv2hsl2(hue, sat, val) {
        return [hue, sat * val / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue) || 0, hue / 2];
      };
      var isOnePointZero = function isOnePointZero2(n) {
        return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
      };
      var isPercentage = function isPercentage2(n) {
        return typeof n === "string" && n.indexOf("%") !== -1;
      };
      var bound01 = function bound012(value, max) {
        if (isOnePointZero(value))
          value = "100%";
        var processPercent = isPercentage(value);
        value = Math.min(max, Math.max(0, parseFloat(value)));
        if (processPercent) {
          value = parseInt(value * max, 10) / 100;
        }
        if (Math.abs(value - max) < 1e-6) {
          return 1;
        }
        return value % max / parseFloat(max);
      };
      var INT_HEX_MAP = { 10: "A", 11: "B", 12: "C", 13: "D", 14: "E", 15: "F" };
      var toHex = function toHex2(_ref2) {
        var r = _ref2.r, g = _ref2.g, b2 = _ref2.b;
        var hexOne = function hexOne2(value) {
          value = Math.min(Math.round(value), 255);
          var high = Math.floor(value / 16);
          var low = value % 16;
          return "" + (INT_HEX_MAP[high] || high) + (INT_HEX_MAP[low] || low);
        };
        if (isNaN(r) || isNaN(g) || isNaN(b2))
          return "";
        return "#" + hexOne(r) + hexOne(g) + hexOne(b2);
      };
      var HEX_INT_MAP = { A: 10, B: 11, C: 12, D: 13, E: 14, F: 15 };
      var parseHexChannel = function parseHexChannel2(hex) {
        if (hex.length === 2) {
          return (HEX_INT_MAP[hex[0].toUpperCase()] || +hex[0]) * 16 + (HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1]);
        }
        return HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1];
      };
      var hsl2hsv = function hsl2hsv2(hue, sat, light) {
        sat = sat / 100;
        light = light / 100;
        var smin = sat;
        var lmin = Math.max(light, 0.01);
        var sv = void 0;
        var v2 = void 0;
        light *= 2;
        sat *= light <= 1 ? light : 2 - light;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        v2 = (light + sat) / 2;
        sv = light === 0 ? 2 * smin / (lmin + smin) : 2 * sat / (light + sat);
        return {
          h: hue,
          s: sv * 100,
          v: v2 * 100
        };
      };
      var rgb2hsv = function rgb2hsv2(r, g, b2) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b2 = bound01(b2, 255);
        var max = Math.max(r, g, b2);
        var min = Math.min(r, g, b2);
        var h = void 0, s = void 0;
        var v2 = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;
        if (max === min) {
          h = 0;
        } else {
          switch (max) {
            case r:
              h = (g - b2) / d + (g < b2 ? 6 : 0);
              break;
            case g:
              h = (b2 - r) / d + 2;
              break;
            case b2:
              h = (r - g) / d + 4;
              break;
          }
          h /= 6;
        }
        return { h: h * 360, s: s * 100, v: v2 * 100 };
      };
      var hsv2rgb = function hsv2rgb2(h, s, v2) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v2 = bound01(v2, 100);
        var i = Math.floor(h);
        var f = h - i;
        var p = v2 * (1 - s);
        var q = v2 * (1 - f * s);
        var t4 = v2 * (1 - (1 - f) * s);
        var mod = i % 6;
        var r = [v2, q, p, p, t4, v2][mod];
        var g = [t4, v2, v2, q, p, p][mod];
        var b2 = [p, p, t4, v2, v2, q][mod];
        return {
          r: Math.round(r * 255),
          g: Math.round(g * 255),
          b: Math.round(b2 * 255)
        };
      };
      var Color = function() {
        function Color2(options2) {
          _classCallCheck2(this, Color2);
          this._hue = 0;
          this._saturation = 100;
          this._value = 100;
          this._alpha = 100;
          this.enableAlpha = false;
          this.format = "hex";
          this.value = "";
          options2 = options2 || {};
          for (var option2 in options2) {
            if (options2.hasOwnProperty(option2)) {
              this[option2] = options2[option2];
            }
          }
          this.doOnChange();
        }
        Color2.prototype.set = function set3(prop2, value) {
          if (arguments.length === 1 && (typeof prop2 === "undefined" ? "undefined" : _typeof2(prop2)) === "object") {
            for (var p in prop2) {
              if (prop2.hasOwnProperty(p)) {
                this.set(p, prop2[p]);
              }
            }
            return;
          }
          this["_" + prop2] = value;
          this.doOnChange();
        };
        Color2.prototype.get = function get2(prop2) {
          return this["_" + prop2];
        };
        Color2.prototype.toRgb = function toRgb() {
          return hsv2rgb(this._hue, this._saturation, this._value);
        };
        Color2.prototype.fromString = function fromString(value) {
          var _this = this;
          if (!value) {
            this._hue = 0;
            this._saturation = 100;
            this._value = 100;
            this.doOnChange();
            return;
          }
          var fromHSV = function fromHSV2(h2, s2, v3) {
            _this._hue = Math.max(0, Math.min(360, h2));
            _this._saturation = Math.max(0, Math.min(100, s2));
            _this._value = Math.max(0, Math.min(100, v3));
            _this.doOnChange();
          };
          if (value.indexOf("hsl") !== -1) {
            var parts = value.replace(/hsla|hsl|\(|\)/gm, "").split(/\s|,/g).filter(function(val) {
              return val !== "";
            }).map(function(val, index2) {
              return index2 > 2 ? parseFloat(val) : parseInt(val, 10);
            });
            if (parts.length === 4) {
              this._alpha = Math.floor(parseFloat(parts[3]) * 100);
            } else if (parts.length === 3) {
              this._alpha = 100;
            }
            if (parts.length >= 3) {
              var _hsl2hsv = hsl2hsv(parts[0], parts[1], parts[2]), h = _hsl2hsv.h, s = _hsl2hsv.s, v2 = _hsl2hsv.v;
              fromHSV(h, s, v2);
            }
          } else if (value.indexOf("hsv") !== -1) {
            var _parts = value.replace(/hsva|hsv|\(|\)/gm, "").split(/\s|,/g).filter(function(val) {
              return val !== "";
            }).map(function(val, index2) {
              return index2 > 2 ? parseFloat(val) : parseInt(val, 10);
            });
            if (_parts.length === 4) {
              this._alpha = Math.floor(parseFloat(_parts[3]) * 100);
            } else if (_parts.length === 3) {
              this._alpha = 100;
            }
            if (_parts.length >= 3) {
              fromHSV(_parts[0], _parts[1], _parts[2]);
            }
          } else if (value.indexOf("rgb") !== -1) {
            var _parts2 = value.replace(/rgba|rgb|\(|\)/gm, "").split(/\s|,/g).filter(function(val) {
              return val !== "";
            }).map(function(val, index2) {
              return index2 > 2 ? parseFloat(val) : parseInt(val, 10);
            });
            if (_parts2.length === 4) {
              this._alpha = Math.floor(parseFloat(_parts2[3]) * 100);
            } else if (_parts2.length === 3) {
              this._alpha = 100;
            }
            if (_parts2.length >= 3) {
              var _rgb2hsv = rgb2hsv(_parts2[0], _parts2[1], _parts2[2]), _h = _rgb2hsv.h, _s = _rgb2hsv.s, _v = _rgb2hsv.v;
              fromHSV(_h, _s, _v);
            }
          } else if (value.indexOf("#") !== -1) {
            var hex = value.replace("#", "").trim();
            if (!/^(?:[0-9a-fA-F]{3}){1,2}|[0-9a-fA-F]{8}$/.test(hex))
              return;
            var r = void 0, g = void 0, b2 = void 0;
            if (hex.length === 3) {
              r = parseHexChannel(hex[0] + hex[0]);
              g = parseHexChannel(hex[1] + hex[1]);
              b2 = parseHexChannel(hex[2] + hex[2]);
            } else if (hex.length === 6 || hex.length === 8) {
              r = parseHexChannel(hex.substring(0, 2));
              g = parseHexChannel(hex.substring(2, 4));
              b2 = parseHexChannel(hex.substring(4, 6));
            }
            if (hex.length === 8) {
              this._alpha = Math.floor(parseHexChannel(hex.substring(6)) / 255 * 100);
            } else if (hex.length === 3 || hex.length === 6) {
              this._alpha = 100;
            }
            var _rgb2hsv2 = rgb2hsv(r, g, b2), _h2 = _rgb2hsv2.h, _s2 = _rgb2hsv2.s, _v2 = _rgb2hsv2.v;
            fromHSV(_h2, _s2, _v2);
          }
        };
        Color2.prototype.compare = function compare(color) {
          return Math.abs(color._hue - this._hue) < 2 && Math.abs(color._saturation - this._saturation) < 1 && Math.abs(color._value - this._value) < 1 && Math.abs(color._alpha - this._alpha) < 1;
        };
        Color2.prototype.doOnChange = function doOnChange() {
          var _hue = this._hue, _saturation = this._saturation, _value = this._value, _alpha = this._alpha, format3 = this.format;
          if (this.enableAlpha) {
            switch (format3) {
              case "hsl":
                var hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);
                this.value = "hsla(" + _hue + ", " + Math.round(hsl[1] * 100) + "%, " + Math.round(hsl[2] * 100) + "%, " + _alpha / 100 + ")";
                break;
              case "hsv":
                this.value = "hsva(" + _hue + ", " + Math.round(_saturation) + "%, " + Math.round(_value) + "%, " + _alpha / 100 + ")";
                break;
              default:
                var _hsv2rgb = hsv2rgb(_hue, _saturation, _value), r = _hsv2rgb.r, g = _hsv2rgb.g, b2 = _hsv2rgb.b;
                this.value = "rgba(" + r + ", " + g + ", " + b2 + ", " + _alpha / 100 + ")";
            }
          } else {
            switch (format3) {
              case "hsl":
                var _hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);
                this.value = "hsl(" + _hue + ", " + Math.round(_hsl[1] * 100) + "%, " + Math.round(_hsl[2] * 100) + "%)";
                break;
              case "hsv":
                this.value = "hsv(" + _hue + ", " + Math.round(_saturation) + "%, " + Math.round(_value) + "%)";
                break;
              case "rgb":
                var _hsv2rgb2 = hsv2rgb(_hue, _saturation, _value), _r = _hsv2rgb2.r, _g = _hsv2rgb2.g, _b = _hsv2rgb2.b;
                this.value = "rgb(" + _r + ", " + _g + ", " + _b + ")";
                break;
              default:
                this.value = toHex(hsv2rgb(_hue, _saturation, _value));
            }
          }
        };
        return Color2;
      }();
      var src_color = Color;
      var picker_dropdownvue_type_template_id_06601625_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          { attrs: { name: "el-zoom-in-top" }, on: { "after-leave": _vm.doDestroy } },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.showPopper,
                    expression: "showPopper"
                  }
                ],
                staticClass: "el-color-dropdown"
              },
              [
                _c(
                  "div",
                  { staticClass: "el-color-dropdown__main-wrapper" },
                  [
                    _c("hue-slider", {
                      ref: "hue",
                      staticStyle: { float: "right" },
                      attrs: { color: _vm.color, vertical: "" }
                    }),
                    _c("sv-panel", { ref: "sl", attrs: { color: _vm.color } })
                  ],
                  1
                ),
                _vm.showAlpha ? _c("alpha-slider", { ref: "alpha", attrs: { color: _vm.color } }) : _vm._e(),
                _vm.predefine ? _c("predefine", {
                  attrs: { color: _vm.color, colors: _vm.predefine }
                }) : _vm._e(),
                _c(
                  "div",
                  { staticClass: "el-color-dropdown__btns" },
                  [
                    _c(
                      "span",
                      { staticClass: "el-color-dropdown__value" },
                      [
                        _c("el-input", {
                          attrs: { "validate-event": false, size: "mini" },
                          on: { blur: _vm.handleConfirm },
                          nativeOn: {
                            keyup: function($event) {
                              if (!("button" in $event) && _vm._k(
                                $event.keyCode,
                                "enter",
                                13,
                                $event.key,
                                "Enter"
                              )) {
                                return null;
                              }
                              return _vm.handleConfirm($event);
                            }
                          },
                          model: {
                            value: _vm.customInput,
                            callback: function($$v) {
                              _vm.customInput = $$v;
                            },
                            expression: "customInput"
                          }
                        })
                      ],
                      1
                    ),
                    _c(
                      "el-button",
                      {
                        staticClass: "el-color-dropdown__link-btn",
                        attrs: { size: "mini", type: "text" },
                        on: {
                          click: function($event) {
                            _vm.$emit("clear");
                          }
                        }
                      },
                      [
                        _vm._v(
                          "\n        " + _vm._s(_vm.t("el.colorpicker.clear")) + "\n      "
                        )
                      ]
                    ),
                    _c(
                      "el-button",
                      {
                        staticClass: "el-color-dropdown__btn",
                        attrs: { plain: "", size: "mini" },
                        on: { click: _vm.confirmValue }
                      },
                      [
                        _vm._v(
                          "\n        " + _vm._s(_vm.t("el.colorpicker.confirm")) + "\n      "
                        )
                      ]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ]
        );
      };
      var picker_dropdownvue_type_template_id_06601625_staticRenderFns = [];
      picker_dropdownvue_type_template_id_06601625_render._withStripped = true;
      var sv_panelvue_type_template_id_d8583596_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-color-svpanel",
            style: {
              backgroundColor: _vm.background
            }
          },
          [
            _c("div", { staticClass: "el-color-svpanel__white" }),
            _c("div", { staticClass: "el-color-svpanel__black" }),
            _c(
              "div",
              {
                staticClass: "el-color-svpanel__cursor",
                style: {
                  top: _vm.cursorTop + "px",
                  left: _vm.cursorLeft + "px"
                }
              },
              [_c("div")]
            )
          ]
        );
      };
      var sv_panelvue_type_template_id_d8583596_staticRenderFns = [];
      sv_panelvue_type_template_id_d8583596_render._withStripped = true;
      var external_vue_ = __webpack_require__(7);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      var isDragging = false;
      var draggable = function(element, options2) {
        if (external_vue_default.a.prototype.$isServer)
          return;
        var moveFn = function moveFn2(event) {
          if (options2.drag) {
            options2.drag(event);
          }
        };
        var upFn = function upFn2(event) {
          document.removeEventListener("mousemove", moveFn);
          document.removeEventListener("mouseup", upFn2);
          document.onselectstart = null;
          document.ondragstart = null;
          isDragging = false;
          if (options2.end) {
            options2.end(event);
          }
        };
        element.addEventListener("mousedown", function(event) {
          if (isDragging)
            return;
          document.onselectstart = function() {
            return false;
          };
          document.ondragstart = function() {
            return false;
          };
          document.addEventListener("mousemove", moveFn);
          document.addEventListener("mouseup", upFn);
          isDragging = true;
          if (options2.start) {
            options2.start(event);
          }
        });
      };
      var sv_panelvue_type_script_lang_js_ = {
        name: "el-sl-panel",
        props: {
          color: {
            required: true
          }
        },
        computed: {
          colorValue: function colorValue() {
            var hue = this.color.get("hue");
            var value = this.color.get("value");
            return { hue, value };
          }
        },
        watch: {
          colorValue: function colorValue() {
            this.update();
          }
        },
        methods: {
          update: function update2() {
            var saturation = this.color.get("saturation");
            var value = this.color.get("value");
            var el2 = this.$el;
            var width = el2.clientWidth, height = el2.clientHeight;
            this.cursorLeft = saturation * width / 100;
            this.cursorTop = (100 - value) * height / 100;
            this.background = "hsl(" + this.color.get("hue") + ", 100%, 50%)";
          },
          handleDrag: function handleDrag(event) {
            var el2 = this.$el;
            var rect2 = el2.getBoundingClientRect();
            var left2 = event.clientX - rect2.left;
            var top2 = event.clientY - rect2.top;
            left2 = Math.max(0, left2);
            left2 = Math.min(left2, rect2.width);
            top2 = Math.max(0, top2);
            top2 = Math.min(top2, rect2.height);
            this.cursorLeft = left2;
            this.cursorTop = top2;
            this.color.set({
              saturation: left2 / rect2.width * 100,
              value: 100 - top2 / rect2.height * 100
            });
          }
        },
        mounted: function mounted2() {
          var _this = this;
          draggable(this.$el, {
            drag: function drag(event) {
              _this.handleDrag(event);
            },
            end: function end2(event) {
              _this.handleDrag(event);
            }
          });
          this.update();
        },
        data: function data3() {
          return {
            cursorTop: 0,
            cursorLeft: 0,
            background: "hsl(0, 100%, 50%)"
          };
        }
      };
      var components_sv_panelvue_type_script_lang_js_ = sv_panelvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        components_sv_panelvue_type_script_lang_js_,
        sv_panelvue_type_template_id_d8583596_render,
        sv_panelvue_type_template_id_d8583596_staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/color-picker/src/components/sv-panel.vue";
      var sv_panel = component.exports;
      var hue_slidervue_type_template_id_5cdc43b1_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-color-hue-slider",
            class: { "is-vertical": _vm.vertical }
          },
          [
            _c("div", {
              ref: "bar",
              staticClass: "el-color-hue-slider__bar",
              on: { click: _vm.handleClick }
            }),
            _c("div", {
              ref: "thumb",
              staticClass: "el-color-hue-slider__thumb",
              style: {
                left: _vm.thumbLeft + "px",
                top: _vm.thumbTop + "px"
              }
            })
          ]
        );
      };
      var hue_slidervue_type_template_id_5cdc43b1_staticRenderFns = [];
      hue_slidervue_type_template_id_5cdc43b1_render._withStripped = true;
      var hue_slidervue_type_script_lang_js_ = {
        name: "el-color-hue-slider",
        props: {
          color: {
            required: true
          },
          vertical: Boolean
        },
        data: function data3() {
          return {
            thumbLeft: 0,
            thumbTop: 0
          };
        },
        computed: {
          hueValue: function hueValue() {
            var hue = this.color.get("hue");
            return hue;
          }
        },
        watch: {
          hueValue: function hueValue() {
            this.update();
          }
        },
        methods: {
          handleClick: function handleClick(event) {
            var thumb = this.$refs.thumb;
            var target2 = event.target;
            if (target2 !== thumb) {
              this.handleDrag(event);
            }
          },
          handleDrag: function handleDrag(event) {
            var rect2 = this.$el.getBoundingClientRect();
            var thumb = this.$refs.thumb;
            var hue = void 0;
            if (!this.vertical) {
              var left2 = event.clientX - rect2.left;
              left2 = Math.min(left2, rect2.width - thumb.offsetWidth / 2);
              left2 = Math.max(thumb.offsetWidth / 2, left2);
              hue = Math.round((left2 - thumb.offsetWidth / 2) / (rect2.width - thumb.offsetWidth) * 360);
            } else {
              var top2 = event.clientY - rect2.top;
              top2 = Math.min(top2, rect2.height - thumb.offsetHeight / 2);
              top2 = Math.max(thumb.offsetHeight / 2, top2);
              hue = Math.round((top2 - thumb.offsetHeight / 2) / (rect2.height - thumb.offsetHeight) * 360);
            }
            this.color.set("hue", hue);
          },
          getThumbLeft: function getThumbLeft() {
            if (this.vertical)
              return 0;
            var el2 = this.$el;
            var hue = this.color.get("hue");
            if (!el2)
              return 0;
            var thumb = this.$refs.thumb;
            return Math.round(hue * (el2.offsetWidth - thumb.offsetWidth / 2) / 360);
          },
          getThumbTop: function getThumbTop() {
            if (!this.vertical)
              return 0;
            var el2 = this.$el;
            var hue = this.color.get("hue");
            if (!el2)
              return 0;
            var thumb = this.$refs.thumb;
            return Math.round(hue * (el2.offsetHeight - thumb.offsetHeight / 2) / 360);
          },
          update: function update2() {
            this.thumbLeft = this.getThumbLeft();
            this.thumbTop = this.getThumbTop();
          }
        },
        mounted: function mounted2() {
          var _this = this;
          var _$refs = this.$refs, bar = _$refs.bar, thumb = _$refs.thumb;
          var dragConfig = {
            drag: function drag(event) {
              _this.handleDrag(event);
            },
            end: function end2(event) {
              _this.handleDrag(event);
            }
          };
          draggable(bar, dragConfig);
          draggable(thumb, dragConfig);
          this.update();
        }
      };
      var components_hue_slidervue_type_script_lang_js_ = hue_slidervue_type_script_lang_js_;
      var hue_slider_component = Object(componentNormalizer["a"])(
        components_hue_slidervue_type_script_lang_js_,
        hue_slidervue_type_template_id_5cdc43b1_render,
        hue_slidervue_type_template_id_5cdc43b1_staticRenderFns,
        false,
        null,
        null,
        null
      );
      hue_slider_component.options.__file = "packages/color-picker/src/components/hue-slider.vue";
      var hue_slider = hue_slider_component.exports;
      var alpha_slidervue_type_template_id_068c66cb_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-color-alpha-slider",
            class: { "is-vertical": _vm.vertical }
          },
          [
            _c("div", {
              ref: "bar",
              staticClass: "el-color-alpha-slider__bar",
              style: {
                background: _vm.background
              },
              on: { click: _vm.handleClick }
            }),
            _c("div", {
              ref: "thumb",
              staticClass: "el-color-alpha-slider__thumb",
              style: {
                left: _vm.thumbLeft + "px",
                top: _vm.thumbTop + "px"
              }
            })
          ]
        );
      };
      var alpha_slidervue_type_template_id_068c66cb_staticRenderFns = [];
      alpha_slidervue_type_template_id_068c66cb_render._withStripped = true;
      var alpha_slidervue_type_script_lang_js_ = {
        name: "el-color-alpha-slider",
        props: {
          color: {
            required: true
          },
          vertical: Boolean
        },
        watch: {
          "color._alpha": function color_alpha() {
            this.update();
          },
          "color.value": function colorValue() {
            this.update();
          }
        },
        methods: {
          handleClick: function handleClick(event) {
            var thumb = this.$refs.thumb;
            var target2 = event.target;
            if (target2 !== thumb) {
              this.handleDrag(event);
            }
          },
          handleDrag: function handleDrag(event) {
            var rect2 = this.$el.getBoundingClientRect();
            var thumb = this.$refs.thumb;
            if (!this.vertical) {
              var left2 = event.clientX - rect2.left;
              left2 = Math.max(thumb.offsetWidth / 2, left2);
              left2 = Math.min(left2, rect2.width - thumb.offsetWidth / 2);
              this.color.set("alpha", Math.round((left2 - thumb.offsetWidth / 2) / (rect2.width - thumb.offsetWidth) * 100));
            } else {
              var top2 = event.clientY - rect2.top;
              top2 = Math.max(thumb.offsetHeight / 2, top2);
              top2 = Math.min(top2, rect2.height - thumb.offsetHeight / 2);
              this.color.set("alpha", Math.round((top2 - thumb.offsetHeight / 2) / (rect2.height - thumb.offsetHeight) * 100));
            }
          },
          getThumbLeft: function getThumbLeft() {
            if (this.vertical)
              return 0;
            var el2 = this.$el;
            var alpha2 = this.color._alpha;
            if (!el2)
              return 0;
            var thumb = this.$refs.thumb;
            return Math.round(alpha2 * (el2.offsetWidth - thumb.offsetWidth / 2) / 100);
          },
          getThumbTop: function getThumbTop() {
            if (!this.vertical)
              return 0;
            var el2 = this.$el;
            var alpha2 = this.color._alpha;
            if (!el2)
              return 0;
            var thumb = this.$refs.thumb;
            return Math.round(alpha2 * (el2.offsetHeight - thumb.offsetHeight / 2) / 100);
          },
          getBackground: function getBackground() {
            if (this.color && this.color.value) {
              var _color$toRgb = this.color.toRgb(), r = _color$toRgb.r, g = _color$toRgb.g, b2 = _color$toRgb.b;
              return "linear-gradient(to right, rgba(" + r + ", " + g + ", " + b2 + ", 0) 0%, rgba(" + r + ", " + g + ", " + b2 + ", 1) 100%)";
            }
            return null;
          },
          update: function update2() {
            this.thumbLeft = this.getThumbLeft();
            this.thumbTop = this.getThumbTop();
            this.background = this.getBackground();
          }
        },
        data: function data3() {
          return {
            thumbLeft: 0,
            thumbTop: 0,
            background: null
          };
        },
        mounted: function mounted2() {
          var _this = this;
          var _$refs = this.$refs, bar = _$refs.bar, thumb = _$refs.thumb;
          var dragConfig = {
            drag: function drag(event) {
              _this.handleDrag(event);
            },
            end: function end2(event) {
              _this.handleDrag(event);
            }
          };
          draggable(bar, dragConfig);
          draggable(thumb, dragConfig);
          this.update();
        }
      };
      var components_alpha_slidervue_type_script_lang_js_ = alpha_slidervue_type_script_lang_js_;
      var alpha_slider_component = Object(componentNormalizer["a"])(
        components_alpha_slidervue_type_script_lang_js_,
        alpha_slidervue_type_template_id_068c66cb_render,
        alpha_slidervue_type_template_id_068c66cb_staticRenderFns,
        false,
        null,
        null,
        null
      );
      alpha_slider_component.options.__file = "packages/color-picker/src/components/alpha-slider.vue";
      var alpha_slider = alpha_slider_component.exports;
      var predefinevue_type_template_id_06e03093_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-color-predefine" }, [
          _c(
            "div",
            { staticClass: "el-color-predefine__colors" },
            _vm._l(_vm.rgbaColors, function(item2, index2) {
              return _c(
                "div",
                {
                  key: _vm.colors[index2],
                  staticClass: "el-color-predefine__color-selector",
                  class: { selected: item2.selected, "is-alpha": item2._alpha < 100 },
                  on: {
                    click: function($event) {
                      _vm.handleSelect(index2);
                    }
                  }
                },
                [_c("div", { style: { "background-color": item2.value } })]
              );
            }),
            0
          )
        ]);
      };
      var predefinevue_type_template_id_06e03093_staticRenderFns = [];
      predefinevue_type_template_id_06e03093_render._withStripped = true;
      var predefinevue_type_script_lang_js_ = {
        props: {
          colors: { type: Array, required: true },
          color: { required: true }
        },
        data: function data3() {
          return {
            rgbaColors: this.parseColors(this.colors, this.color)
          };
        },
        methods: {
          handleSelect: function handleSelect(index2) {
            this.color.fromString(this.colors[index2]);
          },
          parseColors: function parseColors(colors, color) {
            return colors.map(function(value) {
              var c = new src_color();
              c.enableAlpha = true;
              c.format = "rgba";
              c.fromString(value);
              c.selected = c.value === color.value;
              return c;
            });
          }
        },
        watch: {
          "$parent.currentColor": function $parentCurrentColor(val) {
            var color = new src_color();
            color.fromString(val);
            this.rgbaColors.forEach(function(item2) {
              item2.selected = color.compare(item2);
            });
          },
          colors: function colors(newVal) {
            this.rgbaColors = this.parseColors(newVal, this.color);
          },
          color: function color(newVal) {
            this.rgbaColors = this.parseColors(this.colors, newVal);
          }
        }
      };
      var components_predefinevue_type_script_lang_js_ = predefinevue_type_script_lang_js_;
      var predefine_component = Object(componentNormalizer["a"])(
        components_predefinevue_type_script_lang_js_,
        predefinevue_type_template_id_06e03093_render,
        predefinevue_type_template_id_06e03093_staticRenderFns,
        false,
        null,
        null,
        null
      );
      predefine_component.options.__file = "packages/color-picker/src/components/predefine.vue";
      var predefine = predefine_component.exports;
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var locale_ = __webpack_require__(6);
      var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
      var input_ = __webpack_require__(10);
      var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
      var button_ = __webpack_require__(14);
      var button_default = /* @__PURE__ */ __webpack_require__.n(button_);
      var picker_dropdownvue_type_script_lang_js_ = {
        name: "el-color-picker-dropdown",
        mixins: [vue_popper_default.a, locale_default.a],
        components: {
          SvPanel: sv_panel,
          HueSlider: hue_slider,
          AlphaSlider: alpha_slider,
          ElInput: input_default.a,
          ElButton: button_default.a,
          Predefine: predefine
        },
        props: {
          color: {
            required: true
          },
          showAlpha: Boolean,
          predefine: Array
        },
        data: function data3() {
          return {
            customInput: ""
          };
        },
        computed: {
          currentColor: function currentColor() {
            var parent = this.$parent;
            return !parent.value && !parent.showPanelColor ? "" : parent.color.value;
          }
        },
        methods: {
          confirmValue: function confirmValue() {
            this.$emit("pick");
          },
          handleConfirm: function handleConfirm() {
            this.color.fromString(this.customInput);
          }
        },
        mounted: function mounted2() {
          this.$parent.popperElm = this.popperElm = this.$el;
          this.referenceElm = this.$parent.$el;
        },
        watch: {
          showPopper: function showPopper2(val) {
            var _this = this;
            if (val === true) {
              this.$nextTick(function() {
                var _$refs = _this.$refs, sl = _$refs.sl, hue = _$refs.hue, alpha2 = _$refs.alpha;
                sl && sl.update();
                hue && hue.update();
                alpha2 && alpha2.update();
              });
            }
          },
          currentColor: {
            immediate: true,
            handler: function handler2(val) {
              this.customInput = val;
            }
          }
        }
      };
      var components_picker_dropdownvue_type_script_lang_js_ = picker_dropdownvue_type_script_lang_js_;
      var picker_dropdown_component = Object(componentNormalizer["a"])(
        components_picker_dropdownvue_type_script_lang_js_,
        picker_dropdownvue_type_template_id_06601625_render,
        picker_dropdownvue_type_template_id_06601625_staticRenderFns,
        false,
        null,
        null,
        null
      );
      picker_dropdown_component.options.__file = "packages/color-picker/src/components/picker-dropdown.vue";
      var picker_dropdown = picker_dropdown_component.exports;
      var clickoutside_ = __webpack_require__(12);
      var clickoutside_default = /* @__PURE__ */ __webpack_require__.n(clickoutside_);
      var emitter_ = __webpack_require__(4);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var mainvue_type_script_lang_js_ = {
        name: "ElColorPicker",
        mixins: [emitter_default.a],
        props: {
          value: String,
          showAlpha: Boolean,
          colorFormat: String,
          disabled: Boolean,
          size: String,
          popperClass: String,
          predefine: Array
        },
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        directives: { Clickoutside: clickoutside_default.a },
        computed: {
          displayedColor: function displayedColor() {
            if (!this.value && !this.showPanelColor) {
              return "transparent";
            }
            return this.displayedRgb(this.color, this.showAlpha);
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          colorSize: function colorSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          colorDisabled: function colorDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        watch: {
          value: function value(val) {
            if (!val) {
              this.showPanelColor = false;
            } else if (val && val !== this.color.value) {
              this.color.fromString(val);
            }
          },
          color: {
            deep: true,
            handler: function handler2() {
              this.showPanelColor = true;
            }
          },
          displayedColor: function displayedColor(val) {
            if (!this.showPicker)
              return;
            var currentValueColor = new src_color({
              enableAlpha: this.showAlpha,
              format: this.colorFormat
            });
            currentValueColor.fromString(this.value);
            var currentValueColorRgb = this.displayedRgb(currentValueColor, this.showAlpha);
            if (val !== currentValueColorRgb) {
              this.$emit("active-change", val);
            }
          }
        },
        methods: {
          handleTrigger: function handleTrigger() {
            if (this.colorDisabled)
              return;
            this.showPicker = !this.showPicker;
          },
          confirmValue: function confirmValue() {
            var value = this.color.value;
            this.$emit("input", value);
            this.$emit("change", value);
            this.dispatch("ElFormItem", "el.form.change", value);
            this.showPicker = false;
          },
          clearValue: function clearValue() {
            this.$emit("input", null);
            this.$emit("change", null);
            if (this.value !== null) {
              this.dispatch("ElFormItem", "el.form.change", null);
            }
            this.showPanelColor = false;
            this.showPicker = false;
            this.resetColor();
          },
          hide: function hide() {
            this.showPicker = false;
            this.resetColor();
          },
          resetColor: function resetColor() {
            var _this = this;
            this.$nextTick(function(_2) {
              if (_this.value) {
                _this.color.fromString(_this.value);
              } else {
                _this.showPanelColor = false;
              }
            });
          },
          displayedRgb: function displayedRgb(color, showAlpha) {
            if (!(color instanceof src_color)) {
              throw Error("color should be instance of Color Class");
            }
            var _color$toRgb = color.toRgb(), r = _color$toRgb.r, g = _color$toRgb.g, b2 = _color$toRgb.b;
            return showAlpha ? "rgba(" + r + ", " + g + ", " + b2 + ", " + color.get("alpha") / 100 + ")" : "rgb(" + r + ", " + g + ", " + b2 + ")";
          }
        },
        mounted: function mounted2() {
          var value = this.value;
          if (value) {
            this.color.fromString(value);
          }
          this.popperElm = this.$refs.dropdown.$el;
        },
        data: function data3() {
          var color = new src_color({
            enableAlpha: this.showAlpha,
            format: this.colorFormat
          });
          return {
            color,
            showPicker: false,
            showPanelColor: false
          };
        },
        components: {
          PickerDropdown: picker_dropdown
        }
      };
      var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
      var main_component = Object(componentNormalizer["a"])(
        src_mainvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      main_component.options.__file = "packages/color-picker/src/main.vue";
      var main = main_component.exports;
      main.install = function(Vue2) {
        Vue2.component(main.name, main);
      };
      __webpack_exports__["default"] = main;
    },
    6: function(module2, exports) {
      module2.exports = locale;
    },
    7: function(module2, exports) {
      module2.exports = Vue;
    }
  });
})(colorPicker);
var ColorPicker = /* @__PURE__ */ getDefaultExportFromCjs(colorPicker.exports);
var container = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 115);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    115: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "section",
          { staticClass: "el-container", class: { "is-vertical": _vm.isVertical } },
          [_vm._t("default")],
          2
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var mainvue_type_script_lang_js_ = {
        name: "ElContainer",
        componentName: "ElContainer",
        props: {
          direction: String
        },
        computed: {
          isVertical: function isVertical() {
            if (this.direction === "vertical") {
              return true;
            } else if (this.direction === "horizontal") {
              return false;
            }
            return this.$slots && this.$slots.default ? this.$slots.default.some(function(vnode) {
              var tag2 = vnode.componentOptions && vnode.componentOptions.tag;
              return tag2 === "el-header" || tag2 === "el-footer";
            }) : false;
          }
        }
      };
      var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_mainvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/container/src/main.vue";
      var main = component.exports;
      main.install = function(Vue2) {
        Vue2.component(main.name, main);
      };
      __webpack_exports__["default"] = main;
    }
  });
})(container);
var Container = /* @__PURE__ */ getDefaultExportFromCjs(container.exports);
var elementUIComponents = {
  install: (app, options2) => {
    app.component("ElCollapseTransition", _default2);
    app.component("ElDialog", Dialog);
    app.component("ElDrawer", Drawer);
    app.component("ElDropdown", Dropdown);
    app.component("ElDropdownMenu", DropdownMenu);
    app.component("ElDropdownItem", DropdownItem);
    app.component("ElSubmenu", Submenu);
    app.component("ElRadio", Radio);
    app.component("ElRadioGroup", RadioGroup);
    app.component("ElRadioButton", RadioButton);
    app.component("ElCheckbox", Checkbox);
    app.component("ElSwitch", Switch);
    app.component("ElSelect", Select);
    app.component("n8n-option", Option);
    app.component("ElOptionGroup", OptionGroup);
    app.component("ElButtonGroup", ButtonGroup);
    app.component("ElTable", Table);
    app.component("ElTableColumn", TableColumn);
    app.component("ElDatePicker", DatePicker);
    app.component("ElTabs", Tabs);
    app.component("ElTabPane", TabPane);
    app.component("ElTag", Tag$1);
    app.component("ElRow", Row);
    app.component("ElCol", Col);
    app.component("ElBadge", Badge);
    app.component("ElCard", Card);
    app.component("ElColorPicker", ColorPicker);
    app.component("ElContainer", Container);
    app.component("ElPagination", Pagination);
  }
};
var loading$1 = { exports: {} };
var afterLeave = {};
afterLeave.__esModule = true;
afterLeave.default = function(instance, callback) {
  var speed = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 300;
  var once2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  if (!instance || !callback)
    throw new Error("instance & callback is required");
  var called = false;
  var afterLeaveCallback = function afterLeaveCallback2() {
    if (called)
      return;
    called = true;
    if (callback) {
      callback.apply(null, arguments);
    }
  };
  if (once2) {
    instance.$once("after-leave", afterLeaveCallback);
  } else {
    instance.$on("after-leave", afterLeaveCallback);
  }
  setTimeout(function() {
    afterLeaveCallback();
  }, speed + 100);
};
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 72);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    13: function(module2, exports) {
      module2.exports = popup;
    },
    2: function(module2, exports) {
      module2.exports = dom;
    },
    41: function(module2, exports) {
      module2.exports = afterLeave;
    },
    7: function(module2, exports) {
      module2.exports = Vue;
    },
    72: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var external_vue_ = __webpack_require__(7);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-loading-fade" },
            on: { "after-leave": _vm.handleAfterLeave }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-loading-mask",
                class: [_vm.customClass, { "is-fullscreen": _vm.fullscreen }],
                style: { backgroundColor: _vm.background || "" }
              },
              [
                _c("div", { staticClass: "el-loading-spinner" }, [
                  !_vm.spinner ? _c(
                    "svg",
                    {
                      staticClass: "circular",
                      attrs: { viewBox: "25 25 50 50" }
                    },
                    [
                      _c("circle", {
                        staticClass: "path",
                        attrs: { cx: "50", cy: "50", r: "20", fill: "none" }
                      })
                    ]
                  ) : _c("i", { class: _vm.spinner }),
                  _vm.text ? _c("p", { staticClass: "el-loading-text" }, [
                    _vm._v(_vm._s(_vm.text))
                  ]) : _vm._e()
                ])
              ]
            )
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var loadingvue_type_script_lang_js_ = {
        data: function data3() {
          return {
            text: null,
            spinner: null,
            background: null,
            fullscreen: true,
            visible: false,
            customClass: ""
          };
        },
        methods: {
          handleAfterLeave: function handleAfterLeave() {
            this.$emit("after-leave");
          },
          setText: function setText(text3) {
            this.text = text3;
          }
        }
      };
      var src_loadingvue_type_script_lang_js_ = loadingvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_loadingvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/loading/src/loading.vue";
      var loading2 = component.exports;
      var dom_ = __webpack_require__(2);
      var popup_ = __webpack_require__(13);
      var after_leave_ = __webpack_require__(41);
      var after_leave_default = /* @__PURE__ */ __webpack_require__.n(after_leave_);
      var Mask = external_vue_default.a.extend(loading2);
      var loadingDirective = {};
      loadingDirective.install = function(Vue2) {
        if (Vue2.prototype.$isServer)
          return;
        var toggleLoading = function toggleLoading2(el2, binding) {
          if (binding.value) {
            Vue2.nextTick(function() {
              if (binding.modifiers.fullscreen) {
                el2.originalPosition = Object(dom_["getStyle"])(document.body, "position");
                el2.originalOverflow = Object(dom_["getStyle"])(document.body, "overflow");
                el2.maskStyle.zIndex = popup_["PopupManager"].nextZIndex();
                Object(dom_["addClass"])(el2.mask, "is-fullscreen");
                insertDom(document.body, el2, binding);
              } else {
                Object(dom_["removeClass"])(el2.mask, "is-fullscreen");
                if (binding.modifiers.body) {
                  el2.originalPosition = Object(dom_["getStyle"])(document.body, "position");
                  ["top", "left"].forEach(function(property) {
                    var scroll2 = property === "top" ? "scrollTop" : "scrollLeft";
                    el2.maskStyle[property] = el2.getBoundingClientRect()[property] + document.body[scroll2] + document.documentElement[scroll2] - parseInt(Object(dom_["getStyle"])(document.body, "margin-" + property), 10) + "px";
                  });
                  ["height", "width"].forEach(function(property) {
                    el2.maskStyle[property] = el2.getBoundingClientRect()[property] + "px";
                  });
                  insertDom(document.body, el2, binding);
                } else {
                  el2.originalPosition = Object(dom_["getStyle"])(el2, "position");
                  insertDom(el2, el2, binding);
                }
              }
            });
          } else {
            after_leave_default()(el2.instance, function(_2) {
              if (!el2.instance.hiding)
                return;
              el2.domVisible = false;
              var target2 = binding.modifiers.fullscreen || binding.modifiers.body ? document.body : el2;
              Object(dom_["removeClass"])(target2, "el-loading-parent--relative");
              Object(dom_["removeClass"])(target2, "el-loading-parent--hidden");
              el2.instance.hiding = false;
            }, 300, true);
            el2.instance.visible = false;
            el2.instance.hiding = true;
          }
        };
        var insertDom = function insertDom2(parent, el2, binding) {
          if (!el2.domVisible && Object(dom_["getStyle"])(el2, "display") !== "none" && Object(dom_["getStyle"])(el2, "visibility") !== "hidden") {
            Object.keys(el2.maskStyle).forEach(function(property) {
              el2.mask.style[property] = el2.maskStyle[property];
            });
            if (el2.originalPosition !== "absolute" && el2.originalPosition !== "fixed" && el2.originalPosition !== "sticky") {
              Object(dom_["addClass"])(parent, "el-loading-parent--relative");
            }
            if (binding.modifiers.fullscreen && binding.modifiers.lock) {
              Object(dom_["addClass"])(parent, "el-loading-parent--hidden");
            }
            el2.domVisible = true;
            parent.appendChild(el2.mask);
            Vue2.nextTick(function() {
              if (el2.instance.hiding) {
                el2.instance.$emit("after-leave");
              } else {
                el2.instance.visible = true;
              }
            });
            el2.domInserted = true;
          } else if (el2.domVisible && el2.instance.hiding === true) {
            el2.instance.visible = true;
            el2.instance.hiding = false;
          }
        };
        Vue2.directive("loading", {
          bind: function bind2(el2, binding, vnode) {
            var textExr = el2.getAttribute("element-loading-text");
            var spinnerExr = el2.getAttribute("element-loading-spinner");
            var backgroundExr = el2.getAttribute("element-loading-background");
            var customClassExr = el2.getAttribute("element-loading-custom-class");
            var vm = vnode.context;
            var mask2 = new Mask({
              el: document.createElement("div"),
              data: {
                text: vm && vm[textExr] || textExr,
                spinner: vm && vm[spinnerExr] || spinnerExr,
                background: vm && vm[backgroundExr] || backgroundExr,
                customClass: vm && vm[customClassExr] || customClassExr,
                fullscreen: !!binding.modifiers.fullscreen
              }
            });
            el2.instance = mask2;
            el2.mask = mask2.$el;
            el2.maskStyle = {};
            binding.value && toggleLoading(el2, binding);
          },
          update: function update2(el2, binding) {
            el2.instance.setText(el2.getAttribute("element-loading-text"));
            if (binding.oldValue !== binding.value) {
              toggleLoading(el2, binding);
            }
          },
          unbind: function unbind2(el2, binding) {
            if (el2.domInserted) {
              el2.mask && el2.mask.parentNode && el2.mask.parentNode.removeChild(el2.mask);
              toggleLoading(el2, { value: false, modifiers: binding.modifiers });
            }
            el2.instance && el2.instance.$destroy();
          }
        });
      };
      var directive = loadingDirective;
      var merge_ = __webpack_require__(9);
      var merge_default = /* @__PURE__ */ __webpack_require__.n(merge_);
      var LoadingConstructor = external_vue_default.a.extend(loading2);
      var defaults = {
        text: null,
        fullscreen: true,
        body: false,
        lock: false,
        customClass: ""
      };
      var fullscreenLoading = void 0;
      LoadingConstructor.prototype.originalPosition = "";
      LoadingConstructor.prototype.originalOverflow = "";
      LoadingConstructor.prototype.close = function() {
        var _this = this;
        if (this.fullscreen) {
          fullscreenLoading = void 0;
        }
        after_leave_default()(this, function(_2) {
          var target2 = _this.fullscreen || _this.body ? document.body : _this.target;
          Object(dom_["removeClass"])(target2, "el-loading-parent--relative");
          Object(dom_["removeClass"])(target2, "el-loading-parent--hidden");
          if (_this.$el && _this.$el.parentNode) {
            _this.$el.parentNode.removeChild(_this.$el);
          }
          _this.$destroy();
        }, 300);
        this.visible = false;
      };
      var src_addStyle = function addStyle(options2, parent, instance) {
        var maskStyle = {};
        if (options2.fullscreen) {
          instance.originalPosition = Object(dom_["getStyle"])(document.body, "position");
          instance.originalOverflow = Object(dom_["getStyle"])(document.body, "overflow");
          maskStyle.zIndex = popup_["PopupManager"].nextZIndex();
        } else if (options2.body) {
          instance.originalPosition = Object(dom_["getStyle"])(document.body, "position");
          ["top", "left"].forEach(function(property) {
            var scroll2 = property === "top" ? "scrollTop" : "scrollLeft";
            maskStyle[property] = options2.target.getBoundingClientRect()[property] + document.body[scroll2] + document.documentElement[scroll2] + "px";
          });
          ["height", "width"].forEach(function(property) {
            maskStyle[property] = options2.target.getBoundingClientRect()[property] + "px";
          });
        } else {
          instance.originalPosition = Object(dom_["getStyle"])(parent, "position");
        }
        Object.keys(maskStyle).forEach(function(property) {
          instance.$el.style[property] = maskStyle[property];
        });
      };
      var src_Loading = function Loading() {
        var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        if (external_vue_default.a.prototype.$isServer)
          return;
        options2 = merge_default()({}, defaults, options2);
        if (typeof options2.target === "string") {
          options2.target = document.querySelector(options2.target);
        }
        options2.target = options2.target || document.body;
        if (options2.target !== document.body) {
          options2.fullscreen = false;
        } else {
          options2.body = true;
        }
        if (options2.fullscreen && fullscreenLoading) {
          return fullscreenLoading;
        }
        var parent = options2.body ? document.body : options2.target;
        var instance = new LoadingConstructor({
          el: document.createElement("div"),
          data: options2
        });
        src_addStyle(options2, parent, instance);
        if (instance.originalPosition !== "absolute" && instance.originalPosition !== "fixed" && instance.originalPosition !== "sticky") {
          Object(dom_["addClass"])(parent, "el-loading-parent--relative");
        }
        if (options2.fullscreen && options2.lock) {
          Object(dom_["addClass"])(parent, "el-loading-parent--hidden");
        }
        parent.appendChild(instance.$el);
        external_vue_default.a.nextTick(function() {
          instance.visible = true;
        });
        if (options2.fullscreen) {
          fullscreenLoading = instance;
        }
        return instance;
      };
      var src = src_Loading;
      __webpack_exports__["default"] = {
        install: function install(Vue2) {
          Vue2.use(directive);
          Vue2.prototype.$loading = src;
        },
        directive,
        service: src
      };
    },
    9: function(module2, exports) {
      module2.exports = merge;
    }
  });
})(loading$1);
var loading = /* @__PURE__ */ getDefaultExportFromCjs(loading$1.exports);
var messageBox$1 = { exports: {} };
var vdom = {};
vdom.__esModule = true;
var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
vdom.isVNode = isVNode;
var _util = util$2;
function isVNode(node2) {
  return node2 !== null && (typeof node2 === "undefined" ? "undefined" : _typeof$1(node2)) === "object" && (0, _util.hasOwn)(node2, "componentOptions");
}
var ariaDialog = {};
var ariaUtils = {};
ariaUtils.__esModule = true;
var aria$1 = aria$1 || {};
aria$1.Utils = aria$1.Utils || {};
aria$1.Utils.focusFirstDescendant = function(element) {
  for (var i = 0; i < element.childNodes.length; i++) {
    var child2 = element.childNodes[i];
    if (aria$1.Utils.attemptFocus(child2) || aria$1.Utils.focusFirstDescendant(child2)) {
      return true;
    }
  }
  return false;
};
aria$1.Utils.focusLastDescendant = function(element) {
  for (var i = element.childNodes.length - 1; i >= 0; i--) {
    var child2 = element.childNodes[i];
    if (aria$1.Utils.attemptFocus(child2) || aria$1.Utils.focusLastDescendant(child2)) {
      return true;
    }
  }
  return false;
};
aria$1.Utils.attemptFocus = function(element) {
  if (!aria$1.Utils.isFocusable(element)) {
    return false;
  }
  aria$1.Utils.IgnoreUtilFocusChanges = true;
  try {
    element.focus();
  } catch (e) {
  }
  aria$1.Utils.IgnoreUtilFocusChanges = false;
  return document.activeElement === element;
};
aria$1.Utils.isFocusable = function(element) {
  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
    return true;
  }
  if (element.disabled) {
    return false;
  }
  switch (element.nodeName) {
    case "A":
      return !!element.href && element.rel !== "ignore";
    case "INPUT":
      return element.type !== "hidden" && element.type !== "file";
    case "BUTTON":
    case "SELECT":
    case "TEXTAREA":
      return true;
    default:
      return false;
  }
};
aria$1.Utils.triggerEvent = function(elm, name) {
  var eventName = void 0;
  if (/^mouse|click/.test(name)) {
    eventName = "MouseEvents";
  } else if (/^key/.test(name)) {
    eventName = "KeyboardEvent";
  } else {
    eventName = "HTMLEvents";
  }
  var evt = document.createEvent(eventName);
  for (var _len = arguments.length, opts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    opts[_key - 2] = arguments[_key];
  }
  evt.initEvent.apply(evt, [name].concat(opts));
  elm.dispatchEvent ? elm.dispatchEvent(evt) : elm.fireEvent("on" + name, evt);
  return elm;
};
aria$1.Utils.keys = {
  tab: 9,
  enter: 13,
  space: 32,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  esc: 27
};
ariaUtils.default = aria$1.Utils;
ariaDialog.__esModule = true;
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var _ariaUtils = ariaUtils;
var _ariaUtils2 = _interopRequireDefault(_ariaUtils);
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var aria = aria || {};
var tabEvent;
aria.Dialog = function(dialog2, focusAfterClosed, focusFirst) {
  var _this = this;
  this.dialogNode = dialog2;
  if (this.dialogNode === null || this.dialogNode.getAttribute("role") !== "dialog") {
    throw new Error("Dialog() requires a DOM element with ARIA role of dialog.");
  }
  if (typeof focusAfterClosed === "string") {
    this.focusAfterClosed = document.getElementById(focusAfterClosed);
  } else if ((typeof focusAfterClosed === "undefined" ? "undefined" : _typeof(focusAfterClosed)) === "object") {
    this.focusAfterClosed = focusAfterClosed;
  } else {
    this.focusAfterClosed = null;
  }
  if (typeof focusFirst === "string") {
    this.focusFirst = document.getElementById(focusFirst);
  } else if ((typeof focusFirst === "undefined" ? "undefined" : _typeof(focusFirst)) === "object") {
    this.focusFirst = focusFirst;
  } else {
    this.focusFirst = null;
  }
  if (this.focusFirst) {
    this.focusFirst.focus();
  } else {
    _ariaUtils2.default.focusFirstDescendant(this.dialogNode);
  }
  this.lastFocus = document.activeElement;
  tabEvent = function tabEvent2(e) {
    _this.trapFocus(e);
  };
  this.addListeners();
};
aria.Dialog.prototype.addListeners = function() {
  document.addEventListener("focus", tabEvent, true);
};
aria.Dialog.prototype.removeListeners = function() {
  document.removeEventListener("focus", tabEvent, true);
};
aria.Dialog.prototype.closeDialog = function() {
  var _this2 = this;
  this.removeListeners();
  if (this.focusAfterClosed) {
    setTimeout(function() {
      _this2.focusAfterClosed.focus();
    });
  }
};
aria.Dialog.prototype.trapFocus = function(event) {
  if (_ariaUtils2.default.IgnoreUtilFocusChanges) {
    return;
  }
  if (this.dialogNode.contains(event.target)) {
    this.lastFocus = event.target;
  } else {
    _ariaUtils2.default.focusFirstDescendant(this.dialogNode);
    if (this.lastFocus === document.activeElement) {
      _ariaUtils2.default.focusLastDescendant(this.dialogNode);
    }
    this.lastFocus = document.activeElement;
  }
};
ariaDialog.default = aria.Dialog;
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 78);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    10: function(module2, exports) {
      module2.exports = input$2.exports;
    },
    13: function(module2, exports) {
      module2.exports = popup;
    },
    14: function(module2, exports) {
      module2.exports = button$3.exports;
    },
    2: function(module2, exports) {
      module2.exports = dom;
    },
    20: function(module2, exports) {
      module2.exports = locale$1;
    },
    23: function(module2, exports) {
      module2.exports = vdom;
    },
    47: function(module2, exports) {
      module2.exports = ariaDialog;
    },
    6: function(module2, exports) {
      module2.exports = locale;
    },
    7: function(module2, exports) {
      module2.exports = Vue;
    },
    78: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var external_vue_ = __webpack_require__(7);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "msgbox-fade" } }, [
          _c(
            "div",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.visible,
                  expression: "visible"
                }
              ],
              staticClass: "el-message-box__wrapper",
              attrs: {
                tabindex: "-1",
                role: "dialog",
                "aria-modal": "true",
                "aria-label": _vm.title || "dialog"
              },
              on: {
                click: function($event) {
                  if ($event.target !== $event.currentTarget) {
                    return null;
                  }
                  return _vm.handleWrapperClick($event);
                }
              }
            },
            [
              _c(
                "div",
                {
                  staticClass: "el-message-box",
                  class: [_vm.customClass, _vm.center && "el-message-box--center"]
                },
                [
                  _vm.title !== null ? _c("div", { staticClass: "el-message-box__header" }, [
                    _c("div", { staticClass: "el-message-box__title" }, [
                      _vm.icon && _vm.center ? _c("div", {
                        class: ["el-message-box__status", _vm.icon]
                      }) : _vm._e(),
                      _c("span", [_vm._v(_vm._s(_vm.title))])
                    ]),
                    _vm.showClose ? _c(
                      "button",
                      {
                        staticClass: "el-message-box__headerbtn",
                        attrs: { type: "button", "aria-label": "Close" },
                        on: {
                          click: function($event) {
                            _vm.handleAction(
                              _vm.distinguishCancelAndClose ? "close" : "cancel"
                            );
                          },
                          keydown: function($event) {
                            if (!("button" in $event) && _vm._k(
                              $event.keyCode,
                              "enter",
                              13,
                              $event.key,
                              "Enter"
                            )) {
                              return null;
                            }
                            _vm.handleAction(
                              _vm.distinguishCancelAndClose ? "close" : "cancel"
                            );
                          }
                        }
                      },
                      [
                        _c("i", {
                          staticClass: "el-message-box__close el-icon-close"
                        })
                      ]
                    ) : _vm._e()
                  ]) : _vm._e(),
                  _c("div", { staticClass: "el-message-box__content" }, [
                    _c("div", { staticClass: "el-message-box__container" }, [
                      _vm.icon && !_vm.center && _vm.message !== "" ? _c("div", { class: ["el-message-box__status", _vm.icon] }) : _vm._e(),
                      _vm.message !== "" ? _c(
                        "div",
                        { staticClass: "el-message-box__message" },
                        [
                          _vm._t("default", [
                            !_vm.dangerouslyUseHTMLString ? _c("p", [_vm._v(_vm._s(_vm.message))]) : _c("p", {
                              domProps: { innerHTML: _vm._s(_vm.message) }
                            })
                          ])
                        ],
                        2
                      ) : _vm._e()
                    ]),
                    _c(
                      "div",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.showInput,
                            expression: "showInput"
                          }
                        ],
                        staticClass: "el-message-box__input"
                      },
                      [
                        _c("el-input", {
                          ref: "input",
                          attrs: {
                            type: _vm.inputType,
                            placeholder: _vm.inputPlaceholder
                          },
                          nativeOn: {
                            keydown: function($event) {
                              if (!("button" in $event) && _vm._k(
                                $event.keyCode,
                                "enter",
                                13,
                                $event.key,
                                "Enter"
                              )) {
                                return null;
                              }
                              return _vm.handleInputEnter($event);
                            }
                          },
                          model: {
                            value: _vm.inputValue,
                            callback: function($$v) {
                              _vm.inputValue = $$v;
                            },
                            expression: "inputValue"
                          }
                        }),
                        _c(
                          "div",
                          {
                            staticClass: "el-message-box__errormsg",
                            style: {
                              visibility: !!_vm.editorErrorMessage ? "visible" : "hidden"
                            }
                          },
                          [_vm._v(_vm._s(_vm.editorErrorMessage))]
                        )
                      ],
                      1
                    )
                  ]),
                  _c(
                    "div",
                    { staticClass: "el-message-box__btns" },
                    [
                      _vm.showCancelButton ? _c(
                        "el-button",
                        {
                          class: [_vm.cancelButtonClasses],
                          attrs: {
                            loading: _vm.cancelButtonLoading,
                            round: _vm.roundButton,
                            size: "small"
                          },
                          on: {
                            keydown: function($event) {
                              if (!("button" in $event) && _vm._k(
                                $event.keyCode,
                                "enter",
                                13,
                                $event.key,
                                "Enter"
                              )) {
                                return null;
                              }
                              _vm.handleAction("cancel");
                            }
                          },
                          nativeOn: {
                            click: function($event) {
                              _vm.handleAction("cancel");
                            }
                          }
                        },
                        [
                          _vm._v(
                            "\n          " + _vm._s(
                              _vm.cancelButtonText || _vm.t("el.messagebox.cancel")
                            ) + "\n        "
                          )
                        ]
                      ) : _vm._e(),
                      _c(
                        "el-button",
                        {
                          directives: [
                            {
                              name: "show",
                              rawName: "v-show",
                              value: _vm.showConfirmButton,
                              expression: "showConfirmButton"
                            }
                          ],
                          ref: "confirm",
                          class: [_vm.confirmButtonClasses],
                          attrs: {
                            loading: _vm.confirmButtonLoading,
                            round: _vm.roundButton,
                            size: "small"
                          },
                          on: {
                            keydown: function($event) {
                              if (!("button" in $event) && _vm._k(
                                $event.keyCode,
                                "enter",
                                13,
                                $event.key,
                                "Enter"
                              )) {
                                return null;
                              }
                              _vm.handleAction("confirm");
                            }
                          },
                          nativeOn: {
                            click: function($event) {
                              _vm.handleAction("confirm");
                            }
                          }
                        },
                        [
                          _vm._v(
                            "\n          " + _vm._s(
                              _vm.confirmButtonText || _vm.t("el.messagebox.confirm")
                            ) + "\n        "
                          )
                        ]
                      )
                    ],
                    1
                  )
                ]
              )
            ]
          )
        ]);
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var popup_ = __webpack_require__(13);
      var popup_default = /* @__PURE__ */ __webpack_require__.n(popup_);
      var locale_ = __webpack_require__(6);
      var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
      var input_ = __webpack_require__(10);
      var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
      var button_ = __webpack_require__(14);
      var button_default = /* @__PURE__ */ __webpack_require__.n(button_);
      var dom_ = __webpack_require__(2);
      var lib_locale_ = __webpack_require__(20);
      var aria_dialog_ = __webpack_require__(47);
      var aria_dialog_default = /* @__PURE__ */ __webpack_require__.n(aria_dialog_);
      var messageBox2 = void 0;
      var typeMap = {
        success: "success",
        info: "info",
        warning: "warning",
        error: "error"
      };
      var mainvue_type_script_lang_js_ = {
        mixins: [popup_default.a, locale_default.a],
        props: {
          modal: {
            default: true
          },
          lockScroll: {
            default: true
          },
          showClose: {
            type: Boolean,
            default: true
          },
          closeOnClickModal: {
            default: true
          },
          closeOnPressEscape: {
            default: true
          },
          closeOnHashChange: {
            default: true
          },
          center: {
            default: false,
            type: Boolean
          },
          roundButton: {
            default: false,
            type: Boolean
          }
        },
        components: {
          ElInput: input_default.a,
          ElButton: button_default.a
        },
        computed: {
          icon: function icon2() {
            var type = this.type, iconClass = this.iconClass;
            return iconClass || (type && typeMap[type] ? "el-icon-" + typeMap[type] : "");
          },
          confirmButtonClasses: function confirmButtonClasses() {
            return "el-button--primary " + this.confirmButtonClass;
          },
          cancelButtonClasses: function cancelButtonClasses() {
            return "" + this.cancelButtonClass;
          }
        },
        methods: {
          getSafeClose: function getSafeClose() {
            var _this = this;
            var currentId = this.uid;
            return function() {
              _this.$nextTick(function() {
                if (currentId === _this.uid)
                  _this.doClose();
              });
            };
          },
          doClose: function doClose2() {
            var _this2 = this;
            if (!this.visible)
              return;
            this.visible = false;
            this._closing = true;
            this.onClose && this.onClose();
            messageBox2.closeDialog();
            if (this.lockScroll) {
              setTimeout(this.restoreBodyStyle, 200);
            }
            this.opened = false;
            this.doAfterClose();
            setTimeout(function() {
              if (_this2.action)
                _this2.callback(_this2.action, _this2);
            });
          },
          handleWrapperClick: function handleWrapperClick() {
            if (this.closeOnClickModal) {
              this.handleAction(this.distinguishCancelAndClose ? "close" : "cancel");
            }
          },
          handleInputEnter: function handleInputEnter() {
            if (this.inputType !== "textarea") {
              return this.handleAction("confirm");
            }
          },
          handleAction: function handleAction(action) {
            if (this.$type === "prompt" && action === "confirm" && !this.validate()) {
              return;
            }
            this.action = action;
            if (typeof this.beforeClose === "function") {
              this.close = this.getSafeClose();
              this.beforeClose(action, this, this.close);
            } else {
              this.doClose();
            }
          },
          validate: function validate() {
            if (this.$type === "prompt") {
              var inputPattern = this.inputPattern;
              if (inputPattern && !inputPattern.test(this.inputValue || "")) {
                this.editorErrorMessage = this.inputErrorMessage || Object(lib_locale_["t"])("el.messagebox.error");
                Object(dom_["addClass"])(this.getInputElement(), "invalid");
                return false;
              }
              var inputValidator = this.inputValidator;
              if (typeof inputValidator === "function") {
                var validateResult = inputValidator(this.inputValue);
                if (validateResult === false) {
                  this.editorErrorMessage = this.inputErrorMessage || Object(lib_locale_["t"])("el.messagebox.error");
                  Object(dom_["addClass"])(this.getInputElement(), "invalid");
                  return false;
                }
                if (typeof validateResult === "string") {
                  this.editorErrorMessage = validateResult;
                  Object(dom_["addClass"])(this.getInputElement(), "invalid");
                  return false;
                }
              }
            }
            this.editorErrorMessage = "";
            Object(dom_["removeClass"])(this.getInputElement(), "invalid");
            return true;
          },
          getFirstFocus: function getFirstFocus() {
            var btn = this.$el.querySelector(".el-message-box__btns .el-button");
            var title2 = this.$el.querySelector(".el-message-box__btns .el-message-box__title");
            return btn || title2;
          },
          getInputElement: function getInputElement() {
            var inputRefs = this.$refs.input.$refs;
            return inputRefs.input || inputRefs.textarea;
          },
          handleClose: function handleClose() {
            this.handleAction("close");
          }
        },
        watch: {
          inputValue: {
            immediate: true,
            handler: function handler2(val) {
              var _this3 = this;
              this.$nextTick(function(_2) {
                if (_this3.$type === "prompt" && val !== null) {
                  _this3.validate();
                }
              });
            }
          },
          visible: function visible3(val) {
            var _this4 = this;
            if (val) {
              this.uid++;
              if (this.$type === "alert" || this.$type === "confirm") {
                this.$nextTick(function() {
                  _this4.$refs.confirm.$el.focus();
                });
              }
              this.focusAfterClosed = document.activeElement;
              messageBox2 = new aria_dialog_default.a(this.$el, this.focusAfterClosed, this.getFirstFocus());
            }
            if (this.$type !== "prompt")
              return;
            if (val) {
              setTimeout(function() {
                if (_this4.$refs.input && _this4.$refs.input.$el) {
                  _this4.getInputElement().focus();
                }
              }, 500);
            } else {
              this.editorErrorMessage = "";
              Object(dom_["removeClass"])(this.getInputElement(), "invalid");
            }
          }
        },
        mounted: function mounted2() {
          var _this5 = this;
          this.$nextTick(function() {
            if (_this5.closeOnHashChange) {
              window.addEventListener("hashchange", _this5.close);
            }
          });
        },
        beforeDestroy: function beforeDestroy3() {
          if (this.closeOnHashChange) {
            window.removeEventListener("hashchange", this.close);
          }
          setTimeout(function() {
            messageBox2.closeDialog();
          });
        },
        data: function data3() {
          return {
            uid: 1,
            title: void 0,
            message: "",
            type: "",
            iconClass: "",
            customClass: "",
            showInput: false,
            inputValue: null,
            inputPlaceholder: "",
            inputType: "text",
            inputPattern: null,
            inputValidator: null,
            inputErrorMessage: "",
            showConfirmButton: true,
            showCancelButton: false,
            action: "",
            confirmButtonText: "",
            cancelButtonText: "",
            confirmButtonLoading: false,
            cancelButtonLoading: false,
            confirmButtonClass: "",
            confirmButtonDisabled: false,
            cancelButtonClass: "",
            editorErrorMessage: null,
            callback: null,
            dangerouslyUseHTMLString: false,
            focusAfterClosed: null,
            isOnComposition: false,
            distinguishCancelAndClose: false
          };
        }
      };
      var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_mainvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/message-box/src/main.vue";
      var main = component.exports;
      var merge_ = __webpack_require__(9);
      var merge_default = /* @__PURE__ */ __webpack_require__.n(merge_);
      var vdom_ = __webpack_require__(23);
      var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var defaults = {
        title: null,
        message: "",
        type: "",
        iconClass: "",
        showInput: false,
        showClose: true,
        modalFade: true,
        lockScroll: true,
        closeOnClickModal: true,
        closeOnPressEscape: true,
        closeOnHashChange: true,
        inputValue: null,
        inputPlaceholder: "",
        inputType: "text",
        inputPattern: null,
        inputValidator: null,
        inputErrorMessage: "",
        showConfirmButton: true,
        showCancelButton: false,
        confirmButtonPosition: "right",
        confirmButtonHighlight: false,
        cancelButtonHighlight: false,
        confirmButtonText: "",
        cancelButtonText: "",
        confirmButtonClass: "",
        cancelButtonClass: "",
        customClass: "",
        beforeClose: null,
        dangerouslyUseHTMLString: false,
        center: false,
        roundButton: false,
        distinguishCancelAndClose: false
      };
      var MessageBoxConstructor = external_vue_default.a.extend(main);
      var currentMsg = void 0, instance = void 0;
      var msgQueue = [];
      var defaultCallback = function defaultCallback2(action) {
        if (currentMsg) {
          var callback = currentMsg.callback;
          if (typeof callback === "function") {
            if (instance.showInput) {
              callback(instance.inputValue, action);
            } else {
              callback(action);
            }
          }
          if (currentMsg.resolve) {
            if (action === "confirm") {
              if (instance.showInput) {
                currentMsg.resolve({ value: instance.inputValue, action });
              } else {
                currentMsg.resolve(action);
              }
            } else if (currentMsg.reject && (action === "cancel" || action === "close")) {
              currentMsg.reject(action);
            }
          }
        }
      };
      var initInstance = function initInstance2() {
        instance = new MessageBoxConstructor({
          el: document.createElement("div")
        });
        instance.callback = defaultCallback;
      };
      var main_showNextMsg = function showNextMsg() {
        if (!instance) {
          initInstance();
        }
        instance.action = "";
        if (!instance.visible || instance.closeTimer) {
          if (msgQueue.length > 0) {
            currentMsg = msgQueue.shift();
            var options2 = currentMsg.options;
            for (var prop2 in options2) {
              if (options2.hasOwnProperty(prop2)) {
                instance[prop2] = options2[prop2];
              }
            }
            if (options2.callback === void 0) {
              instance.callback = defaultCallback;
            }
            var oldCb = instance.callback;
            instance.callback = function(action, instance2) {
              oldCb(action, instance2);
              showNextMsg();
            };
            if (Object(vdom_["isVNode"])(instance.message)) {
              instance.$slots.default = [instance.message];
              instance.message = null;
            } else {
              delete instance.$slots.default;
            }
            ["modal", "showClose", "closeOnClickModal", "closeOnPressEscape", "closeOnHashChange"].forEach(function(prop3) {
              if (instance[prop3] === void 0) {
                instance[prop3] = true;
              }
            });
            document.body.appendChild(instance.$el);
            external_vue_default.a.nextTick(function() {
              instance.visible = true;
            });
          }
        }
      };
      var main_MessageBox = function MessageBox(options2, callback) {
        if (external_vue_default.a.prototype.$isServer)
          return;
        if (typeof options2 === "string" || Object(vdom_["isVNode"])(options2)) {
          options2 = {
            message: options2
          };
          if (typeof arguments[1] === "string") {
            options2.title = arguments[1];
          }
        } else if (options2.callback && !callback) {
          callback = options2.callback;
        }
        if (typeof Promise !== "undefined") {
          return new Promise(function(resolve2, reject2) {
            msgQueue.push({
              options: merge_default()({}, defaults, MessageBox.defaults, options2),
              callback,
              resolve: resolve2,
              reject: reject2
            });
            main_showNextMsg();
          });
        } else {
          msgQueue.push({
            options: merge_default()({}, defaults, MessageBox.defaults, options2),
            callback
          });
          main_showNextMsg();
        }
      };
      main_MessageBox.setDefaults = function(defaults2) {
        main_MessageBox.defaults = defaults2;
      };
      main_MessageBox.alert = function(message2, title2, options2) {
        if ((typeof title2 === "undefined" ? "undefined" : _typeof2(title2)) === "object") {
          options2 = title2;
          title2 = "";
        } else if (title2 === void 0) {
          title2 = "";
        }
        return main_MessageBox(merge_default()({
          title: title2,
          message: message2,
          $type: "alert",
          closeOnPressEscape: false,
          closeOnClickModal: false
        }, options2));
      };
      main_MessageBox.confirm = function(message2, title2, options2) {
        if ((typeof title2 === "undefined" ? "undefined" : _typeof2(title2)) === "object") {
          options2 = title2;
          title2 = "";
        } else if (title2 === void 0) {
          title2 = "";
        }
        return main_MessageBox(merge_default()({
          title: title2,
          message: message2,
          $type: "confirm",
          showCancelButton: true
        }, options2));
      };
      main_MessageBox.prompt = function(message2, title2, options2) {
        if ((typeof title2 === "undefined" ? "undefined" : _typeof2(title2)) === "object") {
          options2 = title2;
          title2 = "";
        } else if (title2 === void 0) {
          title2 = "";
        }
        return main_MessageBox(merge_default()({
          title: title2,
          message: message2,
          showCancelButton: true,
          showInput: true,
          $type: "prompt"
        }, options2));
      };
      main_MessageBox.close = function() {
        instance.doClose();
        instance.visible = false;
        msgQueue = [];
        currentMsg = null;
      };
      var src_main = main_MessageBox;
      __webpack_exports__["default"] = src_main;
    },
    9: function(module2, exports) {
      module2.exports = merge;
    }
  });
})(messageBox$1);
var messageBox = /* @__PURE__ */ getDefaultExportFromCjs(messageBox$1.exports);
var message$1 = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 80);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    13: function(module2, exports) {
      module2.exports = popup;
    },
    17: function(module2, exports) {
      module2.exports = types;
    },
    23: function(module2, exports) {
      module2.exports = vdom;
    },
    7: function(module2, exports) {
      module2.exports = Vue;
    },
    80: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var external_vue_ = __webpack_require__(7);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-message-fade" },
            on: { "after-leave": _vm.handleAfterLeave }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                class: [
                  "el-message",
                  _vm.type && !_vm.iconClass ? "el-message--" + _vm.type : "",
                  _vm.center ? "is-center" : "",
                  _vm.showClose ? "is-closable" : "",
                  _vm.customClass
                ],
                style: _vm.positionStyle,
                attrs: { role: "alert" },
                on: { mouseenter: _vm.clearTimer, mouseleave: _vm.startTimer }
              },
              [
                _vm.iconClass ? _c("i", { class: _vm.iconClass }) : _c("i", { class: _vm.typeClass }),
                _vm._t("default", [
                  !_vm.dangerouslyUseHTMLString ? _c("p", { staticClass: "el-message__content" }, [
                    _vm._v(_vm._s(_vm.message))
                  ]) : _c("p", {
                    staticClass: "el-message__content",
                    domProps: { innerHTML: _vm._s(_vm.message) }
                  })
                ]),
                _vm.showClose ? _c("i", {
                  staticClass: "el-message__closeBtn el-icon-close",
                  on: { click: _vm.close }
                }) : _vm._e()
              ],
              2
            )
          ]
        );
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var typeMap = {
        success: "success",
        info: "info",
        warning: "warning",
        error: "error"
      };
      var mainvue_type_script_lang_js_ = {
        data: function data3() {
          return {
            visible: false,
            message: "",
            duration: 3e3,
            type: "info",
            iconClass: "",
            customClass: "",
            onClose: null,
            showClose: false,
            closed: false,
            verticalOffset: 20,
            timer: null,
            dangerouslyUseHTMLString: false,
            center: false
          };
        },
        computed: {
          typeClass: function typeClass() {
            return this.type && !this.iconClass ? "el-message__icon el-icon-" + typeMap[this.type] : "";
          },
          positionStyle: function positionStyle() {
            return {
              "top": this.verticalOffset + "px"
            };
          }
        },
        watch: {
          closed: function closed(newVal) {
            if (newVal) {
              this.visible = false;
            }
          }
        },
        methods: {
          handleAfterLeave: function handleAfterLeave() {
            this.$destroy(true);
            this.$el.parentNode.removeChild(this.$el);
          },
          close: function close2() {
            this.closed = true;
            if (typeof this.onClose === "function") {
              this.onClose(this);
            }
          },
          clearTimer: function clearTimer() {
            clearTimeout(this.timer);
          },
          startTimer: function startTimer() {
            var _this = this;
            if (this.duration > 0) {
              this.timer = setTimeout(function() {
                if (!_this.closed) {
                  _this.close();
                }
              }, this.duration);
            }
          },
          keydown: function keydown(e) {
            if (e.keyCode === 27) {
              if (!this.closed) {
                this.close();
              }
            }
          }
        },
        mounted: function mounted2() {
          this.startTimer();
          document.addEventListener("keydown", this.keydown);
        },
        beforeDestroy: function beforeDestroy3() {
          document.removeEventListener("keydown", this.keydown);
        }
      };
      var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_mainvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/message/src/main.vue";
      var main = component.exports;
      var popup_ = __webpack_require__(13);
      var vdom_ = __webpack_require__(23);
      var types_ = __webpack_require__(17);
      var _extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key2 in source) {
            if (Object.prototype.hasOwnProperty.call(source, key2)) {
              target2[key2] = source[key2];
            }
          }
        }
        return target2;
      };
      var MessageConstructor = external_vue_default.a.extend(main);
      var instance = void 0;
      var instances2 = [];
      var seed2 = 1;
      var main_Message = function Message(options2) {
        if (external_vue_default.a.prototype.$isServer)
          return;
        options2 = options2 || {};
        if (typeof options2 === "string") {
          options2 = {
            message: options2
          };
        }
        var userOnClose = options2.onClose;
        var id2 = "message_" + seed2++;
        options2.onClose = function() {
          Message.close(id2, userOnClose);
        };
        instance = new MessageConstructor({
          data: options2
        });
        instance.id = id2;
        if (Object(vdom_["isVNode"])(instance.message)) {
          instance.$slots.default = [instance.message];
          instance.message = null;
        }
        instance.$mount();
        document.body.appendChild(instance.$el);
        var verticalOffset = options2.offset || 20;
        instances2.forEach(function(item2) {
          verticalOffset += item2.$el.offsetHeight + 16;
        });
        instance.verticalOffset = verticalOffset;
        instance.visible = true;
        instance.$el.style.zIndex = popup_["PopupManager"].nextZIndex();
        instances2.push(instance);
        return instance;
      };
      ["success", "warning", "info", "error"].forEach(function(type) {
        main_Message[type] = function(options2) {
          if (Object(types_["isObject"])(options2) && !Object(vdom_["isVNode"])(options2)) {
            return main_Message(_extends({}, options2, {
              type
            }));
          }
          return main_Message({
            type,
            message: options2
          });
        };
      });
      main_Message.close = function(id2, userOnClose) {
        var len = instances2.length;
        var index2 = -1;
        var removedHeight = void 0;
        for (var i = 0; i < len; i++) {
          if (id2 === instances2[i].id) {
            removedHeight = instances2[i].$el.offsetHeight;
            index2 = i;
            if (typeof userOnClose === "function") {
              userOnClose(instances2[i]);
            }
            instances2.splice(i, 1);
            break;
          }
        }
        if (len <= 1 || index2 === -1 || index2 > instances2.length - 1)
          return;
        for (var _i = index2; _i < len - 1; _i++) {
          var dom2 = instances2[_i].$el;
          dom2.style["top"] = parseInt(dom2.style["top"], 10) - removedHeight - 16 + "px";
        }
      };
      main_Message.closeAll = function() {
        for (var i = instances2.length - 1; i >= 0; i--) {
          instances2[i].close();
        }
      };
      var src_main = main_Message;
      __webpack_exports__["default"] = src_main;
    }
  });
})(message$1);
var message = /* @__PURE__ */ getDefaultExportFromCjs(message$1.exports);
var notification$1 = { exports: {} };
(function(module) {
  module.exports = function(modules) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        i: moduleId,
        l: false,
        exports: {}
      };
      modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key2 in value)
          __webpack_require__.d(ns, key2, function(key3) {
            return value[key3];
          }.bind(null, key2));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? function getDefault() {
        return module2["default"];
      } : function getModuleExports() {
        return module2;
      };
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 79);
  }({
    0: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.d(__webpack_exports__, "a", function() {
        return normalizeComponent2;
      });
      function normalizeComponent2(scriptExports, render50, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options2 = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render50) {
          options2.render = render50;
          options2.staticRenderFns = staticRenderFns;
          options2._compiled = true;
        }
        if (functionalTemplate) {
          options2.functional = true;
        }
        if (scopeId) {
          options2._scopeId = "data-v-" + scopeId;
        }
        var hook2;
        if (moduleIdentifier) {
          hook2 = function(context) {
            context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options2._ssrRegister = hook2;
        } else if (injectStyles) {
          hook2 = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook2) {
          if (options2.functional) {
            options2._injectStyles = hook2;
            var originalRender = options2.render;
            options2.render = function renderWithStyleInjection(h, context) {
              hook2.call(context);
              return originalRender(h, context);
            };
          } else {
            var existing = options2.beforeCreate;
            options2.beforeCreate = existing ? [].concat(existing, hook2) : [hook2];
          }
        }
        return {
          exports: scriptExports,
          options: options2
        };
      }
    },
    13: function(module2, exports) {
      module2.exports = popup;
    },
    23: function(module2, exports) {
      module2.exports = vdom;
    },
    7: function(module2, exports) {
      module2.exports = Vue;
    },
    79: function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var external_vue_ = __webpack_require__(7);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      var render50 = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-notification-fade" } }, [
          _c(
            "div",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.visible,
                  expression: "visible"
                }
              ],
              class: ["el-notification", _vm.customClass, _vm.horizontalClass],
              style: _vm.positionStyle,
              attrs: { role: "alert" },
              on: {
                mouseenter: function($event) {
                  _vm.clearTimer();
                },
                mouseleave: function($event) {
                  _vm.startTimer();
                },
                click: _vm.click
              }
            },
            [
              _vm.type || _vm.iconClass ? _c("i", {
                staticClass: "el-notification__icon",
                class: [_vm.typeClass, _vm.iconClass]
              }) : _vm._e(),
              _c(
                "div",
                {
                  staticClass: "el-notification__group",
                  class: { "is-with-icon": _vm.typeClass || _vm.iconClass }
                },
                [
                  _c("h2", {
                    staticClass: "el-notification__title",
                    domProps: { textContent: _vm._s(_vm.title) }
                  }),
                  _c(
                    "div",
                    {
                      directives: [
                        {
                          name: "show",
                          rawName: "v-show",
                          value: _vm.message,
                          expression: "message"
                        }
                      ],
                      staticClass: "el-notification__content"
                    },
                    [
                      _vm._t("default", [
                        !_vm.dangerouslyUseHTMLString ? _c("p", [_vm._v(_vm._s(_vm.message))]) : _c("p", { domProps: { innerHTML: _vm._s(_vm.message) } })
                      ])
                    ],
                    2
                  ),
                  _vm.showClose ? _c("div", {
                    staticClass: "el-notification__closeBtn el-icon-close",
                    on: {
                      click: function($event) {
                        $event.stopPropagation();
                        return _vm.close($event);
                      }
                    }
                  }) : _vm._e()
                ]
              )
            ]
          )
        ]);
      };
      var staticRenderFns = [];
      render50._withStripped = true;
      var typeMap = {
        success: "success",
        info: "info",
        warning: "warning",
        error: "error"
      };
      var mainvue_type_script_lang_js_ = {
        data: function data3() {
          return {
            visible: false,
            title: "",
            message: "",
            duration: 4500,
            type: "",
            showClose: true,
            customClass: "",
            iconClass: "",
            onClose: null,
            onClick: null,
            closed: false,
            verticalOffset: 0,
            timer: null,
            dangerouslyUseHTMLString: false,
            position: "top-right"
          };
        },
        computed: {
          typeClass: function typeClass() {
            return this.type && typeMap[this.type] ? "el-icon-" + typeMap[this.type] : "";
          },
          horizontalClass: function horizontalClass() {
            return this.position.indexOf("right") > -1 ? "right" : "left";
          },
          verticalProperty: function verticalProperty() {
            return /^top-/.test(this.position) ? "top" : "bottom";
          },
          positionStyle: function positionStyle() {
            var _ref2;
            return _ref2 = {}, _ref2[this.verticalProperty] = this.verticalOffset + "px", _ref2;
          }
        },
        watch: {
          closed: function closed(newVal) {
            if (newVal) {
              this.visible = false;
              this.$el.addEventListener("transitionend", this.destroyElement);
            }
          }
        },
        methods: {
          destroyElement: function destroyElement() {
            this.$el.removeEventListener("transitionend", this.destroyElement);
            this.$destroy(true);
            this.$el.parentNode.removeChild(this.$el);
          },
          click: function click() {
            if (typeof this.onClick === "function") {
              this.onClick();
            }
          },
          close: function close2() {
            this.closed = true;
            if (typeof this.onClose === "function") {
              this.onClose();
            }
          },
          clearTimer: function clearTimer() {
            clearTimeout(this.timer);
          },
          startTimer: function startTimer() {
            var _this = this;
            if (this.duration > 0) {
              this.timer = setTimeout(function() {
                if (!_this.closed) {
                  _this.close();
                }
              }, this.duration);
            }
          },
          keydown: function keydown(e) {
            if (e.keyCode === 46 || e.keyCode === 8) {
              this.clearTimer();
            } else if (e.keyCode === 27) {
              if (!this.closed) {
                this.close();
              }
            } else {
              this.startTimer();
            }
          }
        },
        mounted: function mounted2() {
          var _this2 = this;
          if (this.duration > 0) {
            this.timer = setTimeout(function() {
              if (!_this2.closed) {
                _this2.close();
              }
            }, this.duration);
          }
          document.addEventListener("keydown", this.keydown);
        },
        beforeDestroy: function beforeDestroy3() {
          document.removeEventListener("keydown", this.keydown);
        }
      };
      var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
      var componentNormalizer = __webpack_require__(0);
      var component = Object(componentNormalizer["a"])(
        src_mainvue_type_script_lang_js_,
        render50,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/notification/src/main.vue";
      var main = component.exports;
      var merge_ = __webpack_require__(9);
      var merge_default = /* @__PURE__ */ __webpack_require__.n(merge_);
      var popup_ = __webpack_require__(13);
      var vdom_ = __webpack_require__(23);
      var NotificationConstructor = external_vue_default.a.extend(main);
      var instance = void 0;
      var instances2 = [];
      var seed2 = 1;
      var main_Notification = function Notification(options2) {
        if (external_vue_default.a.prototype.$isServer)
          return;
        options2 = merge_default()({}, options2);
        var userOnClose = options2.onClose;
        var id2 = "notification_" + seed2++;
        var position = options2.position || "top-right";
        options2.onClose = function() {
          Notification.close(id2, userOnClose);
        };
        instance = new NotificationConstructor({
          data: options2
        });
        if (Object(vdom_["isVNode"])(options2.message)) {
          instance.$slots.default = [options2.message];
          options2.message = "REPLACED_BY_VNODE";
        }
        instance.id = id2;
        instance.$mount();
        document.body.appendChild(instance.$el);
        instance.visible = true;
        instance.dom = instance.$el;
        instance.dom.style.zIndex = popup_["PopupManager"].nextZIndex();
        var verticalOffset = options2.offset || 0;
        instances2.filter(function(item2) {
          return item2.position === position;
        }).forEach(function(item2) {
          verticalOffset += item2.$el.offsetHeight + 16;
        });
        verticalOffset += 16;
        instance.verticalOffset = verticalOffset;
        instances2.push(instance);
        return instance;
      };
      ["success", "warning", "info", "error"].forEach(function(type) {
        main_Notification[type] = function(options2) {
          if (typeof options2 === "string" || Object(vdom_["isVNode"])(options2)) {
            options2 = {
              message: options2
            };
          }
          options2.type = type;
          return main_Notification(options2);
        };
      });
      main_Notification.close = function(id2, userOnClose) {
        var index2 = -1;
        var len = instances2.length;
        var instance2 = instances2.filter(function(instance3, i2) {
          if (instance3.id === id2) {
            index2 = i2;
            return true;
          }
          return false;
        })[0];
        if (!instance2)
          return;
        if (typeof userOnClose === "function") {
          userOnClose(instance2);
        }
        instances2.splice(index2, 1);
        if (len <= 1)
          return;
        var position = instance2.position;
        var removedHeight = instance2.dom.offsetHeight;
        for (var i = index2; i < len - 1; i++) {
          if (instances2[i].position === position) {
            instances2[i].dom.style[instance2.verticalProperty] = parseInt(instances2[i].dom.style[instance2.verticalProperty], 10) - removedHeight - 16 + "px";
          }
        }
      };
      main_Notification.closeAll = function() {
        for (var i = instances2.length - 1; i >= 0; i--) {
          instances2[i].close();
        }
      };
      var src_main = main_Notification;
      __webpack_exports__["default"] = src_main;
    },
    9: function(module2, exports) {
      module2.exports = merge;
    }
  });
})(notification$1);
var notification = /* @__PURE__ */ getDefaultExportFromCjs(notification$1.exports);
export { loading as Loading, message as Message, messageBox as MessageBox, notification as Notification, n8nComponents as designSystemComponents, elementUIComponents, index$2 as locale };
