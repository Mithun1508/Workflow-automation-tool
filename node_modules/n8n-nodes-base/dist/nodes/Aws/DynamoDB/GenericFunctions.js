"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyInputItem = exports.awsApiRequestAllItems = exports.awsApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
async function awsApiRequest(service, method, path, body, headers) {
    const credentials = await this.getCredentials('aws');
    const requestOptions = {
        qs: {
            service,
            path,
        },
        method,
        body: JSON.stringify(body),
        url: '',
        headers,
        region: credentials === null || credentials === void 0 ? void 0 : credentials.region,
    };
    try {
        return JSON.parse(await this.helpers.requestWithAuthentication.call(this, 'aws', requestOptions));
    }
    catch (error) {
        const errorMessage = (error.response && error.response.body && error.response.body.message) ||
            (error.response && error.response.body && error.response.body.Message) ||
            error.message;
        if (error.statusCode === 403) {
            if (errorMessage === 'The security token included in the request is invalid.') {
                throw new Error('The AWS credentials are not valid!');
            }
            else if (errorMessage.startsWith('The request signature we calculated does not match the signature you provided')) {
                throw new Error('The AWS credentials are not valid!');
            }
        }
        throw new Error(`AWS error response [${error.statusCode}]: ${errorMessage}`);
    }
}
exports.awsApiRequest = awsApiRequest;
async function awsApiRequestAllItems(service, method, path, body, headers) {
    const returnData = [];
    let responseData;
    do {
        responseData = await awsApiRequest.call(this, service, method, path, body, headers);
        if (responseData.LastEvaluatedKey) {
            body.ExclusiveStartKey = responseData.LastEvaluatedKey;
        }
        returnData.push(...responseData.Items);
    } while (responseData.LastEvaluatedKey !== undefined);
    return returnData;
}
exports.awsApiRequestAllItems = awsApiRequestAllItems;
function copyInputItem(item, properties) {
    let newItem;
    newItem = {};
    for (const property of properties) {
        if (item.json[property] === undefined) {
            newItem[property] = null;
        }
        else {
            newItem[property] = (0, n8n_workflow_1.deepCopy)(item.json[property]);
        }
    }
    return newItem;
}
exports.copyInputItem = copyInputItem;
//# sourceMappingURL=GenericFunctions.js.map