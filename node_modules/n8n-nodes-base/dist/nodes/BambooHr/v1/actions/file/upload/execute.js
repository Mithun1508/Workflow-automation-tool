"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.upload = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const transport_1 = require("../../../transport");
async function upload(index) {
    let body = {};
    const requestMethod = 'POST';
    const items = this.getInputData();
    const category = this.getNodeParameter('categoryId', index);
    const share = this.getNodeParameter('options.share', index, true);
    if (items[index].binary === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data exists on item!', {
            itemIndex: index,
        });
    }
    const propertyNameUpload = this.getNodeParameter('binaryPropertyName', index);
    if (items[index].binary[propertyNameUpload] === undefined) {
        throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No binary data property "${propertyNameUpload}" does not exists on item!`, { itemIndex: index });
    }
    const item = items[index].binary;
    const binaryData = item[propertyNameUpload];
    const binaryDataBuffer = await this.helpers.getBinaryDataBuffer(index, propertyNameUpload);
    body = {
        json: false,
        formData: {
            file: {
                value: binaryDataBuffer,
                options: {
                    filename: binaryData.fileName,
                    contentType: binaryData.mimeType,
                },
            },
            fileName: binaryData.fileName,
            category,
        },
        resolveWithFullResponse: true,
    };
    if (body.formData) {
        Object.assign(body.formData, share ? { share: 'yes' } : { share: 'no' });
    }
    const endpoint = `files`;
    const { headers } = await transport_1.apiRequest.call(this, requestMethod, endpoint, {}, {}, body);
    return this.helpers.returnJsonArray({ fileId: headers.location.split('/').pop() });
}
exports.upload = upload;
//# sourceMappingURL=execute.js.map