"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateJSON = exports.eventExists = exports.customerIoApiRequest = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const lodash_1 = require("lodash");
async function customerIoApiRequest(method, endpoint, body, baseApi, query) {
    const credentials = await this.getCredentials('customerIoApi');
    query = query || {};
    const options = {
        headers: {
            'Content-Type': 'application/json',
        },
        method: method,
        body,
        url: '',
        json: true,
    };
    if (baseApi === 'tracking') {
        const region = credentials.region;
        options.url = `https://${region}/api/v1${endpoint}`;
    }
    else if (baseApi === 'api') {
        options.url = `https://api.customer.io/v1/api${endpoint}`;
    }
    else if (baseApi === 'beta') {
        options.url = `https://beta-api.customer.io/v1/api${endpoint}`;
    }
    try {
        return await this.helpers.requestWithAuthentication.call(this, 'customerIoApi', options);
    }
    catch (error) {
        throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
    }
}
exports.customerIoApiRequest = customerIoApiRequest;
function eventExists(currentEvents, webhookEvents) {
    for (const currentEvent of currentEvents) {
        if ((0, lodash_1.get)(webhookEvents, `${currentEvent.split('.')[0]}.${currentEvent.split('.')[1]}`) !== true) {
            return false;
        }
    }
    return true;
}
exports.eventExists = eventExists;
function validateJSON(json) {
    let result;
    try {
        result = JSON.parse(json);
    }
    catch (exception) {
        result = undefined;
    }
    return result;
}
exports.validateJSON = validateJSON;
//# sourceMappingURL=GenericFunctions.js.map