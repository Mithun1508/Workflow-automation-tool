"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ftp = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const path_1 = require("path");
const promise_ftp_1 = __importDefault(require("promise-ftp"));
const ssh2_sftp_client_1 = __importDefault(require("ssh2-sftp-client"));
class Ftp {
    constructor() {
        this.description = {
            displayName: 'FTP',
            name: 'ftp',
            icon: 'fa:server',
            group: ['input'],
            version: 1,
            subtitle: '={{$parameter["protocol"] + ": " + $parameter["operation"]}}',
            description: 'Transfers files via FTP or SFTP',
            defaults: {
                name: 'FTP',
                color: '#303050',
            },
            inputs: ['main'],
            outputs: ['main'],
            credentials: [
                {
                    name: 'ftp',
                    required: true,
                    displayOptions: {
                        show: {
                            protocol: ['ftp'],
                        },
                    },
                    testedBy: 'ftpConnectionTest',
                },
                {
                    name: 'sftp',
                    required: true,
                    displayOptions: {
                        show: {
                            protocol: ['sftp'],
                        },
                    },
                    testedBy: 'sftpConnectionTest',
                },
            ],
            properties: [
                {
                    displayName: 'Protocol',
                    name: 'protocol',
                    type: 'options',
                    options: [
                        {
                            name: 'FTP',
                            value: 'ftp',
                        },
                        {
                            name: 'SFTP',
                            value: 'sftp',
                        },
                    ],
                    default: 'ftp',
                    description: 'File transfer protocol',
                },
                {
                    displayName: 'Operation',
                    name: 'operation',
                    type: 'options',
                    options: [
                        {
                            name: 'Delete',
                            value: 'delete',
                            description: 'Delete a file/folder',
                            action: 'Delete a file or folder',
                        },
                        {
                            name: 'Download',
                            value: 'download',
                            description: 'Download a file',
                            action: 'Download a file',
                        },
                        {
                            name: 'List',
                            value: 'list',
                            description: 'List folder content',
                            action: 'List folder content',
                        },
                        {
                            name: 'Rename',
                            value: 'rename',
                            description: 'Rename/move oldPath to newPath',
                            action: 'Rename / move a file or folder',
                        },
                        {
                            name: 'Upload',
                            value: 'upload',
                            description: 'Upload a file',
                            action: 'Upload a file',
                        },
                    ],
                    default: 'download',
                    noDataExpression: true,
                },
                {
                    displayName: 'Path',
                    displayOptions: {
                        show: {
                            operation: ['delete'],
                        },
                    },
                    name: 'path',
                    type: 'string',
                    default: '',
                    description: 'The file path of the file to delete. Has to contain the full path.',
                    required: true,
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    displayOptions: {
                        show: {
                            operation: ['delete'],
                        },
                    },
                    default: {},
                    options: [
                        {
                            displayName: 'Folder',
                            name: 'folder',
                            type: 'boolean',
                            default: false,
                            description: 'Whether folders can be deleted',
                        },
                        {
                            displayName: 'Recursive',
                            displayOptions: {
                                show: {
                                    folder: [true],
                                },
                            },
                            name: 'recursive',
                            type: 'boolean',
                            default: false,
                            description: 'Whether to remove all files and directories in target directory',
                        },
                    ],
                },
                {
                    displayName: 'Path',
                    displayOptions: {
                        show: {
                            operation: ['download'],
                        },
                    },
                    name: 'path',
                    type: 'string',
                    default: '',
                    placeholder: '/documents/invoice.txt',
                    description: 'The file path of the file to download. Has to contain the full path.',
                    required: true,
                },
                {
                    displayName: 'Binary Property',
                    displayOptions: {
                        show: {
                            operation: ['download'],
                        },
                    },
                    name: 'binaryPropertyName',
                    type: 'string',
                    default: 'data',
                    description: 'Object property name which holds binary data',
                    required: true,
                },
                {
                    displayName: 'Old Path',
                    displayOptions: {
                        show: {
                            operation: ['rename'],
                        },
                    },
                    name: 'oldPath',
                    type: 'string',
                    default: '',
                    required: true,
                },
                {
                    displayName: 'New Path',
                    displayOptions: {
                        show: {
                            operation: ['rename'],
                        },
                    },
                    name: 'newPath',
                    type: 'string',
                    default: '',
                    required: true,
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Field',
                    default: {},
                    displayOptions: {
                        show: {
                            operation: ['rename'],
                        },
                    },
                    options: [
                        {
                            displayName: 'Create Directories',
                            name: 'createDirectories',
                            type: 'boolean',
                            default: false,
                            description: 'Whether to recursively create destination directory when renaming an existing file or folder',
                        },
                    ],
                },
                {
                    displayName: 'Path',
                    displayOptions: {
                        show: {
                            operation: ['upload'],
                        },
                    },
                    name: 'path',
                    type: 'string',
                    default: '',
                    description: 'The file path of the file to upload. Has to contain the full path.',
                    required: true,
                },
                {
                    displayName: 'Binary Data',
                    displayOptions: {
                        show: {
                            operation: ['upload'],
                        },
                    },
                    name: 'binaryData',
                    type: 'boolean',
                    default: true,
                    description: 'The text content of the file to upload',
                },
                {
                    displayName: 'Binary Property',
                    displayOptions: {
                        show: {
                            operation: ['upload'],
                            binaryData: [true],
                        },
                    },
                    name: 'binaryPropertyName',
                    type: 'string',
                    default: 'data',
                    description: 'Object property name which holds binary data',
                    required: true,
                },
                {
                    displayName: 'File Content',
                    displayOptions: {
                        show: {
                            operation: ['upload'],
                            binaryData: [false],
                        },
                    },
                    name: 'fileContent',
                    type: 'string',
                    default: '',
                    description: 'The text content of the file to upload',
                },
                {
                    displayName: 'Path',
                    displayOptions: {
                        show: {
                            operation: ['list'],
                        },
                    },
                    name: 'path',
                    type: 'string',
                    default: '/',
                    description: 'Path of directory to list contents of',
                    required: true,
                },
                {
                    displayName: 'Recursive',
                    displayOptions: {
                        show: {
                            operation: ['list'],
                        },
                    },
                    name: 'recursive',
                    type: 'boolean',
                    default: false,
                    description: 'Whether to return object representing all directories / objects recursively found within SFTP server',
                    required: true,
                },
            ],
        };
        this.methods = {
            credentialTest: {
                async ftpConnectionTest(credential) {
                    const credentials = credential.data;
                    try {
                        let ftp;
                        ftp = new promise_ftp_1.default();
                        await ftp.connect({
                            host: credentials.host,
                            port: credentials.port,
                            user: credentials.username,
                            password: credentials.password,
                        });
                    }
                    catch (error) {
                        return {
                            status: 'Error',
                            message: error.message,
                        };
                    }
                    return {
                        status: 'OK',
                        message: 'Connection successful!',
                    };
                },
                async sftpConnectionTest(credential) {
                    const credentials = credential.data;
                    try {
                        let sftp;
                        sftp = new ssh2_sftp_client_1.default();
                        await sftp.connect({
                            host: credentials.host,
                            port: credentials.port,
                            username: credentials.username,
                            password: credentials.password,
                            privateKey: credentials.privateKey,
                            passphrase: credentials.passphrase,
                        });
                    }
                    catch (error) {
                        return {
                            status: 'Error',
                            message: error.message,
                        };
                    }
                    return {
                        status: 'OK',
                        message: 'Connection successful!',
                    };
                },
            },
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnItems = [];
        const qs = {};
        let responseData;
        const operation = this.getNodeParameter('operation', 0);
        let credentials = undefined;
        const protocol = this.getNodeParameter('protocol', 0);
        if (protocol === 'sftp') {
            credentials = await this.getCredentials('sftp');
        }
        else {
            credentials = await this.getCredentials('ftp');
        }
        try {
            let ftp;
            let sftp;
            if (protocol === 'sftp') {
                sftp = new ssh2_sftp_client_1.default();
                await sftp.connect({
                    host: credentials.host,
                    port: credentials.port,
                    username: credentials.username,
                    password: credentials.password,
                    privateKey: credentials.privateKey,
                    passphrase: credentials.passphrase,
                });
            }
            else {
                ftp = new promise_ftp_1.default();
                await ftp.connect({
                    host: credentials.host,
                    port: credentials.port,
                    user: credentials.username,
                    password: credentials.password,
                });
            }
            for (let i = 0; i < items.length; i++) {
                const newItem = {
                    json: items[i].json,
                    binary: {},
                };
                if (items[i].binary !== undefined && newItem.binary) {
                    Object.assign(newItem.binary, items[i].binary);
                }
                items[i] = newItem;
                if (protocol === 'sftp') {
                    if (operation === 'list') {
                        const path = this.getNodeParameter('path', i);
                        const recursive = this.getNodeParameter('recursive', i);
                        if (recursive) {
                            responseData = await callRecursiveList(path, sftp, normalizeSFtpItem);
                            returnItems.push.apply(returnItems, this.helpers.returnJsonArray(responseData));
                        }
                        else {
                            responseData = await sftp.list(path);
                            responseData.forEach((item) => normalizeSFtpItem(item, path));
                            returnItems.push.apply(returnItems, this.helpers.returnJsonArray(responseData));
                        }
                    }
                    if (operation === 'delete') {
                        const path = this.getNodeParameter('path', i);
                        const options = this.getNodeParameter('options', i);
                        if (options.folder === true) {
                            responseData = await sftp.rmdir(path, !!options.recursive);
                        }
                        else {
                            responseData = await sftp.delete(path);
                        }
                        returnItems.push({ json: { success: true } });
                    }
                    if (operation === 'rename') {
                        const oldPath = this.getNodeParameter('oldPath', i);
                        const { createDirectories = false } = this.getNodeParameter('options', i);
                        const newPath = this.getNodeParameter('newPath', i);
                        if (createDirectories) {
                            await recursivelyCreateSftpDirs(sftp, newPath);
                        }
                        responseData = await sftp.rename(oldPath, newPath);
                        returnItems.push({ json: { success: true } });
                    }
                    if (operation === 'download') {
                        const path = this.getNodeParameter('path', i);
                        responseData = await sftp.get(path);
                        const dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);
                        const filePathDownload = this.getNodeParameter('path', i);
                        items[i].binary[dataPropertyNameDownload] = await this.helpers.prepareBinaryData(responseData, filePathDownload);
                        returnItems.push(items[i]);
                    }
                    if (operation === 'upload') {
                        const remotePath = this.getNodeParameter('path', i);
                        await recursivelyCreateSftpDirs(sftp, remotePath);
                        if (this.getNodeParameter('binaryData', i) === true) {
                            const item = items[i];
                            if (item.binary === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data exists on item!', {
                                    itemIndex: i,
                                });
                            }
                            const propertyNameUpload = this.getNodeParameter('binaryPropertyName', i);
                            if (item.binary[propertyNameUpload] === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No binary data property "${propertyNameUpload}" does not exists on item!`, { itemIndex: i });
                            }
                            const buffer = await this.helpers.getBinaryDataBuffer(i, propertyNameUpload);
                            await sftp.put(buffer, remotePath);
                        }
                        else {
                            const buffer = Buffer.from(this.getNodeParameter('fileContent', i), 'utf8');
                            await sftp.put(buffer, remotePath);
                        }
                        returnItems.push(items[i]);
                    }
                }
                if (protocol === 'ftp') {
                    if (operation === 'list') {
                        const path = this.getNodeParameter('path', i);
                        const recursive = this.getNodeParameter('recursive', i);
                        if (recursive) {
                            responseData = await callRecursiveList(path, ftp, normalizeFtpItem);
                            returnItems.push.apply(returnItems, this.helpers.returnJsonArray(responseData));
                        }
                        else {
                            responseData = await ftp.list(path);
                            responseData.forEach((item) => normalizeFtpItem(item, path));
                            returnItems.push.apply(returnItems, this.helpers.returnJsonArray(responseData));
                        }
                    }
                    if (operation === 'delete') {
                        const path = this.getNodeParameter('path', i);
                        const options = this.getNodeParameter('options', i);
                        if (options.folder === true) {
                            responseData = await ftp.rmdir(path, !!options.recursive);
                        }
                        else {
                            responseData = await ftp.delete(path);
                        }
                        returnItems.push({ json: { success: true } });
                    }
                    if (operation === 'download') {
                        const path = this.getNodeParameter('path', i);
                        responseData = await ftp.get(path);
                        const chunks = [];
                        for await (const chunk of responseData) {
                            chunks.push(chunk);
                        }
                        responseData = Buffer.concat(chunks);
                        const dataPropertyNameDownload = this.getNodeParameter('binaryPropertyName', i);
                        const filePathDownload = this.getNodeParameter('path', i);
                        items[i].binary[dataPropertyNameDownload] = await this.helpers.prepareBinaryData(responseData, filePathDownload);
                        returnItems.push(items[i]);
                    }
                    if (operation === 'rename') {
                        const oldPath = this.getNodeParameter('oldPath', i);
                        const newPath = this.getNodeParameter('newPath', i);
                        responseData = await ftp.rename(oldPath, newPath);
                        returnItems.push({ json: { success: true } });
                    }
                    if (operation === 'upload') {
                        const remotePath = this.getNodeParameter('path', i);
                        const fileName = (0, path_1.basename)(remotePath);
                        const dirPath = remotePath.replace(fileName, '');
                        if (this.getNodeParameter('binaryData', i) === true) {
                            const item = items[i];
                            if (item.binary === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data exists on item!', {
                                    itemIndex: i,
                                });
                            }
                            const propertyNameUpload = this.getNodeParameter('binaryPropertyName', i);
                            if (item.binary[propertyNameUpload] === undefined) {
                                throw new n8n_workflow_1.NodeOperationError(this.getNode(), `No binary data property "${propertyNameUpload}" does not exists on item!`, { itemIndex: i });
                            }
                            const buffer = await this.helpers.getBinaryDataBuffer(i, propertyNameUpload);
                            try {
                                await ftp.put(buffer, remotePath);
                            }
                            catch (error) {
                                if (error.code === 553) {
                                    await ftp.mkdir(dirPath, true);
                                    await ftp.put(buffer, remotePath);
                                }
                                else {
                                    throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
                                }
                            }
                        }
                        else {
                            const buffer = Buffer.from(this.getNodeParameter('fileContent', i), 'utf8');
                            try {
                                await ftp.put(buffer, remotePath);
                            }
                            catch (error) {
                                if (error.code === 553) {
                                    await ftp.mkdir(dirPath, true);
                                    await ftp.put(buffer, remotePath);
                                }
                                else {
                                    throw new n8n_workflow_1.NodeApiError(this.getNode(), error);
                                }
                            }
                        }
                        returnItems.push(items[i]);
                    }
                }
            }
            if (protocol === 'sftp') {
                await sftp.end();
            }
            else {
                await ftp.end();
            }
        }
        catch (error) {
            if (this.continueOnFail()) {
                return this.prepareOutputData([{ json: { error: error.message } }]);
            }
            throw error;
        }
        return [returnItems];
    }
}
exports.Ftp = Ftp;
function normalizeFtpItem(input, path, recursive = false) {
    const item = input;
    item.modifyTime = input.date;
    item.path = !recursive ? `${path}${path.endsWith('/') ? '' : '/'}${item.name}` : path;
    item.date = undefined;
}
function normalizeSFtpItem(input, path, recursive = false) {
    const item = input;
    item.accessTime = new Date(input.accessTime);
    item.modifyTime = new Date(input.modifyTime);
    item.path = !recursive ? `${path}${path.endsWith('/') ? '' : '/'}${item.name}` : path;
}
async function callRecursiveList(path, client, normalizeFunction) {
    const pathArray = [path];
    let currentPath = path;
    const directoryItems = [];
    let index = 0;
    do {
        const returnData = await client.list(pathArray[index]);
        returnData.map((item) => {
            if (pathArray[index].endsWith('/')) {
                currentPath = `${pathArray[index]}${item.name}`;
            }
            else {
                currentPath = `${pathArray[index]}/${item.name}`;
            }
            if (item.type === 'd') {
                pathArray.push(currentPath);
            }
            normalizeFunction(item, currentPath, true);
            directoryItems.push(item);
        });
        index++;
    } while (index <= pathArray.length - 1);
    return directoryItems;
}
async function recursivelyCreateSftpDirs(sftp, path) {
    const dirPath = (0, path_1.dirname)(path);
    const dirExists = await sftp.exists(dirPath);
    if (!dirExists) {
        await sftp.mkdir(dirPath, true);
    }
}
//# sourceMappingURL=Ftp.node.js.map