"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenameKeys = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const lodash_1 = require("lodash");
class RenameKeys {
    constructor() {
        this.description = {
            displayName: 'Rename Keys',
            name: 'renameKeys',
            icon: 'fa:edit',
            group: ['transform'],
            version: 1,
            description: 'Renames keys',
            defaults: {
                name: 'Rename Keys',
                color: '#772244',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'Keys',
                    name: 'keys',
                    placeholder: 'Add new key',
                    description: 'Adds a key which should be renamed',
                    type: 'fixedCollection',
                    typeOptions: {
                        multipleValues: true,
                        sortable: true,
                    },
                    default: {},
                    options: [
                        {
                            displayName: 'Key',
                            name: 'key',
                            values: [
                                {
                                    displayName: 'Current Key Name',
                                    name: 'currentKey',
                                    type: 'string',
                                    default: '',
                                    placeholder: 'currentKey',
                                    description: 'The current name of the key. It is also possible to define deep keys by using dot-notation like for example: "level1.level2.currentKey".',
                                },
                                {
                                    displayName: 'New Key Name',
                                    name: 'newKey',
                                    type: 'string',
                                    default: '',
                                    placeholder: 'newKey',
                                    description: 'The name the key should be renamed to. It is also possible to define deep keys by using dot-notation like for example: "level1.level2.newKey".',
                                },
                            ],
                        },
                    ],
                },
                {
                    displayName: 'Additional Options',
                    name: 'additionalOptions',
                    type: 'collection',
                    default: {},
                    placeholder: 'Add Option',
                    options: [
                        {
                            displayName: 'Regex',
                            name: 'regexReplacement',
                            placeholder: 'Add new regular expression',
                            description: 'Adds a regular expressiond',
                            type: 'fixedCollection',
                            typeOptions: {
                                multipleValues: true,
                                sortable: true,
                            },
                            default: {},
                            options: [
                                {
                                    displayName: 'Replacement',
                                    name: 'replacements',
                                    values: [
                                        {
                                            displayName: 'Be aware that by using regular expression previously renamed keys can be affected',
                                            name: 'regExNotice',
                                            type: 'notice',
                                            default: '',
                                        },
                                        {
                                            displayName: 'Regular Expression',
                                            name: 'searchRegex',
                                            type: 'string',
                                            default: '',
                                            placeholder: 'e.g. [N-n]ame',
                                            description: 'Regex to match the key name',
                                            hint: 'Learn more and test RegEx <a href="https://regex101.com/">here</a>',
                                        },
                                        {
                                            displayName: 'Replace With',
                                            name: 'replaceRegex',
                                            type: 'string',
                                            default: '',
                                            placeholder: 'replacedName',
                                            description: "The name the key/s should be renamed to. It's possible to use regex captures e.g. $1, $2, ...",
                                        },
                                        {
                                            displayName: 'Options',
                                            name: 'options',
                                            type: 'collection',
                                            default: {},
                                            placeholder: 'Add Regex Option',
                                            options: [
                                                {
                                                    displayName: 'Case Insensitive',
                                                    name: 'caseInsensitive',
                                                    type: 'boolean',
                                                    description: 'Whether to use case insensitive match',
                                                    default: false,
                                                },
                                                {
                                                    displayName: 'Max Depth',
                                                    name: 'depth',
                                                    type: 'number',
                                                    default: -1,
                                                    description: 'Maximum depth to replace keys',
                                                    hint: 'Specify number for depth level (-1 for unlimited, 0 for top level only)',
                                                },
                                            ],
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        let item;
        let newItem;
        let renameKeys;
        let value;
        for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {
            renameKeys = this.getNodeParameter('keys.key', itemIndex, []);
            const regexReplacements = this.getNodeParameter('additionalOptions.regexReplacement.replacements', itemIndex, []);
            item = items[itemIndex];
            newItem = {
                json: (0, n8n_workflow_1.deepCopy)(item.json),
                pairedItem: {
                    item: itemIndex,
                },
            };
            if (item.binary !== undefined) {
                newItem.binary = item.binary;
            }
            renameKeys.forEach((renameKey) => {
                if (renameKey.currentKey === '' ||
                    renameKey.newKey === '' ||
                    renameKey.currentKey === renameKey.newKey) {
                    return;
                }
                value = (0, lodash_1.get)(item.json, renameKey.currentKey);
                if (value === undefined) {
                    return;
                }
                (0, lodash_1.set)(newItem.json, renameKey.newKey, value);
                (0, lodash_1.unset)(newItem.json, renameKey.currentKey);
            });
            regexReplacements.forEach((replacement) => {
                const { searchRegex, replaceRegex, options } = replacement;
                const { depth, caseInsensitive } = options;
                const flags = caseInsensitive ? 'i' : undefined;
                const regex = new RegExp(searchRegex, flags);
                const renameObjectKeys = (obj, depth) => {
                    for (const key in obj) {
                        if (Array.isArray(obj)) {
                            if (depth !== 0) {
                                renameObjectKeys(obj[key], depth - 1);
                            }
                        }
                        else if (obj.hasOwnProperty(key)) {
                            if (typeof obj[key] === 'object' && depth !== 0) {
                                renameObjectKeys(obj[key], depth - 1);
                            }
                            if (key.match(regex)) {
                                const newKey = key.replace(regex, replaceRegex);
                                if (newKey !== key) {
                                    obj[newKey] = obj[key];
                                    delete obj[key];
                                }
                            }
                        }
                    }
                    return obj;
                };
                newItem.json = renameObjectKeys(newItem.json, depth);
            });
            returnData.push(newItem);
        }
        return [returnData];
    }
}
exports.RenameKeys = RenameKeys;
//# sourceMappingURL=RenameKeys.node.js.map