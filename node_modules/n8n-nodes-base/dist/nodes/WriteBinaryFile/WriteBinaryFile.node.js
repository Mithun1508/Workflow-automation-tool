"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WriteBinaryFile = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const promises_1 = require("fs/promises");
class WriteBinaryFile {
    constructor() {
        this.description = {
            displayName: 'Write Binary File',
            name: 'writeBinaryFile',
            icon: 'fa:file-export',
            group: ['output'],
            version: 1,
            description: 'Writes a binary file to disk',
            defaults: {
                name: 'Write Binary File',
                color: '#CC2233',
            },
            inputs: ['main'],
            outputs: ['main'],
            properties: [
                {
                    displayName: 'File Name',
                    name: 'fileName',
                    type: 'string',
                    default: '',
                    required: true,
                    placeholder: '/data/example.jpg',
                    description: 'Path to which the file should be written',
                },
                {
                    displayName: 'Property Name',
                    name: 'dataPropertyName',
                    type: 'string',
                    default: 'data',
                    required: true,
                    description: 'Name of the binary property which contains the data for the file to be written',
                },
                {
                    displayName: 'Options',
                    name: 'options',
                    type: 'collection',
                    placeholder: 'Add Option',
                    default: {},
                    options: [
                        {
                            displayName: 'Append',
                            name: 'append',
                            type: 'boolean',
                            default: false,
                            description: 'Whether to append to an existing file',
                        },
                    ],
                },
            ],
        };
    }
    async execute() {
        const items = this.getInputData();
        const returnData = [];
        const length = items.length;
        let item;
        for (let itemIndex = 0; itemIndex < length; itemIndex++) {
            try {
                const dataPropertyName = this.getNodeParameter('dataPropertyName', itemIndex);
                const fileName = this.getNodeParameter('fileName', itemIndex);
                const options = this.getNodeParameter('options', 0, {});
                const flag = options.append ? 'a' : 'w';
                item = items[itemIndex];
                if (item.binary === undefined) {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), 'No binary data set. So file can not be written!', { itemIndex });
                }
                if (item.binary[dataPropertyName] === undefined) {
                    throw new n8n_workflow_1.NodeOperationError(this.getNode(), `The binary property "${dataPropertyName}" does not exist. So no file can be written!`, { itemIndex });
                }
                const newItem = {
                    json: {},
                    pairedItem: {
                        item: itemIndex,
                    },
                };
                Object.assign(newItem.json, item.json);
                const binaryDataBuffer = await this.helpers.getBinaryDataBuffer(itemIndex, dataPropertyName);
                await (0, promises_1.writeFile)(fileName, binaryDataBuffer, { encoding: 'binary', flag });
                if (item.binary !== undefined) {
                    newItem.binary = {};
                    Object.assign(newItem.binary, item.binary);
                }
                newItem.json.fileName = fileName;
                returnData.push(newItem);
            }
            catch (error) {
                if (this.continueOnFail()) {
                    returnData.push({
                        json: {
                            error: error.message,
                        },
                        pairedItem: {
                            item: itemIndex,
                        },
                    });
                    continue;
                }
                throw error;
            }
        }
        return this.prepareOutputData(returnData);
    }
}
exports.WriteBinaryFile = WriteBinaryFile;
//# sourceMappingURL=WriteBinaryFile.node.js.map