declare type Primitives = string | number | boolean | bigint | symbol | null | undefined;
export declare const deepCopy: <T extends Primitives | ((object | Date) & {
    toJSON?: (() => string) | undefined;
})>(source: T, hash?: WeakMap<object, any>, path?: string) => T;
declare type MutuallyExclusive<T, U> = (T & {
    [k in Exclude<keyof U, keyof T>]?: never;
}) | (U & {
    [k in Exclude<keyof T, keyof U>]?: never;
});
declare type JSONParseOptions<T> = MutuallyExclusive<{
    errorMessage: string;
}, {
    fallbackValue: T;
}>;
export declare const jsonParse: <T>(jsonString: string, options?: JSONParseOptions<T> | undefined) => T;
export {};
