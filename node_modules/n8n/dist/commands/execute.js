"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Execute = void 0;
const fs_1 = require("fs");
const command_1 = require("@oclif/command");
const n8n_core_1 = require("n8n-core");
const n8n_workflow_1 = require("n8n-workflow");
const src_1 = require("../src");
const Logger_1 = require("../src/Logger");
const config_1 = __importDefault(require("../config"));
const UserManagementHelper_1 = require("../src/UserManagement/UserManagementHelper");
const utils_1 = require("../src/utils");
class Execute extends command_1.Command {
    async run() {
        const logger = (0, Logger_1.getLogger)();
        n8n_workflow_1.LoggerProxy.init(logger);
        const binaryDataConfig = config_1.default.getEnv('binaryDataManager');
        await n8n_core_1.BinaryDataManager.init(binaryDataConfig, true);
        const { flags } = this.parse(Execute);
        const startDbInitPromise = src_1.Db.init();
        const loadNodesAndCredentials = (0, src_1.LoadNodesAndCredentials)();
        const loadNodesAndCredentialsPromise = loadNodesAndCredentials.init();
        if (!flags.id && !flags.file) {
            console.info(`Either option "--id" or "--file" have to be set!`);
            return;
        }
        if (flags.id && flags.file) {
            console.info(`Either "id" or "file" can be set never both!`);
            return;
        }
        let workflowId;
        let workflowData;
        if (flags.file) {
            try {
                workflowData = JSON.parse(await fs_1.promises.readFile(flags.file, 'utf8'));
            }
            catch (error) {
                if (error.code === 'ENOENT') {
                    console.info(`The file "${flags.file}" could not be found.`);
                    return;
                }
                throw error;
            }
            if (workflowData === undefined ||
                workflowData.nodes === undefined ||
                workflowData.connections === undefined) {
                console.info(`The file "${flags.file}" does not contain valid workflow data.`);
                return;
            }
            workflowId = workflowData.id ? workflowData.id.toString() : n8n_core_1.PLACEHOLDER_EMPTY_WORKFLOW_ID;
        }
        await startDbInitPromise;
        if (flags.id) {
            workflowId = flags.id;
            workflowData = await src_1.Db.collections.Workflow.findOne(workflowId);
            if (workflowData === undefined) {
                console.info(`The workflow with the id "${workflowId}" does not exist.`);
                process.exit(1);
            }
        }
        if (!workflowData) {
            throw new Error('Failed to retrieve workflow data for requested workflow');
        }
        await n8n_core_1.UserSettings.prepareUserSettings();
        await loadNodesAndCredentialsPromise;
        const credentialsOverwrites = (0, src_1.CredentialsOverwrites)();
        await credentialsOverwrites.init();
        const externalHooks = (0, src_1.ExternalHooks)();
        await externalHooks.init();
        const nodeTypes = (0, src_1.NodeTypes)();
        await nodeTypes.init(loadNodesAndCredentials.nodeTypes);
        const credentialTypes = (0, src_1.CredentialTypes)();
        await credentialTypes.init(loadNodesAndCredentials.credentialTypes);
        const instanceId = await n8n_core_1.UserSettings.getInstanceId();
        const { cli } = await src_1.GenericHelpers.getVersions();
        src_1.InternalHooksManager.init(instanceId, cli, nodeTypes);
        if (!src_1.WorkflowHelpers.isWorkflowIdValid(workflowId)) {
            workflowId = undefined;
        }
        try {
            const startingNode = (0, utils_1.findCliWorkflowStart)(workflowData.nodes);
            const user = await (0, UserManagementHelper_1.getInstanceOwner)();
            const runData = {
                executionMode: 'cli',
                startNodes: [startingNode.name],
                workflowData,
                userId: user.id,
            };
            const workflowRunner = new src_1.WorkflowRunner();
            const executionId = await workflowRunner.run(runData);
            const activeExecutions = src_1.ActiveExecutions.getInstance();
            const data = await activeExecutions.getPostExecutePromise(executionId);
            if (data === undefined) {
                throw new Error('Workflow did not return any data!');
            }
            if (data.data.resultData.error) {
                console.info('Execution was NOT successful. See log message for details.');
                logger.info('Execution error:');
                logger.info('====================================');
                logger.info(JSON.stringify(data, null, 2));
                const { error } = data.data.resultData;
                throw {
                    ...error,
                    stack: error.stack,
                };
            }
            if (flags.rawOutput === undefined) {
                this.log('Execution was successful:');
                this.log('====================================');
            }
            this.log(JSON.stringify(data, null, 2));
        }
        catch (e) {
            console.error('Error executing workflow. See log messages for details.');
            logger.error('\nExecution error:');
            logger.info('====================================');
            logger.error(e.message);
            if (e.description)
                logger.error(e.description);
            logger.error(e.stack);
            this.exit(1);
        }
        this.exit();
    }
}
exports.Execute = Execute;
Execute.description = '\nExecutes a given workflow';
Execute.examples = [`$ n8n execute --id=5`, `$ n8n execute --file=workflow.json`];
Execute.flags = {
    help: command_1.flags.help({ char: 'h' }),
    file: command_1.flags.string({
        description: 'path to a workflow file to execute',
    }),
    id: command_1.flags.string({
        description: 'id of the workflow to execute',
    }),
    rawOutput: command_1.flags.boolean({
        description: 'Outputs only JSON data, with no other text',
    }),
};
//# sourceMappingURL=execute.js.map