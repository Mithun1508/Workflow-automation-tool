"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportCredentialsCommand = void 0;
const command_1 = require("@oclif/command");
const n8n_core_1 = require("n8n-core");
const n8n_workflow_1 = require("n8n-workflow");
const fs_1 = __importDefault(require("fs"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const typeorm_1 = require("typeorm");
const Logger_1 = require("../../src/Logger");
const src_1 = require("../../src");
const SharedCredentials_1 = require("../../src/databases/entities/SharedCredentials");
const CredentialsEntity_1 = require("../../src/databases/entities/CredentialsEntity");
const FIX_INSTRUCTION = 'Please fix the database by running ./packages/cli/bin/n8n user-management:reset';
class ImportCredentialsCommand extends command_1.Command {
    async run() {
        const logger = (0, Logger_1.getLogger)();
        n8n_workflow_1.LoggerProxy.init(logger);
        const { flags } = this.parse(ImportCredentialsCommand);
        if (!flags.input) {
            console.info('An input file or directory with --input must be provided');
            return;
        }
        if (flags.separate) {
            if (fs_1.default.existsSync(flags.input)) {
                if (!fs_1.default.lstatSync(flags.input).isDirectory()) {
                    console.info('The argument to --input must be a directory');
                    return;
                }
            }
        }
        let totalImported = 0;
        try {
            await src_1.Db.init();
            await this.initOwnerCredentialRole();
            const user = flags.userId ? await this.getAssignee(flags.userId) : await this.getOwner();
            await n8n_core_1.UserSettings.prepareUserSettings();
            const encryptionKey = await n8n_core_1.UserSettings.getEncryptionKey();
            if (flags.separate) {
                let { input: inputPath } = flags;
                if (process.platform === 'win32') {
                    inputPath = inputPath.replace(/\\/g, '/');
                }
                const files = await (0, fast_glob_1.default)('*.json', {
                    cwd: inputPath,
                    absolute: true,
                });
                totalImported = files.length;
                await (0, typeorm_1.getConnection)().transaction(async (transactionManager) => {
                    this.transactionManager = transactionManager;
                    for (const file of files) {
                        const credential = JSON.parse(fs_1.default.readFileSync(file, { encoding: 'utf8' }));
                        if (typeof credential.data === 'object') {
                            n8n_core_1.Credentials.prototype.setData.call(credential, credential.data, encryptionKey);
                        }
                        await this.storeCredential(credential, user);
                    }
                });
                this.reportSuccess(totalImported);
                process.exit();
            }
            const credentials = JSON.parse(fs_1.default.readFileSync(flags.input, { encoding: 'utf8' }));
            totalImported = credentials.length;
            if (!Array.isArray(credentials)) {
                throw new Error('File does not seem to contain credentials. Make sure the credentials are contained in an array.');
            }
            await (0, typeorm_1.getConnection)().transaction(async (transactionManager) => {
                this.transactionManager = transactionManager;
                for (const credential of credentials) {
                    if (typeof credential.data === 'object') {
                        n8n_core_1.Credentials.prototype.setData.call(credential, credential.data, encryptionKey);
                    }
                    await this.storeCredential(credential, user);
                }
            });
            this.reportSuccess(totalImported);
            process.exit();
        }
        catch (error) {
            console.error('An error occurred while importing credentials. See log messages for details.');
            if (error instanceof Error)
                logger.error(error.message);
            this.exit(1);
        }
    }
    reportSuccess(total) {
        console.info(`Successfully imported ${total} ${total === 1 ? 'credential.' : 'credentials.'}`);
    }
    async initOwnerCredentialRole() {
        const ownerCredentialRole = await src_1.Db.collections.Role.findOne({
            where: { name: 'owner', scope: 'credential' },
        });
        if (!ownerCredentialRole) {
            throw new Error(`Failed to find owner credential role. ${FIX_INSTRUCTION}`);
        }
        this.ownerCredentialRole = ownerCredentialRole;
    }
    async storeCredential(credential, user) {
        const newCredential = new CredentialsEntity_1.CredentialsEntity();
        Object.assign(newCredential, credential);
        const savedCredential = await this.transactionManager.save(newCredential);
        const newSharedCredential = new SharedCredentials_1.SharedCredentials();
        Object.assign(newSharedCredential, {
            credentials: savedCredential,
            user,
            role: this.ownerCredentialRole,
        });
        await this.transactionManager.save(newSharedCredential);
    }
    async getOwner() {
        const ownerGlobalRole = await src_1.Db.collections.Role.findOne({
            where: { name: 'owner', scope: 'global' },
        });
        const owner = await src_1.Db.collections.User.findOne({ globalRole: ownerGlobalRole });
        if (!owner) {
            throw new Error(`Failed to find owner. ${FIX_INSTRUCTION}`);
        }
        return owner;
    }
    async getAssignee(userId) {
        const user = await src_1.Db.collections.User.findOne(userId);
        if (!user) {
            throw new Error(`Failed to find user with ID ${userId}`);
        }
        return user;
    }
}
exports.ImportCredentialsCommand = ImportCredentialsCommand;
ImportCredentialsCommand.description = 'Import credentials';
ImportCredentialsCommand.examples = [
    '$ n8n import:credentials --input=file.json',
    '$ n8n import:credentials --separate --input=backups/latest/',
    '$ n8n import:credentials --input=file.json --userId=1d64c3d2-85fe-4a83-a649-e446b07b3aae',
    '$ n8n import:credentials --separate --input=backups/latest/ --userId=1d64c3d2-85fe-4a83-a649-e446b07b3aae',
];
ImportCredentialsCommand.flags = {
    help: command_1.flags.help({ char: 'h' }),
    input: command_1.flags.string({
        char: 'i',
        description: 'Input file name or directory if --separate is used',
    }),
    separate: command_1.flags.boolean({
        description: 'Imports *.json files from directory provided by --input',
    }),
    userId: command_1.flags.string({
        description: 'The ID of the user to assign the imported credentials to',
    }),
};
//# sourceMappingURL=credentials.js.map