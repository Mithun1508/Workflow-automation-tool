"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportWorkflowsCommand = void 0;
const command_1 = require("@oclif/command");
const n8n_workflow_1 = require("n8n-workflow");
const fs_1 = __importDefault(require("fs"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const n8n_core_1 = require("n8n-core");
const typeorm_1 = require("typeorm");
const uuid_1 = require("uuid");
const Logger_1 = require("../../src/Logger");
const src_1 = require("../../src");
const SharedWorkflow_1 = require("../../src/databases/entities/SharedWorkflow");
const WorkflowEntity_1 = require("../../src/databases/entities/WorkflowEntity");
const TagHelpers_1 = require("../../src/TagHelpers");
const FIX_INSTRUCTION = 'Please fix the database by running ./packages/cli/bin/n8n user-management:reset';
function assertHasWorkflowsToImport(workflows) {
    if (!Array.isArray(workflows)) {
        throw new Error('File does not seem to contain workflows. Make sure the workflows are contained in an array.');
    }
    for (const workflow of workflows) {
        if (typeof workflow !== 'object' ||
            !Object.prototype.hasOwnProperty.call(workflow, 'nodes') ||
            !Object.prototype.hasOwnProperty.call(workflow, 'connections')) {
            throw new Error('File does not seem to contain valid workflows.');
        }
    }
}
class ImportWorkflowsCommand extends command_1.Command {
    async run() {
        const logger = (0, Logger_1.getLogger)();
        n8n_workflow_1.LoggerProxy.init(logger);
        const { flags } = this.parse(ImportWorkflowsCommand);
        if (!flags.input) {
            console.info('An input file or directory with --input must be provided');
            return;
        }
        if (flags.separate) {
            if (fs_1.default.existsSync(flags.input)) {
                if (!fs_1.default.lstatSync(flags.input).isDirectory()) {
                    console.info('The argument to --input must be a directory');
                    return;
                }
            }
        }
        try {
            await src_1.Db.init();
            await this.initOwnerWorkflowRole();
            const user = flags.userId ? await this.getAssignee(flags.userId) : await this.getOwner();
            await n8n_core_1.UserSettings.prepareUserSettings();
            const credentials = await src_1.Db.collections.Credentials.find();
            const tags = await src_1.Db.collections.Tag.find();
            let totalImported = 0;
            if (flags.separate) {
                let { input: inputPath } = flags;
                if (process.platform === 'win32') {
                    inputPath = inputPath.replace(/\\/g, '/');
                }
                const files = await (0, fast_glob_1.default)('*.json', {
                    cwd: inputPath,
                    absolute: true,
                });
                totalImported = files.length;
                await (0, typeorm_1.getConnection)().transaction(async (transactionManager) => {
                    this.transactionManager = transactionManager;
                    for (const file of files) {
                        const workflow = JSON.parse(fs_1.default.readFileSync(file, { encoding: 'utf8' }));
                        if (credentials.length > 0) {
                            workflow.nodes.forEach((node) => {
                                this.transformCredentials(node, credentials);
                                if (!node.id) {
                                    node.id = (0, uuid_1.v4)();
                                }
                            });
                        }
                        if (Object.prototype.hasOwnProperty.call(workflow, 'tags')) {
                            await (0, TagHelpers_1.setTagsForImport)(transactionManager, workflow, tags);
                        }
                        await this.storeWorkflow(workflow, user);
                    }
                });
                this.reportSuccess(totalImported);
                process.exit();
            }
            const workflows = JSON.parse(fs_1.default.readFileSync(flags.input, { encoding: 'utf8' }));
            assertHasWorkflowsToImport(workflows);
            totalImported = workflows.length;
            await (0, typeorm_1.getConnection)().transaction(async (transactionManager) => {
                this.transactionManager = transactionManager;
                for (const workflow of workflows) {
                    if (credentials.length > 0) {
                        workflow.nodes.forEach((node) => {
                            this.transformCredentials(node, credentials);
                            if (!node.id) {
                                node.id = (0, uuid_1.v4)();
                            }
                        });
                    }
                    if (Object.prototype.hasOwnProperty.call(workflow, 'tags')) {
                        await (0, TagHelpers_1.setTagsForImport)(transactionManager, workflow, tags);
                    }
                    await this.storeWorkflow(workflow, user);
                }
            });
            this.reportSuccess(totalImported);
            process.exit();
        }
        catch (error) {
            console.error('An error occurred while importing workflows. See log messages for details.');
            if (error instanceof Error)
                logger.error(error.message);
            this.exit(1);
        }
    }
    reportSuccess(total) {
        console.info(`Successfully imported ${total} ${total === 1 ? 'workflow.' : 'workflows.'}`);
    }
    async initOwnerWorkflowRole() {
        const ownerWorkflowRole = await src_1.Db.collections.Role.findOne({
            where: { name: 'owner', scope: 'workflow' },
        });
        if (!ownerWorkflowRole) {
            throw new Error(`Failed to find owner workflow role. ${FIX_INSTRUCTION}`);
        }
        this.ownerWorkflowRole = ownerWorkflowRole;
    }
    async storeWorkflow(workflow, user) {
        const newWorkflow = new WorkflowEntity_1.WorkflowEntity();
        Object.assign(newWorkflow, workflow);
        const savedWorkflow = await this.transactionManager.save(newWorkflow);
        const newSharedWorkflow = new SharedWorkflow_1.SharedWorkflow();
        Object.assign(newSharedWorkflow, {
            workflow: savedWorkflow,
            user,
            role: this.ownerWorkflowRole,
        });
        await this.transactionManager.save(newSharedWorkflow);
    }
    async getOwner() {
        const ownerGlobalRole = await src_1.Db.collections.Role.findOne({
            where: { name: 'owner', scope: 'global' },
        });
        const owner = await src_1.Db.collections.User.findOne({ globalRole: ownerGlobalRole });
        if (!owner) {
            throw new Error(`Failed to find owner. ${FIX_INSTRUCTION}`);
        }
        return owner;
    }
    async getAssignee(userId) {
        const user = await src_1.Db.collections.User.findOne(userId);
        if (!user) {
            throw new Error(`Failed to find user with ID ${userId}`);
        }
        return user;
    }
    transformCredentials(node, credentialsEntities) {
        if (node.credentials) {
            const allNodeCredentials = Object.entries(node.credentials);
            for (const [type, name] of allNodeCredentials) {
                if (typeof name === 'string') {
                    const nodeCredentials = {
                        id: null,
                        name,
                    };
                    const matchingCredentials = credentialsEntities.filter((credentials) => credentials.name === name && credentials.type === type);
                    if (matchingCredentials.length === 1) {
                        nodeCredentials.id = matchingCredentials[0].id.toString();
                    }
                    node.credentials[type] = nodeCredentials;
                }
            }
        }
    }
}
exports.ImportWorkflowsCommand = ImportWorkflowsCommand;
ImportWorkflowsCommand.description = 'Import workflows';
ImportWorkflowsCommand.examples = [
    '$ n8n import:workflow --input=file.json',
    '$ n8n import:workflow --separate --input=backups/latest/',
    '$ n8n import:workflow --input=file.json --userId=1d64c3d2-85fe-4a83-a649-e446b07b3aae',
    '$ n8n import:workflow --separate --input=backups/latest/ --userId=1d64c3d2-85fe-4a83-a649-e446b07b3aae',
];
ImportWorkflowsCommand.flags = {
    help: command_1.flags.help({ char: 'h' }),
    input: command_1.flags.string({
        char: 'i',
        description: 'Input file name or directory if --separate is used',
    }),
    separate: command_1.flags.boolean({
        description: 'Imports *.json files from directory provided by --input',
    }),
    userId: command_1.flags.string({
        description: 'The ID of the user to assign the imported workflows to',
    }),
};
//# sourceMappingURL=workflow.js.map