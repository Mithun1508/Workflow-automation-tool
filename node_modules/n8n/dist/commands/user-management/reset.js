"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reset = void 0;
const typeorm_1 = require("typeorm");
const src_1 = require("../../src");
const BaseCommand_1 = require("../BaseCommand");
class Reset extends BaseCommand_1.BaseCommand {
    async run() {
        const owner = await this.getInstanceOwner();
        const ownerWorkflowRole = await src_1.Db.collections.Role.findOneOrFail({
            name: 'owner',
            scope: 'workflow',
        });
        const ownerCredentialRole = await src_1.Db.collections.Role.findOneOrFail({
            name: 'owner',
            scope: 'credential',
        });
        await src_1.Db.collections.SharedWorkflow.update({ user: { id: (0, typeorm_1.Not)(owner.id) }, role: ownerWorkflowRole }, { user: owner });
        await src_1.Db.collections.SharedCredentials.update({ user: { id: (0, typeorm_1.Not)(owner.id) }, role: ownerCredentialRole }, { user: owner });
        await src_1.Db.collections.User.delete({ id: (0, typeorm_1.Not)(owner.id) });
        await src_1.Db.collections.User.save(Object.assign(owner, this.defaultUserProps));
        const danglingCredentials = (await src_1.Db.collections.Credentials.createQueryBuilder('credentials')
            .leftJoinAndSelect('credentials.shared', 'shared')
            .where('shared.credentialsId is null')
            .getMany());
        const newSharedCredentials = danglingCredentials.map((credentials) => src_1.Db.collections.SharedCredentials.create({
            credentials,
            user: owner,
            role: ownerCredentialRole,
        }));
        await src_1.Db.collections.SharedCredentials.save(newSharedCredentials);
        await src_1.Db.collections.Settings.update({ key: 'userManagement.isInstanceOwnerSetUp' }, { value: 'false' });
        await src_1.Db.collections.Settings.update({ key: 'userManagement.skipInstanceOwnerSetup' }, { value: 'false' });
        this.logger.info('Successfully reset the database to default user state.');
    }
    async catch(error) {
        this.logger.error('Error resetting database. See log messages for details.');
        this.logger.error(error.message);
        this.exit(1);
    }
}
exports.Reset = Reset;
Reset.description = '\nResets the database to the default user state';
//# sourceMappingURL=reset.js.map