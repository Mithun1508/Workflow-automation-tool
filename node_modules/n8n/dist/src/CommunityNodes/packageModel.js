"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.persistInstalledPackageData = exports.removePackageFromDatabase = exports.getAllInstalledPackages = exports.isPackageInstalled = exports.findInstalledPackage = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const __1 = require("..");
const InstalledNodes_1 = require("../databases/entities/InstalledNodes");
const InstalledPackages_1 = require("../databases/entities/InstalledPackages");
async function findInstalledPackage(packageName) {
    return __1.Db.collections.InstalledPackages.findOne(packageName, { relations: ['installedNodes'] });
}
exports.findInstalledPackage = findInstalledPackage;
async function isPackageInstalled(packageName) {
    const installedPackage = await findInstalledPackage(packageName);
    return installedPackage !== undefined;
}
exports.isPackageInstalled = isPackageInstalled;
async function getAllInstalledPackages() {
    return __1.Db.collections.InstalledPackages.find({ relations: ['installedNodes'] });
}
exports.getAllInstalledPackages = getAllInstalledPackages;
async function removePackageFromDatabase(packageName) {
    return __1.Db.collections.InstalledPackages.remove(packageName);
}
exports.removePackageFromDatabase = removePackageFromDatabase;
async function persistInstalledPackageData(installedPackageName, installedPackageVersion, installedNodes, loadedNodeTypes, authorName, authorEmail) {
    let installedPackage;
    try {
        await __1.Db.transaction(async (transactionManager) => {
            const promises = [];
            const installedPackagePayload = Object.assign(new InstalledPackages_1.InstalledPackages(), {
                packageName: installedPackageName,
                installedVersion: installedPackageVersion,
                authorName,
                authorEmail,
            });
            installedPackage = await transactionManager.save(installedPackagePayload);
            installedPackage.installedNodes = [];
            promises.push(...installedNodes.map(async (loadedNode) => {
                const installedNodePayload = Object.assign(new InstalledNodes_1.InstalledNodes(), {
                    name: loadedNodeTypes[loadedNode.name].type.description.displayName,
                    type: loadedNode.name,
                    latestVersion: loadedNode.version,
                    package: installedPackageName,
                });
                installedPackage.installedNodes.push(installedNodePayload);
                return transactionManager.save(installedNodePayload);
            }));
            return promises;
        });
        return installedPackage;
    }
    catch (error) {
        n8n_workflow_1.LoggerProxy.error('Failed to save installed packages and nodes', {
            error,
            packageName: installedPackageName,
        });
        throw error;
    }
}
exports.persistInstalledPackageData = persistInstalledPackageData;
//# sourceMappingURL=packageModel.js.map