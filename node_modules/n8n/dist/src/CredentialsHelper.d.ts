import { Credentials } from 'n8n-core';
import { ICredentialDataDecryptedObject, ICredentialsDecrypted, ICredentialsExpressionResolveValues, ICredentialsHelper, ICredentialTestFunction, ICredentialTestRequestData, IHttpRequestOptions, INode, INodeCredentialsDetails, INodeCredentialTestResult, INodeProperties, IRequestOptionsSimplified, IWorkflowDataProxyAdditionalKeys, Workflow, WorkflowExecuteMode, IHttpRequestHelper } from 'n8n-workflow';
import { ICredentialsDb, WhereClause } from '.';
import { User } from './databases/entities/User';
import { CredentialsEntity } from './databases/entities/CredentialsEntity';
export declare class CredentialsHelper extends ICredentialsHelper {
    private credentialTypes;
    authenticate(credentials: ICredentialDataDecryptedObject, typeName: string, incomingRequestOptions: IHttpRequestOptions | IRequestOptionsSimplified, workflow: Workflow, node: INode, defaultTimezone: string): Promise<IHttpRequestOptions>;
    preAuthentication(helpers: IHttpRequestHelper, credentials: ICredentialDataDecryptedObject, typeName: string, node: INode, credentialsExpired: boolean): Promise<ICredentialDataDecryptedObject | undefined>;
    resolveValue(parameterValue: string, additionalKeys: IWorkflowDataProxyAdditionalKeys, workflow: Workflow, node: INode, defaultTimezone: string): string;
    getParentTypes(typeName: string): string[];
    getCredentials(nodeCredential: INodeCredentialsDetails, type: string, userId?: string): Promise<Credentials>;
    getCredentialsProperties(type: string): INodeProperties[];
    getDecrypted(nodeCredentials: INodeCredentialsDetails, type: string, mode: WorkflowExecuteMode, defaultTimezone: string, raw?: boolean, expressionResolveValues?: ICredentialsExpressionResolveValues): Promise<ICredentialDataDecryptedObject>;
    applyDefaultsAndOverwrites(decryptedDataOriginal: ICredentialDataDecryptedObject, type: string, mode: WorkflowExecuteMode, defaultTimezone: string, expressionResolveValues?: ICredentialsExpressionResolveValues): ICredentialDataDecryptedObject;
    updateCredentials(nodeCredentials: INodeCredentialsDetails, type: string, data: ICredentialDataDecryptedObject): Promise<void>;
    getCredentialTestFunction(credentialType: string, nodeToTestWith?: string): ICredentialTestFunction | ICredentialTestRequestData | undefined;
    testCredentials(user: User, credentialType: string, credentialsDecrypted: ICredentialsDecrypted, nodeToTestWith?: string): Promise<INodeCredentialTestResult>;
}
export declare function whereClause({ user, entityType, entityId, }: {
    user: User;
    entityType: 'workflow' | 'credentials';
    entityId?: string;
}): WhereClause;
export declare function getCredentialForUser(credentialId: string, user: User): Promise<ICredentialsDb | null>;
export declare function getCredentialWithoutUser(credentialId: string): Promise<ICredentialsDb | undefined>;
export declare function createCredentialsFromCredentialsEntity(credential: CredentialsEntity, encrypt?: boolean): Credentials;
