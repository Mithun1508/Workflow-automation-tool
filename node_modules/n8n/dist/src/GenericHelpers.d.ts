import express from 'express';
import { ExecutionError, INode, Workflow, WorkflowExecuteMode } from 'n8n-workflow';
import { IPackageVersions, IWorkflowDb } from '.';
import { WorkflowEntity } from './databases/entities/WorkflowEntity';
import { CredentialsEntity } from './databases/entities/CredentialsEntity';
import { TagEntity } from './databases/entities/TagEntity';
import { User } from './databases/entities/User';
export declare function getBaseUrl(): string;
export declare function getSessionId(req: express.Request): string | undefined;
export declare function getVersions(): Promise<IPackageVersions>;
export declare function getConfigValue(configKey: string): Promise<string | boolean | number | undefined>;
export declare function generateUniqueName(requestedName: string, entityType: 'workflow' | 'credentials'): Promise<string>;
export declare function validateEntity(entity: WorkflowEntity | CredentialsEntity | TagEntity | User): Promise<void>;
export declare function createErrorExecution(error: ExecutionError, node: INode, workflowData: IWorkflowDb, workflow: Workflow, mode: WorkflowExecuteMode): Promise<void>;
export declare const DEFAULT_EXECUTIONS_GET_ALL_LIMIT = 20;
