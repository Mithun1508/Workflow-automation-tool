import { INodeTypes, IRun } from 'n8n-workflow';
import { IDiagnosticInfo, IInternalHooksClass, ITelemetryUserDeletionData, IWorkflowBase, IWorkflowDb } from '.';
import { Telemetry } from './telemetry';
export declare class InternalHooksClass implements IInternalHooksClass {
    private telemetry;
    private instanceId;
    private versionCli;
    private nodeTypes;
    constructor(telemetry: Telemetry, instanceId: string, versionCli: string, nodeTypes: INodeTypes);
    onServerStarted(diagnosticInfo: IDiagnosticInfo, earliestWorkflowCreatedAt?: Date): Promise<unknown[]>;
    onFrontendSettingsAPI(sessionId?: string): Promise<void>;
    onPersonalizationSurveySubmitted(userId: string, answers: Record<string, string>): Promise<void>;
    onWorkflowCreated(userId: string, workflow: IWorkflowBase, publicApi: boolean): Promise<void>;
    onWorkflowDeleted(userId: string, workflowId: string, publicApi: boolean): Promise<void>;
    onWorkflowSaved(userId: string, workflow: IWorkflowDb, publicApi: boolean): Promise<void>;
    onWorkflowPostExecute(executionId: string, workflow: IWorkflowBase, runData?: IRun, userId?: string): Promise<void>;
    onN8nStop(): Promise<void>;
    onUserDeletion(userId: string, userDeletionData: ITelemetryUserDeletionData, publicApi: boolean): Promise<void>;
    onUserInvite(userInviteData: {
        user_id: string;
        target_user_id: string[];
        public_api: boolean;
    }): Promise<void>;
    onUserReinvite(userReinviteData: {
        user_id: string;
        target_user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserRetrievedUser(userRetrievedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserRetrievedAllUsers(userRetrievedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserRetrievedExecution(userRetrievedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserRetrievedAllExecutions(userRetrievedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserRetrievedWorkflow(userRetrievedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserRetrievedAllWorkflows(userRetrievedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserUpdate(userUpdateData: {
        user_id: string;
        fields_changed: string[];
    }): Promise<void>;
    onUserInviteEmailClick(userInviteClickData: {
        user_id: string;
    }): Promise<void>;
    onUserPasswordResetEmailClick(userPasswordResetData: {
        user_id: string;
    }): Promise<void>;
    onUserTransactionalEmail(userTransactionalEmailData: {
        user_id: string;
        message_type: 'Reset password' | 'New user invite' | 'Resend invite';
        public_api: boolean;
    }): Promise<void>;
    onUserInvokedApi(userInvokedApiData: {
        user_id: string;
        path: string;
        method: string;
        api_version: string;
    }): Promise<void>;
    onApiKeyDeleted(apiKeyDeletedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onApiKeyCreated(apiKeyCreatedData: {
        user_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserPasswordResetRequestClick(userPasswordResetData: {
        user_id: string;
    }): Promise<void>;
    onInstanceOwnerSetup(instanceOwnerSetupData: {
        user_id: string;
    }): Promise<void>;
    onUserSignup(userSignupData: {
        user_id: string;
    }): Promise<void>;
    onEmailFailed(failedEmailData: {
        user_id: string;
        message_type: 'Reset password' | 'New user invite' | 'Resend invite';
        public_api: boolean;
    }): Promise<void>;
    onUserCreatedCredentials(userCreatedCredentialsData: {
        credential_type: string;
        credential_id: string;
        public_api: boolean;
    }): Promise<void>;
    onUserSharedCredentials(userSharedCredentialsData: {
        credential_type: string;
        credential_id: string;
        user_id_sharer: string;
        user_ids_sharees_added: string[];
        sharees_removed: number | null;
    }): Promise<void>;
    onCommunityPackageInstallFinished(installationData: {
        user_id: string;
        input_string: string;
        package_name: string;
        success: boolean;
        package_version?: string;
        package_node_names?: string[];
        package_author?: string;
        package_author_email?: string;
        failure_reason?: string;
    }): Promise<void>;
    onCommunityPackageUpdateFinished(updateData: {
        user_id: string;
        package_name: string;
        package_version_current: string;
        package_version_new: string;
        package_node_names: string[];
        package_author?: string;
        package_author_email?: string;
    }): Promise<void>;
    onCommunityPackageDeleteFinished(updateData: {
        user_id: string;
        package_name: string;
        package_version: string;
        package_node_names: string[];
        package_author?: string;
        package_author_email?: string;
    }): Promise<void>;
}
