import { CodexData, ICredentialTypeData, ILogger, INodeType, INodeTypeData, INodeTypeNameVersion, IVersionedNodeType } from 'n8n-workflow';
import { IN8nNodePackageJson } from './Interfaces';
import { InstalledPackages } from './databases/entities/InstalledPackages';
import { InstalledNodes } from './databases/entities/InstalledNodes';
declare class LoadNodesAndCredentialsClass {
    nodeTypes: INodeTypeData;
    credentialTypes: ICredentialTypeData;
    excludeNodes: string | undefined;
    includeNodes: string | undefined;
    nodeModulesPath: string;
    logger: ILogger;
    init(): Promise<void>;
    getNodeModulesFolderLocation(): Promise<string>;
    loadNodesFromDownloadedPackages(): Promise<void>;
    loadNodesFromCustomFolders(): Promise<void>;
    getN8nNodePackages(baseModulesPath: string): Promise<string[]>;
    loadCredentialsFromFile(credentialName: string, filePath: string): void;
    loadNpmModule(packageName: string, version?: string): Promise<InstalledPackages>;
    removeNpmModule(packageName: string, installedPackage: InstalledPackages): Promise<void>;
    updateNpmModule(packageName: string, installedPackage: InstalledPackages): Promise<InstalledPackages>;
    loadNodeFromFile(packageName: string, nodeName: string, filePath: string): INodeTypeNameVersion | undefined;
    getCodex(filePath: string): CodexData;
    addCodex({ node, filePath, isCustom, }: {
        node: INodeType | IVersionedNodeType;
        filePath: string;
        isCustom: boolean;
    }): void;
    loadDataFromDirectory(setPackageName: string, directory: string): Promise<void>;
    readPackageJson(packagePath: string): Promise<IN8nNodePackageJson>;
    loadDataFromPackage(packagePath: string): Promise<INodeTypeNameVersion[]>;
    unloadNodes(installedNodes: InstalledNodes[]): void;
    attachNodesToNodeTypes(installedNodes: InstalledNodes[]): void;
}
export declare function LoadNodesAndCredentials(): LoadNodesAndCredentialsClass;
export {};
