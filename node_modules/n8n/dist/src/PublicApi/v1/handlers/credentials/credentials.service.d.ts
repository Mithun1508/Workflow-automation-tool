import { IDataObject, INodeProperties } from 'n8n-workflow';
import { ICredentialsDb } from '../../../..';
import { CredentialsEntity } from '../../../../databases/entities/CredentialsEntity';
import { SharedCredentials } from '../../../../databases/entities/SharedCredentials';
import { User } from '../../../../databases/entities/User';
import { CredentialRequest } from '../../../../requests';
export declare function getCredentials(credentialId: number | string): Promise<ICredentialsDb | undefined>;
export declare function getSharedCredentials(userId: string, credentialId: number | string, relations?: string[]): Promise<SharedCredentials | undefined>;
export declare function createCredential(properties: CredentialRequest.CredentialProperties): Promise<CredentialsEntity>;
export declare function saveCredential(credential: CredentialsEntity, user: User, encryptedData: ICredentialsDb): Promise<CredentialsEntity>;
export declare function removeCredential(credentials: CredentialsEntity): Promise<ICredentialsDb>;
export declare function encryptCredential(credential: CredentialsEntity): Promise<ICredentialsDb>;
export declare function sanitizeCredentials(credentials: CredentialsEntity): Partial<CredentialsEntity>;
export declare function sanitizeCredentials(credentials: CredentialsEntity[]): Array<Partial<CredentialsEntity>>;
export declare function toJsonSchema(properties: INodeProperties[]): IDataObject;
