import { FindManyOptions, UpdateResult } from 'typeorm';
import type { INode } from 'n8n-workflow';
import { User } from '../../../../databases/entities/User';
import { WorkflowEntity } from '../../../../databases/entities/WorkflowEntity';
import { SharedWorkflow } from '../../../../databases/entities/SharedWorkflow';
import { Role } from '../../../../databases/entities/Role';
export declare function getSharedWorkflowIds(user: User): Promise<number[]>;
export declare function getSharedWorkflow(user: User, workflowId?: string | undefined): Promise<SharedWorkflow | undefined>;
export declare function getSharedWorkflows(user: User, options: {
    relations?: string[];
    workflowIds?: number[];
}): Promise<SharedWorkflow[]>;
export declare function getWorkflowById(id: number): Promise<WorkflowEntity | undefined>;
export declare function getWorkflowIdsViaTags(tags: string[]): Promise<number[]>;
export declare function createWorkflow(workflow: WorkflowEntity, user: User, role: Role): Promise<WorkflowEntity>;
export declare function setWorkflowAsActive(workflow: WorkflowEntity): Promise<UpdateResult>;
export declare function setWorkflowAsInactive(workflow: WorkflowEntity): Promise<UpdateResult>;
export declare function deleteWorkflow(workflow: WorkflowEntity): Promise<WorkflowEntity>;
export declare function getWorkflows(options: FindManyOptions<WorkflowEntity>): Promise<WorkflowEntity[]>;
export declare function getWorkflowsCount(options: FindManyOptions<WorkflowEntity>): Promise<number>;
export declare function updateWorkflow(workflowId: number, updateData: WorkflowEntity): Promise<UpdateResult>;
export declare function hasStartNode(workflow: WorkflowEntity): boolean;
export declare function getStartNode(): INode;
export declare function parseTagNames(tags: string): string[];
