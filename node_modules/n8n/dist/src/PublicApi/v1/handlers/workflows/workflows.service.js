"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTagNames = exports.getStartNode = exports.hasStartNode = exports.updateWorkflow = exports.getWorkflowsCount = exports.getWorkflows = exports.deleteWorkflow = exports.setWorkflowAsInactive = exports.setWorkflowAsActive = exports.createWorkflow = exports.getWorkflowIdsViaTags = exports.getWorkflowById = exports.getSharedWorkflows = exports.getSharedWorkflow = exports.getSharedWorkflowIds = void 0;
const typeorm_1 = require("typeorm");
const lodash_intersection_1 = __importDefault(require("lodash.intersection"));
const uuid_1 = require("uuid");
const __1 = require("../../../..");
const WorkflowEntity_1 = require("../../../../databases/entities/WorkflowEntity");
const SharedWorkflow_1 = require("../../../../databases/entities/SharedWorkflow");
const users_service_1 = require("../users/users.service");
const config_1 = __importDefault(require("../../../../../config"));
function insertIf(condition, elements) {
    return condition ? elements : [];
}
async function getSharedWorkflowIds(user) {
    const sharedWorkflows = await __1.Db.collections.SharedWorkflow.find({
        where: { user },
    });
    return sharedWorkflows.map((workflow) => workflow.workflowId);
}
exports.getSharedWorkflowIds = getSharedWorkflowIds;
async function getSharedWorkflow(user, workflowId) {
    return __1.Db.collections.SharedWorkflow.findOne({
        where: {
            ...(!(0, users_service_1.isInstanceOwner)(user) && { user }),
            ...(workflowId && { workflow: { id: workflowId } }),
        },
        relations: [...insertIf(!config_1.default.getEnv('workflowTagsDisabled'), ['workflow.tags']), 'workflow'],
    });
}
exports.getSharedWorkflow = getSharedWorkflow;
async function getSharedWorkflows(user, options) {
    return __1.Db.collections.SharedWorkflow.find({
        where: {
            ...(!(0, users_service_1.isInstanceOwner)(user) && { user }),
            ...(options.workflowIds && { workflow: { id: (0, typeorm_1.In)(options.workflowIds) } }),
        },
        ...(options.relations && { relations: options.relations }),
    });
}
exports.getSharedWorkflows = getSharedWorkflows;
async function getWorkflowById(id) {
    return __1.Db.collections.Workflow.findOne({
        where: { id },
    });
}
exports.getWorkflowById = getWorkflowById;
async function getWorkflowIdsViaTags(tags) {
    const dbTags = await __1.Db.collections.Tag.find({
        where: { name: (0, typeorm_1.In)(tags) },
        relations: ['workflows'],
    });
    const workflowIdsPerTag = dbTags.map((tag) => tag.workflows.map((workflow) => workflow.id));
    return (0, lodash_intersection_1.default)(...workflowIdsPerTag);
}
exports.getWorkflowIdsViaTags = getWorkflowIdsViaTags;
async function createWorkflow(workflow, user, role) {
    return __1.Db.transaction(async (transactionManager) => {
        const newWorkflow = new WorkflowEntity_1.WorkflowEntity();
        Object.assign(newWorkflow, workflow);
        const savedWorkflow = await transactionManager.save(newWorkflow);
        const newSharedWorkflow = new SharedWorkflow_1.SharedWorkflow();
        Object.assign(newSharedWorkflow, {
            role,
            user,
            workflow: savedWorkflow,
        });
        await transactionManager.save(newSharedWorkflow);
        return savedWorkflow;
    });
}
exports.createWorkflow = createWorkflow;
async function setWorkflowAsActive(workflow) {
    return __1.Db.collections.Workflow.update(workflow.id, { active: true, updatedAt: new Date() });
}
exports.setWorkflowAsActive = setWorkflowAsActive;
async function setWorkflowAsInactive(workflow) {
    return __1.Db.collections.Workflow.update(workflow.id, { active: false, updatedAt: new Date() });
}
exports.setWorkflowAsInactive = setWorkflowAsInactive;
async function deleteWorkflow(workflow) {
    return __1.Db.collections.Workflow.remove(workflow);
}
exports.deleteWorkflow = deleteWorkflow;
async function getWorkflows(options) {
    return __1.Db.collections.Workflow.find(options);
}
exports.getWorkflows = getWorkflows;
async function getWorkflowsCount(options) {
    return __1.Db.collections.Workflow.count(options);
}
exports.getWorkflowsCount = getWorkflowsCount;
async function updateWorkflow(workflowId, updateData) {
    return __1.Db.collections.Workflow.update(workflowId, updateData);
}
exports.updateWorkflow = updateWorkflow;
function hasStartNode(workflow) {
    if (!workflow.nodes.length)
        return false;
    const found = workflow.nodes.find((node) => node.type === 'n8n-nodes-base.start');
    return Boolean(found);
}
exports.hasStartNode = hasStartNode;
function getStartNode() {
    return {
        id: (0, uuid_1.v4)(),
        parameters: {},
        name: 'Start',
        type: 'n8n-nodes-base.start',
        typeVersion: 1,
        position: [240, 300],
    };
}
exports.getStartNode = getStartNode;
function parseTagNames(tags) {
    return tags.split(',').map((tag) => tag.trim());
}
exports.parseTagNames = parseTagNames;
//# sourceMappingURL=workflows.service.js.map