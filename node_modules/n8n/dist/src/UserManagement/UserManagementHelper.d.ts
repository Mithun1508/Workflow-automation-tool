import { Workflow } from 'n8n-workflow';
import express from 'express';
import { PublicUser } from './Interfaces';
import { User } from '../databases/entities/User';
import { AuthenticatedRequest } from '../requests';
export declare function getWorkflowOwner(workflowId: string | number): Promise<User>;
export declare function isEmailSetUp(): boolean;
export declare function isUserManagementEnabled(): boolean;
export declare function isSharingEnabled(): boolean;
export declare function isUserManagementDisabled(): boolean;
export declare function getInstanceOwner(): Promise<User>;
export declare function getInstanceBaseUrl(): string;
export declare function validatePassword(password?: string): string;
export declare function sanitizeUser(user: User, withoutKeys?: string[]): PublicUser;
export declare function getUserById(userId: string): Promise<User>;
export declare function checkPermissionsForExecution(workflow: Workflow, userId: string): Promise<boolean>;
export declare function isAuthExcluded(url: string, ignoredEndpoints: string[]): boolean;
export declare function isPostUsersId(req: express.Request, restEndpoint: string): boolean;
export declare function isAuthenticatedRequest(request: express.Request): request is AuthenticatedRequest;
export declare const hashPassword: (validPassword: string) => Promise<string>;
export declare function compareHash(plaintext: string, hashed: string): Promise<boolean | undefined>;
export declare function rightDiff<T1, T2>([arr1, keyExtractor1]: [T1[], (item: T1) => string], [arr2, keyExtractor2]: [T2[], (item: T2) => string]): T2[];
