"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rightDiff = exports.compareHash = exports.hashPassword = exports.isAuthenticatedRequest = exports.isPostUsersId = exports.isAuthExcluded = exports.checkPermissionsForExecution = exports.getUserById = exports.sanitizeUser = exports.validatePassword = exports.getInstanceBaseUrl = exports.getInstanceOwner = exports.isUserManagementDisabled = exports.isSharingEnabled = exports.isUserManagementEnabled = exports.isEmailSetUp = exports.getWorkflowOwner = void 0;
const n8n_workflow_1 = require("n8n-workflow");
const typeorm_1 = require("typeorm");
const bcryptjs_1 = require("bcryptjs");
const __1 = require("..");
const User_1 = require("../databases/entities/User");
const config = __importStar(require("../../config"));
const WebhookHelpers_1 = require("../WebhookHelpers");
async function getWorkflowOwner(workflowId) {
    const sharedWorkflow = await __1.Db.collections.SharedWorkflow.findOneOrFail({
        where: { workflow: { id: workflowId } },
        relations: ['user', 'user.globalRole'],
    });
    return sharedWorkflow.user;
}
exports.getWorkflowOwner = getWorkflowOwner;
function isEmailSetUp() {
    const smtp = config.getEnv('userManagement.emails.mode') === 'smtp';
    const host = !!config.getEnv('userManagement.emails.smtp.host');
    const user = !!config.getEnv('userManagement.emails.smtp.auth.user');
    const pass = !!config.getEnv('userManagement.emails.smtp.auth.pass');
    return smtp && host && user && pass;
}
exports.isEmailSetUp = isEmailSetUp;
function isUserManagementEnabled() {
    return (!config.getEnv('userManagement.disabled') ||
        config.getEnv('userManagement.isInstanceOwnerSetUp'));
}
exports.isUserManagementEnabled = isUserManagementEnabled;
function isSharingEnabled() {
    return isUserManagementEnabled() && config.getEnv('enterprise.features.sharing');
}
exports.isSharingEnabled = isSharingEnabled;
function isUserManagementDisabled() {
    return (config.getEnv('userManagement.disabled') &&
        !config.getEnv('userManagement.isInstanceOwnerSetUp'));
}
exports.isUserManagementDisabled = isUserManagementDisabled;
async function getInstanceOwnerRole() {
    const ownerRole = await __1.Db.collections.Role.findOneOrFail({
        where: {
            name: 'owner',
            scope: 'global',
        },
    });
    return ownerRole;
}
async function getInstanceOwner() {
    const ownerRole = await getInstanceOwnerRole();
    const owner = await __1.Db.collections.User.findOneOrFail({
        relations: ['globalRole'],
        where: {
            globalRole: ownerRole,
        },
    });
    return owner;
}
exports.getInstanceOwner = getInstanceOwner;
function getInstanceBaseUrl() {
    const n8nBaseUrl = config.getEnv('editorBaseUrl') || (0, WebhookHelpers_1.getWebhookBaseUrl)();
    return n8nBaseUrl.endsWith('/') ? n8nBaseUrl.slice(0, n8nBaseUrl.length - 1) : n8nBaseUrl;
}
exports.getInstanceBaseUrl = getInstanceBaseUrl;
function validatePassword(password) {
    if (!password) {
        throw new __1.ResponseHelper.ResponseError('Password is mandatory', undefined, 400);
    }
    const hasInvalidLength = password.length < User_1.MIN_PASSWORD_LENGTH || password.length > User_1.MAX_PASSWORD_LENGTH;
    const hasNoNumber = !/\d/.test(password);
    const hasNoUppercase = !/[A-Z]/.test(password);
    if (hasInvalidLength || hasNoNumber || hasNoUppercase) {
        const message = [];
        if (hasInvalidLength) {
            message.push(`Password must be ${User_1.MIN_PASSWORD_LENGTH} to ${User_1.MAX_PASSWORD_LENGTH} characters long.`);
        }
        if (hasNoNumber) {
            message.push('Password must contain at least 1 number.');
        }
        if (hasNoUppercase) {
            message.push('Password must contain at least 1 uppercase letter.');
        }
        throw new __1.ResponseHelper.ResponseError(message.join(' '), undefined, 400);
    }
    return password;
}
exports.validatePassword = validatePassword;
function sanitizeUser(user, withoutKeys) {
    const { password, resetPasswordToken, resetPasswordTokenExpiration, updatedAt, apiKey, ...sanitizedUser } = user;
    if (withoutKeys) {
        withoutKeys.forEach((key) => {
            delete sanitizedUser[key];
        });
    }
    return sanitizedUser;
}
exports.sanitizeUser = sanitizeUser;
async function getUserById(userId) {
    const user = await __1.Db.collections.User.findOneOrFail(userId, {
        relations: ['globalRole'],
    });
    return user;
}
exports.getUserById = getUserById;
async function checkPermissionsForExecution(workflow, userId) {
    const credentialIds = new Set();
    const nodeNames = Object.keys(workflow.nodes);
    const credentialUsedBy = new Map();
    nodeNames.forEach((nodeName) => {
        const node = workflow.nodes[nodeName];
        if (node.disabled === true) {
            return;
        }
        if (node.credentials) {
            const credentialNames = Object.keys(node.credentials);
            credentialNames.forEach((credentialName) => {
                const credentialDetail = node.credentials[credentialName];
                if (credentialDetail.id === null) {
                    throw new n8n_workflow_1.NodeOperationError(node, `The credential on node '${node.name}' is not valid. Please open the workflow and set it to a valid value.`);
                }
                if (!credentialDetail.id) {
                    throw new n8n_workflow_1.NodeOperationError(node, `Error initializing workflow: credential ID not present. Please open the workflow and save it to fix this error. [Node: '${node.name}']`);
                }
                credentialIds.add(credentialDetail.id.toString());
                if (!credentialUsedBy.has(credentialDetail.id)) {
                    credentialUsedBy.set(credentialDetail.id, node);
                }
            });
        }
    });
    const ids = Array.from(credentialIds);
    if (ids.length === 0) {
        return true;
    }
    const user = await getUserById(userId);
    if (user.globalRole.name === 'owner') {
        return true;
    }
    const credentialsWithAccess = await __1.Db.collections.SharedCredentials.find({
        where: {
            user: { id: userId },
            credentials: (0, typeorm_1.In)(ids),
        },
    });
    if (ids.length !== credentialsWithAccess.length) {
        credentialsWithAccess.forEach((credential) => {
            credentialUsedBy.delete(credential.credentialId.toString());
        });
        const firstMissingCredentialNode = credentialUsedBy.values().next().value;
        throw new n8n_workflow_1.NodeOperationError(firstMissingCredentialNode, 'This node does not have access to the required credential', {
            description: 'Maybe the credential was removed or you have lost access to it. Try contacting the owner if this credential does not belong to you',
        });
    }
    return true;
}
exports.checkPermissionsForExecution = checkPermissionsForExecution;
function isAuthExcluded(url, ignoredEndpoints) {
    return !!ignoredEndpoints
        .filter(Boolean)
        .find((ignoredEndpoint) => url.startsWith(`/${ignoredEndpoint}`));
}
exports.isAuthExcluded = isAuthExcluded;
function isPostUsersId(req, restEndpoint) {
    return (req.method === 'POST' &&
        new RegExp(`/${restEndpoint}/users/[\\w\\d-]*`).test(req.url) &&
        !req.url.includes('reinvite'));
}
exports.isPostUsersId = isPostUsersId;
function isAuthenticatedRequest(request) {
    return request.user !== undefined;
}
exports.isAuthenticatedRequest = isAuthenticatedRequest;
const hashPassword = async (validPassword) => (0, bcryptjs_1.hash)(validPassword, (0, bcryptjs_1.genSaltSync)(10));
exports.hashPassword = hashPassword;
async function compareHash(plaintext, hashed) {
    try {
        return await (0, bcryptjs_1.compare)(plaintext, hashed);
    }
    catch (error) {
        if (error instanceof Error && error.message.includes('Invalid salt version')) {
            error.message +=
                '. Comparison against unhashed string. Please check that the value compared against has been hashed.';
        }
        throw new Error(error);
    }
}
exports.compareHash = compareHash;
function rightDiff([arr1, keyExtractor1], [arr2, keyExtractor2]) {
    const keyMap = arr1.reduce((map, item) => {
        map[keyExtractor1(item)] = true;
        return map;
    }, {});
    return arr2.reduce((acc, item) => {
        if (!keyMap[keyExtractor2(item)]) {
            acc.push(item);
        }
        return acc;
    }, []);
}
exports.rightDiff = rightDiff;
//# sourceMappingURL=UserManagementHelper.js.map