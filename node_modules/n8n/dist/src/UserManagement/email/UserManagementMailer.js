"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInstance = exports.UserManagementMailer = void 0;
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const handlebars_1 = __importDefault(require("handlebars"));
const path_1 = require("path");
const __1 = require("../..");
const config = __importStar(require("../../../config"));
const NodeMailer_1 = require("./NodeMailer");
const templates = {};
async function getTemplate(templateName, defaultFilename = `${templateName}.html`) {
    let template = templates[templateName];
    if (!template) {
        const templateOverride = (await __1.GenericHelpers.getConfigValue(`userManagement.emails.templates.${templateName}`));
        let markup;
        if (templateOverride && (0, fs_1.existsSync)(templateOverride)) {
            markup = await (0, promises_1.readFile)(templateOverride, 'utf-8');
        }
        else {
            markup = await (0, promises_1.readFile)((0, path_1.join)(__dirname, `templates/${defaultFilename}`), 'utf-8');
        }
        template = handlebars_1.default.compile(markup);
        templates[templateName] = template;
    }
    return template;
}
class UserManagementMailer {
    constructor() {
        if (config.getEnv('userManagement.emails.mode') === 'smtp') {
            this.mailer = new NodeMailer_1.NodeMailer();
        }
    }
    async verifyConnection() {
        if (!this.mailer)
            return Promise.reject();
        return this.mailer.verifyConnection();
    }
    async invite(inviteEmailData) {
        if (!this.mailer)
            return Promise.reject();
        const template = await getTemplate('invite');
        const result = await this.mailer.sendMail({
            emailRecipients: inviteEmailData.email,
            subject: 'You have been invited to n8n',
            body: template(inviteEmailData),
        });
        return result !== null && result !== void 0 ? result : { success: true };
    }
    async passwordReset(passwordResetData) {
        if (!this.mailer)
            return Promise.reject();
        const template = await getTemplate('passwordReset');
        const result = await this.mailer.sendMail({
            emailRecipients: passwordResetData.email,
            subject: 'n8n password reset',
            body: template(passwordResetData),
        });
        return result !== null && result !== void 0 ? result : { success: true };
    }
}
exports.UserManagementMailer = UserManagementMailer;
let mailerInstance;
async function getInstance() {
    if (mailerInstance === undefined) {
        mailerInstance = new UserManagementMailer();
        try {
            await mailerInstance.verifyConnection();
        }
        catch (error) {
            mailerInstance = undefined;
            throw error;
        }
    }
    return mailerInstance;
}
exports.getInstance = getInstance;
//# sourceMappingURL=UserManagementMailer.js.map