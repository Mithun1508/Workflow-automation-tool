"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.refreshExpiringCookie = exports.jwtAuth = void 0;
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const passport_1 = __importDefault(require("passport"));
const passport_jwt_1 = require("passport-jwt");
const n8n_workflow_1 = require("n8n-workflow");
const config = __importStar(require("../../../config"));
const constants_1 = require("../../constants");
const jwt_1 = require("../auth/jwt");
const jwtFromRequest = (req) => {
    var _a, _b;
    return (_b = (_a = req.cookies) === null || _a === void 0 ? void 0 : _a[constants_1.AUTH_COOKIE_NAME]) !== null && _b !== void 0 ? _b : null;
};
const jwtAuth = () => {
    const jwtStrategy = new passport_jwt_1.Strategy({
        jwtFromRequest,
        secretOrKey: config.getEnv('userManagement.jwtSecret'),
    }, async (jwtPayload, done) => {
        try {
            const user = await (0, jwt_1.resolveJwtContent)(jwtPayload);
            return done(null, user);
        }
        catch (error) {
            n8n_workflow_1.LoggerProxy.debug('Failed to extract user from JWT payload', { jwtPayload });
            return done(null, false, { message: 'User not found' });
        }
    });
    passport_1.default.use(jwtStrategy);
    return passport_1.default.initialize();
};
exports.jwtAuth = jwtAuth;
const refreshExpiringCookie = async (req, res, next) => {
    const cookieAuth = jwtFromRequest(req);
    if (cookieAuth && req.user) {
        const cookieContents = jsonwebtoken_1.default.decode(cookieAuth);
        if (cookieContents.exp * 1000 - Date.now() < 259200000) {
            await (0, jwt_1.issueCookie)(res, req.user);
        }
    }
    next();
};
exports.refreshExpiringCookie = refreshExpiringCookie;
//# sourceMappingURL=auth.js.map