"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authenticationMethods = void 0;
const __1 = require("../..");
const constants_1 = require("../../constants");
const jwt_1 = require("../auth/jwt");
const UserManagementHelper_1 = require("../UserManagementHelper");
const config = require("../../../config");
function authenticationMethods() {
    this.app.post(`/${this.restEndpoint}/login`, __1.ResponseHelper.send(async (req, res) => {
        const { email, password } = req.body;
        if (!email) {
            throw new Error('Email is required to log in');
        }
        if (!password) {
            throw new Error('Password is required to log in');
        }
        let user;
        try {
            user = await __1.Db.collections.User.findOne({ email }, {
                relations: ['globalRole'],
            });
        }
        catch (error) {
            throw new Error('Unable to access database.');
        }
        if (!(user === null || user === void 0 ? void 0 : user.password) || !(await (0, UserManagementHelper_1.compareHash)(req.body.password, user.password))) {
            const error = new Error('Wrong username or password. Do you have caps lock on?');
            error.httpStatusCode = 401;
            throw error;
        }
        await (0, jwt_1.issueCookie)(res, user);
        return (0, UserManagementHelper_1.sanitizeUser)(user);
    }));
    this.app.get(`/${this.restEndpoint}/login`, __1.ResponseHelper.send(async (req, res) => {
        var _a;
        const cookieContents = (_a = req.cookies) === null || _a === void 0 ? void 0 : _a[constants_1.AUTH_COOKIE_NAME];
        let user;
        if (cookieContents) {
            try {
                user = await (0, jwt_1.resolveJwt)(cookieContents);
                return (0, UserManagementHelper_1.sanitizeUser)(user);
            }
            catch (error) {
                res.clearCookie(constants_1.AUTH_COOKIE_NAME);
            }
        }
        if (config.get('userManagement.isInstanceOwnerSetUp')) {
            const error = new Error('Not logged in');
            error.httpStatusCode = 401;
            throw error;
        }
        try {
            user = await __1.Db.collections.User.findOneOrFail({ relations: ['globalRole'] });
        }
        catch (error) {
            throw new Error('No users found in database - did you wipe the users table? Create at least one user.');
        }
        if (user.email || user.password) {
            throw new Error('Invalid database state - user has password set.');
        }
        await (0, jwt_1.issueCookie)(res, user);
        return (0, UserManagementHelper_1.sanitizeUser)(user);
    }));
    this.app.post(`/${this.restEndpoint}/logout`, __1.ResponseHelper.send(async (_, res) => {
        res.clearCookie(constants_1.AUTH_COOKIE_NAME);
        return {
            loggedOut: true,
        };
    }));
}
exports.authenticationMethods = authenticationMethods;
//# sourceMappingURL=auth.js.map