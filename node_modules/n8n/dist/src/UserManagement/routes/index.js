"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addRoutes = void 0;
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const passport_1 = __importDefault(require("passport"));
const n8n_workflow_1 = require("n8n-workflow");
const UserManagementHelper_1 = require("../UserManagementHelper");
const __1 = require("../..");
const middlewares_1 = require("../middlewares");
const auth_1 = require("./auth");
const me_1 = require("./me");
const users_1 = require("./users");
const passwordReset_1 = require("./passwordReset");
const owner_1 = require("./owner");
function addRoutes(ignoredEndpoints, restEndpoint) {
    this.app.use((0, cookie_parser_1.default)());
    this.app.use((0, middlewares_1.jwtAuth)());
    this.app.use(async (req, res, next) => {
        if (req.method === 'OPTIONS' ||
            req.url === '/index.html' ||
            req.url === '/favicon.ico' ||
            req.url.startsWith('/css/') ||
            req.url.startsWith('/js/') ||
            req.url.startsWith('/fonts/') ||
            req.url.includes('.svg') ||
            req.url.startsWith(`/${restEndpoint}/settings`) ||
            req.url.startsWith(`/${restEndpoint}/login`) ||
            req.url.startsWith(`/${restEndpoint}/logout`) ||
            req.url.startsWith(`/${restEndpoint}/resolve-signup-token`) ||
            (0, UserManagementHelper_1.isPostUsersId)(req, restEndpoint) ||
            req.url.startsWith(`/${restEndpoint}/forgot-password`) ||
            req.url.startsWith(`/${restEndpoint}/resolve-password-token`) ||
            req.url.startsWith(`/${restEndpoint}/change-password`) ||
            req.url.startsWith(`/${restEndpoint}/oauth2-credential/callback`) ||
            req.url.startsWith(`/${restEndpoint}/oauth1-credential/callback`) ||
            (0, UserManagementHelper_1.isAuthExcluded)(req.url, ignoredEndpoints)) {
            return next();
        }
        if ((0, UserManagementHelper_1.isUserManagementDisabled)()) {
            req.user = await __1.Db.collections.User.findOneOrFail({}, {
                relations: ['globalRole'],
            });
            return next();
        }
        return passport_1.default.authenticate('jwt', { session: false })(req, res, next);
    });
    this.app.use((req, res, next) => {
        if (!req.user || ((0, UserManagementHelper_1.isAuthenticatedRequest)(req) && req.user.globalRole.name === 'owner')) {
            next();
            return;
        }
        const postRestrictedUrls = [`/${this.restEndpoint}/users`, `/${this.restEndpoint}/owner`];
        const getRestrictedUrls = [];
        const trimmedUrl = req.url.endsWith('/') ? req.url.slice(0, -1) : req.url;
        if ((req.method === 'POST' && postRestrictedUrls.includes(trimmedUrl)) ||
            (req.method === 'GET' && getRestrictedUrls.includes(trimmedUrl)) ||
            (req.method === 'DELETE' &&
                new RegExp(`/${restEndpoint}/users/[^/]+`, 'gm').test(trimmedUrl)) ||
            (req.method === 'POST' &&
                new RegExp(`/${restEndpoint}/users/[^/]+/reinvite`, 'gm').test(trimmedUrl)) ||
            new RegExp(`/${restEndpoint}/owner/[^/]+`, 'gm').test(trimmedUrl)) {
            n8n_workflow_1.LoggerProxy.verbose('User attempted to access endpoint without authorization', {
                endpoint: `${req.method} ${trimmedUrl}`,
                userId: (0, UserManagementHelper_1.isAuthenticatedRequest)(req) ? req.user.id : 'unknown',
            });
            res.status(403).json({ status: 'error', message: 'Unauthorized' });
            return;
        }
        next();
    });
    this.app.use(middlewares_1.refreshExpiringCookie);
    auth_1.authenticationMethods.apply(this);
    owner_1.ownerNamespace.apply(this);
    me_1.meNamespace.apply(this);
    passwordReset_1.passwordResetNamespace.apply(this);
    users_1.usersNamespace.apply(this);
}
exports.addRoutes = addRoutes;
//# sourceMappingURL=index.js.map