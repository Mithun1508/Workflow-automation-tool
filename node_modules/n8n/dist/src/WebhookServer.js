"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.start = exports.registerProductionWebhooks = void 0;
const express_1 = __importDefault(require("express"));
const fs_1 = require("fs");
const typeorm_1 = require("typeorm");
const body_parser_1 = __importDefault(require("body-parser"));
const compression_1 = __importDefault(require("compression"));
const parseurl_1 = __importDefault(require("parseurl"));
const _1 = require(".");
const config_1 = __importDefault(require("../config"));
const WebhookHelpers_1 = require("./WebhookHelpers");
require('body-parser-xml')(body_parser_1.default);
function registerProductionWebhooks() {
    this.app.all(`/${this.endpointWebhook}/*`, async (req, res) => {
        const requestUrl = req.parsedUrl.pathname.slice(this.endpointWebhook.length + 2);
        const method = req.method.toUpperCase();
        if (method === 'OPTIONS') {
            let allowedMethods;
            try {
                allowedMethods = await this.activeWorkflowRunner.getWebhookMethods(requestUrl);
                allowedMethods.push('OPTIONS');
                res.append('Allow', allowedMethods);
            }
            catch (error) {
                _1.ResponseHelper.sendErrorResponse(res, error);
                return;
            }
            res.header('Access-Control-Allow-Origin', '*');
            _1.ResponseHelper.sendSuccessResponse(res, {}, true, 204);
            return;
        }
        if (!WebhookHelpers_1.WEBHOOK_METHODS.includes(method)) {
            _1.ResponseHelper.sendErrorResponse(res, new Error(`The method ${method} is not supported.`));
            return;
        }
        let response;
        try {
            response = await this.activeWorkflowRunner.executeWebhook(method, requestUrl, req, res);
        }
        catch (error) {
            _1.ResponseHelper.sendErrorResponse(res, error);
            return;
        }
        if (response.noWebhookResponse === true) {
            return;
        }
        _1.ResponseHelper.sendSuccessResponse(res, response.data, true, response.responseCode, response.headers);
    });
    const waitingWebhooks = new _1.WaitingWebhooks();
    this.app.all(`/${this.endpointWebhookWaiting}/*`, async (req, res) => {
        const requestUrl = req.parsedUrl.pathname.slice(this.endpointWebhookWaiting.length + 2);
        const method = req.method.toUpperCase();
        if (!WebhookHelpers_1.WEBHOOK_METHODS.includes(method)) {
            _1.ResponseHelper.sendErrorResponse(res, new Error(`The method ${method} is not supported.`));
            return;
        }
        let response;
        try {
            response = await waitingWebhooks.executeWebhook(method, requestUrl, req, res);
        }
        catch (error) {
            _1.ResponseHelper.sendErrorResponse(res, error);
            return;
        }
        if (response.noWebhookResponse === true) {
            return;
        }
        _1.ResponseHelper.sendSuccessResponse(res, response.data, true, response.responseCode, response.headers);
    });
}
exports.registerProductionWebhooks = registerProductionWebhooks;
class App {
    constructor() {
        this.app = (0, express_1.default)();
        this.app.disable('x-powered-by');
        this.endpointWebhook = config_1.default.getEnv('endpoints.webhook');
        this.endpointWebhookWaiting = config_1.default.getEnv('endpoints.webhookWaiting');
        this.saveDataErrorExecution = config_1.default.getEnv('executions.saveDataOnError');
        this.saveDataSuccessExecution = config_1.default.getEnv('executions.saveDataOnSuccess');
        this.saveManualExecutions = config_1.default.getEnv('executions.saveDataManualExecutions');
        this.executionTimeout = config_1.default.getEnv('executions.timeout');
        this.maxExecutionTimeout = config_1.default.getEnv('executions.maxTimeout');
        this.timezone = config_1.default.getEnv('generic.timezone');
        this.restEndpoint = config_1.default.getEnv('endpoints.rest');
        this.activeWorkflowRunner = _1.ActiveWorkflowRunner.getInstance();
        this.activeExecutionsInstance = _1.ActiveExecutions.getInstance();
        this.protocol = config_1.default.getEnv('protocol');
        this.sslKey = config_1.default.getEnv('ssl_key');
        this.sslCert = config_1.default.getEnv('ssl_cert');
        this.externalHooks = (0, _1.ExternalHooks)();
        this.presetCredentialsLoaded = false;
        this.endpointPresetCredentials = config_1.default.getEnv('credentials.overwrite.endpoint');
    }
    getCurrentDate() {
        return new Date();
    }
    async config() {
        this.versions = await _1.GenericHelpers.getVersions();
        this.app.use((0, compression_1.default)());
        this.app.use((req, res, next) => {
            req.parsedUrl = (0, parseurl_1.default)(req);
            req.rawBody = Buffer.from('', 'base64');
            next();
        });
        this.app.use(body_parser_1.default.json({
            limit: '16mb',
            verify: (req, res, buf) => {
                req.rawBody = buf;
            },
        }));
        this.app.use(body_parser_1.default.xml({
            limit: '16mb',
            xmlParseOptions: {
                normalize: true,
                normalizeTags: true,
                explicitArray: false,
            },
        }));
        this.app.use(body_parser_1.default.text({
            limit: '16mb',
            verify: (req, res, buf) => {
                req.rawBody = buf;
            },
        }));
        this.app.use(body_parser_1.default.urlencoded({
            extended: false,
            verify: (req, res, buf) => {
                req.rawBody = buf;
            },
        }));
        if (process.env.NODE_ENV !== 'production') {
            this.app.use((req, res, next) => {
                res.header('Access-Control-Allow-Origin', 'http://localhost:8080');
                res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
                res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, sessionid');
                next();
            });
        }
        this.app.use((req, res, next) => {
            if (!_1.Db.isInitialized) {
                const error = new _1.ResponseHelper.ResponseError('Database is not ready!', undefined, 503);
                return _1.ResponseHelper.sendErrorResponse(res, error);
            }
            next();
        });
        this.app.get('/healthz', async (req, res) => {
            const connection = (0, typeorm_1.getConnectionManager)().get();
            try {
                if (!connection.isConnected) {
                    throw new Error('No active database connection!');
                }
                await connection.query('SELECT 1');
            }
            catch (err) {
                const error = new _1.ResponseHelper.ResponseError('No Database connection!', undefined, 503);
                return _1.ResponseHelper.sendErrorResponse(res, error);
            }
            const responseData = {
                status: 'ok',
            };
            _1.ResponseHelper.sendSuccessResponse(res, responseData, true, 200);
        });
        registerProductionWebhooks.apply(this);
    }
}
async function start() {
    const PORT = config_1.default.getEnv('port');
    const ADDRESS = config_1.default.getEnv('listen_address');
    const app = new App();
    await app.config();
    let server;
    if (app.protocol === 'https' && app.sslKey && app.sslCert) {
        const https = require('https');
        const privateKey = (0, fs_1.readFileSync)(app.sslKey, 'utf8');
        const cert = (0, fs_1.readFileSync)(app.sslCert, 'utf8');
        const credentials = { key: privateKey, cert };
        server = https.createServer(credentials, app.app);
    }
    else {
        const http = require('http');
        server = http.createServer(app.app);
    }
    server.listen(PORT, ADDRESS, async () => {
        const versions = await _1.GenericHelpers.getVersions();
        console.log(`n8n ready on ${ADDRESS}, port ${PORT}`);
        console.log(`Version: ${versions.cli}`);
        await app.externalHooks.run('n8n.ready', [app, config_1.default]);
    });
}
exports.start = start;
//# sourceMappingURL=WebhookServer.js.map