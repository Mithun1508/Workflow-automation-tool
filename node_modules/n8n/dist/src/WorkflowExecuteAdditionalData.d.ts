import { IExecuteWorkflowInfo, INodeExecutionData, INodeParameters, IRun, IWorkflowExecuteAdditionalData, IWorkflowExecuteHooks, IWorkflowHooksOptionalParameters, IWorkflowSettings, WorkflowExecuteMode, WorkflowHooks } from 'n8n-workflow';
import { IWorkflowBase, IWorkflowExecuteProcess, IWorkflowExecutionDataProcess } from '.';
export declare function executeErrorWorkflow(workflowData: IWorkflowBase, fullRunData: IRun, mode: WorkflowExecuteMode, executionId?: string, retryOf?: string): void;
export declare function hookFunctionsPreExecute(parentProcessMode?: string): IWorkflowExecuteHooks;
export declare function getRunData(workflowData: IWorkflowBase, userId: string, inputData?: INodeExecutionData[], parentWorkflowId?: string): Promise<IWorkflowExecutionDataProcess>;
export declare function getWorkflowData(workflowInfo: IExecuteWorkflowInfo, userId: string, parentWorkflowId?: string, parentWorkflowSettings?: IWorkflowSettings): Promise<IWorkflowBase>;
export declare function executeWorkflow(workflowInfo: IExecuteWorkflowInfo, additionalData: IWorkflowExecuteAdditionalData, options?: {
    parentWorkflowId?: string;
    inputData?: INodeExecutionData[];
    parentExecutionId?: string;
    loadedWorkflowData?: IWorkflowBase;
    loadedRunData?: IWorkflowExecutionDataProcess;
    parentWorkflowSettings?: IWorkflowSettings;
}): Promise<Array<INodeExecutionData[] | null> | IWorkflowExecuteProcess>;
export declare function sendMessageToUI(source: string, messages: any[]): void;
export declare function getBase(userId: string, currentNodeParameters?: INodeParameters, executionTimeoutTimestamp?: number): Promise<IWorkflowExecuteAdditionalData>;
export declare function getWorkflowHooksIntegrated(mode: WorkflowExecuteMode, executionId: string, workflowData: IWorkflowBase, optionalParameters?: IWorkflowHooksOptionalParameters): WorkflowHooks;
export declare function getWorkflowHooksWorkerExecuter(mode: WorkflowExecuteMode, executionId: string, workflowData: IWorkflowBase, optionalParameters?: IWorkflowHooksOptionalParameters): WorkflowHooks;
export declare function getWorkflowHooksWorkerMain(mode: WorkflowExecuteMode, executionId: string, workflowData: IWorkflowBase, optionalParameters?: IWorkflowHooksOptionalParameters): WorkflowHooks;
export declare function getWorkflowHooksMain(data: IWorkflowExecutionDataProcess, executionId: string, isMainProcess?: boolean): WorkflowHooks;
