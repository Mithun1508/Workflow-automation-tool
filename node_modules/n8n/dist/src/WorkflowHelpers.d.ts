import { IDataObject, INode, IRun, ITaskData, NodeApiError, NodeOperationError, Workflow, WorkflowExecuteMode } from 'n8n-workflow';
import { ICredentialsDb, ICredentialsTypeData, ITransferNodeTypes, IWorkflowErrorData, WhereClause } from '.';
import { WorkflowEntity } from './databases/entities/WorkflowEntity';
import { User } from './databases/entities/User';
export declare function getDataLastExecutedNodeData(inputData: IRun): ITaskData | undefined;
export declare function isWorkflowIdValid(id: string | null | undefined | number): boolean;
export declare function executeErrorWorkflow(workflowId: string, workflowErrorData: IWorkflowErrorData, runningUser: User): Promise<void>;
export declare function getAllNodeTypeData(): ITransferNodeTypes;
export declare function getAllCredentalsTypeData(): ICredentialsTypeData;
export declare function getNodeTypeData(nodes: INode[]): ITransferNodeTypes;
export declare function getCredentialsDataWithParents(type: string): ICredentialsTypeData;
export declare function getCredentialsDataByNodes(nodes: INode[]): ICredentialsTypeData;
export declare function getNeededNodeTypes(nodes: INode[]): Array<{
    type: string;
    version: number;
}>;
export declare function saveStaticData(workflow: Workflow): Promise<void>;
export declare function saveStaticDataById(workflowId: string | number, newStaticData: IDataObject): Promise<void>;
export declare function getStaticDataById(workflowId: string | number): Promise<IDataObject>;
export declare function addNodeIds(workflow: WorkflowEntity): void;
export declare function replaceInvalidCredentials(workflow: WorkflowEntity): Promise<WorkflowEntity>;
export declare function whereClause({ user, entityType, entityId, }: {
    user: User;
    entityType: 'workflow' | 'credentials';
    entityId?: string;
}): WhereClause;
export declare function getSharedWorkflowIds(user: User): Promise<number[]>;
export declare function isBelowOnboardingThreshold(user: User): Promise<boolean>;
export declare function generateFailedExecutionFromError(mode: WorkflowExecuteMode, error: NodeApiError | NodeOperationError, node: INode): IRun;
export declare function getNodesWithInaccessibleCreds(workflow: WorkflowEntity, userCredIds: string[]): INode[];
export declare function validateWorkflowCredentialUsage(newWorkflowVersion: WorkflowEntity, previousWorkflowVersion: WorkflowEntity, credentialsUserHasAccessTo: ICredentialsDb[]): WorkflowEntity;
