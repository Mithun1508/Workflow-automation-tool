"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tagsController = exports.externalHooks = void 0;
const express_1 = __importDefault(require("express"));
const __1 = require("..");
const config_1 = __importDefault(require("../../config"));
const TagHelpers = __importStar(require("../TagHelpers"));
const GenericHelpers_1 = require("../GenericHelpers");
const TagEntity_1 = require("../databases/entities/TagEntity");
exports.externalHooks = (0, __1.ExternalHooks)();
exports.tagsController = express_1.default.Router();
exports.tagsController.get('/', __1.ResponseHelper.send(async (req) => {
    if (config_1.default.getEnv('workflowTagsDisabled')) {
        throw new __1.ResponseHelper.ResponseError('Workflow tags are disabled');
    }
    if (req.query.withUsageCount === 'true') {
        const tablePrefix = config_1.default.getEnv('database.tablePrefix');
        return TagHelpers.getTagsWithCountDb(tablePrefix);
    }
    return __1.Db.collections.Tag.find({ select: ['id', 'name', 'createdAt', 'updatedAt'] });
}));
exports.tagsController.post('/', __1.ResponseHelper.send(async (req) => {
    if (config_1.default.getEnv('workflowTagsDisabled')) {
        throw new __1.ResponseHelper.ResponseError('Workflow tags are disabled');
    }
    const newTag = new TagEntity_1.TagEntity();
    newTag.name = req.body.name.trim();
    await exports.externalHooks.run('tag.beforeCreate', [newTag]);
    await (0, GenericHelpers_1.validateEntity)(newTag);
    const tag = await __1.Db.collections.Tag.save(newTag);
    await exports.externalHooks.run('tag.afterCreate', [tag]);
    return tag;
}));
exports.tagsController.patch('/:id', __1.ResponseHelper.send(async (req) => {
    if (config_1.default.getEnv('workflowTagsDisabled')) {
        throw new __1.ResponseHelper.ResponseError('Workflow tags are disabled');
    }
    const { name } = req.body;
    const { id } = req.params;
    const newTag = new TagEntity_1.TagEntity();
    newTag.id = id;
    newTag.name = name.trim();
    await exports.externalHooks.run('tag.beforeUpdate', [newTag]);
    await (0, GenericHelpers_1.validateEntity)(newTag);
    const tag = await __1.Db.collections.Tag.save(newTag);
    await exports.externalHooks.run('tag.afterUpdate', [tag]);
    return tag;
}));
exports.tagsController.delete('/:id', __1.ResponseHelper.send(async (req) => {
    if (config_1.default.getEnv('workflowTagsDisabled')) {
        throw new __1.ResponseHelper.ResponseError('Workflow tags are disabled');
    }
    if (config_1.default.getEnv('userManagement.isInstanceOwnerSetUp') === true &&
        req.user.globalRole.name !== 'owner') {
        throw new __1.ResponseHelper.ResponseError('You are not allowed to perform this action', undefined, 403, 'Only owners can remove tags');
    }
    const id = Number(req.params.id);
    await exports.externalHooks.run('tag.beforeDelete', [id]);
    await __1.Db.collections.Tag.delete({ id });
    await exports.externalHooks.run('tag.afterDelete', [id]);
    return true;
}));
//# sourceMappingURL=tags.api.js.map