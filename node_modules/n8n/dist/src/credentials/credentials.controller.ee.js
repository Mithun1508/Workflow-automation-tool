"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EECredentialsController = void 0;
const express_1 = __importDefault(require("express"));
const n8n_workflow_1 = require("n8n-workflow");
const __1 = require("..");
const UserManagementHelper_1 = require("../UserManagement/UserManagementHelper");
const credentials_service_ee_1 = require("./credentials.service.ee");
exports.EECredentialsController = express_1.default.Router();
exports.EECredentialsController.use((req, res, next) => {
    if (!(0, UserManagementHelper_1.isSharingEnabled)()) {
        next('router');
        return;
    }
    next();
});
exports.EECredentialsController.get('/', __1.ResponseHelper.send(async (req) => {
    try {
        const allCredentials = await credentials_service_ee_1.EECredentialsService.getAll(req.user, {
            relations: ['shared', 'shared.role', 'shared.user'],
        });
        return allCredentials.map(credentials_service_ee_1.EECredentialsService.addOwnerAndSharings);
    }
    catch (error) {
        n8n_workflow_1.LoggerProxy.error('Request to list credentials failed', error);
        throw error;
    }
}));
exports.EECredentialsController.get('/:id', (req, res, next) => (req.params.id === 'new' ? next('router') : next()), __1.ResponseHelper.send(async (req) => {
    var _a;
    const { id: credentialId } = req.params;
    const includeDecryptedData = req.query.includeData === 'true';
    if (Number.isNaN(Number(credentialId))) {
        throw new __1.ResponseHelper.ResponseError(`Credential ID must be a number.`, undefined, 400);
    }
    let credential = (await credentials_service_ee_1.EECredentialsService.get({ id: credentialId }, { relations: ['shared', 'shared.role', 'shared.user'] }));
    if (!credential) {
        throw new __1.ResponseHelper.ResponseError(`Credential with ID "${credentialId}" could not be found.`, undefined, 404);
    }
    const userSharing = (_a = credential.shared) === null || _a === void 0 ? void 0 : _a.find((shared) => shared.user.id === req.user.id);
    if (!userSharing && req.user.globalRole.name !== 'owner') {
        throw new __1.ResponseHelper.ResponseError(`Forbidden.`, undefined, 403);
    }
    credential = credentials_service_ee_1.EECredentialsService.addOwnerAndSharings(credential);
    credential.id = credential.id.toString();
    if (!includeDecryptedData || !userSharing || userSharing.role.name !== 'owner') {
        const { id, data: _, ...rest } = credential;
        return { id: id.toString(), ...rest };
    }
    const { id, data: _, ...rest } = credential;
    const key = await credentials_service_ee_1.EECredentialsService.getEncryptionKey();
    const decryptedData = await credentials_service_ee_1.EECredentialsService.decrypt(key, credential);
    return { id: id.toString(), data: decryptedData, ...rest };
}));
exports.EECredentialsController.post('/test', __1.ResponseHelper.send(async (req) => {
    const { credentials, nodeToTestWith } = req.body;
    const encryptionKey = await credentials_service_ee_1.EECredentialsService.getEncryptionKey();
    const { ownsCredential } = await credentials_service_ee_1.EECredentialsService.isOwned(req.user, credentials.id.toString());
    if (!ownsCredential) {
        const sharing = await credentials_service_ee_1.EECredentialsService.getSharing(req.user, credentials.id);
        if (!sharing) {
            throw new __1.ResponseHelper.ResponseError(`Forbidden`, undefined, 403);
        }
        const decryptedData = await credentials_service_ee_1.EECredentialsService.decrypt(encryptionKey, sharing.credentials);
        Object.assign(credentials, { data: decryptedData });
    }
    return credentials_service_ee_1.EECredentialsService.test(req.user, encryptionKey, credentials, nodeToTestWith);
}));
exports.EECredentialsController.put('/:credentialId/share', async (req, res) => {
    const { credentialId } = req.params;
    const { shareWithIds } = req.body;
    if (!Array.isArray(shareWithIds) || !shareWithIds.every((userId) => typeof userId === 'string')) {
        return res.status(400).send('Bad Request');
    }
    const { ownsCredential, credential } = await credentials_service_ee_1.EECredentialsService.isOwned(req.user, credentialId);
    if (!ownsCredential || !credential) {
        return res.status(403).send();
    }
    let amountRemoved = null;
    let newShareeIds = [];
    await __1.Db.transaction(async (trx) => {
        const { affected } = await credentials_service_ee_1.EECredentialsService.pruneSharings(trx, credentialId, [
            req.user.id,
            ...shareWithIds,
        ]);
        if (affected)
            amountRemoved = affected;
        const sharings = await credentials_service_ee_1.EECredentialsService.getSharings(trx, credentialId);
        newShareeIds = (0, UserManagementHelper_1.rightDiff)([sharings, (sharing) => sharing.userId], [shareWithIds, (shareeId) => shareeId]);
        if (newShareeIds.length) {
            await credentials_service_ee_1.EECredentialsService.share(trx, credential, newShareeIds);
        }
    });
    void __1.InternalHooksManager.getInstance().onUserSharedCredentials({
        credential_type: credential.type,
        credential_id: credential.id.toString(),
        user_id_sharer: req.user.id,
        user_ids_sharees_added: newShareeIds,
        sharees_removed: amountRemoved,
    });
    return res.status(200).send();
});
//# sourceMappingURL=credentials.controller.ee.js.map