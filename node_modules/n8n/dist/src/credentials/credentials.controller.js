"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.credentialsController = void 0;
const express_1 = __importDefault(require("express"));
const n8n_workflow_1 = require("n8n-workflow");
const __1 = require("..");
const config_1 = __importDefault(require("../../config"));
const Logger_1 = require("../Logger");
const credentials_controller_ee_1 = require("./credentials.controller.ee");
const credentials_service_1 = require("./credentials.service");
exports.credentialsController = express_1.default.Router();
exports.credentialsController.use((req, res, next) => {
    try {
        n8n_workflow_1.LoggerProxy.getInstance();
    }
    catch (error) {
        n8n_workflow_1.LoggerProxy.init((0, Logger_1.getLogger)());
    }
    next();
});
exports.credentialsController.use('/', credentials_controller_ee_1.EECredentialsController);
exports.credentialsController.get('/', __1.ResponseHelper.send(async (req) => {
    const credentials = await credentials_service_1.CredentialsService.getAll(req.user);
    return credentials.map((credential) => {
        credential.id = credential.id.toString();
        return credential;
    });
}));
exports.credentialsController.get('/new', __1.ResponseHelper.send(async (req) => {
    const { name: newName } = req.query;
    return {
        name: await __1.GenericHelpers.generateUniqueName(newName !== null && newName !== void 0 ? newName : config_1.default.getEnv('credentials.defaultName'), 'credentials'),
    };
}));
exports.credentialsController.get('/:id', __1.ResponseHelper.send(async (req) => {
    const { id: credentialId } = req.params;
    const includeDecryptedData = req.query.includeData === 'true';
    if (Number.isNaN(Number(credentialId))) {
        throw new __1.ResponseHelper.ResponseError(`Credential ID must be a number.`, undefined, 400);
    }
    const sharing = await credentials_service_1.CredentialsService.getSharing(req.user, credentialId, ['credentials']);
    if (!sharing) {
        throw new __1.ResponseHelper.ResponseError(`Credential with ID "${credentialId}" could not be found.`, undefined, 404);
    }
    const { credentials: credential } = sharing;
    if (!includeDecryptedData) {
        const { id, data: _, ...rest } = credential;
        return { id: id.toString(), ...rest };
    }
    const { id, data: _, ...rest } = credential;
    const key = await credentials_service_1.CredentialsService.getEncryptionKey();
    const decryptedData = await credentials_service_1.CredentialsService.decrypt(key, credential);
    return { id: id.toString(), data: decryptedData, ...rest };
}));
exports.credentialsController.post('/test', __1.ResponseHelper.send(async (req) => {
    const { credentials, nodeToTestWith } = req.body;
    const encryptionKey = await credentials_service_1.CredentialsService.getEncryptionKey();
    return credentials_service_1.CredentialsService.test(req.user, encryptionKey, credentials, nodeToTestWith);
}));
exports.credentialsController.post('/', __1.ResponseHelper.send(async (req) => {
    const newCredential = await credentials_service_1.CredentialsService.prepareCreateData(req.body);
    const key = await credentials_service_1.CredentialsService.getEncryptionKey();
    const encryptedData = credentials_service_1.CredentialsService.createEncryptedData(key, null, newCredential);
    const { id, ...rest } = await credentials_service_1.CredentialsService.save(newCredential, encryptedData, req.user);
    void __1.InternalHooksManager.getInstance().onUserCreatedCredentials({
        credential_type: rest.type,
        credential_id: id.toString(),
        public_api: false,
    });
    return { id: id.toString(), ...rest };
}));
exports.credentialsController.patch('/:id', __1.ResponseHelper.send(async (req) => {
    const { id: credentialId } = req.params;
    const sharing = await credentials_service_1.CredentialsService.getSharing(req.user, credentialId);
    if (!sharing) {
        n8n_workflow_1.LoggerProxy.info('Attempt to update credential blocked due to lack of permissions', {
            credentialId,
            userId: req.user.id,
        });
        throw new __1.ResponseHelper.ResponseError(`Credential with ID "${credentialId}" could not be found to be updated.`, undefined, 404);
    }
    const { credentials: credential } = sharing;
    const key = await credentials_service_1.CredentialsService.getEncryptionKey();
    const decryptedData = await credentials_service_1.CredentialsService.decrypt(key, credential);
    const preparedCredentialData = await credentials_service_1.CredentialsService.prepareUpdateData(req.body, decryptedData);
    const newCredentialData = credentials_service_1.CredentialsService.createEncryptedData(key, credentialId, preparedCredentialData);
    const responseData = await credentials_service_1.CredentialsService.update(credentialId, newCredentialData);
    if (responseData === undefined) {
        throw new __1.ResponseHelper.ResponseError(`Credential ID "${credentialId}" could not be found to be updated.`, undefined, 404);
    }
    const { id, data: _, ...rest } = responseData;
    n8n_workflow_1.LoggerProxy.verbose('Credential updated', { credentialId });
    return {
        id: id.toString(),
        ...rest,
    };
}));
exports.credentialsController.delete('/:id', __1.ResponseHelper.send(async (req) => {
    const { id: credentialId } = req.params;
    const sharing = await credentials_service_1.CredentialsService.getSharing(req.user, credentialId);
    if (!sharing) {
        n8n_workflow_1.LoggerProxy.info('Attempt to delete credential blocked due to lack of permissions', {
            credentialId,
            userId: req.user.id,
        });
        throw new __1.ResponseHelper.ResponseError(`Credential with ID "${credentialId}" could not be found to be deleted.`, undefined, 404);
    }
    const { credentials: credential } = sharing;
    await credentials_service_1.CredentialsService.delete(credential);
    return true;
}));
//# sourceMappingURL=credentials.controller.js.map