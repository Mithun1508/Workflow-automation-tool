import { Credentials } from 'n8n-core';
import { ICredentialDataDecryptedObject, ICredentialsDecrypted, INodeCredentialTestResult } from 'n8n-workflow';
import { FindManyOptions } from 'typeorm';
import { ICredentialsDb } from '..';
import { CredentialsEntity } from '../databases/entities/CredentialsEntity';
import { SharedCredentials } from '../databases/entities/SharedCredentials';
import type { User } from '../databases/entities/User';
import type { CredentialRequest } from '../requests';
export declare class CredentialsService {
    static get(credential: Partial<ICredentialsDb>, options?: {
        relations: string[];
    }): Promise<ICredentialsDb | undefined>;
    static getAll(user: User, options?: {
        relations: string[];
    }): Promise<ICredentialsDb[]>;
    static getMany(filter: FindManyOptions<ICredentialsDb>): Promise<ICredentialsDb[]>;
    static getSharing(user: User, credentialId: number | string, relations?: string[] | undefined, { allowGlobalOwner }?: {
        allowGlobalOwner: boolean;
    }): Promise<SharedCredentials | undefined>;
    static createCredentialsFromCredentialsEntity(credential: CredentialsEntity, encrypt?: boolean): Credentials;
    static prepareCreateData(data: CredentialRequest.CredentialProperties): Promise<CredentialsEntity>;
    static prepareUpdateData(data: CredentialRequest.CredentialProperties, decryptedData: ICredentialDataDecryptedObject): Promise<CredentialsEntity>;
    static createEncryptedData(encryptionKey: string, credentialsId: string | null, data: CredentialsEntity): ICredentialsDb;
    static getEncryptionKey(): Promise<string>;
    static decrypt(encryptionKey: string, credential: CredentialsEntity): Promise<ICredentialDataDecryptedObject>;
    static update(credentialId: string, newCredentialData: ICredentialsDb): Promise<ICredentialsDb | undefined>;
    static save(credential: CredentialsEntity, encryptedData: ICredentialsDb, user: User): Promise<CredentialsEntity>;
    static delete(credentials: CredentialsEntity): Promise<void>;
    static test(user: User, encryptionKey: string, credentials: ICredentialsDecrypted, nodeToTestWith: string | undefined): Promise<INodeCredentialTestResult>;
}
