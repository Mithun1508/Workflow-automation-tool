"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EECredentialsService = void 0;
const typeorm_1 = require("typeorm");
const __1 = require("..");
const role_service_1 = require("../role/role.service");
const credentials_service_1 = require("./credentials.service");
const CredentialsEntity_1 = require("../databases/entities/CredentialsEntity");
const SharedCredentials_1 = require("../databases/entities/SharedCredentials");
const user_service_1 = require("../user/user.service");
class EECredentialsService extends credentials_service_1.CredentialsService {
    static async isOwned(user, credentialId) {
        const sharing = await this.getSharing(user, credentialId, ['credentials', 'role'], {
            allowGlobalOwner: false,
        });
        if (!sharing || sharing.role.name !== 'owner')
            return { ownsCredential: false };
        const { credentials: credential } = sharing;
        return { ownsCredential: true, credential };
    }
    static async getSharings(transaction, credentialId) {
        var _a;
        const credential = await transaction.findOne(CredentialsEntity_1.CredentialsEntity, credentialId, {
            relations: ['shared'],
        });
        return (_a = credential === null || credential === void 0 ? void 0 : credential.shared) !== null && _a !== void 0 ? _a : [];
    }
    static async pruneSharings(transaction, credentialId, userIds) {
        return transaction.delete(SharedCredentials_1.SharedCredentials, {
            credentials: { id: credentialId },
            user: { id: (0, typeorm_1.Not)((0, typeorm_1.In)(userIds)) },
        });
    }
    static async share(transaction, credential, shareWithIds) {
        const [users, role] = await Promise.all([
            user_service_1.UserService.getByIds(transaction, shareWithIds),
            role_service_1.RoleService.trxGet(transaction, { scope: 'credential', name: 'user' }),
        ]);
        const newSharedCredentials = users
            .filter((user) => !user.isPending)
            .map((user) => __1.Db.collections.SharedCredentials.create({
            credentials: credential,
            user,
            role,
        }));
        return transaction.save(newSharedCredentials);
    }
    static addOwnerAndSharings(credential) {
        var _a;
        credential.ownedBy = null;
        credential.sharedWith = [];
        (_a = credential.shared) === null || _a === void 0 ? void 0 : _a.forEach(({ user, role }) => {
            var _a;
            const { id, email, firstName, lastName } = user;
            if (role.name === 'owner') {
                credential.ownedBy = { id, email, firstName, lastName };
                return;
            }
            (_a = credential.sharedWith) === null || _a === void 0 ? void 0 : _a.push({ id, email, firstName, lastName });
        });
        delete credential.shared;
        return credential;
    }
}
exports.EECredentialsService = EECredentialsService;
//# sourceMappingURL=credentials.service.ee.js.map