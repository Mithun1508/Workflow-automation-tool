"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowEntity = void 0;
const crypto_1 = __importDefault(require("crypto"));
const class_validator_1 = require("class-validator");
const typeorm_1 = require("typeorm");
const config = __importStar(require("../../../config"));
const TagEntity_1 = require("./TagEntity");
const SharedWorkflow_1 = require("./SharedWorkflow");
const transformers_1 = require("../utils/transformers");
const AbstractEntity_1 = require("./AbstractEntity");
const utils_1 = require("../../utils");
let WorkflowEntity = class WorkflowEntity extends AbstractEntity_1.AbstractEntity {
    setHash() {
        const { name, active, nodes, connections, settings, staticData, pinData } = this;
        const state = JSON.stringify({
            name,
            active,
            nodes: nodes ? nodes.map(utils_1.alphabetizeKeys) : [],
            connections,
            settings,
            staticData,
            pinData,
        });
        this.hash = crypto_1.default.createHash('md5').update(state).digest('hex');
    }
};
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)(),
    __metadata("design:type", Number)
], WorkflowEntity.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Index)({ unique: true }),
    (0, class_validator_1.Length)(1, 128, {
        message: 'Workflow name must be $constraint1 to $constraint2 characters long.',
    }),
    (0, typeorm_1.Column)({ length: 128 }),
    __metadata("design:type", String)
], WorkflowEntity.prototype, "name", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    __metadata("design:type", Boolean)
], WorkflowEntity.prototype, "active", void 0);
__decorate([
    (0, typeorm_1.Column)(AbstractEntity_1.jsonColumnType),
    __metadata("design:type", Array)
], WorkflowEntity.prototype, "nodes", void 0);
__decorate([
    (0, typeorm_1.Column)(AbstractEntity_1.jsonColumnType),
    __metadata("design:type", Object)
], WorkflowEntity.prototype, "connections", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: AbstractEntity_1.jsonColumnType,
        nullable: true,
    }),
    __metadata("design:type", Object)
], WorkflowEntity.prototype, "settings", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: AbstractEntity_1.jsonColumnType,
        nullable: true,
        transformer: transformers_1.objectRetriever,
    }),
    __metadata("design:type", Object)
], WorkflowEntity.prototype, "staticData", void 0);
__decorate([
    (0, typeorm_1.ManyToMany)(() => TagEntity_1.TagEntity, (tag) => tag.workflows),
    (0, typeorm_1.JoinTable)({
        name: 'workflows_tags',
        joinColumn: {
            name: 'workflowId',
            referencedColumnName: 'id',
        },
        inverseJoinColumn: {
            name: 'tagId',
            referencedColumnName: 'id',
        },
    }),
    __metadata("design:type", Array)
], WorkflowEntity.prototype, "tags", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => SharedWorkflow_1.SharedWorkflow, (sharedWorkflow) => sharedWorkflow.workflow),
    __metadata("design:type", Array)
], WorkflowEntity.prototype, "shared", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: config.getEnv('database.type') === 'sqlite' ? 'text' : 'json',
        nullable: true,
        transformer: transformers_1.sqlite.jsonColumn,
    }),
    __metadata("design:type", Object)
], WorkflowEntity.prototype, "pinData", void 0);
__decorate([
    (0, typeorm_1.AfterLoad)(),
    (0, typeorm_1.AfterUpdate)(),
    (0, typeorm_1.AfterInsert)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], WorkflowEntity.prototype, "setHash", null);
WorkflowEntity = __decorate([
    (0, typeorm_1.Entity)()
], WorkflowEntity);
exports.WorkflowEntity = WorkflowEntity;
//# sourceMappingURL=WorkflowEntity.js.map