"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniqueWorkflowNames1620826335440 = void 0;
const config = __importStar(require("../../../../config"));
class UniqueWorkflowNames1620826335440 {
    constructor() {
        this.name = 'UniqueWorkflowNames1620826335440';
    }
    async up(queryRunner) {
        const tablePrefix = config.getEnv('database.tablePrefix');
        const workflowNames = await queryRunner.query(`
				SELECT name
				FROM ${tablePrefix}workflow_entity
			`);
        for (const { name } of workflowNames) {
            const [duplicatesQuery, parameters] = queryRunner.connection.driver.escapeQueryWithParameters(`
					SELECT id, name
					FROM ${tablePrefix}workflow_entity
					WHERE name = :name
					ORDER BY createdAt ASC
				`, { name }, {});
            const duplicates = await queryRunner.query(duplicatesQuery, parameters);
            if (duplicates.length > 1) {
                await Promise.all(duplicates.map(({ id, name }, index) => {
                    if (index === 0)
                        return Promise.resolve();
                    const [updateQuery, updateParams] = queryRunner.connection.driver.escapeQueryWithParameters(`
							UPDATE ${tablePrefix}workflow_entity
							SET name = :name
							WHERE id = '${id}'
						`, { name: `${name} ${index + 1}` }, {});
                    return queryRunner.query(updateQuery, updateParams);
                }));
            }
        }
        await queryRunner.query('ALTER TABLE `' + tablePrefix + 'workflow_entity` ADD UNIQUE INDEX `IDX_' + tablePrefix + '943d8f922be094eb507cb9a7f9` (`name`)');
    }
    async down(queryRunner) {
        const tablePrefix = config.getEnv('database.tablePrefix');
        await queryRunner.query('ALTER TABLE `' + tablePrefix + 'workflow_entity` DROP INDEX `IDX_' + tablePrefix + '943d8f922be094eb507cb9a7f9`');
    }
}
exports.UniqueWorkflowNames1620826335440 = UniqueWorkflowNames1620826335440;
//# sourceMappingURL=1620826335440-UniqueWorkflowNames.js.map