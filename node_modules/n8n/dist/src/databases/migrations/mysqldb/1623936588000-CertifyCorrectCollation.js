"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertifyCorrectCollation1623936588000 = void 0;
const config = __importStar(require("../../../../config"));
class CertifyCorrectCollation1623936588000 {
    constructor() {
        this.name = 'CertifyCorrectCollation1623936588000';
    }
    async up(queryRunner) {
        const tablePrefix = config.getEnv('database.tablePrefix');
        const databaseType = config.getEnv('database.type');
        if (databaseType === 'mariadb') {
            return;
        }
        const checkCollationExistence = await queryRunner.query(`show collation where collation like 'utf8mb4_0900_ai_ci';`);
        let collation = 'utf8mb4_general_ci';
        if (checkCollationExistence.length > 0) {
            collation = 'utf8mb4_0900_ai_ci';
        }
        const databaseName = config.getEnv(`database.mysqldb.database`);
        await queryRunner.query(`ALTER DATABASE \`${databaseName}\` CHARACTER SET utf8mb4 COLLATE ${collation};`);
        for (const tableName of [
            'credentials_entity',
            'execution_entity',
            'tag_entity',
            'webhook_entity',
            'workflow_entity',
            'workflows_tags',
        ]) {
            await queryRunner.query(`ALTER TABLE ${tablePrefix}${tableName} CONVERT TO CHARACTER SET utf8mb4 COLLATE ${collation};`);
        }
    }
    async down(queryRunner) {
    }
}
exports.CertifyCorrectCollation1623936588000 = CertifyCorrectCollation1623936588000;
//# sourceMappingURL=1623936588000-CertifyCorrectCollation.js.map