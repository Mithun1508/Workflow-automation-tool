"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddNodeIds1658932910559 = void 0;
const config = __importStar(require("../../../../config"));
const migrationHelpers_1 = require("../../utils/migrationHelpers");
const uuid_1 = require("uuid");
class AddNodeIds1658932910559 {
    constructor() {
        this.name = 'AddNodeIds1658932910559';
    }
    async up(queryRunner) {
        const tablePrefix = config.getEnv('database.tablePrefix');
        const workflowsQuery = `
			SELECT id, nodes
			FROM ${tablePrefix}workflow_entity
		`;
        await (0, migrationHelpers_1.runInBatches)(queryRunner, workflowsQuery, (workflows) => {
            workflows.forEach(async (workflow) => {
                let nodes = workflow.nodes;
                if (typeof nodes === 'string') {
                    nodes = JSON.parse(nodes);
                }
                nodes.forEach((node) => {
                    if (!node.id) {
                        node.id = (0, uuid_1.v4)();
                    }
                });
                const [updateQuery, updateParams] = queryRunner.connection.driver.escapeQueryWithParameters(`
							UPDATE ${tablePrefix}workflow_entity
							SET nodes = :nodes
							WHERE id = '${workflow.id}'
						`, { nodes: JSON.stringify(nodes) }, {});
                queryRunner.query(updateQuery, updateParams);
            });
        });
    }
    async down(queryRunner) {
        const tablePrefix = config.getEnv('database.tablePrefix');
        const workflowsQuery = `
			SELECT id, nodes
			FROM ${tablePrefix}workflow_entity
		`;
        await (0, migrationHelpers_1.runInBatches)(queryRunner, workflowsQuery, (workflows) => {
            workflows.forEach(async (workflow) => {
                const nodes = workflow.nodes;
                nodes.forEach((node) => delete node.id);
                const [updateQuery, updateParams] = queryRunner.connection.driver.escapeQueryWithParameters(`
							UPDATE ${tablePrefix}workflow_entity
							SET nodes = :nodes
							WHERE id = '${workflow.id}'
						`, { nodes: JSON.stringify(nodes) }, {});
                queryRunner.query(updateQuery, updateParams);
            });
        });
    }
}
exports.AddNodeIds1658932910559 = AddNodeIds1658932910559;
//# sourceMappingURL=1658932910559-AddNodeIds.js.map