import { ITelemetryTrackProperties } from 'n8n-workflow';
import { IExecutionTrackProperties } from '../Interfaces';
interface IExecutionTrackData {
    count: number;
    first: Date;
}
interface IExecutionsBuffer {
    [workflowId: string]: {
        manual_error?: IExecutionTrackData;
        manual_success?: IExecutionTrackData;
        prod_error?: IExecutionTrackData;
        prod_success?: IExecutionTrackData;
    };
}
export declare class Telemetry {
    private rudderStack?;
    private postHog?;
    private instanceId;
    private versionCli;
    private pulseIntervalReference;
    private executionCountsBuffer;
    constructor(instanceId: string, versionCli: string);
    private initRudderStack;
    private initPostHog;
    private startPulse;
    private pulse;
    trackWorkflowExecution(properties: IExecutionTrackProperties): Promise<void>;
    trackN8nStop(): Promise<void>;
    identify(traits?: {
        [key: string]: string | number | boolean | object | undefined | null;
    }): Promise<void>;
    track(eventName: string, properties?: ITelemetryTrackProperties, { withPostHog }?: {
        withPostHog: boolean;
    }): Promise<void>;
    isFeatureFlagEnabled(featureFlagName: string, { user_id: userId }?: ITelemetryTrackProperties): Promise<boolean>;
    getCountsBuffer(): IExecutionsBuffer;
}
export {};
