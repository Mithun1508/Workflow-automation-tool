import { DeleteResult, EntityManager } from 'typeorm';
import { ICredentialsDb } from '..';
import { SharedWorkflow } from '../databases/entities/SharedWorkflow';
import { User } from '../databases/entities/User';
import { WorkflowEntity } from '../databases/entities/WorkflowEntity';
import { WorkflowsService } from './workflows.services';
import type { WorkflowWithSharingsAndCredentials } from './workflows.types';
export declare class EEWorkflowsService extends WorkflowsService {
    static isOwned(user: User, workflowId: string): Promise<{
        ownsWorkflow: boolean;
        workflow?: WorkflowEntity;
    }>;
    static getSharings(transaction: EntityManager, workflowId: string): Promise<SharedWorkflow[]>;
    static pruneSharings(transaction: EntityManager, workflowId: string, userIds: string[]): Promise<DeleteResult>;
    static share(transaction: EntityManager, workflow: WorkflowEntity, shareWithIds: string[]): Promise<SharedWorkflow[]>;
    static addOwnerAndSharings(workflow: WorkflowWithSharingsAndCredentials): WorkflowWithSharingsAndCredentials;
    static addCredentialsToWorkflow(workflow: WorkflowWithSharingsAndCredentials, currentUser: User): Promise<WorkflowWithSharingsAndCredentials>;
    static validateCredentialPermissionsToUser(workflow: WorkflowEntity, allowedCredentials: ICredentialsDb[]): void;
    static updateWorkflow(user: User, workflow: WorkflowEntity, workflowId: string, tags?: string[], forceSave?: boolean): Promise<WorkflowEntity>;
}
